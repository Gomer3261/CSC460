
Assignment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800200  000026f0  00002784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  00800382  00800382  00002906  2**0
                  ALLOC
  3 .debug_aranges 000002c0  00000000  00000000  00002906  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000926  00000000  00000000  00002bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000048af  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002082  00000000  00000000  00007d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b07  00000000  00000000  00009e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000630  00000000  00000000  0000c924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000010ff  00000000  00000000  0000cf54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000153a  00000000  00000000  0000e053  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000f58d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__vector_1>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_31>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 ef       	ldi	r30, 0xF0	; 240
      fc:	f6 e2       	ldi	r31, 0x26	; 38
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 38       	cpi	r26, 0x82	; 130
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	14 e0       	ldi	r17, 0x04	; 4
     110:	a2 e8       	ldi	r26, 0x82	; 130
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 33       	cpi	r26, 0x38	; 56
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 98 00 	call	0x130	; 0x130 <main>
     122:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <ResetEventOccured>:
}

int ResetEventOccured()
{
	return 0;
}
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	08 95       	ret

00000130 <main>:

#define UART_OUTPUT_STATE 0
#define     clock8MHz()    CLKPR = _BV(CLKPCE); CLKPR = 0x00;

int main(void)
{
     130:	2f 92       	push	r2
     132:	3f 92       	push	r3
     134:	4f 92       	push	r4
     136:	5f 92       	push	r5
     138:	6f 92       	push	r6
     13a:	7f 92       	push	r7
     13c:	8f 92       	push	r8
     13e:	9f 92       	push	r9
     140:	af 92       	push	r10
     142:	bf 92       	push	r11
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	c8 57       	subi	r28, 0x78	; 120
     15a:	d0 40       	sbci	r29, 0x00	; 0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	de bf       	out	0x3e, r29	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	cd bf       	out	0x3d, r28	; 61
	char buf[MAXLINE];

	clock8MHz();
     166:	80 e8       	ldi	r24, 0x80	; 128
     168:	80 93 61 00 	sts	0x0061, r24
     16c:	10 92 61 00 	sts	0x0061, r1

	#if PROFILECODE 
	InitializeLogicAnalyzerProfiler();
     170:	87 b1       	in	r24, 0x07	; 7
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	87 b9       	out	0x07, r24	; 7
	#endif

	ServoControlStruct SonarDirectionServo;
	CommunicationStatStruct ComStats;
	SeekState = LOCALIZATIONSTATE_Initialization;
     176:	10 92 fa 03 	sts	0x03FA, r1

	uint8_t station_addr[5] = {0x01, 0x17, 0x76, 0x97, 0x00 };
     17a:	de 01       	movw	r26, r28
     17c:	11 96       	adiw	r26, 0x01	; 1
     17e:	e3 e2       	ldi	r30, 0x23	; 35
     180:	f2 e0       	ldi	r31, 0x02	; 2
     182:	85 e0       	ldi	r24, 0x05	; 5
     184:	01 90       	ld	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	81 50       	subi	r24, 0x01	; 1
     18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x54>
	uint8_t remote_addr[5] = {0x98, 0x76, 0x54, 0x32, 0x10};
     18c:	de 01       	movw	r26, r28
     18e:	16 96       	adiw	r26, 0x06	; 6
     190:	ee e1       	ldi	r30, 0x1E	; 30
     192:	f2 e0       	ldi	r31, 0x02	; 2
     194:	85 e0       	ldi	r24, 0x05	; 5
     196:	01 90       	ld	r0, Z+
     198:	0d 92       	st	X+, r0
     19a:	81 50       	subi	r24, 0x01	; 1
     19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x66>

	int SweepComplete = 0;

	uart_init(UART_38400);
     19e:	0e 94 a9 08 	call	0x1152	; 0x1152 <uart_init>

	snprintf((char*)buf, MAXLINE, "HELLO WORLD: starts echoing\n\r");
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <main+0x74>
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <main+0x76>
     1a6:	ed b7       	in	r30, 0x3d	; 61
     1a8:	fe b7       	in	r31, 0x3e	; 62
     1aa:	31 96       	adiw	r30, 0x01	; 1
     1ac:	8e 01       	movw	r16, r28
     1ae:	08 5d       	subi	r16, 0xD8	; 216
     1b0:	1f 4f       	sbci	r17, 0xFF	; 255
     1b2:	ad b7       	in	r26, 0x3d	; 61
     1b4:	be b7       	in	r27, 0x3e	; 62
     1b6:	12 96       	adiw	r26, 0x02	; 2
     1b8:	1c 93       	st	X, r17
     1ba:	0e 93       	st	-X, r16
     1bc:	11 97       	sbiw	r26, 0x01	; 1
     1be:	81 e5       	ldi	r24, 0x51	; 81
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	93 83       	std	Z+3, r25	; 0x03
     1c4:	82 83       	std	Z+2, r24	; 0x02
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	95 83       	std	Z+5, r25	; 0x05
     1cc:	84 83       	std	Z+4, r24	; 0x04
     1ce:	0e 94 92 10 	call	0x2124	; 0x2124 <snprintf>
	uart_putstr(buf);
     1d2:	8d b7       	in	r24, 0x3d	; 61
     1d4:	9e b7       	in	r25, 0x3e	; 62
     1d6:	06 96       	adiw	r24, 0x06	; 6
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	9e bf       	out	0x3e, r25	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	8d bf       	out	0x3d, r24	; 61
     1e2:	c8 01       	movw	r24, r16
     1e4:	0e 94 9a 08 	call	0x1134	; 0x1134 <uart_putstr>
     1e8:	ee 24       	eor	r14, r14
     1ea:	ff 24       	eor	r15, r15
					uart_putstr(buf);
					#endif

					// Hack
					ComStats.Percent = 0;
					ServoSetDirection( &SonarDirectionServo, &ComStats );
     1ec:	56 e1       	ldi	r21, 0x16	; 22
     1ee:	c5 2e       	mov	r12, r21
     1f0:	d1 2c       	mov	r13, r1
     1f2:	cc 0e       	add	r12, r28
     1f4:	dd 1e       	adc	r13, r29
     1f6:	8e 01       	movw	r16, r28
     1f8:	05 5f       	subi	r16, 0xF5	; 245
     1fa:	1f 4f       	sbci	r17, 0xFF	; 255
					uart_putstr(buf);
					#endif

					// Add this new sample point to the statistics pool
					StatisticsAddNewSample( &ComStats );
					SeekState = LOCALIZATIONSTATE_UpdateSweep;
     1fc:	bb 24       	eor	r11, r11
     1fe:	b3 94       	inc	r11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     200:	48 ec       	ldi	r20, 0xC8	; 200
     202:	84 2e       	mov	r8, r20
     204:	91 2c       	mov	r9, r1
						// Redirect the servo and attempt to communicate
						SweepComplete = ServoUpdateSweepPosition( &ComStats );
						ServoSetDirection( &SonarDirectionServo, &ComStats );
						CommunicationPingResetRetryCount();

						SeekState = LOCALIZATIONSTATE_SendRequest;
     206:	32 e0       	ldi	r19, 0x02	; 2
     208:	a3 2e       	mov	r10, r19
					uart_putstr(buf);
					#endif

					// Send the request for a ping
					CommunicationSendTriggerMessage();
					SeekState = LOCALIZATIONSTATE_GetResponse;
     20a:	23 e0       	ldi	r18, 0x03	; 3
     20c:	22 2e       	mov	r2, r18
					EnableProfileSample1();
					// Initialize all necessary states
					InitializeServoController( &SonarDirectionServo );
					DisableProfileSample1();
					EnableProfileSample2();
					InitializeCommunication( station_addr, remote_addr );
     20e:	96 e0       	ldi	r25, 0x06	; 6
     210:	49 2e       	mov	r4, r25
     212:	51 2c       	mov	r5, r1
     214:	4c 0e       	add	r4, r28
     216:	5d 1e       	adc	r5, r29
     218:	3e 01       	movw	r6, r28
     21a:	08 94       	sec
     21c:	61 1c       	adc	r6, r1
     21e:	71 1c       	adc	r7, r1
							#endif
						
							// Get the communication statistics and go to the
							// update statistics state
							CommunicationGetResponseStatistics( &ComStats );
							SeekState = LOCALIZATIONSTATE_UpdateStatistics;
     220:	84 e0       	ldi	r24, 0x04	; 4
     222:	38 2e       	mov	r3, r24
		snprintf((char*)buf, MAXLINE, "State: %u\n\r", SeekState);
		uart_putstr(buf);
		#endif

		// Switch on the current state
		switch( SeekState )
     224:	80 91 fa 03 	lds	r24, 0x03FA
     228:	83 30       	cpi	r24, 0x03	; 3
     22a:	09 f4       	brne	.+2      	; 0x22e <main+0xfe>
     22c:	45 c0       	rjmp	.+138    	; 0x2b8 <main+0x188>
     22e:	84 30       	cpi	r24, 0x04	; 4
     230:	28 f4       	brcc	.+10     	; 0x23c <main+0x10c>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	39 f1       	breq	.+78     	; 0x284 <main+0x154>
     236:	82 30       	cpi	r24, 0x02	; 2
     238:	d0 f5       	brcc	.+116    	; 0x2ae <main+0x17e>
     23a:	0a c0       	rjmp	.+20     	; 0x250 <main+0x120>
     23c:	85 30       	cpi	r24, 0x05	; 5
     23e:	09 f4       	brne	.+2      	; 0x242 <main+0x112>
     240:	65 c0       	rjmp	.+202    	; 0x30c <main+0x1dc>
     242:	85 30       	cpi	r24, 0x05	; 5
     244:	08 f4       	brcc	.+2      	; 0x248 <main+0x118>
     246:	5c c0       	rjmp	.+184    	; 0x300 <main+0x1d0>
     248:	86 30       	cpi	r24, 0x06	; 6
     24a:	09 f0       	breq	.+2      	; 0x24e <main+0x11e>
     24c:	7b c0       	rjmp	.+246    	; 0x344 <main+0x214>
     24e:	6b c0       	rjmp	.+214    	; 0x326 <main+0x1f6>
			// State for initialize all necessary application
			// and hardware states
			case LOCALIZATIONSTATE_Initialization:
				{
					#if PROFILECODE && PROFILE_INITIALIZATION 
					EnableProfileSample0();
     250:	40 98       	cbi	0x08, 0	; 8
					snprintf((char*)buf, MAXLINE, "I\n\r");
					uart_putstr(buf);
					#endif

					#if PROFILECODE && PROFILE_INITIALIZATION 
					EnableProfileSample1();
     252:	41 98       	cbi	0x08, 1	; 8
					// Initialize all necessary states
					InitializeServoController( &SonarDirectionServo );
     254:	c6 01       	movw	r24, r12
     256:	0e 94 c2 04 	call	0x984	; 0x984 <InitializeServoController>
					DisableProfileSample1();
     25a:	41 9a       	sbi	0x08, 1	; 8
					EnableProfileSample2();
     25c:	42 98       	cbi	0x08, 2	; 8
					InitializeCommunication( station_addr, remote_addr );
     25e:	c3 01       	movw	r24, r6
     260:	b2 01       	movw	r22, r4
     262:	0e 94 41 04 	call	0x882	; 0x882 <InitializeCommunication>
					DisableProfileSample2();
     266:	42 9a       	sbi	0x08, 2	; 8
					EnableProfileSample3();
     268:	43 98       	cbi	0x08, 3	; 8
					StatisticsInitialize();
     26a:	0e 94 df 04 	call	0x9be	; 0x9be <StatisticsInitialize>
					DisableProfileSample3();
     26e:	43 9a       	sbi	0x08, 3	; 8

					EnableProfileSample4();
     270:	44 98       	cbi	0x08, 4	; 8
					ServoStartSweep();
     272:	0e 94 98 04 	call	0x930	; 0x930 <ServoStartSweep>
					DisableProfileSample4();
     276:	44 9a       	sbi	0x08, 4	; 8
					ServoStartSweep();
					SweepComplete = 0;
					#endif

					// Then set the state machine into the sweep state mode
					SeekState = LOCALIZATIONSTATE_UpdateSweep;
     278:	b0 92 fa 03 	sts	0x03FA, r11

					#if PROFILECODE && PROFILE_INITIALIZATION 
					DisableProfileSample0();
     27c:	40 9a       	sbi	0x08, 0	; 8
     27e:	ee 24       	eor	r14, r14
     280:	ff 24       	eor	r15, r15
     282:	d0 cf       	rjmp	.-96     	; 0x224 <main+0xf4>
				{
					#if PROFILECODE && PROFILE_UPDATESWEEP 
					EnableProfileSample0();
					#endif

					StatisticsResetSample( &ComStats );
     284:	c8 01       	movw	r24, r16
     286:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <StatisticsResetSample>

					if( 0 == SweepComplete )
     28a:	e1 14       	cp	r14, r1
     28c:	f1 04       	cpc	r15, r1
     28e:	59 f4       	brne	.+22     	; 0x2a6 <main+0x176>
					{
						// Redirect the servo and attempt to communicate
						SweepComplete = ServoUpdateSweepPosition( &ComStats );
     290:	c8 01       	movw	r24, r16
     292:	0e 94 9d 04 	call	0x93a	; 0x93a <ServoUpdateSweepPosition>
     296:	7c 01       	movw	r14, r24
						ServoSetDirection( &SonarDirectionServo, &ComStats );
     298:	c6 01       	movw	r24, r12
     29a:	b8 01       	movw	r22, r16
     29c:	0e 94 bc 04 	call	0x978	; 0x978 <ServoSetDirection>
						CommunicationPingResetRetryCount();
     2a0:	0e 94 cc 02 	call	0x598	; 0x598 <CommunicationPingResetRetryCount>
     2a4:	2a c0       	rjmp	.+84     	; 0x2fa <main+0x1ca>
					}
					else
					{
						// If done sweeping for a signal
						// go to the calculate results state
						SeekState = LOCALIZATIONSTATE_CalcaulateResults;
     2a6:	95 e0       	ldi	r25, 0x05	; 5
     2a8:	90 93 fa 03 	sts	0x03FA, r25
     2ac:	bb cf       	rjmp	.-138    	; 0x224 <main+0xf4>
					snprintf(buf, MAXLINE, "T\n\r");
					uart_putstr(buf);
					#endif

					// Send the request for a ping
					CommunicationSendTriggerMessage();
     2ae:	0e 94 17 04 	call	0x82e	; 0x82e <CommunicationSendTriggerMessage>
					SeekState = LOCALIZATIONSTATE_GetResponse;
     2b2:	20 92 fa 03 	sts	0x03FA, r2
     2b6:	b6 cf       	rjmp	.-148    	; 0x224 <main+0xf4>
					snprintf(buf, MAXLINE, "R\n\r");
					uart_putstr(buf);
					#endif

					// Check for sonar response
					if( CommuncationReceivedPING() )
     2b8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <CommuncationReceivedPING>
     2bc:	89 2b       	or	r24, r25
     2be:	a1 f0       	breq	.+40     	; 0x2e8 <main+0x1b8>
					{
						// According to the docs, the sonar device will 
						// internally timeout after 36ms anyways

						if( CommunicationReceivedSonarResponse() )
     2c0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <CommunicationReceivedSonarResponse>
     2c4:	89 2b       	or	r24, r25
     2c6:	31 f0       	breq	.+12     	; 0x2d4 <main+0x1a4>
							uart_putstr(buf);
							#endif
						
							// Get the communication statistics and go to the
							// update statistics state
							CommunicationGetResponseStatistics( &ComStats );
     2c8:	c8 01       	movw	r24, r16
     2ca:	0e 94 66 03 	call	0x6cc	; 0x6cc <CommunicationGetResponseStatistics>
							SeekState = LOCALIZATIONSTATE_UpdateStatistics;
     2ce:	30 92 fa 03 	sts	0x03FA, r3
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0x1a8>
							uart_putstr(buf);
							#endif

								
							// Sonar timed out, ignore sample and move on
							SeekState = LOCALIZATIONSTATE_UpdateSweep;
     2d4:	b0 92 fa 03 	sts	0x03FA, r11
     2d8:	88 eb       	ldi	r24, 0xB8	; 184
     2da:	9b e0       	ldi	r25, 0x0B	; 11
     2dc:	f4 01       	movw	r30, r8
     2de:	31 97       	sbiw	r30, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x1ae>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e4:	d9 f7       	brne	.-10     	; 0x2dc <main+0x1ac>
     2e6:	9e cf       	rjmp	.-196    	; 0x224 <main+0xf4>
						_delay_ms(300);
					}
					else
					{
						// Check wireless response for a timeout
						if( CommunicationPINGTimeout() )
     2e8:	0e 94 b8 02 	call	0x570	; 0x570 <CommunicationPINGTimeout>
     2ec:	89 2b       	or	r24, r25
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <main+0x1c2>
     2f0:	99 cf       	rjmp	.-206    	; 0x224 <main+0xf4>
						{
							if( 0 == CommunicationPingUpdateRetryCount() )
     2f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <CommunicationPingUpdateRetryCount>
     2f6:	89 2b       	or	r24, r25
     2f8:	31 f4       	brne	.+12     	; 0x306 <main+0x1d6>
							{
								SeekState = LOCALIZATIONSTATE_SendRequest;
     2fa:	a0 92 fa 03 	sts	0x03FA, r10
     2fe:	92 cf       	rjmp	.-220    	; 0x224 <main+0xf4>
					snprintf(buf, MAXLINE, "U %u\n\r", ComStats.Distance);
					uart_putstr(buf);
					#endif

					// Add this new sample point to the statistics pool
					StatisticsAddNewSample( &ComStats );
     300:	c8 01       	movw	r24, r16
     302:	0e 94 0b 05 	call	0xa16	; 0xa16 <StatisticsAddNewSample>
					SeekState = LOCALIZATIONSTATE_UpdateSweep;
     306:	b0 92 fa 03 	sts	0x03FA, r11
     30a:	8c cf       	rjmp	.-232    	; 0x224 <main+0xf4>
					snprintf(buf, MAXLINE, "C\n\r");
					uart_putstr(buf);
					#endif

					// Hack
					ComStats.Percent = 0;
     30c:	1d 8a       	std	Y+21, r1	; 0x15
     30e:	1c 8a       	std	Y+20, r1	; 0x14
					ServoSetDirection( &SonarDirectionServo, &ComStats );
     310:	c6 01       	movw	r24, r12
     312:	b8 01       	movw	r22, r16
     314:	0e 94 bc 04 	call	0x978	; 0x978 <ServoSetDirection>

					// Get the shortest distance and the associated direction
					StatisticsCalculateDirectionAndDistance( &ComStats );
     318:	c8 01       	movw	r24, r16
     31a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <StatisticsCalculateDirectionAndDistance>
					SeekState = LOCALIZATIONSTATE_Report;
     31e:	a6 e0       	ldi	r26, 0x06	; 6
     320:	a0 93 fa 03 	sts	0x03FA, r26
     324:	7f cf       	rjmp	.-258    	; 0x224 <main+0xf4>
					snprintf(buf, MAXLINE, "O\n\r");
					uart_putstr(buf);
					#endif

					// Report the calculated beacon direction and distance
					ServoSetDirection( &SonarDirectionServo, &ComStats );
     326:	c6 01       	movw	r24, r12
     328:	b8 01       	movw	r22, r16
     32a:	0e 94 bc 04 	call	0x978	; 0x978 <ServoSetDirection>
					CommunicationReportDistance( &ComStats );
     32e:	c8 01       	movw	r24, r16
     330:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <CommunicationReportDistance>
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	9f ef       	ldi	r25, 0xFF	; 255
     338:	f4 01       	movw	r30, r8
     33a:	31 97       	sbiw	r30, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x20a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     33e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     340:	d9 f7       	brne	.-10     	; 0x338 <main+0x208>
     342:	70 cf       	rjmp	.-288    	; 0x224 <main+0xf4>
					DisableProfileSample0();
					#endif
				}
				break;
			default:
				SeekState = LOCALIZATIONSTATE_Initialization;
     344:	10 92 fa 03 	sts	0x03FA, r1
     348:	6d cf       	rjmp	.-294    	; 0x224 <main+0xf4>

0000034a <ServoInitialize>:
#include <util\delay.h>

#define F_CPU 16000000UL

void ServoInitialize( ServoControlStruct *SCS )
{
     34a:	fc 01       	movw	r30, r24
	int sreg = SREG;
     34c:	4f b7       	in	r20, 0x3f	; 63
	cli();
     34e:	f8 94       	cli

	DDRB |= 0b01000000; // set pin B.6 for output (OC1B)
     350:	26 9a       	sbi	0x04, 6	; 4
	// TCCR1B:  ICNC1  | ICES1  | ------ | WGM13  | WGM12 | CS12  | CS11  | CS10

	// WGM11:WGM10 = 10: with WGM13-WGM12 to select timer mode 1110
	// Fast PWM, timer 1 runs from 0 to ICR1
	// COM1A1:COM1A0 = 10: clear OC1A when compare match, set OC1A when 0
	TCCR1A = 0b00100010; // compare match occurs timer = OCR1B
     352:	82 e2       	ldi	r24, 0x22	; 34
     354:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = 0b00011010; // WGM13:WGM12=11; CS12:CS0=001: internal clock 8MHz, 1/8 prescaler
     358:	8a e1       	ldi	r24, 0x1A	; 26
     35a:	80 93 81 00 	sts	0x0081, r24

	ICR1 = SCS->PWMPeriod; // period of output PWM signal
     35e:	80 81       	ld	r24, Z
     360:	91 81       	ldd	r25, Z+1	; 0x01
     362:	90 93 87 00 	sts	0x0087, r25
     366:	80 93 86 00 	sts	0x0086, r24
	OCR1B = SCS->PWMHighTime;
     36a:	84 81       	ldd	r24, Z+4	; 0x04
     36c:	95 81       	ldd	r25, Z+5	; 0x05
     36e:	90 93 8b 00 	sts	0x008B, r25
     372:	80 93 8a 00 	sts	0x008A, r24
     376:	80 e5       	ldi	r24, 0x50	; 80
     378:	96 e4       	ldi	r25, 0x46	; 70
     37a:	29 e1       	ldi	r18, 0x19	; 25
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	f9 01       	movw	r30, r18
     380:	31 97       	sbiw	r30, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <ServoInitialize+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     384:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     386:	d9 f7       	brne	.-10     	; 0x37e <ServoInitialize+0x34>

	// Since  the range is clamped to -90..90 degrees, 
	// and with a 10ms delay requirement per degree = 1800
	_delay_ms( 1800 );

	SREG = sreg;
     388:	4f bf       	out	0x3f, r20	; 63
}
     38a:	08 95       	ret

0000038c <SetServoPeriod>:

void SetServoPeriod( ServoControlStruct *SCS, int MicrosecondPeriod )
{
     38c:	fc 01       	movw	r30, r24
	SCS->PWMPeriod = MicrosecondPeriod;
     38e:	71 83       	std	Z+1, r23	; 0x01
     390:	60 83       	st	Z, r22
}
     392:	08 95       	ret

00000394 <SetServoValue>:

void SetServoValue( ServoControlStruct *SCS, int TenthPercent )
{
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	5c 01       	movw	r10, r24
     3aa:	cb 01       	movw	r24, r22
     3ac:	23 e0       	ldi	r18, 0x03	; 3
     3ae:	68 3e       	cpi	r22, 0xE8	; 232
     3b0:	72 07       	cpc	r23, r18
     3b2:	14 f0       	brlt	.+4      	; 0x3b8 <SetServoValue+0x24>
     3b4:	87 ee       	ldi	r24, 0xE7	; 231
     3b6:	93 e0       	ldi	r25, 0x03	; 3
     3b8:	ec 01       	movw	r28, r24
     3ba:	97 ff       	sbrs	r25, 7
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <SetServoValue+0x2e>
     3be:	c0 e0       	ldi	r28, 0x00	; 0
     3c0:	d0 e0       	ldi	r29, 0x00	; 0
	else if( TenthPercent >= 1000 )
	{
		TenthPercent = 999;
	}

	int OldValue = SCS->Value;
     3c2:	f5 01       	movw	r30, r10
     3c4:	c6 80       	ldd	r12, Z+6	; 0x06
     3c6:	d7 80       	ldd	r13, Z+7	; 0x07

	// Set the percentage value
	SCS->Value = TenthPercent;
     3c8:	d7 83       	std	Z+7, r29	; 0x07
     3ca:	c6 83       	std	Z+6, r28	; 0x06
	// Interpolate between the low and the high value
	SCS->PWMHighTime = SCS->LowThreshold + (int)(SCS->DeltaThreshold * ((float)SCS->Value / 1000.0f));
     3cc:	64 85       	ldd	r22, Z+12	; 0x0c
     3ce:	75 85       	ldd	r23, Z+13	; 0x0d
     3d0:	88 27       	eor	r24, r24
     3d2:	77 fd       	sbrc	r23, 7
     3d4:	80 95       	com	r24
     3d6:	98 2f       	mov	r25, r24
     3d8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__floatsisf>
     3dc:	7b 01       	movw	r14, r22
     3de:	8c 01       	movw	r16, r24
     3e0:	be 01       	movw	r22, r28
     3e2:	88 27       	eor	r24, r24
     3e4:	77 fd       	sbrc	r23, 7
     3e6:	80 95       	com	r24
     3e8:	98 2f       	mov	r25, r24
     3ea:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__floatsisf>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	4a e7       	ldi	r20, 0x7A	; 122
     3f4:	54 e4       	ldi	r21, 0x44	; 68
     3f6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divsf3>
     3fa:	9b 01       	movw	r18, r22
     3fc:	ac 01       	movw	r20, r24
     3fe:	c8 01       	movw	r24, r16
     400:	b7 01       	movw	r22, r14
     402:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__mulsf3>
     406:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fixsfsi>
     40a:	f5 01       	movw	r30, r10
     40c:	20 85       	ldd	r18, Z+8	; 0x08
     40e:	31 85       	ldd	r19, Z+9	; 0x09
     410:	62 0f       	add	r22, r18
     412:	73 1f       	adc	r23, r19
     414:	75 83       	std	Z+5, r23	; 0x05
     416:	64 83       	std	Z+4, r22	; 0x04

	OCR1B = SCS->PWMHighTime; // set high time of output PWM signal
     418:	70 93 8b 00 	sts	0x008B, r23
     41c:	60 93 8a 00 	sts	0x008A, r22

	int PosDifference = (SCS->Value - OldValue);
     420:	26 81       	ldd	r18, Z+6	; 0x06
     422:	37 81       	ldd	r19, Z+7	; 0x07
     424:	2c 19       	sub	r18, r12
     426:	3d 09       	sbc	r19, r13
	
	// Convert the difference from percent to angle (degrees)
	// then multiply it by the 10ms delay/degree
	int DelayTime = ((PosDifference * 90) /10) * 100;

	_delay_ms( DelayTime );
     428:	37 ff       	sbrs	r19, 7
     42a:	03 c0       	rjmp	.+6      	; 0x432 <SetServoValue+0x9e>
     42c:	30 95       	com	r19
     42e:	21 95       	neg	r18
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	84 e8       	ldi	r24, 0x84	; 132
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	28 9f       	mul	r18, r24
     438:	b0 01       	movw	r22, r0
     43a:	29 9f       	mul	r18, r25
     43c:	70 0d       	add	r23, r0
     43e:	38 9f       	mul	r19, r24
     440:	70 0d       	add	r23, r0
     442:	11 24       	eor	r1, r1
     444:	88 27       	eor	r24, r24
     446:	77 fd       	sbrc	r23, 7
     448:	80 95       	com	r24
     44a:	98 2f       	mov	r25, r24
     44c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__floatsisf>
     450:	5b 01       	movw	r10, r22
     452:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	4a e7       	ldi	r20, 0x7A	; 122
     45a:	53 e4       	ldi	r21, 0x43	; 67
     45c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__mulsf3>
     460:	7b 01       	movw	r14, r22
     462:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e8       	ldi	r20, 0x80	; 128
     46a:	5f e3       	ldi	r21, 0x3F	; 63
     46c:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <__ltsf2>
     470:	88 23       	and	r24, r24
     472:	1c f4       	brge	.+6      	; 0x47a <SetServoValue+0xe6>
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	24 c0       	rjmp	.+72     	; 0x4c2 <SetServoValue+0x12e>
		__ticks = 1;
	else if (__tmp > 65535)
     47a:	c8 01       	movw	r24, r16
     47c:	b7 01       	movw	r22, r14
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	3f ef       	ldi	r19, 0xFF	; 255
     482:	4f e7       	ldi	r20, 0x7F	; 127
     484:	57 e4       	ldi	r21, 0x47	; 71
     486:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__gtsf2>
     48a:	18 16       	cp	r1, r24
     48c:	b4 f4       	brge	.+44     	; 0x4ba <SetServoValue+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     48e:	c6 01       	movw	r24, r12
     490:	b5 01       	movw	r22, r10
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	40 e2       	ldi	r20, 0x20	; 32
     498:	51 e4       	ldi	r21, 0x41	; 65
     49a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__mulsf3>
     49e:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     4a2:	89 e1       	ldi	r24, 0x19	; 25
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <SetServoValue+0x11e>
     4a8:	fc 01       	movw	r30, r24
     4aa:	31 97       	sbiw	r30, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <SetServoValue+0x116>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ae:	61 50       	subi	r22, 0x01	; 1
     4b0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b2:	61 15       	cp	r22, r1
     4b4:	71 05       	cpc	r23, r1
     4b6:	c1 f7       	brne	.-16     	; 0x4a8 <SetServoValue+0x114>
     4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <SetServoValue+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4ba:	c8 01       	movw	r24, r16
     4bc:	b7 01       	movw	r22, r14
     4be:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     4c2:	cb 01       	movw	r24, r22
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <SetServoValue+0x130>
}
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	df 90       	pop	r13
     4d6:	cf 90       	pop	r12
     4d8:	bf 90       	pop	r11
     4da:	af 90       	pop	r10
     4dc:	08 95       	ret

000004de <AddServoValueDelta>:

void AddServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     4de:	fc 01       	movw	r30, r24
     4e0:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value + TenthPercent;

	SetServoValue( SCS, NewValue );
     4e2:	66 81       	ldd	r22, Z+6	; 0x06
     4e4:	77 81       	ldd	r23, Z+7	; 0x07
     4e6:	68 0f       	add	r22, r24
     4e8:	79 1f       	adc	r23, r25
     4ea:	cf 01       	movw	r24, r30
     4ec:	0e 94 ca 01 	call	0x394	; 0x394 <SetServoValue>
}
     4f0:	08 95       	ret

000004f2 <SubtractServoValueDelta>:

void SubtractServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     4f2:	fc 01       	movw	r30, r24
     4f4:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value - TenthPercent;

	SetServoValue( SCS, NewValue );
     4f6:	66 81       	ldd	r22, Z+6	; 0x06
     4f8:	77 81       	ldd	r23, Z+7	; 0x07
     4fa:	68 1b       	sub	r22, r24
     4fc:	79 0b       	sbc	r23, r25
     4fe:	cf 01       	movw	r24, r30
     500:	0e 94 ca 01 	call	0x394	; 0x394 <SetServoValue>
}
     504:	08 95       	ret

00000506 <SetServoRange>:

void SetServoRange( ServoControlStruct *SCS, int Low, int High )
{
     506:	fc 01       	movw	r30, r24
     508:	9a 01       	movw	r18, r20
	SCS->LowThreshold = Low;
     50a:	71 87       	std	Z+9, r23	; 0x09
     50c:	60 87       	std	Z+8, r22	; 0x08
	SCS->HighThreshold = High;
     50e:	53 87       	std	Z+11, r21	; 0x0b
     510:	42 87       	std	Z+10, r20	; 0x0a
	SCS->DeltaThreshold = High-Low;
     512:	ca 01       	movw	r24, r20
     514:	86 1b       	sub	r24, r22
     516:	97 0b       	sbc	r25, r23
     518:	95 87       	std	Z+13, r25	; 0x0d
     51a:	84 87       	std	Z+12, r24	; 0x0c

	SCS->LowAngle = -SCS->LowThreshold * 9 / 1000;
     51c:	87 ef       	ldi	r24, 0xF7	; 247
     51e:	9f ef       	ldi	r25, 0xFF	; 255
     520:	ac 01       	movw	r20, r24
     522:	64 9f       	mul	r22, r20
     524:	c0 01       	movw	r24, r0
     526:	65 9f       	mul	r22, r21
     528:	90 0d       	add	r25, r0
     52a:	74 9f       	mul	r23, r20
     52c:	90 0d       	add	r25, r0
     52e:	11 24       	eor	r1, r1
     530:	68 ee       	ldi	r22, 0xE8	; 232
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	0e 94 34 10 	call	0x2068	; 0x2068 <__divmodhi4>
     538:	77 87       	std	Z+15, r23	; 0x0f
     53a:	66 87       	std	Z+14, r22	; 0x0e
	SCS->HighAngle = SCS->HighThreshold * 9 / 1000;
     53c:	c9 01       	movw	r24, r18
     53e:	43 e0       	ldi	r20, 0x03	; 3
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	4a 95       	dec	r20
     546:	e1 f7       	brne	.-8      	; 0x540 <SetServoRange+0x3a>
     548:	82 0f       	add	r24, r18
     54a:	93 1f       	adc	r25, r19
     54c:	68 ee       	ldi	r22, 0xE8	; 232
     54e:	73 e0       	ldi	r23, 0x03	; 3
     550:	0e 94 34 10 	call	0x2068	; 0x2068 <__divmodhi4>
     554:	71 8b       	std	Z+17, r23	; 0x11
     556:	60 8b       	std	Z+16, r22	; 0x10
}
     558:	08 95       	ret

0000055a <ResetMessageClock>:

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     55a:	10 92 83 03 	sts	0x0383, r1
     55e:	10 92 82 03 	sts	0x0382, r1

	// Reset the hardware clock
}
     562:	08 95       	ret

00000564 <GetMessageClock>:

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     564:	20 91 82 03 	lds	r18, 0x0382
     568:	30 91 83 03 	lds	r19, 0x0383
}
     56c:	c9 01       	movw	r24, r18
     56e:	08 95       	ret

00000570 <CommunicationPINGTimeout>:
	ResetMessageClock();
}

int CommunicationPINGTimeout()
{
	if( 0 == PINGReceivedFlag )
     570:	80 91 32 04 	lds	r24, 0x0432
     574:	88 23       	and	r24, r24
     576:	19 f0       	breq	.+6      	; 0x57e <CommunicationPINGTimeout+0xe>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	0b c0       	rjmp	.+22     	; 0x594 <CommunicationPINGTimeout+0x24>

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     57e:	80 91 82 03 	lds	r24, 0x0382
     582:	90 91 83 03 	lds	r25, 0x0383
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	81 52       	subi	r24, 0x21	; 33
     58c:	9e 44       	sbci	r25, 0x4E	; 78
     58e:	10 f0       	brcs	.+4      	; 0x594 <CommunicationPINGTimeout+0x24>
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
			return 1;
		}
	}
	  
	return 0;  /// Currently wait indefinately, todo: add a timeout
}
     594:	c9 01       	movw	r24, r18
     596:	08 95       	ret

00000598 <CommunicationPingResetRetryCount>:

void CommunicationPingResetRetryCount()
{
	TimeoutCounter = 0;
     598:	10 92 34 04 	sts	0x0434, r1
     59c:	10 92 33 04 	sts	0x0433, r1
}
     5a0:	08 95       	ret

000005a2 <CommunicationPingUpdateRetryCount>:

#define PINGRETRYCOUNT 0

int CommunicationPingUpdateRetryCount()
{
	if( TimeoutCounter<=PINGRETRYCOUNT )
     5a2:	80 91 33 04 	lds	r24, 0x0433
     5a6:	90 91 34 04 	lds	r25, 0x0434
     5aa:	18 16       	cp	r1, r24
     5ac:	19 06       	cpc	r1, r25
     5ae:	1c f4       	brge	.+6      	; 0x5b6 <CommunicationPingUpdateRetryCount+0x14>
     5b0:	21 e0       	ldi	r18, 0x01	; 1
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	0b c0       	rjmp	.+22     	; 0x5cc <CommunicationPingUpdateRetryCount+0x2a>
	{
		TimeoutCounter++;
     5b6:	80 91 33 04 	lds	r24, 0x0433
     5ba:	90 91 34 04 	lds	r25, 0x0434
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	90 93 34 04 	sts	0x0434, r25
     5c4:	80 93 33 04 	sts	0x0433, r24
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
		return 0;
	}

	return 1;
}
     5cc:	c9 01       	movw	r24, r18
     5ce:	08 95       	ret

000005d0 <radio_rxhandler>:
/**
 * This function is a hook into the radio's ISR.  It is called whenever the radio generates an RX_DR (received data ready) interrupt.
 */
void radio_rxhandler(uint8_t pipenumber)
{
	PINGReceivedFlag = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	80 93 32 04 	sts	0x0432, r24
	SONARReceivedFlag = 0;
     5d6:	10 92 21 04 	sts	0x0421, r1

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     5da:	10 92 83 03 	sts	0x0383, r1
     5de:	10 92 82 03 	sts	0x0382, r1
{
	PINGReceivedFlag = 1;
	SONARReceivedFlag = 0;

	ResetMessageClock();
}
     5e2:	08 95       	ret

000005e4 <CommunicationReportDistance>:
	uart_putstr(buf);
	#endif
}

void CommunicationReportDistance( CommunicationStatStruct *CommStat )
{
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	c0 58       	subi	r28, 0x80	; 128
     5fa:	d0 40       	sbci	r29, 0x00	; 0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
	char output[128];
	float ActualDistance = (340.0 * CommStat->Distance/1000.0)/10.0 - 0.8192;
     606:	fc 01       	movw	r30, r24
     608:	e7 80       	ldd	r14, Z+7	; 0x07
     60a:	f0 84       	ldd	r15, Z+8	; 0x08
	snprintf((char*)output, 128, "distance %u (%u)\n\r", (unsigned int)ActualDistance, (unsigned int)CommStat->Distance);
     60c:	8d b7       	in	r24, 0x3d	; 61
     60e:	9e b7       	in	r25, 0x3e	; 62
     610:	0a 97       	sbiw	r24, 0x0a	; 10
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	9e bf       	out	0x3e, r25	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	8d bf       	out	0x3d, r24	; 61
     61c:	0d b7       	in	r16, 0x3d	; 61
     61e:	1e b7       	in	r17, 0x3e	; 62
     620:	0f 5f       	subi	r16, 0xFF	; 255
     622:	1f 4f       	sbci	r17, 0xFF	; 255
     624:	6e 01       	movw	r12, r28
     626:	08 94       	sec
     628:	c1 1c       	adc	r12, r1
     62a:	d1 1c       	adc	r13, r1
     62c:	ed b7       	in	r30, 0x3d	; 61
     62e:	fe b7       	in	r31, 0x3e	; 62
     630:	d2 82       	std	Z+2, r13	; 0x02
     632:	c1 82       	std	Z+1, r12	; 0x01
     634:	80 e8       	ldi	r24, 0x80	; 128
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	f8 01       	movw	r30, r16
     63a:	93 83       	std	Z+3, r25	; 0x03
     63c:	82 83       	std	Z+2, r24	; 0x02
     63e:	88 e2       	ldi	r24, 0x28	; 40
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	95 83       	std	Z+5, r25	; 0x05
     644:	84 83       	std	Z+4, r24	; 0x04
     646:	b7 01       	movw	r22, r14
     648:	88 27       	eor	r24, r24
     64a:	77 fd       	sbrc	r23, 7
     64c:	80 95       	com	r24
     64e:	98 2f       	mov	r25, r24
     650:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__floatsisf>
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	4a ea       	ldi	r20, 0xAA	; 170
     65a:	53 e4       	ldi	r21, 0x43	; 67
     65c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__mulsf3>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4a e7       	ldi	r20, 0x7A	; 122
     666:	54 e4       	ldi	r21, 0x44	; 68
     668:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divsf3>
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e2       	ldi	r20, 0x20	; 32
     672:	51 e4       	ldi	r21, 0x41	; 65
     674:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divsf3>
     678:	27 e1       	ldi	r18, 0x17	; 23
     67a:	37 eb       	ldi	r19, 0xB7	; 183
     67c:	41 e5       	ldi	r20, 0x51	; 81
     67e:	5f e3       	ldi	r21, 0x3F	; 63
     680:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__subsf3>
     684:	0e 94 81 09 	call	0x1302	; 0x1302 <__fixunssfsi>
     688:	f8 01       	movw	r30, r16
     68a:	77 83       	std	Z+7, r23	; 0x07
     68c:	66 83       	std	Z+6, r22	; 0x06
     68e:	f1 86       	std	Z+9, r15	; 0x09
     690:	e0 86       	std	Z+8, r14	; 0x08
     692:	0e 94 92 10 	call	0x2124	; 0x2124 <snprintf>
	uart_putstr(output);
     696:	8d b7       	in	r24, 0x3d	; 61
     698:	9e b7       	in	r25, 0x3e	; 62
     69a:	0a 96       	adiw	r24, 0x0a	; 10
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	9e bf       	out	0x3e, r25	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	8d bf       	out	0x3d, r24	; 61
     6a6:	c6 01       	movw	r24, r12
     6a8:	0e 94 9a 08 	call	0x1134	; 0x1134 <uart_putstr>
}
     6ac:	c0 58       	subi	r28, 0x80	; 128
     6ae:	df 4f       	sbci	r29, 0xFF	; 255
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	08 95       	ret

000006cc <CommunicationGetResponseStatistics>:

	return SONARReceivedFlag;
}

void CommunicationGetResponseStatistics( CommunicationStatStruct *CommStat )
{ 
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	df 93       	push	r29
     6de:	cf 93       	push	r28
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	c1 55       	subi	r28, 0x51	; 81
     6e6:	d0 40       	sbci	r29, 0x00	; 0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	8c 01       	movw	r16, r24
	
	CommStat->PingReceiveTime = sonar_get_ping_time();
     6f4:	0e 94 42 09 	call	0x1284	; 0x1284 <sonar_get_ping_time>
     6f8:	d8 01       	movw	r26, r16
     6fa:	14 96       	adiw	r26, 0x04	; 4
     6fc:	9c 93       	st	X, r25
     6fe:	8e 93       	st	-X, r24
     700:	13 97       	sbiw	r26, 0x03	; 3
	CommStat->SonarReceiveTime = sonar_get_sonar_time();
     702:	0e 94 48 09 	call	0x1290	; 0x1290 <sonar_get_sonar_time>
     706:	f8 01       	movw	r30, r16
     708:	96 83       	std	Z+6, r25	; 0x06
     70a:	85 83       	std	Z+5, r24	; 0x05
	CommStat->Distance = sonar_get_ping_time(); 
     70c:	0e 94 42 09 	call	0x1284	; 0x1284 <sonar_get_ping_time>
     710:	d8 01       	movw	r26, r16
     712:	18 96       	adiw	r26, 0x08	; 8
     714:	9c 93       	st	X, r25
     716:	8e 93       	st	-X, r24
     718:	17 97       	sbiw	r26, 0x07	; 7

	#if 1
	char buf[81];
	snprintf(buf, 81, "R: %u (%u) [%u, %u]\n\r", sonar_get_distance(), (int)CommStat->Distance, sonar_get_ping_time(), sonar_get_sonar_time() );
     71a:	0e 94 36 09 	call	0x126c	; 0x126c <sonar_get_distance>
     71e:	6c 01       	movw	r12, r24
     720:	f8 01       	movw	r30, r16
     722:	a7 80       	ldd	r10, Z+7	; 0x07
     724:	b0 84       	ldd	r11, Z+8	; 0x08
     726:	0e 94 42 09 	call	0x1284	; 0x1284 <sonar_get_ping_time>
     72a:	7c 01       	movw	r14, r24
     72c:	0e 94 48 09 	call	0x1290	; 0x1290 <sonar_get_sonar_time>
     730:	2d b7       	in	r18, 0x3d	; 61
     732:	3e b7       	in	r19, 0x3e	; 62
     734:	2e 50       	subi	r18, 0x0E	; 14
     736:	30 40       	sbci	r19, 0x00	; 0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	3e bf       	out	0x3e, r19	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	2d bf       	out	0x3d, r18	; 61
     742:	ed b7       	in	r30, 0x3d	; 61
     744:	fe b7       	in	r31, 0x3e	; 62
     746:	31 96       	adiw	r30, 0x01	; 1
     748:	8e 01       	movw	r16, r28
     74a:	0f 5f       	subi	r16, 0xFF	; 255
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	ad b7       	in	r26, 0x3d	; 61
     750:	be b7       	in	r27, 0x3e	; 62
     752:	12 96       	adiw	r26, 0x02	; 2
     754:	1c 93       	st	X, r17
     756:	0e 93       	st	-X, r16
     758:	11 97       	sbiw	r26, 0x01	; 1
     75a:	21 e5       	ldi	r18, 0x51	; 81
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	33 83       	std	Z+3, r19	; 0x03
     760:	22 83       	std	Z+2, r18	; 0x02
     762:	2b e3       	ldi	r18, 0x3B	; 59
     764:	32 e0       	ldi	r19, 0x02	; 2
     766:	35 83       	std	Z+5, r19	; 0x05
     768:	24 83       	std	Z+4, r18	; 0x04
     76a:	d7 82       	std	Z+7, r13	; 0x07
     76c:	c6 82       	std	Z+6, r12	; 0x06
     76e:	b1 86       	std	Z+9, r11	; 0x09
     770:	a0 86       	std	Z+8, r10	; 0x08
     772:	f3 86       	std	Z+11, r15	; 0x0b
     774:	e2 86       	std	Z+10, r14	; 0x0a
     776:	95 87       	std	Z+13, r25	; 0x0d
     778:	84 87       	std	Z+12, r24	; 0x0c
     77a:	0e 94 92 10 	call	0x2124	; 0x2124 <snprintf>
	uart_putstr(buf);
     77e:	ed b7       	in	r30, 0x3d	; 61
     780:	fe b7       	in	r31, 0x3e	; 62
     782:	3e 96       	adiw	r30, 0x0e	; 14
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	fe bf       	out	0x3e, r31	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	ed bf       	out	0x3d, r30	; 61
     78e:	c8 01       	movw	r24, r16
     790:	0e 94 9a 08 	call	0x1134	; 0x1134 <uart_putstr>
	#endif
}
     794:	cf 5a       	subi	r28, 0xAF	; 175
     796:	df 4f       	sbci	r29, 0xFF	; 255
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	08 95       	ret

000007b8 <CommunicationReceivedSonarResponse>:
	return Received;
}

int CommunicationReceivedSonarResponse()
{
	if( 0 != sonar_echo_received() )
     7b8:	0e 94 2e 09 	call	0x125c	; 0x125c <sonar_echo_received>
     7bc:	88 23       	and	r24, r24
     7be:	19 f0       	breq	.+6      	; 0x7c6 <CommunicationReceivedSonarResponse+0xe>
	{
		SONARReceivedFlag = 1;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 21 04 	sts	0x0421, r24
	}

	return SONARReceivedFlag;
     7c6:	80 91 21 04 	lds	r24, 0x0421
}
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	08 95       	ret

000007ce <CommuncationReceivedPING>:

	return 1;
}

int CommuncationReceivedPING()
{
     7ce:	1f 93       	push	r17
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	a0 97       	sbiw	r28, 0x20	; 32
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
	int Received = PINGReceivedFlag;
     7e4:	10 91 32 04 	lds	r17, 0x0432
	if( 0 != PINGReceivedFlag )
     7e8:	80 91 32 04 	lds	r24, 0x0432
     7ec:	88 23       	and	r24, r24
     7ee:	99 f0       	breq	.+38     	; 0x816 <CommuncationReceivedPING+0x48>
	{
		PINGReceivedFlag = 0;
     7f0:	10 92 32 04 	sts	0x0432, r1
		SONARReceivedFlag = 0;
     7f4:	10 92 21 04 	sts	0x0421, r1
		
		radiopacket_t ReceivePacket;
		RADIO_RX_STATUS status = Radio_Receive( &ReceivePacket );
     7f8:	ce 01       	movw	r24, r28
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	0e 94 01 06 	call	0xc02	; 0xc02 <Radio_Receive>

		// Set the current time
		// sonar_reset_trigger_time();
		sonar_trigger();
     800:	0e 94 28 09 	call	0x1250	; 0x1250 <sonar_trigger>
     804:	80 e9       	ldi	r24, 0x90	; 144
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	28 ec       	ldi	r18, 0xC8	; 200
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <CommuncationReceivedPING+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     812:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     814:	d9 f7       	brne	.-10     	; 0x80c <CommuncationReceivedPING+0x3e>

		_delay_ms(40);
	}

	return Received;
}
     816:	81 2f       	mov	r24, r17
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 96       	adiw	r28, 0x20	; 32
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	1f 91       	pop	r17
     82c:	08 95       	ret

0000082e <CommunicationSendTriggerMessage>:
	_delay_ms(500);
}

void CommunicationSendTriggerMessage()
{
	PINGReceivedFlag = 0;
     82e:	10 92 32 04 	sts	0x0432, r1
	SONARReceivedFlag = 0;
     832:	10 92 21 04 	sts	0x0421, r1

	// disable interrupts during setup

	packet.type = COMMAND;
     836:	10 92 fc 03 	sts	0x03FC, r1
	packet.payload.command.command = Trigger;
     83a:	10 92 04 04 	sts	0x0404, r1
	packet.payload.command.sender_address[0] = station_addr[0];
     83e:	80 91 22 04 	lds	r24, 0x0422
     842:	80 93 ff 03 	sts	0x03FF, r24
	packet.payload.command.sender_address[1] = station_addr[1];
     846:	80 91 23 04 	lds	r24, 0x0423
     84a:	80 93 00 04 	sts	0x0400, r24
	packet.payload.command.sender_address[2] = station_addr[2];
     84e:	80 91 24 04 	lds	r24, 0x0424
     852:	80 93 01 04 	sts	0x0401, r24
	packet.payload.command.sender_address[3] = station_addr[3];
     856:	80 91 25 04 	lds	r24, 0x0425
     85a:	80 93 02 04 	sts	0x0402, r24
	packet.payload.command.sender_address[4] = station_addr[4];
     85e:	80 91 26 04 	lds	r24, 0x0426
     862:	80 93 03 04 	sts	0x0403, r24

	Radio_Set_Tx_Addr( (uint8_t*)remote_addr );
     866:	8c e1       	ldi	r24, 0x1C	; 28
     868:	94 e0       	ldi	r25, 0x04	; 4
     86a:	0e 94 c0 05 	call	0xb80	; 0xb80 <Radio_Set_Tx_Addr>
	// uint8_t result = Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
	Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
     86e:	8c ef       	ldi	r24, 0xFC	; 252
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 89 07 	call	0xf12	; 0xf12 <Radio_Transmit>

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     878:	10 92 83 03 	sts	0x0383, r1
     87c:	10 92 82 03 	sts	0x0382, r1
	Radio_Set_Tx_Addr( (uint8_t*)remote_addr );
	// uint8_t result = Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
	Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);

	ResetMessageClock();
}
     880:	08 95       	ret

00000882 <InitializeCommunication>:

	return message_clock;
}

void InitializeCommunication(  uint8_t sa[5], uint8_t ra[5] )
{
     882:	dc 01       	movw	r26, r24
     884:	fb 01       	movw	r30, r22
	TimeoutCounter = 0;
     886:	10 92 34 04 	sts	0x0434, r1
     88a:	10 92 33 04 	sts	0x0433, r1

	WorkingStruct.TriggerSent = 0;
     88e:	10 92 27 04 	sts	0x0427, r1
	WorkingStruct.PingResponseReceived = 0;
     892:	10 92 28 04 	sts	0x0428, r1
	WorkingStruct.SonarReceived = 0;
     896:	10 92 29 04 	sts	0x0429, r1

	WorkingStruct.PingReceiveTime = 0;
     89a:	10 92 2b 04 	sts	0x042B, r1
     89e:	10 92 2a 04 	sts	0x042A, r1
	WorkingStruct.SonarReceiveTime = 0;
     8a2:	10 92 2d 04 	sts	0x042D, r1
     8a6:	10 92 2c 04 	sts	0x042C, r1

	WorkingStruct.Percent = 0;
     8aa:	10 92 31 04 	sts	0x0431, r1
     8ae:	10 92 30 04 	sts	0x0430, r1

	remote_addr[0] = ra[0];
     8b2:	80 81       	ld	r24, Z
     8b4:	80 93 1c 04 	sts	0x041C, r24
	remote_addr[1] = ra[1];
     8b8:	81 81       	ldd	r24, Z+1	; 0x01
     8ba:	80 93 1d 04 	sts	0x041D, r24
	remote_addr[2] = ra[2];
     8be:	82 81       	ldd	r24, Z+2	; 0x02
     8c0:	80 93 1e 04 	sts	0x041E, r24
	remote_addr[3] = ra[3];
     8c4:	83 81       	ldd	r24, Z+3	; 0x03
     8c6:	80 93 1f 04 	sts	0x041F, r24
	remote_addr[4] = ra[4];
     8ca:	84 81       	ldd	r24, Z+4	; 0x04
     8cc:	80 93 20 04 	sts	0x0420, r24

	station_addr[0] = sa[0];
     8d0:	8c 91       	ld	r24, X
     8d2:	80 93 22 04 	sts	0x0422, r24
	station_addr[1] = sa[1];
     8d6:	11 96       	adiw	r26, 0x01	; 1
     8d8:	8c 91       	ld	r24, X
     8da:	11 97       	sbiw	r26, 0x01	; 1
     8dc:	80 93 23 04 	sts	0x0423, r24
	station_addr[2] = sa[2];
     8e0:	12 96       	adiw	r26, 0x02	; 2
     8e2:	8c 91       	ld	r24, X
     8e4:	12 97       	sbiw	r26, 0x02	; 2
     8e6:	80 93 24 04 	sts	0x0424, r24
	station_addr[3] = sa[3];
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	8c 91       	ld	r24, X
     8ee:	13 97       	sbiw	r26, 0x03	; 3
     8f0:	80 93 25 04 	sts	0x0425, r24
	station_addr[4] = sa[4];
     8f4:	14 96       	adiw	r26, 0x04	; 4
     8f6:	8c 91       	ld	r24, X
     8f8:	80 93 26 04 	sts	0x0426, r24
	
	cli();
     8fc:	f8 94       	cli

	Radio_Init();
     8fe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <Radio_Init>
	Radio_Configure_Rx( RADIO_PIPE_0, (uint8_t*)station_addr, ENABLE );
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	62 e2       	ldi	r22, 0x22	; 34
     906:	74 e0       	ldi	r23, 0x04	; 4
     908:	41 e0       	ldi	r20, 0x01	; 1
     90a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <Radio_Configure_Rx>
	Radio_Configure( RADIO_2MBPS, RADIO_HIGHEST_POWER );
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	63 e0       	ldi	r22, 0x03	; 3
     912:	0e 94 b8 06 	call	0xd70	; 0xd70 <Radio_Configure>

	sonar_init();
     916:	0e 94 0e 09 	call	0x121c	; 0x121c <sonar_init>
	
	// enable interrupts
	sei();
     91a:	78 94       	sei
     91c:	88 e8       	ldi	r24, 0x88	; 136
     91e:	93 e1       	ldi	r25, 0x13	; 19
     920:	28 ec       	ldi	r18, 0xC8	; 200
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <InitializeCommunication+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     92a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92c:	d9 f7       	brne	.-10     	; 0x924 <InitializeCommunication+0xa2>

	_delay_ms(500);
}
     92e:	08 95       	ret

00000930 <ServoStartSweep>:
	ServoInitialize( ServoController );
}

void ServoStartSweep()
{
	SweepPercent = 0;
     930:	10 92 36 04 	sts	0x0436, r1
     934:	10 92 35 04 	sts	0x0435, r1
}
     938:	08 95       	ret

0000093a <ServoUpdateSweepPosition>:

int ServoUpdateSweepPosition( CommunicationStatStruct *CommStat )
{
     93a:	fc 01       	movw	r30, r24
	if( (SweepPercent + SWEEPINCREMENTAMOUNT) < 1000 )
     93c:	80 91 35 04 	lds	r24, 0x0435
     940:	90 91 36 04 	lds	r25, 0x0436
     944:	84 58       	subi	r24, 0x84	; 132
     946:	93 40       	sbci	r25, 0x03	; 3
     948:	1c f0       	brlt	.+6      	; 0x950 <ServoUpdateSweepPosition+0x16>
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	12 c0       	rjmp	.+36     	; 0x974 <ServoUpdateSweepPosition+0x3a>
	{
		SweepPercent = SweepPercent + SWEEPINCREMENTAMOUNT;
     950:	80 91 35 04 	lds	r24, 0x0435
     954:	90 91 36 04 	lds	r25, 0x0436
     958:	8c 59       	subi	r24, 0x9C	; 156
     95a:	9f 4f       	sbci	r25, 0xFF	; 255
     95c:	90 93 36 04 	sts	0x0436, r25
     960:	80 93 35 04 	sts	0x0435, r24
		CommStat->Percent = SweepPercent;
     964:	80 91 35 04 	lds	r24, 0x0435
     968:	90 91 36 04 	lds	r25, 0x0436
     96c:	92 87       	std	Z+10, r25	; 0x0a
     96e:	81 87       	std	Z+9, r24	; 0x09
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0

		return 0;
	}

	return 1;
}
     974:	c9 01       	movw	r24, r18
     976:	08 95       	ret

00000978 <ServoSetDirection>:

void ServoSetDirection( ServoControlStruct *ServoController, CommunicationStatStruct *CommStat )
{
     978:	fb 01       	movw	r30, r22
	char buf[81];
	snprintf( buf, 81, "Set servo direction %u\n\r", (int)CommStat->Percent );
	uart_putstr( buf );
#endif 

	SetServoValue( ServoController, CommStat->Percent );
     97a:	61 85       	ldd	r22, Z+9	; 0x09
     97c:	72 85       	ldd	r23, Z+10	; 0x0a
     97e:	0e 94 ca 01 	call	0x394	; 0x394 <SetServoValue>
}
     982:	08 95       	ret

00000984 <InitializeServoController>:
volatile int SweepPercent;

#define OUTPUTDIRECTION 0

void InitializeServoController( ServoControlStruct *ServoController )
{
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	8c 01       	movw	r16, r24
	SweepPercent = 0;
     98a:	10 92 36 04 	sts	0x0436, r1
     98e:	10 92 35 04 	sts	0x0435, r1

	SetServoPeriod( ServoController, 20000 );
     992:	60 e2       	ldi	r22, 0x20	; 32
     994:	7e e4       	ldi	r23, 0x4E	; 78
     996:	0e 94 c6 01 	call	0x38c	; 0x38c <SetServoPeriod>
	SetServoRange( ServoController, 1000, 2000 );
     99a:	c8 01       	movw	r24, r16
     99c:	68 ee       	ldi	r22, 0xE8	; 232
     99e:	73 e0       	ldi	r23, 0x03	; 3
     9a0:	40 ed       	ldi	r20, 0xD0	; 208
     9a2:	57 e0       	ldi	r21, 0x07	; 7
     9a4:	0e 94 83 02 	call	0x506	; 0x506 <SetServoRange>
	SetServoValue( ServoController, 0 );
     9a8:	c8 01       	movw	r24, r16
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	0e 94 ca 01 	call	0x394	; 0x394 <SetServoValue>

	ServoInitialize( ServoController );
     9b2:	c8 01       	movw	r24, r16
     9b4:	0e 94 a5 01 	call	0x34a	; 0x34a <ServoInitialize>
}
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <StatisticsInitialize>:
static volatile CommunicationStatStruct ShortestPath;

void StatisticsInitialize()
{
	// Set the distance to FAR AWAY
	ShortestPath.Distance = 100000;
     9be:	80 ea       	ldi	r24, 0xA0	; 160
     9c0:	96 e8       	ldi	r25, 0x86	; 134
     9c2:	90 93 8c 03 	sts	0x038C, r25
     9c6:	80 93 8b 03 	sts	0x038B, r24

	// Set the default angle to the mid-range
	ShortestPath.Percent = 500;
     9ca:	84 ef       	ldi	r24, 0xF4	; 244
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	90 93 8e 03 	sts	0x038E, r25
     9d2:	80 93 8d 03 	sts	0x038D, r24
}
     9d6:	08 95       	ret

000009d8 <StatisticsResetSample>:

void StatisticsResetSample( CommunicationStatStruct *CommStat )
{
     9d8:	fc 01       	movw	r30, r24
	CommStat->TriggerSent = 0;
     9da:	10 82       	st	Z, r1
	CommStat->PingResponseReceived = 0;
     9dc:	11 82       	std	Z+1, r1	; 0x01
	CommStat->SonarReceived = 0;
     9de:	12 82       	std	Z+2, r1	; 0x02

	CommStat->PingReceiveTime = 0;
     9e0:	14 82       	std	Z+4, r1	; 0x04
     9e2:	13 82       	std	Z+3, r1	; 0x03
	CommStat->SonarReceiveTime = 0;
     9e4:	16 82       	std	Z+6, r1	; 0x06
     9e6:	15 82       	std	Z+5, r1	; 0x05
	CommStat->Distance = 1000000;
     9e8:	80 e4       	ldi	r24, 0x40	; 64
     9ea:	92 e4       	ldi	r25, 0x42	; 66
     9ec:	90 87       	std	Z+8, r25	; 0x08
     9ee:	87 83       	std	Z+7, r24	; 0x07

	CommStat->Percent = 500;
     9f0:	84 ef       	ldi	r24, 0xF4	; 244
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	92 87       	std	Z+10, r25	; 0x0a
     9f6:	81 87       	std	Z+9, r24	; 0x09
}
     9f8:	08 95       	ret

000009fa <StatisticsCalculateDirectionAndDistance>:
		ShortestPath.Percent = CommStat->Percent;
	}
}

void StatisticsCalculateDirectionAndDistance( CommunicationStatStruct *CommStat )
{
     9fa:	fc 01       	movw	r30, r24
	CommStat->Distance = ShortestPath.Distance;
     9fc:	80 91 8b 03 	lds	r24, 0x038B
     a00:	90 91 8c 03 	lds	r25, 0x038C
     a04:	90 87       	std	Z+8, r25	; 0x08
     a06:	87 83       	std	Z+7, r24	; 0x07
	CommStat->Percent = ShortestPath.Percent;
     a08:	80 91 8d 03 	lds	r24, 0x038D
     a0c:	90 91 8e 03 	lds	r25, 0x038E
     a10:	92 87       	std	Z+10, r25	; 0x0a
     a12:	81 87       	std	Z+9, r24	; 0x09
}
     a14:	08 95       	ret

00000a16 <StatisticsAddNewSample>:

	CommStat->Percent = 500;
}

void StatisticsAddNewSample( CommunicationStatStruct *CommStat )
{
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	c1 55       	subi	r28, 0x51	; 81
     a28:	d0 40       	sbci	r29, 0x00	; 0
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	7c 01       	movw	r14, r24
	snprintf( buf, 81, "Here: %u %u\n\r", (unsigned int)CommStat->Distance, (unsigned int)ShortestPath.Distance );
	uart_putstr( buf );
	#endif

	// Check if this result is closer
	if( (unsigned int)CommStat->Distance < (unsigned int)ShortestPath.Distance )
     a36:	dc 01       	movw	r26, r24
     a38:	17 96       	adiw	r26, 0x07	; 7
     a3a:	6d 91       	ld	r22, X+
     a3c:	7c 91       	ld	r23, X
     a3e:	18 97       	sbiw	r26, 0x08	; 8
     a40:	80 91 8b 03 	lds	r24, 0x038B
     a44:	90 91 8c 03 	lds	r25, 0x038C
     a48:	68 17       	cp	r22, r24
     a4a:	79 07       	cpc	r23, r25
     a4c:	08 f0       	brcs	.+2      	; 0xa50 <StatisticsAddNewSample+0x3a>
     a4e:	4d c0       	rjmp	.+154    	; 0xaea <StatisticsAddNewSample+0xd4>
	{	
		snprintf( buf, 81, "SU: %u, %u, %u, %u\n\r", (int)CommStat->Distance, (int)CommStat->Percent, (unsigned int)ShortestPath.Distance, (int)ShortestPath.Percent );
     a50:	20 91 8b 03 	lds	r18, 0x038B
     a54:	30 91 8c 03 	lds	r19, 0x038C
     a58:	40 91 8d 03 	lds	r20, 0x038D
     a5c:	50 91 8e 03 	lds	r21, 0x038E
     a60:	ed b7       	in	r30, 0x3d	; 61
     a62:	fe b7       	in	r31, 0x3e	; 62
     a64:	3e 97       	sbiw	r30, 0x0e	; 14
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	fe bf       	out	0x3e, r31	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	ed bf       	out	0x3d, r30	; 61
     a70:	31 96       	adiw	r30, 0x01	; 1
     a72:	8e 01       	movw	r16, r28
     a74:	0f 5f       	subi	r16, 0xFF	; 255
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
     a78:	ad b7       	in	r26, 0x3d	; 61
     a7a:	be b7       	in	r27, 0x3e	; 62
     a7c:	12 96       	adiw	r26, 0x02	; 2
     a7e:	1c 93       	st	X, r17
     a80:	0e 93       	st	-X, r16
     a82:	11 97       	sbiw	r26, 0x01	; 1
     a84:	81 e5       	ldi	r24, 0x51	; 81
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	93 83       	std	Z+3, r25	; 0x03
     a8a:	82 83       	std	Z+2, r24	; 0x02
     a8c:	81 e5       	ldi	r24, 0x51	; 81
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	95 83       	std	Z+5, r25	; 0x05
     a92:	84 83       	std	Z+4, r24	; 0x04
     a94:	77 83       	std	Z+7, r23	; 0x07
     a96:	66 83       	std	Z+6, r22	; 0x06
     a98:	d7 01       	movw	r26, r14
     a9a:	19 96       	adiw	r26, 0x09	; 9
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	1a 97       	sbiw	r26, 0x0a	; 10
     aa2:	91 87       	std	Z+9, r25	; 0x09
     aa4:	80 87       	std	Z+8, r24	; 0x08
     aa6:	33 87       	std	Z+11, r19	; 0x0b
     aa8:	22 87       	std	Z+10, r18	; 0x0a
     aaa:	55 87       	std	Z+13, r21	; 0x0d
     aac:	44 87       	std	Z+12, r20	; 0x0c
     aae:	0e 94 92 10 	call	0x2124	; 0x2124 <snprintf>
		uart_putstr( buf );
     ab2:	ed b7       	in	r30, 0x3d	; 61
     ab4:	fe b7       	in	r31, 0x3e	; 62
     ab6:	3e 96       	adiw	r30, 0x0e	; 14
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	fe bf       	out	0x3e, r31	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	ed bf       	out	0x3d, r30	; 61
     ac2:	c8 01       	movw	r24, r16
     ac4:	0e 94 9a 08 	call	0x1134	; 0x1134 <uart_putstr>

		// If it is closer, set this 
		// as the current distance
		ShortestPath.Distance = CommStat->Distance;
     ac8:	d7 01       	movw	r26, r14
     aca:	17 96       	adiw	r26, 0x07	; 7
     acc:	8d 91       	ld	r24, X+
     ace:	9c 91       	ld	r25, X
     ad0:	18 97       	sbiw	r26, 0x08	; 8
     ad2:	90 93 8c 03 	sts	0x038C, r25
     ad6:	80 93 8b 03 	sts	0x038B, r24
		ShortestPath.Percent = CommStat->Percent;
     ada:	19 96       	adiw	r26, 0x09	; 9
     adc:	8d 91       	ld	r24, X+
     ade:	9c 91       	ld	r25, X
     ae0:	1a 97       	sbiw	r26, 0x0a	; 10
     ae2:	90 93 8e 03 	sts	0x038E, r25
     ae6:	80 93 8d 03 	sts	0x038D, r24
	}
}
     aea:	cf 5a       	subi	r28, 0xAF	; 175
     aec:	df 4f       	sbci	r29, 0xFF	; 255
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	cf 91       	pop	r28
     afa:	df 91       	pop	r29
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	08 95       	ret

00000b06 <Radio_Drop_Rate>:
}

// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
     b06:	80 91 76 02 	lds	r24, 0x0276
     b0a:	90 91 77 02 	lds	r25, 0x0277
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <Radio_Drop_Rate+0x14>
	uint8_t weight = 0;

	while (wh != 0) {
		if ((wh & 1) != 0) weight++;
     b12:	80 fd       	sbrc	r24, 0
     b14:	2f 5f       	subi	r18, 0xFF	; 255
		wh >>= 1;
     b16:	96 95       	lsr	r25
     b18:	87 95       	ror	r24
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
	uint8_t weight = 0;

	while (wh != 0) {
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <Radio_Drop_Rate+0xc>
		if ((wh & 1) != 0) weight++;
		wh >>= 1;
	}

	wh = (16 - weight) * 100;
     b1e:	80 e1       	ldi	r24, 0x10	; 16
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	82 1b       	sub	r24, r18
     b24:	91 09       	sbc	r25, r1
     b26:	24 e6       	ldi	r18, 0x64	; 100
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	ac 01       	movw	r20, r24
     b2c:	42 9f       	mul	r20, r18
     b2e:	c0 01       	movw	r24, r0
     b30:	43 9f       	mul	r20, r19
     b32:	90 0d       	add	r25, r0
     b34:	52 9f       	mul	r21, r18
     b36:	90 0d       	add	r25, r0
     b38:	11 24       	eor	r1, r1
     b3a:	24 e0       	ldi	r18, 0x04	; 4
     b3c:	96 95       	lsr	r25
     b3e:	87 95       	ror	r24
     b40:	2a 95       	dec	r18
     b42:	e1 f7       	brne	.-8      	; 0xb3c <Radio_Drop_Rate+0x36>
	wh /= 16;
	return wh;
}
     b44:	08 95       	ret

00000b46 <_get_status>:
extern void radio_rxhandler(uint8_t pipenumber);

uint8_t _get_status()
{
        uint8_t status = 0;
        RADIO_CSN_LOW();
     b46:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(NOP);
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	0e 94 80 08 	call	0x1100	; 0x1100 <SPI_Write_Byte>

        RADIO_CSN_HIGH();
     b4e:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     b50:	08 95       	ret

00000b52 <_set_register>:

uint8_t _set_register(radio_register_t reg, uint8_t* value, uint8_t len)
{
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	8b 01       	movw	r16, r22
     b5c:	e4 2e       	mov	r14, r20
        uint8_t status;
        RADIO_CSN_LOW();
     b5e:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     b60:	8f 71       	andi	r24, 0x1F	; 31
     b62:	80 62       	ori	r24, 0x20	; 32
     b64:	0e 94 80 08 	call	0x1100	; 0x1100 <SPI_Write_Byte>
     b68:	f8 2e       	mov	r15, r24
        SPI_Write_Block(value, len);
     b6a:	c8 01       	movw	r24, r16
     b6c:	6e 2d       	mov	r22, r14
     b6e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_Write_Block>

        RADIO_CSN_HIGH();
     b72:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     b74:	8f 2d       	mov	r24, r15
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <Radio_Set_Tx_Addr>:
	_set_register(EN_RXADDR, &value, 1);
}

// default transmitter address is 0xe7e7e7e7e7.
void Radio_Set_Tx_Addr(uint8_t* address)
{
     b80:	fc 01       	movw	r30, r24
	tx_address[0] = address[0];
     b82:	80 81       	ld	r24, Z
     b84:	80 93 6c 02 	sts	0x026C, r24
	tx_address[1] = address[1];
     b88:	81 81       	ldd	r24, Z+1	; 0x01
     b8a:	80 93 6d 02 	sts	0x026D, r24
	tx_address[2] = address[2];
     b8e:	82 81       	ldd	r24, Z+2	; 0x02
     b90:	80 93 6e 02 	sts	0x026E, r24
	tx_address[3] = address[3];
     b94:	83 81       	ldd	r24, Z+3	; 0x03
     b96:	80 93 6f 02 	sts	0x026F, r24
	tx_address[4] = address[4];
     b9a:	84 81       	ldd	r24, Z+4	; 0x04
     b9c:	80 93 70 02 	sts	0x0270, r24
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	bf 01       	movw	r22, r30
     ba4:	45 e0       	ldi	r20, 0x05	; 5
     ba6:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>
}
     baa:	08 95       	ret

00000bac <_reset_pipe0_address>:
	}
}

void _reset_pipe0_address()
{
        if (rx_pipe_widths[RADIO_PIPE_0] != 0)
     bac:	80 91 66 02 	lds	r24, 0x0266
     bb0:	88 23       	and	r24, r24
     bb2:	31 f0       	breq	.+12     	; 0xbc0 <_reset_pipe0_address+0x14>
        {
                // reset the pipe 0 address if pipe 0 is enabled.
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
     bb4:	8a e0       	ldi	r24, 0x0A	; 10
     bb6:	61 e7       	ldi	r22, 0x71	; 113
     bb8:	72 e0       	ldi	r23, 0x02	; 2
     bba:	45 e0       	ldi	r20, 0x05	; 5
     bbc:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>
     bc0:	08 95       	ret

00000bc2 <send_instruction>:

        return status;
}

void send_instruction(uint8_t instruction, uint8_t* data, uint8_t* buffer, uint8_t len)
{
     bc2:	ef 92       	push	r14
     bc4:	ff 92       	push	r15
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	7b 01       	movw	r14, r22
     bce:	ea 01       	movw	r28, r20
     bd0:	12 2f       	mov	r17, r18
    RADIO_CSN_LOW();
     bd2:	2d 98       	cbi	0x05, 5	; 5

    // send the instruction
    SPI_Write_Byte(instruction);
     bd4:	0e 94 80 08 	call	0x1100	; 0x1100 <SPI_Write_Byte>

    // pass in args
    if (len > 0)
     bd8:	11 23       	and	r17, r17
     bda:	61 f0       	breq	.+24     	; 0xbf4 <send_instruction+0x32>
    {
    	if (buffer == NULL)     //
     bdc:	20 97       	sbiw	r28, 0x00	; 0
     bde:	29 f4       	brne	.+10     	; 0xbea <send_instruction+0x28>
    		SPI_Write_Block(data, len);
     be0:	c7 01       	movw	r24, r14
     be2:	61 2f       	mov	r22, r17
     be4:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_Write_Block>
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <send_instruction+0x32>
    	else
    		SPI_ReadWrite_Block(data, buffer, len);
     bea:	c7 01       	movw	r24, r14
     bec:	be 01       	movw	r22, r28
     bee:	41 2f       	mov	r20, r17
     bf0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <SPI_ReadWrite_Block>
    }

    // resynch SPI
    RADIO_CSN_HIGH();
     bf4:	2d 9a       	sbi	0x05, 5	; 5
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	08 95       	ret

00000c02 <Radio_Receive>:

    return RADIO_TX_SUCCESS;
}

RADIO_RX_STATUS Radio_Receive(radiopacket_t* buffer)
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	18 2f       	mov	r17, r24
     c08:	09 2f       	mov	r16, r25
	uint8_t status;
	uint8_t pipe_number;
	uint8_t doMove = 1;
	RADIO_RX_STATUS result;

	transmit_lock = 0;
     c0a:	10 92 37 04 	sts	0x0437, r1

	RADIO_CE_LOW();
     c0e:	2c 98       	cbi	0x05, 4	; 5

	status = _get_status();
     c10:	0e 94 a3 05 	call	0xb46	; 0xb46 <_get_status>
    pipe_number =  (status & 0xE) >> 1;
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	8e 70       	andi	r24, 0x0E	; 14
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	95 95       	asr	r25
     c1c:	87 95       	ror	r24
    if (pipe_number == RADIO_PIPE_EMPTY) {
    	result = RADIO_RX_FIFO_EMPTY;
    	doMove = 0;
    }

    if (rx_pipe_widths[pipe_number] > len) {
     c1e:	28 2f       	mov	r18, r24
     c20:	fc 01       	movw	r30, r24
     c22:	ea 59       	subi	r30, 0x9A	; 154
     c24:	fd 4f       	sbci	r31, 0xFD	; 253
     c26:	80 81       	ld	r24, Z
     c28:	81 32       	cpi	r24, 0x21	; 33
     c2a:	10 f0       	brcs	.+4      	; 0xc30 <Radio_Receive+0x2e>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	18 c0       	rjmp	.+48     	; 0xc60 <Radio_Receive+0x5e>
    	// the buffer isn't big enough, so don't copy the data.
    	result = RADIO_RX_INVALID_ARGS;
    	doMove = 0;
    }

    if (doMove) {
     c30:	27 30       	cpi	r18, 0x07	; 7
     c32:	11 f4       	brne	.+4      	; 0xc38 <Radio_Receive+0x36>
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	14 c0       	rjmp	.+40     	; 0xc60 <Radio_Receive+0x5e>
    	// Move the data payload into the local
    	send_instruction(R_RX_PAYLOAD, (uint8_t*)buffer, (uint8_t*)buffer, rx_pipe_widths[pipe_number]);
     c38:	20 81       	ld	r18, Z
     c3a:	81 e6       	ldi	r24, 0x61	; 97
     c3c:	61 2f       	mov	r22, r17
     c3e:	70 2f       	mov	r23, r16
     c40:	41 2f       	mov	r20, r17
     c42:	50 2f       	mov	r21, r16
     c44:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <send_instruction>

    	status = _get_status();
     c48:	0e 94 a3 05 	call	0xb46	; 0xb46 <_get_status>
    	pipe_number =  (status & 0xE) >> 1;

    	if (pipe_number != RADIO_PIPE_EMPTY)
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	8e 70       	andi	r24, 0x0E	; 14
     c50:	90 70       	andi	r25, 0x00	; 0
     c52:	95 95       	asr	r25
     c54:	87 95       	ror	r24
     c56:	87 30       	cpi	r24, 0x07	; 7
     c58:	11 f4       	brne	.+4      	; 0xc5e <Radio_Receive+0x5c>
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <Radio_Receive+0x5e>
     c5e:	83 e0       	ldi	r24, 0x03	; 3
    		result = RADIO_RX_MORE_PACKETS;
    	else
    		result = RADIO_RX_SUCCESS;
    }

    RADIO_CE_HIGH();
     c60:	2c 9a       	sbi	0x05, 4	; 5
    transmit_lock = 0;
     c62:	10 92 37 04 	sts	0x0437, r1

    return result;
}
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <_config>:
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
        }
}

void _config()
{
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	0f 92       	push	r0
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;

	SPI_Init();
     c7a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <SPI_Init>

	// set address width to 5 bytes.
	value = ADDRESS_LENGTH - 2;                     // 0b11 for 5 bytes, 0b10 for 4 bytes, 0b01 for 3 bytes
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	89 83       	std	Y+1, r24	; 0x01
	_set_register(SETUP_AW, &value, 1);
     c82:	8e 01       	movw	r16, r28
     c84:	0f 5f       	subi	r16, 0xFF	; 255
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	b8 01       	movw	r22, r16
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

	// set Enhanced Shockburst retry to every 586 us, up to 5 times.  If packet collisions are a problem even with AA enabled,
	// then consider changing the retry delay to be different on the different stations so that they do not keep colliding on each retry.
	value = 0x15;
     c90:	85 e1       	ldi	r24, 0x15	; 21
     c92:	89 83       	std	Y+1, r24	; 0x01
	//value = 0x10;
	_set_register(SETUP_RETR, &value, 1);
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	b8 01       	movw	r22, r16
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

	// Set to use 2.4 GHz channel 110.
	value = CHANNEL;
     c9e:	80 e7       	ldi	r24, 0x70	; 112
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_CH, &value, 1);
     ca2:	85 e0       	ldi	r24, 0x05	; 5
     ca4:	b8 01       	movw	r22, r16
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

	// Set radio to 2 Mbps and high power.  Leave LNA_HCURR at its default.
	value = _BV(RF_DR) | _BV(LNA_HCURR);
     cac:	89 e0       	ldi	r24, 0x09	; 9
     cae:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_SETUP, &value, 1);
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	b8 01       	movw	r22, r16
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

	// Enable 2-byte CRC and power up in receive mode.
	value = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	89 83       	std	Y+1, r24	; 0x01
	_set_register(CONFIG, &value, 1);
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	b8 01       	movw	r22, r16
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

	send_instruction(FLUSH_TX, NULL, NULL, 0);
     cc8:	81 ee       	ldi	r24, 0xE1	; 225
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <send_instruction>
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     cd8:	82 ee       	ldi	r24, 0xE2	; 226
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <send_instruction>
}
     ce8:	0f 90       	pop	r0
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	08 95       	ret

00000cf4 <Radio_Init>:

void Radio_Init()
{
        transmit_lock = 0;
     cf4:	10 92 37 04 	sts	0x0437, r1

        // disable radio during config
        RADIO_CE_LOW();
     cf8:	2c 98       	cbi	0x05, 4	; 5

        // set CE and CSN
        RADIO_DDR |= _BV(RADIO_CE);
     cfa:	24 9a       	sbi	0x04, 4	; 4
        RADIO_DDR |= _BV(RADIO_CSN);
     cfc:	25 9a       	sbi	0x04, 5	; 4

        // Enable radio interrupt.
		// INT0 This interrupt is triggered when data are received and when a transmission completes.
        DDRE &= ~_BV(PORTD0);
     cfe:	68 98       	cbi	0x0d, 0	; 13
        EICRB |= _BV(ISC01);
     d00:	ea e6       	ldi	r30, 0x6A	; 106
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	82 60       	ori	r24, 0x02	; 2
     d08:	80 83       	st	Z, r24
        EICRB &= ~_BV(ISC00);
     d0a:	80 81       	ld	r24, Z
     d0c:	8e 7f       	andi	r24, 0xFE	; 254
     d0e:	80 83       	st	Z, r24
        EIMSK |= _BV(INT0);
     d10:	e8 9a       	sbi	0x1d, 0	; 29

        // Configure the radio registers that are not application-dependent.
        _config();
     d12:	0e 94 36 06 	call	0xc6c	; 0xc6c <_config>
     d16:	84 ef       	ldi	r24, 0xF4	; 244
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <Radio_Init+0x26>

        // Wait for the radio to power up.
        _delay_ms(2);

        // enable radio as a receiver
        RADIO_CE_HIGH();
     d1e:	2c 9a       	sbi	0x05, 4	; 5
}
     d20:	08 95       	ret

00000d22 <_get_register>:

        return status;
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	58 2f       	mov	r21, r24
     d2c:	f6 2e       	mov	r15, r22
     d2e:	e7 2e       	mov	r14, r23
     d30:	04 2f       	mov	r16, r20
     d32:	86 2f       	mov	r24, r22
     d34:	97 2f       	mov	r25, r23
     d36:	9c 01       	movw	r18, r24
     d38:	f9 01       	movw	r30, r18
     d3a:	80 e0       	ldi	r24, 0x00	; 0
        uint8_t status, i;
        for (i = 0; i < len; i++)
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
     d3c:	9f ef       	ldi	r25, 0xFF	; 255
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <_get_register+0x22>
     d40:	91 93       	st	Z+, r25
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
        uint8_t status, i;
        for (i = 0; i < len; i++)
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	80 17       	cp	r24, r16
     d46:	e0 f3       	brcs	.-8      	; 0xd40 <_get_register+0x1e>
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
        }
        RADIO_CSN_LOW();
     d48:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     d4a:	85 2f       	mov	r24, r21
     d4c:	8f 71       	andi	r24, 0x1F	; 31
     d4e:	0e 94 80 08 	call	0x1100	; 0x1100 <SPI_Write_Byte>
     d52:	18 2f       	mov	r17, r24
        SPI_ReadWrite_Block(NULL, buffer, len);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	6f 2d       	mov	r22, r15
     d5a:	7e 2d       	mov	r23, r14
     d5c:	40 2f       	mov	r20, r16
     d5e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <SPI_ReadWrite_Block>

        RADIO_CSN_HIGH();
     d62:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     d64:	81 2f       	mov	r24, r17
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <Radio_Configure>:
	tx_address[4] = address[4];
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
}

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
{
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	08 2f       	mov	r16, r24
     d80:	16 2f       	mov	r17, r22
	uint8_t value;

	if (power < RADIO_LOWEST_POWER || power > RADIO_HIGHEST_POWER
     d82:	64 30       	cpi	r22, 0x04	; 4
     d84:	d8 f4       	brcc	.+54     	; 0xdbc <Radio_Configure+0x4c>
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	c8 f4       	brcc	.+50     	; 0xdbc <Radio_Configure+0x4c>
			|| dr < RADIO_1MBPS || dr > RADIO_2MBPS)
		return;

	// set the data rate and power bits in the RF_SETUP register
	_get_register(RF_SETUP, &value, 1);
     d8a:	86 e0       	ldi	r24, 0x06	; 6
     d8c:	be 01       	movw	r22, r28
     d8e:	6f 5f       	subi	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	0e 94 91 06 	call	0xd22	; 0xd22 <_get_register>

	value |= 3 << RF_PWR;	// set the power bits so that the & will mask the power value in properly.
	value &= power << RF_PWR;	// mask the power value into the RF status byte.
     d98:	61 2f       	mov	r22, r17
     d9a:	66 0f       	add	r22, r22
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	86 60       	ori	r24, 0x06	; 6
     da0:	68 23       	and	r22, r24

	if (dr)
     da2:	00 23       	and	r16, r16
     da4:	11 f0       	breq	.+4      	; 0xdaa <Radio_Configure+0x3a>
		value |= _BV(RF_DR);
     da6:	68 60       	ori	r22, 0x08	; 8
     da8:	01 c0       	rjmp	.+2      	; 0xdac <Radio_Configure+0x3c>
	else
		value &= ~_BV(RF_DR);
     daa:	67 7f       	andi	r22, 0xF7	; 247
     dac:	69 83       	std	Y+1, r22	; 0x01

	_set_register(RF_SETUP, &value, 1);
     dae:	86 e0       	ldi	r24, 0x06	; 6
     db0:	be 01       	movw	r22, r28
     db2:	6f 5f       	subi	r22, 0xFF	; 255
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>
}
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <Radio_Configure_Rx>:
// default address for pipe 2 is 0xc2c2c2c2c3 (disabled)
// default address for pipe 3 is 0xc2c2c2c2c4 (disabled)
// default address for pipe 4 is 0xc2c2c2c2c5 (disabled)
// default address for pipe 5 is 0xc2c2c2c2c6 (disabled)
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, uint8_t enable)
{
     dc8:	af 92       	push	r10
     dca:	bf 92       	push	r11
     dcc:	cf 92       	push	r12
     dce:	df 92       	push	r13
     dd0:	ef 92       	push	r14
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	0f 92       	push	r0
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	08 2f       	mov	r16, r24
     de2:	fb 01       	movw	r30, r22
     de4:	c4 2e       	mov	r12, r20
	uint8_t value;
	uint8_t use_aa = 1;
	uint8_t payload_width = 32;
	if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;
     de6:	86 30       	cpi	r24, 0x06	; 6
     de8:	08 f0       	brcs	.+2      	; 0xdec <Radio_Configure_Rx+0x24>
     dea:	63 c0       	rjmp	.+198    	; 0xeb2 <Radio_Configure_Rx+0xea>

	// store the pipe 0 address so that it can be overwritten when transmitting with auto-ack enabled.
	if (pipe == RADIO_PIPE_0)
     dec:	88 23       	and	r24, r24
     dee:	81 f4       	brne	.+32     	; 0xe10 <Radio_Configure_Rx+0x48>
	{
		rx_pipe0_address[0] = address[0];
     df0:	80 81       	ld	r24, Z
     df2:	80 93 71 02 	sts	0x0271, r24
		rx_pipe0_address[1] = address[1];
     df6:	81 81       	ldd	r24, Z+1	; 0x01
     df8:	80 93 72 02 	sts	0x0272, r24
		rx_pipe0_address[2] = address[2];
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	80 93 73 02 	sts	0x0273, r24
		rx_pipe0_address[3] = address[3];
     e02:	83 81       	ldd	r24, Z+3	; 0x03
     e04:	80 93 74 02 	sts	0x0274, r24
		rx_pipe0_address[4] = address[4];
     e08:	84 81       	ldd	r24, Z+4	; 0x04
     e0a:	80 93 75 02 	sts	0x0275, r24
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <Radio_Configure_Rx+0x4c>
	}

	// Set the address.  We set this stuff even if the pipe is being disabled, because for example the transmitter
	// needs pipe 0 to have the same address as the Tx address for auto-ack to work, even if pipe 0 is disabled.
	_set_register(RX_ADDR_P0 + pipe, address, pipe > RADIO_PIPE_1 ? 1 : ADDRESS_LENGTH);
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	10 f4       	brcc	.+4      	; 0xe18 <Radio_Configure_Rx+0x50>
     e14:	45 e0       	ldi	r20, 0x05	; 5
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <Radio_Configure_Rx+0x52>
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	80 2f       	mov	r24, r16
     e1c:	86 5f       	subi	r24, 0xF6	; 246
     e1e:	bf 01       	movw	r22, r30
     e20:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

	// Set auto-ack.
	_get_register(EN_AA, &value, 1);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	5e 01       	movw	r10, r28
     e28:	08 94       	sec
     e2a:	a1 1c       	adc	r10, r1
     e2c:	b1 1c       	adc	r11, r1
     e2e:	b5 01       	movw	r22, r10
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	0e 94 91 06 	call	0xd22	; 0xd22 <_get_register>
	if (use_aa)
		value |= _BV(pipe);
     e36:	e0 2e       	mov	r14, r16
     e38:	ff 24       	eor	r15, r15
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	00 2e       	mov	r0, r16
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <Radio_Configure_Rx+0x7e>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <Radio_Configure_Rx+0x7a>
     e4a:	d8 2e       	mov	r13, r24
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	8d 29       	or	r24, r13
     e50:	89 83       	std	Y+1, r24	; 0x01
	else
		value &= ~_BV(pipe);

	_set_register(EN_AA, &value, 1);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	b5 01       	movw	r22, r10
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

	// Set the pipe's payload width.  If the pipe is being disabled, then the payload width is set to 0.
	value = enable ? payload_width : 0;
     e5c:	cc 20       	and	r12, r12
     e5e:	11 f4       	brne	.+4      	; 0xe64 <Radio_Configure_Rx+0x9c>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <Radio_Configure_Rx+0x9e>
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RX_PW_P0 + pipe, &value, 1);
     e68:	80 2f       	mov	r24, r16
     e6a:	8f 5e       	subi	r24, 0xEF	; 239
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>
	rx_pipe_widths[pipe] = value;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	26 e6       	ldi	r18, 0x66	; 102
     e7c:	32 e0       	ldi	r19, 0x02	; 2
     e7e:	e2 0e       	add	r14, r18
     e80:	f3 1e       	adc	r15, r19
     e82:	f7 01       	movw	r30, r14
     e84:	80 83       	st	Z, r24

	// Enable or disable the pipe.
	_get_register(EN_RXADDR, &value, 1);
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	be 01       	movw	r22, r28
     e8a:	6f 5f       	subi	r22, 0xFF	; 255
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	41 e0       	ldi	r20, 0x01	; 1
     e90:	0e 94 91 06 	call	0xd22	; 0xd22 <_get_register>
     e94:	89 81       	ldd	r24, Y+1	; 0x01
	if (enable)
     e96:	cc 20       	and	r12, r12
     e98:	11 f0       	breq	.+4      	; 0xe9e <Radio_Configure_Rx+0xd6>
		value |= _BV(pipe);
     e9a:	8d 29       	or	r24, r13
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <Radio_Configure_Rx+0xda>
	else
		value &= ~_BV(pipe);
     e9e:	d0 94       	com	r13
     ea0:	8d 21       	and	r24, r13
     ea2:	89 83       	std	Y+1, r24	; 0x01
	_set_register(EN_RXADDR, &value, 1);
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5f       	subi	r22, 0xFF	; 255
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>
}
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	0f 91       	pop	r16
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	bf 90       	pop	r11
     ec4:	af 90       	pop	r10
     ec6:	08 95       	ret

00000ec8 <_set_tx_mode>:
		_delay_us(65);
	}
}

void _set_tx_mode()
{
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	8e 01       	movw	r16, r28
     eda:	0f 5f       	subi	r16, 0xFF	; 255
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	b8 01       	movw	r22, r16
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	0e 94 91 06 	call	0xd22	; 0xd22 <_get_register>
	if ((config & _BV(PRIM_RX)) != 0)
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	80 ff       	sbrs	r24, 0
     eea:	0d c0       	rjmp	.+26     	; 0xf06 <_set_tx_mode+0x3e>
	{
		config &= ~_BV(PRIM_RX);
     eec:	8e 7f       	andi	r24, 0xFE	; 254
     eee:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	b8 01       	movw	r22, r16
     ef4:	41 e0       	ldi	r20, 0x01	; 1
     ef6:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     efa:	85 e1       	ldi	r24, 0x15	; 21
     efc:	98 2f       	mov	r25, r24
     efe:	9a 95       	dec	r25
     f00:	f1 f7       	brne	.-4      	; 0xefe <_set_tx_mode+0x36>
		// You can delete this if you're sending large packets (I'm thinking > 25 bytes, but I'm not sure) because it
		// sending the bytes over SPI can take this long.
		_delay_us(65);
		_delay_us(65);
	}
}
     f02:	8a 95       	dec	r24
     f04:	f1 f7       	brne	.-4      	; 0xf02 <_set_tx_mode+0x3a>
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	08 95       	ret

00000f12 <Radio_Transmit>:

	_set_register(RF_SETUP, &value, 1);
}

uint8_t Radio_Transmit(radiopacket_t* payload, RADIO_TX_WAIT wait)
{
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	8c 01       	movw	r16, r24
     f1a:	f6 2e       	mov	r15, r22
	uint8_t len = 32;

	// indicate that the driver is transmitting.
    transmit_lock = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	80 93 37 04 	sts	0x0437, r24

    // disable the radio while writing to the Tx FIFO.
    RADIO_CE_LOW();
     f22:	2c 98       	cbi	0x05, 4	; 5

	_set_tx_mode();
     f24:	0e 94 64 07 	call	0xec8	; 0xec8 <_set_tx_mode>

    // for auto-ack to work, the pipe0 address must be set to the Tx address while the radio is transmitting.
    // The register will be set back to the original pipe 0 address when the TX_DS or MAX_RT interrupt is asserted.
    _set_register(RX_ADDR_P0, (uint8_t*)tx_address, ADDRESS_LENGTH);
     f28:	8a e0       	ldi	r24, 0x0A	; 10
     f2a:	6c e6       	ldi	r22, 0x6C	; 108
     f2c:	72 e0       	ldi	r23, 0x02	; 2
     f2e:	45 e0       	ldi	r20, 0x05	; 5
     f30:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

    // enable SPI
    RADIO_CSN_LOW();
     f34:	2d 98       	cbi	0x05, 5	; 5
    // send the "write transmit payload" instruction.
    SPI_Write_Byte(W_TX_PAYLOAD);
     f36:	80 ea       	ldi	r24, 0xA0	; 160
     f38:	0e 94 80 08 	call	0x1100	; 0x1100 <SPI_Write_Byte>
    // write the payload to the Tx FIFO
    SPI_Write_Block((uint8_t*)payload,len);
     f3c:	c8 01       	movw	r24, r16
     f3e:	60 e2       	ldi	r22, 0x20	; 32
     f40:	0e 94 73 08 	call	0x10e6	; 0x10e6 <SPI_Write_Block>
    // disable SPI
    RADIO_CSN_HIGH();
     f44:	2d 9a       	sbi	0x05, 5	; 5

    // start the transmission.
    RADIO_CE_HIGH();
     f46:	2c 9a       	sbi	0x05, 4	; 5

    if (wait == RADIO_WAIT_FOR_TX)
     f48:	ff 20       	and	r15, r15
     f4a:	11 f0       	breq	.+4      	; 0xf50 <Radio_Transmit+0x3e>
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <Radio_Transmit+0x4a>
    {
        while (transmit_lock);
     f50:	80 91 37 04 	lds	r24, 0x0437
     f54:	88 23       	and	r24, r24
     f56:	e1 f7       	brne	.-8      	; 0xf50 <Radio_Transmit+0x3e>
        return tx_last_status;
     f58:	80 91 78 02 	lds	r24, 0x0278
    }

    return RADIO_TX_SUCCESS;
}
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	08 95       	ret

00000f64 <_set_rx_mode>:
    // resynch SPI
    RADIO_CSN_HIGH();
}

void _set_rx_mode()
{
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	8e 01       	movw	r16, r28
     f76:	0f 5f       	subi	r16, 0xFF	; 255
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	b8 01       	movw	r22, r16
     f7c:	41 e0       	ldi	r20, 0x01	; 1
     f7e:	0e 94 91 06 	call	0xd22	; 0xd22 <_get_register>
	if ((config & _BV(PRIM_RX)) == 0)
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	80 fd       	sbrc	r24, 0
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <_set_rx_mode+0x3e>
	{
		config |= _BV(PRIM_RX);
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	b8 01       	movw	r22, r16
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>
     f96:	85 e1       	ldi	r24, 0x15	; 21
     f98:	98 2f       	mov	r25, r24
     f9a:	9a 95       	dec	r25
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <_set_rx_mode+0x36>
		// the radio takes 130 us to power up the receiver.
		_delay_us(65);
		_delay_us(65);
	}
}
     f9e:	8a 95       	dec	r24
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <_set_rx_mode+0x3a>
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <__vector_1>:
	return wh;
}

// Interrupt handler
ISR(INT0_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	0b b6       	in	r0, 0x3b	; 59
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
     fde:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
     fe0:	0e 94 a3 05 	call	0xb46	; 0xb46 <_get_status>
     fe4:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	86 ff       	sbrs	r24, 6
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <__vector_1+0x4a>
        pipe_number =  (status & 0xE) >> 1;
        radio_rxhandler(pipe_number);
     fec:	8e 70       	andi	r24, 0x0E	; 14
     fee:	90 70       	andi	r25, 0x00	; 0
     ff0:	95 95       	asr	r25
     ff2:	87 95       	ror	r24
     ff4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	85 ff       	sbrs	r24, 5
     ffc:	1d c0       	rjmp	.+58     	; 0x1038 <__vector_1+0x8a>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
     ffe:	10 92 37 04 	sts	0x0437, r1
        _reset_pipe0_address();
    1002:	0e 94 d6 05 	call	0xbac	; 0xbac <_reset_pipe0_address>
        _set_rx_mode();
    1006:	0e 94 b2 07 	call	0xf64	; 0xf64 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    100a:	80 91 76 02 	lds	r24, 0x0276
    100e:	90 91 77 02 	lds	r25, 0x0277
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	90 93 77 02 	sts	0x0277, r25
    101a:	80 93 76 02 	sts	0x0276, r24
        tx_history |= 1;
    101e:	80 91 76 02 	lds	r24, 0x0276
    1022:	90 91 77 02 	lds	r25, 0x0277
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	90 93 77 02 	sts	0x0277, r25
    102c:	80 93 76 02 	sts	0x0276, r24
        tx_last_status = RADIO_TX_SUCCESS;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	80 93 78 02 	sts	0x0278, r24
    1036:	17 c0       	rjmp	.+46     	; 0x1066 <__vector_1+0xb8>
    } else if (status & _BV(MAX_RT)) {
    1038:	84 ff       	sbrs	r24, 4
    103a:	15 c0       	rjmp	.+42     	; 0x1066 <__vector_1+0xb8>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    103c:	81 ee       	ldi	r24, 0xE1	; 225
    103e:	0e 94 80 08 	call	0x1100	; 0x1100 <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    1042:	10 92 37 04 	sts	0x0437, r1
        _reset_pipe0_address();
    1046:	0e 94 d6 05 	call	0xbac	; 0xbac <_reset_pipe0_address>
        _set_rx_mode();
    104a:	0e 94 b2 07 	call	0xf64	; 0xf64 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    104e:	80 91 76 02 	lds	r24, 0x0276
    1052:	90 91 77 02 	lds	r25, 0x0277
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	90 93 77 02 	sts	0x0277, r25
    105e:	80 93 76 02 	sts	0x0276, r24
        tx_last_status = RADIO_TX_MAX_RT;
    1062:	10 92 78 02 	sts	0x0278, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1066:	80 e7       	ldi	r24, 0x70	; 112
    1068:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    106a:	87 e0       	ldi	r24, 0x07	; 7
    106c:	be 01       	movw	r22, r28
    106e:	6f 5f       	subi	r22, 0xFF	; 255
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 a9 05 	call	0xb52	; 0xb52 <_set_register>

    RADIO_CE_HIGH();
    1078:	2c 9a       	sbi	0x05, 4	; 5
}
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0b be       	out	0x3b, r0	; 59
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <SPI_Init>:
#define SPI_WAIT()              while (!(SPSR & _BV(SPIF)));

void SPI_Init()
{
	// set MOSI, SCK, and SS output, MISO input
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | ~(_BV(SPI_MISO));
    10a6:	84 b1       	in	r24, 0x04	; 4
    10a8:	87 6f       	ori	r24, 0xF7	; 247
    10aa:	84 b9       	out	0x04, r24	; 4

	SPI_PORT |= _BV(SPI_SS);
    10ac:	28 9a       	sbi	0x05, 0	; 5

	SPCR |= _BV(SPE) | _BV(MSTR);
    10ae:	8c b5       	in	r24, 0x2c	; 44
    10b0:	80 65       	ori	r24, 0x50	; 80
    10b2:	8c bd       	out	0x2c, r24	; 44
}
    10b4:	08 95       	ret

000010b6 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
    10bc:	db 01       	movw	r26, r22
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	0c c0       	rjmp	.+24     	; 0x10dc <SPI_ReadWrite_Block+0x26>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    10c4:	fe 01       	movw	r30, r28
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	80 81       	ld	r24, Z
    10cc:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    10ce:	0d b4       	in	r0, 0x2d	; 45
    10d0:	07 fe       	sbrs	r0, 7
    10d2:	fd cf       	rjmp	.-6      	; 0x10ce <SPI_ReadWrite_Block+0x18>
          buffer[i] = SPDR;
    10d4:	8e b5       	in	r24, 0x2e	; 46
    10d6:	8d 93       	st	X+, r24
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    10dc:	24 17       	cp	r18, r20
    10de:	90 f3       	brcs	.-28     	; 0x10c4 <SPI_ReadWrite_Block+0xe>
          SPDR = data[i];
          SPI_WAIT();
          buffer[i] = SPDR;
    }
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <SPI_Write_Block>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    10e6:	fc 01       	movw	r30, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <SPI_Write_Block+0x14>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    10ec:	80 81       	ld	r24, Z
    10ee:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    10f0:	0d b4       	in	r0, 0x2d	; 45
    10f2:	07 fe       	sbrs	r0, 7
    10f4:	fd cf       	rjmp	.-6      	; 0x10f0 <SPI_Write_Block+0xa>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    10f6:	9f 5f       	subi	r25, 0xFF	; 255
    10f8:	31 96       	adiw	r30, 0x01	; 1
    10fa:	96 17       	cp	r25, r22
    10fc:	b8 f3       	brcs	.-18     	; 0x10ec <SPI_Write_Block+0x6>
          SPDR = data[i];
          SPI_WAIT();
    }
}
    10fe:	08 95       	ret

00001100 <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    1100:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1102:	0d b4       	in	r0, 0x2d	; 45
    1104:	07 fe       	sbrs	r0, 7
    1106:	fd cf       	rjmp	.-6      	; 0x1102 <SPI_Write_Byte+0x2>
    return SPDR;
    1108:	8e b5       	in	r24, 0x2e	; 46
}
    110a:	08 95       	ret

0000110c <uart_putchar>:
*/
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
    110c:	98 2f       	mov	r25, r24
	cli();
    110e:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    1110:	80 91 c0 00 	lds	r24, 0x00C0
    1114:	85 ff       	sbrs	r24, 5
    1116:	fc cf       	rjmp	.-8      	; 0x1110 <uart_putchar+0x4>
	UDR0 = c;  // Putting data into the buffer, forces transmission
    1118:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    111c:	78 94       	sei
}
    111e:	08 95       	ret

00001120 <uart_getchar>:

char uart_getchar (int index)
{
    1120:	fc 01       	movw	r30, r24
	if (index < UART_BUFFER_SIZE) {
    1122:	84 36       	cpi	r24, 0x64	; 100
    1124:	91 05       	cpc	r25, r1
    1126:	14 f0       	brlt	.+4      	; 0x112c <uart_getchar+0xc>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	08 95       	ret
		return rx[index];
    112c:	ef 56       	subi	r30, 0x6F	; 111
    112e:	fc 4f       	sbci	r31, 0xFC	; 252
    1130:	80 81       	ld	r24, Z
	}
	return 0;
}
    1132:	08 95       	ret

00001134 <uart_putstr>:

void uart_putstr(char *s)
{
    1134:	fc 01       	movw	r30, r24
    1136:	09 c0       	rjmp	.+18     	; 0x114a <uart_putstr+0x16>
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
	cli();
    1138:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    113a:	80 91 c0 00 	lds	r24, 0x00C0
    113e:	85 ff       	sbrs	r24, 5
    1140:	fc cf       	rjmp	.-8      	; 0x113a <uart_putstr+0x6>
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    1142:	31 96       	adiw	r30, 0x01	; 1

void uart_putchar (char c)
{
	cli();
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
	UDR0 = c;  // Putting data into the buffer, forces transmission
    1144:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    1148:	78 94       	sei
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    114a:	90 81       	ld	r25, Z
    114c:	99 23       	and	r25, r25
    114e:	a1 f7       	brne	.-24     	; 0x1138 <uart_putstr+0x4>
	
}
    1150:	08 95       	ret

00001152 <uart_init>:

void uart_init(UART_BPS bitrate){
    1152:	98 2f       	mov	r25, r24

	DDRB = 0xff;
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xff;
    1158:	85 b9       	out	0x05, r24	; 5

	rxn = 0;
    115a:	10 92 90 03 	sts	0x0390, r1
    115e:	10 92 8f 03 	sts	0x038F, r1
	uart_rx = 0;
    1162:	10 92 fb 03 	sts	0x03FB, r1

	/* Set baud rate */
	UBRR0H = 0;
    1166:	10 92 c5 00 	sts	0x00C5, r1
	switch (bitrate) {
    116a:	99 23       	and	r25, r25
    116c:	11 f4       	brne	.+4      	; 0x1172 <uart_init+0x20>
    case UART_38400:
	    UBRR0L = 12;
    116e:	8c e0       	ldi	r24, 0x0C	; 12
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <uart_init+0x22>
		break;
    case UART_57600:
        UBRR0L = 6;
        break;
    default:
        UBRR0L = 6;
    1172:	86 e0       	ldi	r24, 0x06	; 6
    1174:	80 93 c4 00 	sts	0x00C4, r24
    }

	/* Enable receiver and transmitter */
	UCSR0B = _BV(RXEN0)|_BV(TXEN0) | _BV(RXCIE0);
    1178:	88 e9       	ldi	r24, 0x98	; 152
    117a:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(1<<UCSZ00) | _BV(UCSZ01);
    117e:	8e e0       	ldi	r24, 0x0E	; 14
    1180:	80 93 c2 00 	sts	0x00C2, r24
}
    1184:	08 95       	ret

00001186 <uart_bytes_recv>:

uint8_t uart_bytes_recv(void)
{
	return rxn;
    1186:	80 91 8f 03 	lds	r24, 0x038F
    118a:	90 91 90 03 	lds	r25, 0x0390
}
    118e:	08 95       	ret

00001190 <uart_reset_recv>:

void uart_reset_recv(void)
{
	rxn = 0;
    1190:	10 92 90 03 	sts	0x0390, r1
    1194:	10 92 8f 03 	sts	0x038F, r1
}
    1198:	08 95       	ret

0000119a <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	0b b6       	in	r0, 0x3b	; 59
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
    11be:	80 91 c0 00 	lds	r24, 0x00C0
    11c2:	87 ff       	sbrs	r24, 7
    11c4:	fc cf       	rjmp	.-8      	; 0x11be <__vector_25+0x24>

	//PORTB = ~_BV(PINB1);

	rx[rxn] = UDR0;
    11c6:	e0 91 8f 03 	lds	r30, 0x038F
    11ca:	f0 91 90 03 	lds	r31, 0x0390
    11ce:	80 91 c6 00 	lds	r24, 0x00C6
    11d2:	ef 56       	subi	r30, 0x6F	; 111
    11d4:	fc 4f       	sbci	r31, 0xFC	; 252
    11d6:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
    11d8:	80 91 8f 03 	lds	r24, 0x038F
    11dc:	90 91 90 03 	lds	r25, 0x0390
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	64 e6       	ldi	r22, 0x64	; 100
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	0e 94 34 10 	call	0x2068	; 0x2068 <__divmodhi4>
    11ea:	90 93 90 03 	sts	0x0390, r25
    11ee:	80 93 8f 03 	sts	0x038F, r24
	uart_rx = 1; // notify main of receipt of data.
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 fb 03 	sts	0x03FB, r24
	//PORTB = PORTB | _BV(PINB1);
}
    11f8:	ff 91       	pop	r31
    11fa:	ef 91       	pop	r30
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0b be       	out	0x3b, r0	; 59
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <sonar_init>:
uint16_t _get_TCNT3();

void sonar_init()
{
	// set PE6 for output
	DDRE |= _BV(PORTE6);
    121c:	6e 9a       	sbi	0x0d, 6	; 13

	// set timer3 to run 1/8 of the microprocessor's clock frequency
	TCCR3B &= ~_BV(CS30);
    121e:	e1 e9       	ldi	r30, 0x91	; 145
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8e 7f       	andi	r24, 0xFE	; 254
    1226:	80 83       	st	Z, r24
	TCCR3B |= _BV(CS31);
    1228:	80 81       	ld	r24, Z
    122a:	82 60       	ori	r24, 0x02	; 2
    122c:	80 83       	st	Z, r24
	TCCR3B &= ~_BV(CS32);
    122e:	80 81       	ld	r24, Z
    1230:	8b 7f       	andi	r24, 0xFB	; 251
    1232:	80 83       	st	Z, r24

	// enable noise canceler for input capture
	TCCR3B |= _BV(ICNC3);
    1234:	80 81       	ld	r24, Z
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	80 83       	st	Z, r24

	// set input capture on rising edge
	TCCR3B |= _BV(ICES3);
    123a:	80 81       	ld	r24, Z
    123c:	80 64       	ori	r24, 0x40	; 64
    123e:	80 83       	st	Z, r24

	// clear input capture flag
	TIFR3 |= _BV(ICF3);
    1240:	c5 9a       	sbi	0x18, 5	; 24

	// enable input capture interrupt
	TIMSK3 |= _BV(ICIE3);
    1242:	e1 e7       	ldi	r30, 0x71	; 113
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	80 62       	ori	r24, 0x20	; 32
    124a:	80 83       	st	Z, r24

	sei();
    124c:	78 94       	sei
}
    124e:	08 95       	ret

00001250 <sonar_trigger>:

void sonar_trigger()
{
	// trigger a 10 us pulse
	PORTE |= _BV(PE6);
    1250:	76 9a       	sbi	0x0e, 6	; 14
    1252:	8a e1       	ldi	r24, 0x1A	; 26
    1254:	8a 95       	dec	r24
    1256:	f1 f7       	brne	.-4      	; 0x1254 <sonar_trigger+0x4>
	_delay_us(10);
	PORTE &= ~_BV(PE6);
    1258:	76 98       	cbi	0x0e, 6	; 14
}
    125a:	08 95       	ret

0000125c <sonar_echo_received>:

uint8_t sonar_echo_received()
{
	char sreg = SREG;
    125c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    125e:	f8 94       	cli
	uint8_t temp = received;
    1260:	80 91 f7 03 	lds	r24, 0x03F7
	received = 0;
    1264:	10 92 f7 03 	sts	0x03F7, r1
	SREG = sreg;
    1268:	9f bf       	out	0x3f, r25	; 63
	return temp;
}
    126a:	08 95       	ret

0000126c <sonar_get_distance>:

uint16_t sonar_get_distance()
{
	return trigger_time - echo_time;
    126c:	20 91 f8 03 	lds	r18, 0x03F8
    1270:	30 91 f9 03 	lds	r19, 0x03F9
    1274:	80 91 f5 03 	lds	r24, 0x03F5
    1278:	90 91 f6 03 	lds	r25, 0x03F6
    127c:	28 1b       	sub	r18, r24
    127e:	39 0b       	sbc	r19, r25
}
    1280:	c9 01       	movw	r24, r18
    1282:	08 95       	ret

00001284 <sonar_get_ping_time>:

uint16_t sonar_get_ping_time()
{
	return trigger_time;
    1284:	20 91 f8 03 	lds	r18, 0x03F8
    1288:	30 91 f9 03 	lds	r19, 0x03F9
}
    128c:	c9 01       	movw	r24, r18
    128e:	08 95       	ret

00001290 <sonar_get_sonar_time>:

uint16_t sonar_get_sonar_time()
{
	return echo_time;
    1290:	20 91 f5 03 	lds	r18, 0x03F5
    1294:	30 91 f6 03 	lds	r19, 0x03F6
}
    1298:	c9 01       	movw	r24, r18
    129a:	08 95       	ret

0000129c <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
	if (TCCR3B & _BV(ICES3)) { // a rising edge is captured
    12aa:	80 91 91 00 	lds	r24, 0x0091
    12ae:	86 ff       	sbrs	r24, 6
    12b0:	10 c0       	rjmp	.+32     	; 0x12d2 <__vector_31+0x36>

		echo_time = ICR3;
    12b2:	80 91 96 00 	lds	r24, 0x0096
    12b6:	90 91 97 00 	lds	r25, 0x0097
    12ba:	90 93 f6 03 	sts	0x03F6, r25
    12be:	80 93 f5 03 	sts	0x03F5, r24

		TCNT3 = 0;
    12c2:	10 92 95 00 	sts	0x0095, r1
    12c6:	10 92 94 00 	sts	0x0094, r1

		// set input capture on falling edge
		TCCR3B &= ~_BV(ICES3);
    12ca:	80 91 91 00 	lds	r24, 0x0091
    12ce:	8f 7b       	andi	r24, 0xBF	; 191
    12d0:	0e c0       	rjmp	.+28     	; 0x12ee <__vector_31+0x52>

		// clear input capture flag
		TIFR3 |= _BV(ICF3);

	} else { // a falling edge is captured
		received = 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 93 f7 03 	sts	0x03F7, r24
		trigger_time = ICR3;
    12d8:	80 91 96 00 	lds	r24, 0x0096
    12dc:	90 91 97 00 	lds	r25, 0x0097
    12e0:	90 93 f9 03 	sts	0x03F9, r25
    12e4:	80 93 f8 03 	sts	0x03F8, r24
		// echo_time = trigger_time;

		// set input capture on rising edge
		TCCR3B |= _BV(ICES3);
    12e8:	80 91 91 00 	lds	r24, 0x0091
    12ec:	80 64       	ori	r24, 0x40	; 64
    12ee:	80 93 91 00 	sts	0x0091, r24

		// clear input capture flag
		TIFR3 |= _BV(ICF3);
    12f2:	c5 9a       	sbi	0x18, 5	; 24
	}
}
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__fixunssfsi>:
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	7b 01       	movw	r14, r22
    130c:	8c 01       	movw	r16, r24
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	5f e4       	ldi	r21, 0x4F	; 79
    1316:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__gesf2>
    131a:	88 23       	and	r24, r24
    131c:	8c f0       	brlt	.+34     	; 0x1340 <__fixunssfsi+0x3e>
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	5f e4       	ldi	r21, 0x4F	; 79
    132a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__subsf3>
    132e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fixsfsi>
    1332:	9b 01       	movw	r18, r22
    1334:	ac 01       	movw	r20, r24
    1336:	20 50       	subi	r18, 0x00	; 0
    1338:	30 40       	sbci	r19, 0x00	; 0
    133a:	40 40       	sbci	r20, 0x00	; 0
    133c:	50 48       	sbci	r21, 0x80	; 128
    133e:	06 c0       	rjmp	.+12     	; 0x134c <__fixunssfsi+0x4a>
    1340:	c8 01       	movw	r24, r16
    1342:	b7 01       	movw	r22, r14
    1344:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__fixsfsi>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	b9 01       	movw	r22, r18
    134e:	ca 01       	movw	r24, r20
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	08 95       	ret

0000135a <_fpadd_parts>:
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e3 eb       	ldi	r30, 0xB3	; 179
    1360:	f9 e0       	ldi	r31, 0x09	; 9
    1362:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__>
    1366:	dc 01       	movw	r26, r24
    1368:	2b 01       	movw	r4, r22
    136a:	fa 01       	movw	r30, r20
    136c:	9c 91       	ld	r25, X
    136e:	92 30       	cpi	r25, 0x02	; 2
    1370:	08 f4       	brcc	.+2      	; 0x1374 <_fpadd_parts+0x1a>
    1372:	39 c1       	rjmp	.+626    	; 0x15e6 <_fpadd_parts+0x28c>
    1374:	eb 01       	movw	r28, r22
    1376:	88 81       	ld	r24, Y
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	08 f4       	brcc	.+2      	; 0x137e <_fpadd_parts+0x24>
    137c:	33 c1       	rjmp	.+614    	; 0x15e4 <_fpadd_parts+0x28a>
    137e:	94 30       	cpi	r25, 0x04	; 4
    1380:	69 f4       	brne	.+26     	; 0x139c <_fpadd_parts+0x42>
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	09 f0       	breq	.+2      	; 0x1388 <_fpadd_parts+0x2e>
    1386:	2f c1       	rjmp	.+606    	; 0x15e6 <_fpadd_parts+0x28c>
    1388:	11 96       	adiw	r26, 0x01	; 1
    138a:	9c 91       	ld	r25, X
    138c:	11 97       	sbiw	r26, 0x01	; 1
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	98 17       	cp	r25, r24
    1392:	09 f4       	brne	.+2      	; 0x1396 <_fpadd_parts+0x3c>
    1394:	28 c1       	rjmp	.+592    	; 0x15e6 <_fpadd_parts+0x28c>
    1396:	a9 e7       	ldi	r26, 0x79	; 121
    1398:	b2 e0       	ldi	r27, 0x02	; 2
    139a:	25 c1       	rjmp	.+586    	; 0x15e6 <_fpadd_parts+0x28c>
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	09 f4       	brne	.+2      	; 0x13a2 <_fpadd_parts+0x48>
    13a0:	21 c1       	rjmp	.+578    	; 0x15e4 <_fpadd_parts+0x28a>
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	a9 f4       	brne	.+42     	; 0x13d0 <_fpadd_parts+0x76>
    13a6:	92 30       	cpi	r25, 0x02	; 2
    13a8:	09 f0       	breq	.+2      	; 0x13ac <_fpadd_parts+0x52>
    13aa:	1d c1       	rjmp	.+570    	; 0x15e6 <_fpadd_parts+0x28c>
    13ac:	9a 01       	movw	r18, r20
    13ae:	ad 01       	movw	r20, r26
    13b0:	88 e0       	ldi	r24, 0x08	; 8
    13b2:	ea 01       	movw	r28, r20
    13b4:	09 90       	ld	r0, Y+
    13b6:	ae 01       	movw	r20, r28
    13b8:	e9 01       	movw	r28, r18
    13ba:	09 92       	st	Y+, r0
    13bc:	9e 01       	movw	r18, r28
    13be:	81 50       	subi	r24, 0x01	; 1
    13c0:	c1 f7       	brne	.-16     	; 0x13b2 <_fpadd_parts+0x58>
    13c2:	e2 01       	movw	r28, r4
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	11 96       	adiw	r26, 0x01	; 1
    13c8:	9c 91       	ld	r25, X
    13ca:	89 23       	and	r24, r25
    13cc:	81 83       	std	Z+1, r24	; 0x01
    13ce:	08 c1       	rjmp	.+528    	; 0x15e0 <_fpadd_parts+0x286>
    13d0:	92 30       	cpi	r25, 0x02	; 2
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <_fpadd_parts+0x7c>
    13d4:	07 c1       	rjmp	.+526    	; 0x15e4 <_fpadd_parts+0x28a>
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	2d 90       	ld	r2, X+
    13da:	3c 90       	ld	r3, X
    13dc:	13 97       	sbiw	r26, 0x03	; 3
    13de:	eb 01       	movw	r28, r22
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	9b 81       	ldd	r25, Y+3	; 0x03
    13e4:	14 96       	adiw	r26, 0x04	; 4
    13e6:	ad 90       	ld	r10, X+
    13e8:	bd 90       	ld	r11, X+
    13ea:	cd 90       	ld	r12, X+
    13ec:	dc 90       	ld	r13, X
    13ee:	17 97       	sbiw	r26, 0x07	; 7
    13f0:	ec 80       	ldd	r14, Y+4	; 0x04
    13f2:	fd 80       	ldd	r15, Y+5	; 0x05
    13f4:	0e 81       	ldd	r16, Y+6	; 0x06
    13f6:	1f 81       	ldd	r17, Y+7	; 0x07
    13f8:	91 01       	movw	r18, r2
    13fa:	28 1b       	sub	r18, r24
    13fc:	39 0b       	sbc	r19, r25
    13fe:	b9 01       	movw	r22, r18
    1400:	37 ff       	sbrs	r19, 7
    1402:	04 c0       	rjmp	.+8      	; 0x140c <_fpadd_parts+0xb2>
    1404:	66 27       	eor	r22, r22
    1406:	77 27       	eor	r23, r23
    1408:	62 1b       	sub	r22, r18
    140a:	73 0b       	sbc	r23, r19
    140c:	60 32       	cpi	r22, 0x20	; 32
    140e:	71 05       	cpc	r23, r1
    1410:	0c f0       	brlt	.+2      	; 0x1414 <_fpadd_parts+0xba>
    1412:	61 c0       	rjmp	.+194    	; 0x14d6 <_fpadd_parts+0x17c>
    1414:	12 16       	cp	r1, r18
    1416:	13 06       	cpc	r1, r19
    1418:	6c f5       	brge	.+90     	; 0x1474 <_fpadd_parts+0x11a>
    141a:	37 01       	movw	r6, r14
    141c:	48 01       	movw	r8, r16
    141e:	06 2e       	mov	r0, r22
    1420:	04 c0       	rjmp	.+8      	; 0x142a <_fpadd_parts+0xd0>
    1422:	96 94       	lsr	r9
    1424:	87 94       	ror	r8
    1426:	77 94       	ror	r7
    1428:	67 94       	ror	r6
    142a:	0a 94       	dec	r0
    142c:	d2 f7       	brpl	.-12     	; 0x1422 <_fpadd_parts+0xc8>
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <_fpadd_parts+0xe6>
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	44 1f       	adc	r20, r20
    143e:	55 1f       	adc	r21, r21
    1440:	6a 95       	dec	r22
    1442:	d2 f7       	brpl	.-12     	; 0x1438 <_fpadd_parts+0xde>
    1444:	21 50       	subi	r18, 0x01	; 1
    1446:	30 40       	sbci	r19, 0x00	; 0
    1448:	40 40       	sbci	r20, 0x00	; 0
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	2e 21       	and	r18, r14
    144e:	3f 21       	and	r19, r15
    1450:	40 23       	and	r20, r16
    1452:	51 23       	and	r21, r17
    1454:	21 15       	cp	r18, r1
    1456:	31 05       	cpc	r19, r1
    1458:	41 05       	cpc	r20, r1
    145a:	51 05       	cpc	r21, r1
    145c:	21 f0       	breq	.+8      	; 0x1466 <_fpadd_parts+0x10c>
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	79 01       	movw	r14, r18
    1468:	8a 01       	movw	r16, r20
    146a:	e6 28       	or	r14, r6
    146c:	f7 28       	or	r15, r7
    146e:	08 29       	or	r16, r8
    1470:	19 29       	or	r17, r9
    1472:	3c c0       	rjmp	.+120    	; 0x14ec <_fpadd_parts+0x192>
    1474:	23 2b       	or	r18, r19
    1476:	d1 f1       	breq	.+116    	; 0x14ec <_fpadd_parts+0x192>
    1478:	26 0e       	add	r2, r22
    147a:	37 1e       	adc	r3, r23
    147c:	35 01       	movw	r6, r10
    147e:	46 01       	movw	r8, r12
    1480:	06 2e       	mov	r0, r22
    1482:	04 c0       	rjmp	.+8      	; 0x148c <_fpadd_parts+0x132>
    1484:	96 94       	lsr	r9
    1486:	87 94       	ror	r8
    1488:	77 94       	ror	r7
    148a:	67 94       	ror	r6
    148c:	0a 94       	dec	r0
    148e:	d2 f7       	brpl	.-12     	; 0x1484 <_fpadd_parts+0x12a>
    1490:	21 e0       	ldi	r18, 0x01	; 1
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <_fpadd_parts+0x148>
    149a:	22 0f       	add	r18, r18
    149c:	33 1f       	adc	r19, r19
    149e:	44 1f       	adc	r20, r20
    14a0:	55 1f       	adc	r21, r21
    14a2:	6a 95       	dec	r22
    14a4:	d2 f7       	brpl	.-12     	; 0x149a <_fpadd_parts+0x140>
    14a6:	21 50       	subi	r18, 0x01	; 1
    14a8:	30 40       	sbci	r19, 0x00	; 0
    14aa:	40 40       	sbci	r20, 0x00	; 0
    14ac:	50 40       	sbci	r21, 0x00	; 0
    14ae:	2a 21       	and	r18, r10
    14b0:	3b 21       	and	r19, r11
    14b2:	4c 21       	and	r20, r12
    14b4:	5d 21       	and	r21, r13
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	41 05       	cpc	r20, r1
    14bc:	51 05       	cpc	r21, r1
    14be:	21 f0       	breq	.+8      	; 0x14c8 <_fpadd_parts+0x16e>
    14c0:	21 e0       	ldi	r18, 0x01	; 1
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	59 01       	movw	r10, r18
    14ca:	6a 01       	movw	r12, r20
    14cc:	a6 28       	or	r10, r6
    14ce:	b7 28       	or	r11, r7
    14d0:	c8 28       	or	r12, r8
    14d2:	d9 28       	or	r13, r9
    14d4:	0b c0       	rjmp	.+22     	; 0x14ec <_fpadd_parts+0x192>
    14d6:	82 15       	cp	r24, r2
    14d8:	93 05       	cpc	r25, r3
    14da:	2c f0       	brlt	.+10     	; 0x14e6 <_fpadd_parts+0x18c>
    14dc:	1c 01       	movw	r2, r24
    14de:	aa 24       	eor	r10, r10
    14e0:	bb 24       	eor	r11, r11
    14e2:	65 01       	movw	r12, r10
    14e4:	03 c0       	rjmp	.+6      	; 0x14ec <_fpadd_parts+0x192>
    14e6:	ee 24       	eor	r14, r14
    14e8:	ff 24       	eor	r15, r15
    14ea:	87 01       	movw	r16, r14
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	9c 91       	ld	r25, X
    14f0:	d2 01       	movw	r26, r4
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	8c 91       	ld	r24, X
    14f6:	98 17       	cp	r25, r24
    14f8:	09 f4       	brne	.+2      	; 0x14fc <_fpadd_parts+0x1a2>
    14fa:	45 c0       	rjmp	.+138    	; 0x1586 <_fpadd_parts+0x22c>
    14fc:	99 23       	and	r25, r25
    14fe:	39 f0       	breq	.+14     	; 0x150e <_fpadd_parts+0x1b4>
    1500:	a8 01       	movw	r20, r16
    1502:	97 01       	movw	r18, r14
    1504:	2a 19       	sub	r18, r10
    1506:	3b 09       	sbc	r19, r11
    1508:	4c 09       	sbc	r20, r12
    150a:	5d 09       	sbc	r21, r13
    150c:	06 c0       	rjmp	.+12     	; 0x151a <_fpadd_parts+0x1c0>
    150e:	a6 01       	movw	r20, r12
    1510:	95 01       	movw	r18, r10
    1512:	2e 19       	sub	r18, r14
    1514:	3f 09       	sbc	r19, r15
    1516:	40 0b       	sbc	r20, r16
    1518:	51 0b       	sbc	r21, r17
    151a:	57 fd       	sbrc	r21, 7
    151c:	08 c0       	rjmp	.+16     	; 0x152e <_fpadd_parts+0x1d4>
    151e:	11 82       	std	Z+1, r1	; 0x01
    1520:	33 82       	std	Z+3, r3	; 0x03
    1522:	22 82       	std	Z+2, r2	; 0x02
    1524:	24 83       	std	Z+4, r18	; 0x04
    1526:	35 83       	std	Z+5, r19	; 0x05
    1528:	46 83       	std	Z+6, r20	; 0x06
    152a:	57 83       	std	Z+7, r21	; 0x07
    152c:	1d c0       	rjmp	.+58     	; 0x1568 <_fpadd_parts+0x20e>
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	81 83       	std	Z+1, r24	; 0x01
    1532:	33 82       	std	Z+3, r3	; 0x03
    1534:	22 82       	std	Z+2, r2	; 0x02
    1536:	88 27       	eor	r24, r24
    1538:	99 27       	eor	r25, r25
    153a:	dc 01       	movw	r26, r24
    153c:	82 1b       	sub	r24, r18
    153e:	93 0b       	sbc	r25, r19
    1540:	a4 0b       	sbc	r26, r20
    1542:	b5 0b       	sbc	r27, r21
    1544:	84 83       	std	Z+4, r24	; 0x04
    1546:	95 83       	std	Z+5, r25	; 0x05
    1548:	a6 83       	std	Z+6, r26	; 0x06
    154a:	b7 83       	std	Z+7, r27	; 0x07
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <_fpadd_parts+0x20e>
    154e:	22 0f       	add	r18, r18
    1550:	33 1f       	adc	r19, r19
    1552:	44 1f       	adc	r20, r20
    1554:	55 1f       	adc	r21, r21
    1556:	24 83       	std	Z+4, r18	; 0x04
    1558:	35 83       	std	Z+5, r19	; 0x05
    155a:	46 83       	std	Z+6, r20	; 0x06
    155c:	57 83       	std	Z+7, r21	; 0x07
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	93 83       	std	Z+3, r25	; 0x03
    1566:	82 83       	std	Z+2, r24	; 0x02
    1568:	24 81       	ldd	r18, Z+4	; 0x04
    156a:	35 81       	ldd	r19, Z+5	; 0x05
    156c:	46 81       	ldd	r20, Z+6	; 0x06
    156e:	57 81       	ldd	r21, Z+7	; 0x07
    1570:	da 01       	movw	r26, r20
    1572:	c9 01       	movw	r24, r18
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	a1 09       	sbc	r26, r1
    1578:	b1 09       	sbc	r27, r1
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	af 4f       	sbci	r26, 0xFF	; 255
    1580:	bf 43       	sbci	r27, 0x3F	; 63
    1582:	28 f3       	brcs	.-54     	; 0x154e <_fpadd_parts+0x1f4>
    1584:	0b c0       	rjmp	.+22     	; 0x159c <_fpadd_parts+0x242>
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	33 82       	std	Z+3, r3	; 0x03
    158a:	22 82       	std	Z+2, r2	; 0x02
    158c:	ea 0c       	add	r14, r10
    158e:	fb 1c       	adc	r15, r11
    1590:	0c 1d       	adc	r16, r12
    1592:	1d 1d       	adc	r17, r13
    1594:	e4 82       	std	Z+4, r14	; 0x04
    1596:	f5 82       	std	Z+5, r15	; 0x05
    1598:	06 83       	std	Z+6, r16	; 0x06
    159a:	17 83       	std	Z+7, r17	; 0x07
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	80 83       	st	Z, r24
    15a0:	24 81       	ldd	r18, Z+4	; 0x04
    15a2:	35 81       	ldd	r19, Z+5	; 0x05
    15a4:	46 81       	ldd	r20, Z+6	; 0x06
    15a6:	57 81       	ldd	r21, Z+7	; 0x07
    15a8:	57 ff       	sbrs	r21, 7
    15aa:	1a c0       	rjmp	.+52     	; 0x15e0 <_fpadd_parts+0x286>
    15ac:	c9 01       	movw	r24, r18
    15ae:	aa 27       	eor	r26, r26
    15b0:	97 fd       	sbrc	r25, 7
    15b2:	a0 95       	com	r26
    15b4:	ba 2f       	mov	r27, r26
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	a0 70       	andi	r26, 0x00	; 0
    15bc:	b0 70       	andi	r27, 0x00	; 0
    15be:	56 95       	lsr	r21
    15c0:	47 95       	ror	r20
    15c2:	37 95       	ror	r19
    15c4:	27 95       	ror	r18
    15c6:	82 2b       	or	r24, r18
    15c8:	93 2b       	or	r25, r19
    15ca:	a4 2b       	or	r26, r20
    15cc:	b5 2b       	or	r27, r21
    15ce:	84 83       	std	Z+4, r24	; 0x04
    15d0:	95 83       	std	Z+5, r25	; 0x05
    15d2:	a6 83       	std	Z+6, r26	; 0x06
    15d4:	b7 83       	std	Z+7, r27	; 0x07
    15d6:	82 81       	ldd	r24, Z+2	; 0x02
    15d8:	93 81       	ldd	r25, Z+3	; 0x03
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	93 83       	std	Z+3, r25	; 0x03
    15de:	82 83       	std	Z+2, r24	; 0x02
    15e0:	df 01       	movw	r26, r30
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <_fpadd_parts+0x28c>
    15e4:	d2 01       	movw	r26, r4
    15e6:	cd 01       	movw	r24, r26
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	e2 e1       	ldi	r30, 0x12	; 18
    15ee:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__>

000015f2 <__subsf3>:
    15f2:	a0 e2       	ldi	r26, 0x20	; 32
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ef ef       	ldi	r30, 0xFF	; 255
    15f8:	fa e0       	ldi	r31, 0x0A	; 10
    15fa:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    15fe:	69 83       	std	Y+1, r22	; 0x01
    1600:	7a 83       	std	Y+2, r23	; 0x02
    1602:	8b 83       	std	Y+3, r24	; 0x03
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	3e 83       	std	Y+6, r19	; 0x06
    160a:	4f 83       	std	Y+7, r20	; 0x07
    160c:	58 87       	std	Y+8, r21	; 0x08
    160e:	e9 e0       	ldi	r30, 0x09	; 9
    1610:	ee 2e       	mov	r14, r30
    1612:	f1 2c       	mov	r15, r1
    1614:	ec 0e       	add	r14, r28
    1616:	fd 1e       	adc	r15, r29
    1618:	ce 01       	movw	r24, r28
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	b7 01       	movw	r22, r14
    161e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1622:	8e 01       	movw	r16, r28
    1624:	0f 5e       	subi	r16, 0xEF	; 239
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	ce 01       	movw	r24, r28
    162a:	05 96       	adiw	r24, 0x05	; 5
    162c:	b8 01       	movw	r22, r16
    162e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1632:	8a 89       	ldd	r24, Y+18	; 0x12
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	89 27       	eor	r24, r25
    1638:	8a 8b       	std	Y+18, r24	; 0x12
    163a:	c7 01       	movw	r24, r14
    163c:	b8 01       	movw	r22, r16
    163e:	ae 01       	movw	r20, r28
    1640:	47 5e       	subi	r20, 0xE7	; 231
    1642:	5f 4f       	sbci	r21, 0xFF	; 255
    1644:	0e 94 ad 09 	call	0x135a	; 0x135a <_fpadd_parts>
    1648:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__pack_f>
    164c:	a0 96       	adiw	r28, 0x20	; 32
    164e:	e6 e0       	ldi	r30, 0x06	; 6
    1650:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001654 <__addsf3>:
    1654:	a0 e2       	ldi	r26, 0x20	; 32
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	fb e0       	ldi	r31, 0x0B	; 11
    165c:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1660:	69 83       	std	Y+1, r22	; 0x01
    1662:	7a 83       	std	Y+2, r23	; 0x02
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	2d 83       	std	Y+5, r18	; 0x05
    166a:	3e 83       	std	Y+6, r19	; 0x06
    166c:	4f 83       	std	Y+7, r20	; 0x07
    166e:	58 87       	std	Y+8, r21	; 0x08
    1670:	f9 e0       	ldi	r31, 0x09	; 9
    1672:	ef 2e       	mov	r14, r31
    1674:	f1 2c       	mov	r15, r1
    1676:	ec 0e       	add	r14, r28
    1678:	fd 1e       	adc	r15, r29
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	b7 01       	movw	r22, r14
    1680:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1684:	8e 01       	movw	r16, r28
    1686:	0f 5e       	subi	r16, 0xEF	; 239
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	ce 01       	movw	r24, r28
    168c:	05 96       	adiw	r24, 0x05	; 5
    168e:	b8 01       	movw	r22, r16
    1690:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1694:	c7 01       	movw	r24, r14
    1696:	b8 01       	movw	r22, r16
    1698:	ae 01       	movw	r20, r28
    169a:	47 5e       	subi	r20, 0xE7	; 231
    169c:	5f 4f       	sbci	r21, 0xFF	; 255
    169e:	0e 94 ad 09 	call	0x135a	; 0x135a <_fpadd_parts>
    16a2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__pack_f>
    16a6:	a0 96       	adiw	r28, 0x20	; 32
    16a8:	e6 e0       	ldi	r30, 0x06	; 6
    16aa:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

000016ae <__mulsf3>:
    16ae:	a0 e2       	ldi	r26, 0x20	; 32
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ed e5       	ldi	r30, 0x5D	; 93
    16b4:	fb e0       	ldi	r31, 0x0B	; 11
    16b6:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__>
    16ba:	69 83       	std	Y+1, r22	; 0x01
    16bc:	7a 83       	std	Y+2, r23	; 0x02
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	2d 83       	std	Y+5, r18	; 0x05
    16c4:	3e 83       	std	Y+6, r19	; 0x06
    16c6:	4f 83       	std	Y+7, r20	; 0x07
    16c8:	58 87       	std	Y+8, r21	; 0x08
    16ca:	ce 01       	movw	r24, r28
    16cc:	01 96       	adiw	r24, 0x01	; 1
    16ce:	be 01       	movw	r22, r28
    16d0:	67 5f       	subi	r22, 0xF7	; 247
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    16d8:	ce 01       	movw	r24, r28
    16da:	05 96       	adiw	r24, 0x05	; 5
    16dc:	be 01       	movw	r22, r28
    16de:	6f 5e       	subi	r22, 0xEF	; 239
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    16e6:	99 85       	ldd	r25, Y+9	; 0x09
    16e8:	92 30       	cpi	r25, 0x02	; 2
    16ea:	88 f0       	brcs	.+34     	; 0x170e <__mulsf3+0x60>
    16ec:	89 89       	ldd	r24, Y+17	; 0x11
    16ee:	82 30       	cpi	r24, 0x02	; 2
    16f0:	c8 f0       	brcs	.+50     	; 0x1724 <__mulsf3+0x76>
    16f2:	94 30       	cpi	r25, 0x04	; 4
    16f4:	19 f4       	brne	.+6      	; 0x16fc <__mulsf3+0x4e>
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	51 f4       	brne	.+20     	; 0x170e <__mulsf3+0x60>
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <__mulsf3+0x56>
    16fc:	84 30       	cpi	r24, 0x04	; 4
    16fe:	29 f4       	brne	.+10     	; 0x170a <__mulsf3+0x5c>
    1700:	92 30       	cpi	r25, 0x02	; 2
    1702:	81 f4       	brne	.+32     	; 0x1724 <__mulsf3+0x76>
    1704:	89 e7       	ldi	r24, 0x79	; 121
    1706:	92 e0       	ldi	r25, 0x02	; 2
    1708:	c6 c0       	rjmp	.+396    	; 0x1896 <__mulsf3+0x1e8>
    170a:	92 30       	cpi	r25, 0x02	; 2
    170c:	49 f4       	brne	.+18     	; 0x1720 <__mulsf3+0x72>
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	8a 89       	ldd	r24, Y+18	; 0x12
    1714:	98 13       	cpse	r25, r24
    1716:	21 e0       	ldi	r18, 0x01	; 1
    1718:	2a 87       	std	Y+10, r18	; 0x0a
    171a:	ce 01       	movw	r24, r28
    171c:	09 96       	adiw	r24, 0x09	; 9
    171e:	bb c0       	rjmp	.+374    	; 0x1896 <__mulsf3+0x1e8>
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	49 f4       	brne	.+18     	; 0x1736 <__mulsf3+0x88>
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	9a 85       	ldd	r25, Y+10	; 0x0a
    1728:	8a 89       	ldd	r24, Y+18	; 0x12
    172a:	98 13       	cpse	r25, r24
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	2a 8b       	std	Y+18, r18	; 0x12
    1730:	ce 01       	movw	r24, r28
    1732:	41 96       	adiw	r24, 0x11	; 17
    1734:	b0 c0       	rjmp	.+352    	; 0x1896 <__mulsf3+0x1e8>
    1736:	2d 84       	ldd	r2, Y+13	; 0x0d
    1738:	3e 84       	ldd	r3, Y+14	; 0x0e
    173a:	4f 84       	ldd	r4, Y+15	; 0x0f
    173c:	58 88       	ldd	r5, Y+16	; 0x10
    173e:	6d 88       	ldd	r6, Y+21	; 0x15
    1740:	7e 88       	ldd	r7, Y+22	; 0x16
    1742:	8f 88       	ldd	r8, Y+23	; 0x17
    1744:	98 8c       	ldd	r9, Y+24	; 0x18
    1746:	ee 24       	eor	r14, r14
    1748:	ff 24       	eor	r15, r15
    174a:	87 01       	movw	r16, r14
    174c:	aa 24       	eor	r10, r10
    174e:	bb 24       	eor	r11, r11
    1750:	65 01       	movw	r12, r10
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	e0 e0       	ldi	r30, 0x00	; 0
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	c1 01       	movw	r24, r2
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	90 70       	andi	r25, 0x00	; 0
    1764:	89 2b       	or	r24, r25
    1766:	e9 f0       	breq	.+58     	; 0x17a2 <__mulsf3+0xf4>
    1768:	e6 0c       	add	r14, r6
    176a:	f7 1c       	adc	r15, r7
    176c:	08 1d       	adc	r16, r8
    176e:	19 1d       	adc	r17, r9
    1770:	9a 01       	movw	r18, r20
    1772:	ab 01       	movw	r20, r22
    1774:	2a 0d       	add	r18, r10
    1776:	3b 1d       	adc	r19, r11
    1778:	4c 1d       	adc	r20, r12
    177a:	5d 1d       	adc	r21, r13
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 e0       	ldi	r26, 0x00	; 0
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 14       	cp	r14, r6
    1786:	f7 04       	cpc	r15, r7
    1788:	08 05       	cpc	r16, r8
    178a:	19 05       	cpc	r17, r9
    178c:	20 f4       	brcc	.+8      	; 0x1796 <__mulsf3+0xe8>
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ba 01       	movw	r22, r20
    1798:	a9 01       	movw	r20, r18
    179a:	48 0f       	add	r20, r24
    179c:	59 1f       	adc	r21, r25
    179e:	6a 1f       	adc	r22, r26
    17a0:	7b 1f       	adc	r23, r27
    17a2:	aa 0c       	add	r10, r10
    17a4:	bb 1c       	adc	r11, r11
    17a6:	cc 1c       	adc	r12, r12
    17a8:	dd 1c       	adc	r13, r13
    17aa:	97 fe       	sbrs	r9, 7
    17ac:	08 c0       	rjmp	.+16     	; 0x17be <__mulsf3+0x110>
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	a8 2a       	or	r10, r24
    17b8:	b9 2a       	or	r11, r25
    17ba:	ca 2a       	or	r12, r26
    17bc:	db 2a       	or	r13, r27
    17be:	31 96       	adiw	r30, 0x01	; 1
    17c0:	e0 32       	cpi	r30, 0x20	; 32
    17c2:	f1 05       	cpc	r31, r1
    17c4:	49 f0       	breq	.+18     	; 0x17d8 <__mulsf3+0x12a>
    17c6:	66 0c       	add	r6, r6
    17c8:	77 1c       	adc	r7, r7
    17ca:	88 1c       	adc	r8, r8
    17cc:	99 1c       	adc	r9, r9
    17ce:	56 94       	lsr	r5
    17d0:	47 94       	ror	r4
    17d2:	37 94       	ror	r3
    17d4:	27 94       	ror	r2
    17d6:	c3 cf       	rjmp	.-122    	; 0x175e <__mulsf3+0xb0>
    17d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    17da:	ea 89       	ldd	r30, Y+18	; 0x12
    17dc:	2b 89       	ldd	r18, Y+19	; 0x13
    17de:	3c 89       	ldd	r19, Y+20	; 0x14
    17e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e4:	28 0f       	add	r18, r24
    17e6:	39 1f       	adc	r19, r25
    17e8:	2e 5f       	subi	r18, 0xFE	; 254
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	17 c0       	rjmp	.+46     	; 0x181c <__mulsf3+0x16e>
    17ee:	ca 01       	movw	r24, r20
    17f0:	81 70       	andi	r24, 0x01	; 1
    17f2:	90 70       	andi	r25, 0x00	; 0
    17f4:	89 2b       	or	r24, r25
    17f6:	61 f0       	breq	.+24     	; 0x1810 <__mulsf3+0x162>
    17f8:	16 95       	lsr	r17
    17fa:	07 95       	ror	r16
    17fc:	f7 94       	ror	r15
    17fe:	e7 94       	ror	r14
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 e0       	ldi	r26, 0x00	; 0
    1806:	b0 e8       	ldi	r27, 0x80	; 128
    1808:	e8 2a       	or	r14, r24
    180a:	f9 2a       	or	r15, r25
    180c:	0a 2b       	or	r16, r26
    180e:	1b 2b       	or	r17, r27
    1810:	76 95       	lsr	r23
    1812:	67 95       	ror	r22
    1814:	57 95       	ror	r21
    1816:	47 95       	ror	r20
    1818:	2f 5f       	subi	r18, 0xFF	; 255
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	77 fd       	sbrc	r23, 7
    181e:	e7 cf       	rjmp	.-50     	; 0x17ee <__mulsf3+0x140>
    1820:	0c c0       	rjmp	.+24     	; 0x183a <__mulsf3+0x18c>
    1822:	44 0f       	add	r20, r20
    1824:	55 1f       	adc	r21, r21
    1826:	66 1f       	adc	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	17 fd       	sbrc	r17, 7
    182c:	41 60       	ori	r20, 0x01	; 1
    182e:	ee 0c       	add	r14, r14
    1830:	ff 1c       	adc	r15, r15
    1832:	00 1f       	adc	r16, r16
    1834:	11 1f       	adc	r17, r17
    1836:	21 50       	subi	r18, 0x01	; 1
    1838:	30 40       	sbci	r19, 0x00	; 0
    183a:	40 30       	cpi	r20, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	59 07       	cpc	r21, r25
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	69 07       	cpc	r22, r25
    1844:	90 e4       	ldi	r25, 0x40	; 64
    1846:	79 07       	cpc	r23, r25
    1848:	60 f3       	brcs	.-40     	; 0x1822 <__mulsf3+0x174>
    184a:	2b 8f       	std	Y+27, r18	; 0x1b
    184c:	3c 8f       	std	Y+28, r19	; 0x1c
    184e:	db 01       	movw	r26, r22
    1850:	ca 01       	movw	r24, r20
    1852:	8f 77       	andi	r24, 0x7F	; 127
    1854:	90 70       	andi	r25, 0x00	; 0
    1856:	a0 70       	andi	r26, 0x00	; 0
    1858:	b0 70       	andi	r27, 0x00	; 0
    185a:	80 34       	cpi	r24, 0x40	; 64
    185c:	91 05       	cpc	r25, r1
    185e:	a1 05       	cpc	r26, r1
    1860:	b1 05       	cpc	r27, r1
    1862:	61 f4       	brne	.+24     	; 0x187c <__mulsf3+0x1ce>
    1864:	47 fd       	sbrc	r20, 7
    1866:	0a c0       	rjmp	.+20     	; 0x187c <__mulsf3+0x1ce>
    1868:	e1 14       	cp	r14, r1
    186a:	f1 04       	cpc	r15, r1
    186c:	01 05       	cpc	r16, r1
    186e:	11 05       	cpc	r17, r1
    1870:	29 f0       	breq	.+10     	; 0x187c <__mulsf3+0x1ce>
    1872:	40 5c       	subi	r20, 0xC0	; 192
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	6f 4f       	sbci	r22, 0xFF	; 255
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	40 78       	andi	r20, 0x80	; 128
    187c:	1a 8e       	std	Y+26, r1	; 0x1a
    187e:	fe 17       	cp	r31, r30
    1880:	11 f0       	breq	.+4      	; 0x1886 <__mulsf3+0x1d8>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	8a 8f       	std	Y+26, r24	; 0x1a
    1886:	4d 8f       	std	Y+29, r20	; 0x1d
    1888:	5e 8f       	std	Y+30, r21	; 0x1e
    188a:	6f 8f       	std	Y+31, r22	; 0x1f
    188c:	78 a3       	std	Y+32, r23	; 0x20
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	89 8f       	std	Y+25, r24	; 0x19
    1892:	ce 01       	movw	r24, r28
    1894:	49 96       	adiw	r24, 0x19	; 25
    1896:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__pack_f>
    189a:	a0 96       	adiw	r28, 0x20	; 32
    189c:	e2 e1       	ldi	r30, 0x12	; 18
    189e:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__>

000018a2 <__divsf3>:
    18a2:	a8 e1       	ldi	r26, 0x18	; 24
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e7 e5       	ldi	r30, 0x57	; 87
    18a8:	fc e0       	ldi	r31, 0x0C	; 12
    18aa:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__prologue_saves__+0x10>
    18ae:	69 83       	std	Y+1, r22	; 0x01
    18b0:	7a 83       	std	Y+2, r23	; 0x02
    18b2:	8b 83       	std	Y+3, r24	; 0x03
    18b4:	9c 83       	std	Y+4, r25	; 0x04
    18b6:	2d 83       	std	Y+5, r18	; 0x05
    18b8:	3e 83       	std	Y+6, r19	; 0x06
    18ba:	4f 83       	std	Y+7, r20	; 0x07
    18bc:	58 87       	std	Y+8, r21	; 0x08
    18be:	b9 e0       	ldi	r27, 0x09	; 9
    18c0:	eb 2e       	mov	r14, r27
    18c2:	f1 2c       	mov	r15, r1
    18c4:	ec 0e       	add	r14, r28
    18c6:	fd 1e       	adc	r15, r29
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	b7 01       	movw	r22, r14
    18ce:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    18d2:	8e 01       	movw	r16, r28
    18d4:	0f 5e       	subi	r16, 0xEF	; 239
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	ce 01       	movw	r24, r28
    18da:	05 96       	adiw	r24, 0x05	; 5
    18dc:	b8 01       	movw	r22, r16
    18de:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    18e2:	29 85       	ldd	r18, Y+9	; 0x09
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	08 f4       	brcc	.+2      	; 0x18ea <__divsf3+0x48>
    18e8:	7e c0       	rjmp	.+252    	; 0x19e6 <__divsf3+0x144>
    18ea:	39 89       	ldd	r19, Y+17	; 0x11
    18ec:	32 30       	cpi	r19, 0x02	; 2
    18ee:	10 f4       	brcc	.+4      	; 0x18f4 <__divsf3+0x52>
    18f0:	b8 01       	movw	r22, r16
    18f2:	7c c0       	rjmp	.+248    	; 0x19ec <__divsf3+0x14a>
    18f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18f6:	9a 89       	ldd	r25, Y+18	; 0x12
    18f8:	89 27       	eor	r24, r25
    18fa:	8a 87       	std	Y+10, r24	; 0x0a
    18fc:	24 30       	cpi	r18, 0x04	; 4
    18fe:	11 f0       	breq	.+4      	; 0x1904 <__divsf3+0x62>
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 f4       	brne	.+12     	; 0x1910 <__divsf3+0x6e>
    1904:	23 17       	cp	r18, r19
    1906:	09 f0       	breq	.+2      	; 0x190a <__divsf3+0x68>
    1908:	6e c0       	rjmp	.+220    	; 0x19e6 <__divsf3+0x144>
    190a:	69 e7       	ldi	r22, 0x79	; 121
    190c:	72 e0       	ldi	r23, 0x02	; 2
    190e:	6e c0       	rjmp	.+220    	; 0x19ec <__divsf3+0x14a>
    1910:	34 30       	cpi	r19, 0x04	; 4
    1912:	39 f4       	brne	.+14     	; 0x1922 <__divsf3+0x80>
    1914:	1d 86       	std	Y+13, r1	; 0x0d
    1916:	1e 86       	std	Y+14, r1	; 0x0e
    1918:	1f 86       	std	Y+15, r1	; 0x0f
    191a:	18 8a       	std	Y+16, r1	; 0x10
    191c:	1c 86       	std	Y+12, r1	; 0x0c
    191e:	1b 86       	std	Y+11, r1	; 0x0b
    1920:	04 c0       	rjmp	.+8      	; 0x192a <__divsf3+0x88>
    1922:	32 30       	cpi	r19, 0x02	; 2
    1924:	21 f4       	brne	.+8      	; 0x192e <__divsf3+0x8c>
    1926:	84 e0       	ldi	r24, 0x04	; 4
    1928:	89 87       	std	Y+9, r24	; 0x09
    192a:	b7 01       	movw	r22, r14
    192c:	5f c0       	rjmp	.+190    	; 0x19ec <__divsf3+0x14a>
    192e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1930:	3c 85       	ldd	r19, Y+12	; 0x0c
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	9c 89       	ldd	r25, Y+20	; 0x14
    1936:	28 1b       	sub	r18, r24
    1938:	39 0b       	sbc	r19, r25
    193a:	3c 87       	std	Y+12, r19	; 0x0c
    193c:	2b 87       	std	Y+11, r18	; 0x0b
    193e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1940:	fe 84       	ldd	r15, Y+14	; 0x0e
    1942:	0f 85       	ldd	r16, Y+15	; 0x0f
    1944:	18 89       	ldd	r17, Y+16	; 0x10
    1946:	ad 88       	ldd	r10, Y+21	; 0x15
    1948:	be 88       	ldd	r11, Y+22	; 0x16
    194a:	cf 88       	ldd	r12, Y+23	; 0x17
    194c:	d8 8c       	ldd	r13, Y+24	; 0x18
    194e:	ea 14       	cp	r14, r10
    1950:	fb 04       	cpc	r15, r11
    1952:	0c 05       	cpc	r16, r12
    1954:	1d 05       	cpc	r17, r13
    1956:	40 f4       	brcc	.+16     	; 0x1968 <__divsf3+0xc6>
    1958:	ee 0c       	add	r14, r14
    195a:	ff 1c       	adc	r15, r15
    195c:	00 1f       	adc	r16, r16
    195e:	11 1f       	adc	r17, r17
    1960:	21 50       	subi	r18, 0x01	; 1
    1962:	30 40       	sbci	r19, 0x00	; 0
    1964:	3c 87       	std	Y+12, r19	; 0x0c
    1966:	2b 87       	std	Y+11, r18	; 0x0b
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e4       	ldi	r27, 0x40	; 64
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	ea 14       	cp	r14, r10
    197e:	fb 04       	cpc	r15, r11
    1980:	0c 05       	cpc	r16, r12
    1982:	1d 05       	cpc	r17, r13
    1984:	40 f0       	brcs	.+16     	; 0x1996 <__divsf3+0xf4>
    1986:	28 2b       	or	r18, r24
    1988:	39 2b       	or	r19, r25
    198a:	4a 2b       	or	r20, r26
    198c:	5b 2b       	or	r21, r27
    198e:	ea 18       	sub	r14, r10
    1990:	fb 08       	sbc	r15, r11
    1992:	0c 09       	sbc	r16, r12
    1994:	1d 09       	sbc	r17, r13
    1996:	b6 95       	lsr	r27
    1998:	a7 95       	ror	r26
    199a:	97 95       	ror	r25
    199c:	87 95       	ror	r24
    199e:	ee 0c       	add	r14, r14
    19a0:	ff 1c       	adc	r15, r15
    19a2:	00 1f       	adc	r16, r16
    19a4:	11 1f       	adc	r17, r17
    19a6:	6f 5f       	subi	r22, 0xFF	; 255
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	6f 31       	cpi	r22, 0x1F	; 31
    19ac:	71 05       	cpc	r23, r1
    19ae:	31 f7       	brne	.-52     	; 0x197c <__divsf3+0xda>
    19b0:	da 01       	movw	r26, r20
    19b2:	c9 01       	movw	r24, r18
    19b4:	8f 77       	andi	r24, 0x7F	; 127
    19b6:	90 70       	andi	r25, 0x00	; 0
    19b8:	a0 70       	andi	r26, 0x00	; 0
    19ba:	b0 70       	andi	r27, 0x00	; 0
    19bc:	80 34       	cpi	r24, 0x40	; 64
    19be:	91 05       	cpc	r25, r1
    19c0:	a1 05       	cpc	r26, r1
    19c2:	b1 05       	cpc	r27, r1
    19c4:	61 f4       	brne	.+24     	; 0x19de <__divsf3+0x13c>
    19c6:	27 fd       	sbrc	r18, 7
    19c8:	0a c0       	rjmp	.+20     	; 0x19de <__divsf3+0x13c>
    19ca:	e1 14       	cp	r14, r1
    19cc:	f1 04       	cpc	r15, r1
    19ce:	01 05       	cpc	r16, r1
    19d0:	11 05       	cpc	r17, r1
    19d2:	29 f0       	breq	.+10     	; 0x19de <__divsf3+0x13c>
    19d4:	20 5c       	subi	r18, 0xC0	; 192
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	4f 4f       	sbci	r20, 0xFF	; 255
    19da:	5f 4f       	sbci	r21, 0xFF	; 255
    19dc:	20 78       	andi	r18, 0x80	; 128
    19de:	2d 87       	std	Y+13, r18	; 0x0d
    19e0:	3e 87       	std	Y+14, r19	; 0x0e
    19e2:	4f 87       	std	Y+15, r20	; 0x0f
    19e4:	58 8b       	std	Y+16, r21	; 0x10
    19e6:	be 01       	movw	r22, r28
    19e8:	67 5f       	subi	r22, 0xF7	; 247
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	cb 01       	movw	r24, r22
    19ee:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__pack_f>
    19f2:	68 96       	adiw	r28, 0x18	; 24
    19f4:	ea e0       	ldi	r30, 0x0A	; 10
    19f6:	0c 94 7f 10 	jmp	0x20fe	; 0x20fe <__epilogue_restores__+0x10>

000019fa <__gtsf2>:
    19fa:	a8 e1       	ldi	r26, 0x18	; 24
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e3 e0       	ldi	r30, 0x03	; 3
    1a00:	fd e0       	ldi	r31, 0x0D	; 13
    1a02:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1a06:	69 83       	std	Y+1, r22	; 0x01
    1a08:	7a 83       	std	Y+2, r23	; 0x02
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
    1a0c:	9c 83       	std	Y+4, r25	; 0x04
    1a0e:	2d 83       	std	Y+5, r18	; 0x05
    1a10:	3e 83       	std	Y+6, r19	; 0x06
    1a12:	4f 83       	std	Y+7, r20	; 0x07
    1a14:	58 87       	std	Y+8, r21	; 0x08
    1a16:	89 e0       	ldi	r24, 0x09	; 9
    1a18:	e8 2e       	mov	r14, r24
    1a1a:	f1 2c       	mov	r15, r1
    1a1c:	ec 0e       	add	r14, r28
    1a1e:	fd 1e       	adc	r15, r29
    1a20:	ce 01       	movw	r24, r28
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	b7 01       	movw	r22, r14
    1a26:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1a2a:	8e 01       	movw	r16, r28
    1a2c:	0f 5e       	subi	r16, 0xEF	; 239
    1a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a30:	ce 01       	movw	r24, r28
    1a32:	05 96       	adiw	r24, 0x05	; 5
    1a34:	b8 01       	movw	r22, r16
    1a36:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	40 f0       	brcs	.+16     	; 0x1a50 <__gtsf2+0x56>
    1a40:	89 89       	ldd	r24, Y+17	; 0x11
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	28 f0       	brcs	.+10     	; 0x1a50 <__gtsf2+0x56>
    1a46:	c7 01       	movw	r24, r14
    1a48:	b8 01       	movw	r22, r16
    1a4a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fpcmp_parts_f>
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <__gtsf2+0x58>
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	68 96       	adiw	r28, 0x18	; 24
    1a54:	e6 e0       	ldi	r30, 0x06	; 6
    1a56:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001a5a <__gesf2>:
    1a5a:	a8 e1       	ldi	r26, 0x18	; 24
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e3       	ldi	r30, 0x33	; 51
    1a60:	fd e0       	ldi	r31, 0x0D	; 13
    1a62:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1a66:	69 83       	std	Y+1, r22	; 0x01
    1a68:	7a 83       	std	Y+2, r23	; 0x02
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	2d 83       	std	Y+5, r18	; 0x05
    1a70:	3e 83       	std	Y+6, r19	; 0x06
    1a72:	4f 83       	std	Y+7, r20	; 0x07
    1a74:	58 87       	std	Y+8, r21	; 0x08
    1a76:	89 e0       	ldi	r24, 0x09	; 9
    1a78:	e8 2e       	mov	r14, r24
    1a7a:	f1 2c       	mov	r15, r1
    1a7c:	ec 0e       	add	r14, r28
    1a7e:	fd 1e       	adc	r15, r29
    1a80:	ce 01       	movw	r24, r28
    1a82:	01 96       	adiw	r24, 0x01	; 1
    1a84:	b7 01       	movw	r22, r14
    1a86:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1a8a:	8e 01       	movw	r16, r28
    1a8c:	0f 5e       	subi	r16, 0xEF	; 239
    1a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a90:	ce 01       	movw	r24, r28
    1a92:	05 96       	adiw	r24, 0x05	; 5
    1a94:	b8 01       	movw	r22, r16
    1a96:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	82 30       	cpi	r24, 0x02	; 2
    1a9e:	40 f0       	brcs	.+16     	; 0x1ab0 <__gesf2+0x56>
    1aa0:	89 89       	ldd	r24, Y+17	; 0x11
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	28 f0       	brcs	.+10     	; 0x1ab0 <__gesf2+0x56>
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	b8 01       	movw	r22, r16
    1aaa:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fpcmp_parts_f>
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <__gesf2+0x58>
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	68 96       	adiw	r28, 0x18	; 24
    1ab4:	e6 e0       	ldi	r30, 0x06	; 6
    1ab6:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001aba <__ltsf2>:
    1aba:	a8 e1       	ldi	r26, 0x18	; 24
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e6       	ldi	r30, 0x63	; 99
    1ac0:	fd e0       	ldi	r31, 0x0D	; 13
    1ac2:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__prologue_saves__+0x18>
    1ac6:	69 83       	std	Y+1, r22	; 0x01
    1ac8:	7a 83       	std	Y+2, r23	; 0x02
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	9c 83       	std	Y+4, r25	; 0x04
    1ace:	2d 83       	std	Y+5, r18	; 0x05
    1ad0:	3e 83       	std	Y+6, r19	; 0x06
    1ad2:	4f 83       	std	Y+7, r20	; 0x07
    1ad4:	58 87       	std	Y+8, r21	; 0x08
    1ad6:	89 e0       	ldi	r24, 0x09	; 9
    1ad8:	e8 2e       	mov	r14, r24
    1ada:	f1 2c       	mov	r15, r1
    1adc:	ec 0e       	add	r14, r28
    1ade:	fd 1e       	adc	r15, r29
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1aea:	8e 01       	movw	r16, r28
    1aec:	0f 5e       	subi	r16, 0xEF	; 239
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	ce 01       	movw	r24, r28
    1af2:	05 96       	adiw	r24, 0x05	; 5
    1af4:	b8 01       	movw	r22, r16
    1af6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	82 30       	cpi	r24, 0x02	; 2
    1afe:	40 f0       	brcs	.+16     	; 0x1b10 <__ltsf2+0x56>
    1b00:	89 89       	ldd	r24, Y+17	; 0x11
    1b02:	82 30       	cpi	r24, 0x02	; 2
    1b04:	28 f0       	brcs	.+10     	; 0x1b10 <__ltsf2+0x56>
    1b06:	c7 01       	movw	r24, r14
    1b08:	b8 01       	movw	r22, r16
    1b0a:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__fpcmp_parts_f>
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <__ltsf2+0x58>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	68 96       	adiw	r28, 0x18	; 24
    1b14:	e6 e0       	ldi	r30, 0x06	; 6
    1b16:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__epilogue_restores__+0x18>

00001b1a <__floatsisf>:
    1b1a:	a8 e0       	ldi	r26, 0x08	; 8
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e3 e9       	ldi	r30, 0x93	; 147
    1b20:	fd e0       	ldi	r31, 0x0D	; 13
    1b22:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__prologue_saves__+0x12>
    1b26:	9b 01       	movw	r18, r22
    1b28:	ac 01       	movw	r20, r24
    1b2a:	83 e0       	ldi	r24, 0x03	; 3
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	da 01       	movw	r26, r20
    1b30:	c9 01       	movw	r24, r18
    1b32:	88 27       	eor	r24, r24
    1b34:	b7 fd       	sbrc	r27, 7
    1b36:	83 95       	inc	r24
    1b38:	99 27       	eor	r25, r25
    1b3a:	aa 27       	eor	r26, r26
    1b3c:	bb 27       	eor	r27, r27
    1b3e:	b8 2e       	mov	r11, r24
    1b40:	21 15       	cp	r18, r1
    1b42:	31 05       	cpc	r19, r1
    1b44:	41 05       	cpc	r20, r1
    1b46:	51 05       	cpc	r21, r1
    1b48:	19 f4       	brne	.+6      	; 0x1b50 <__floatsisf+0x36>
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	3a c0       	rjmp	.+116    	; 0x1bc4 <__floatsisf+0xaa>
    1b50:	88 23       	and	r24, r24
    1b52:	a9 f0       	breq	.+42     	; 0x1b7e <__floatsisf+0x64>
    1b54:	20 30       	cpi	r18, 0x00	; 0
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	38 07       	cpc	r19, r24
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	48 07       	cpc	r20, r24
    1b5e:	80 e8       	ldi	r24, 0x80	; 128
    1b60:	58 07       	cpc	r21, r24
    1b62:	29 f4       	brne	.+10     	; 0x1b6e <__floatsisf+0x54>
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	9f ec       	ldi	r25, 0xCF	; 207
    1b6c:	30 c0       	rjmp	.+96     	; 0x1bce <__floatsisf+0xb4>
    1b6e:	ee 24       	eor	r14, r14
    1b70:	ff 24       	eor	r15, r15
    1b72:	87 01       	movw	r16, r14
    1b74:	e2 1a       	sub	r14, r18
    1b76:	f3 0a       	sbc	r15, r19
    1b78:	04 0b       	sbc	r16, r20
    1b7a:	15 0b       	sbc	r17, r21
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <__floatsisf+0x68>
    1b7e:	79 01       	movw	r14, r18
    1b80:	8a 01       	movw	r16, r20
    1b82:	8e e1       	ldi	r24, 0x1E	; 30
    1b84:	c8 2e       	mov	r12, r24
    1b86:	d1 2c       	mov	r13, r1
    1b88:	dc 82       	std	Y+4, r13	; 0x04
    1b8a:	cb 82       	std	Y+3, r12	; 0x03
    1b8c:	ed 82       	std	Y+5, r14	; 0x05
    1b8e:	fe 82       	std	Y+6, r15	; 0x06
    1b90:	0f 83       	std	Y+7, r16	; 0x07
    1b92:	18 87       	std	Y+8, r17	; 0x08
    1b94:	c8 01       	movw	r24, r16
    1b96:	b7 01       	movw	r22, r14
    1b98:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__clzsi2>
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	18 16       	cp	r1, r24
    1ba0:	19 06       	cpc	r1, r25
    1ba2:	84 f4       	brge	.+32     	; 0x1bc4 <__floatsisf+0xaa>
    1ba4:	08 2e       	mov	r0, r24
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <__floatsisf+0x96>
    1ba8:	ee 0c       	add	r14, r14
    1baa:	ff 1c       	adc	r15, r15
    1bac:	00 1f       	adc	r16, r16
    1bae:	11 1f       	adc	r17, r17
    1bb0:	0a 94       	dec	r0
    1bb2:	d2 f7       	brpl	.-12     	; 0x1ba8 <__floatsisf+0x8e>
    1bb4:	ed 82       	std	Y+5, r14	; 0x05
    1bb6:	fe 82       	std	Y+6, r15	; 0x06
    1bb8:	0f 83       	std	Y+7, r16	; 0x07
    1bba:	18 87       	std	Y+8, r17	; 0x08
    1bbc:	c8 1a       	sub	r12, r24
    1bbe:	d9 0a       	sbc	r13, r25
    1bc0:	dc 82       	std	Y+4, r13	; 0x04
    1bc2:	cb 82       	std	Y+3, r12	; 0x03
    1bc4:	ba 82       	std	Y+2, r11	; 0x02
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__pack_f>
    1bce:	28 96       	adiw	r28, 0x08	; 8
    1bd0:	e9 e0       	ldi	r30, 0x09	; 9
    1bd2:	0c 94 80 10 	jmp	0x2100	; 0x2100 <__epilogue_restores__+0x12>

00001bd6 <__fixsfsi>:
    1bd6:	ac e0       	ldi	r26, 0x0C	; 12
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e1 ef       	ldi	r30, 0xF1	; 241
    1bdc:	fd e0       	ldi	r31, 0x0D	; 13
    1bde:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__prologue_saves__+0x20>
    1be2:	69 83       	std	Y+1, r22	; 0x01
    1be4:	7a 83       	std	Y+2, r23	; 0x02
    1be6:	8b 83       	std	Y+3, r24	; 0x03
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	ce 01       	movw	r24, r28
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	be 01       	movw	r22, r28
    1bf0:	6b 5f       	subi	r22, 0xFB	; 251
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <__unpack_f>
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	61 f1       	breq	.+88     	; 0x1c56 <__fixsfsi+0x80>
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	50 f1       	brcs	.+84     	; 0x1c56 <__fixsfsi+0x80>
    1c02:	84 30       	cpi	r24, 0x04	; 4
    1c04:	21 f4       	brne	.+8      	; 0x1c0e <__fixsfsi+0x38>
    1c06:	8e 81       	ldd	r24, Y+6	; 0x06
    1c08:	88 23       	and	r24, r24
    1c0a:	51 f1       	breq	.+84     	; 0x1c60 <__fixsfsi+0x8a>
    1c0c:	2e c0       	rjmp	.+92     	; 0x1c6a <__fixsfsi+0x94>
    1c0e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c10:	38 85       	ldd	r19, Y+8	; 0x08
    1c12:	37 fd       	sbrc	r19, 7
    1c14:	20 c0       	rjmp	.+64     	; 0x1c56 <__fixsfsi+0x80>
    1c16:	6e 81       	ldd	r22, Y+6	; 0x06
    1c18:	2f 31       	cpi	r18, 0x1F	; 31
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	1c f0       	brlt	.+6      	; 0x1c24 <__fixsfsi+0x4e>
    1c1e:	66 23       	and	r22, r22
    1c20:	f9 f0       	breq	.+62     	; 0x1c60 <__fixsfsi+0x8a>
    1c22:	23 c0       	rjmp	.+70     	; 0x1c6a <__fixsfsi+0x94>
    1c24:	8e e1       	ldi	r24, 0x1E	; 30
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	82 1b       	sub	r24, r18
    1c2a:	93 0b       	sbc	r25, r19
    1c2c:	29 85       	ldd	r18, Y+9	; 0x09
    1c2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c30:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c32:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <__fixsfsi+0x68>
    1c36:	56 95       	lsr	r21
    1c38:	47 95       	ror	r20
    1c3a:	37 95       	ror	r19
    1c3c:	27 95       	ror	r18
    1c3e:	8a 95       	dec	r24
    1c40:	d2 f7       	brpl	.-12     	; 0x1c36 <__fixsfsi+0x60>
    1c42:	66 23       	and	r22, r22
    1c44:	b1 f0       	breq	.+44     	; 0x1c72 <__fixsfsi+0x9c>
    1c46:	50 95       	com	r21
    1c48:	40 95       	com	r20
    1c4a:	30 95       	com	r19
    1c4c:	21 95       	neg	r18
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	4f 4f       	sbci	r20, 0xFF	; 255
    1c52:	5f 4f       	sbci	r21, 0xFF	; 255
    1c54:	0e c0       	rjmp	.+28     	; 0x1c72 <__fixsfsi+0x9c>
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	09 c0       	rjmp	.+18     	; 0x1c72 <__fixsfsi+0x9c>
    1c60:	2f ef       	ldi	r18, 0xFF	; 255
    1c62:	3f ef       	ldi	r19, 0xFF	; 255
    1c64:	4f ef       	ldi	r20, 0xFF	; 255
    1c66:	5f e7       	ldi	r21, 0x7F	; 127
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <__fixsfsi+0x9c>
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	50 e8       	ldi	r21, 0x80	; 128
    1c72:	b9 01       	movw	r22, r18
    1c74:	ca 01       	movw	r24, r20
    1c76:	2c 96       	adiw	r28, 0x0c	; 12
    1c78:	e2 e0       	ldi	r30, 0x02	; 2
    1c7a:	0c 94 87 10 	jmp	0x210e	; 0x210e <__epilogue_restores__+0x20>

00001c7e <__clzsi2>:
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	7b 01       	movw	r14, r22
    1c88:	8c 01       	movw	r16, r24
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	e8 16       	cp	r14, r24
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	f8 06       	cpc	r15, r24
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	08 07       	cpc	r16, r24
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	18 07       	cpc	r17, r24
    1c9a:	88 f4       	brcc	.+34     	; 0x1cbe <__clzsi2+0x40>
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	e8 16       	cp	r14, r24
    1ca0:	f1 04       	cpc	r15, r1
    1ca2:	01 05       	cpc	r16, r1
    1ca4:	11 05       	cpc	r17, r1
    1ca6:	31 f0       	breq	.+12     	; 0x1cb4 <__clzsi2+0x36>
    1ca8:	28 f0       	brcs	.+10     	; 0x1cb4 <__clzsi2+0x36>
    1caa:	88 e0       	ldi	r24, 0x08	; 8
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e0       	ldi	r26, 0x00	; 0
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	17 c0       	rjmp	.+46     	; 0x1ce2 <__clzsi2+0x64>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	12 c0       	rjmp	.+36     	; 0x1ce2 <__clzsi2+0x64>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	e8 16       	cp	r14, r24
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	f8 06       	cpc	r15, r24
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	08 07       	cpc	r16, r24
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	18 07       	cpc	r17, r24
    1cce:	28 f0       	brcs	.+10     	; 0x1cda <__clzsi2+0x5c>
    1cd0:	88 e1       	ldi	r24, 0x18	; 24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	04 c0       	rjmp	.+8      	; 0x1ce2 <__clzsi2+0x64>
    1cda:	80 e1       	ldi	r24, 0x10	; 16
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e0       	ldi	r26, 0x00	; 0
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	20 e2       	ldi	r18, 0x20	; 32
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	28 1b       	sub	r18, r24
    1cec:	39 0b       	sbc	r19, r25
    1cee:	4a 0b       	sbc	r20, r26
    1cf0:	5b 0b       	sbc	r21, r27
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <__clzsi2+0x7e>
    1cf4:	16 95       	lsr	r17
    1cf6:	07 95       	ror	r16
    1cf8:	f7 94       	ror	r15
    1cfa:	e7 94       	ror	r14
    1cfc:	8a 95       	dec	r24
    1cfe:	d2 f7       	brpl	.-12     	; 0x1cf4 <__clzsi2+0x76>
    1d00:	f7 01       	movw	r30, r14
    1d02:	ef 57       	subi	r30, 0x7F	; 127
    1d04:	fd 4f       	sbci	r31, 0xFD	; 253
    1d06:	80 81       	ld	r24, Z
    1d08:	28 1b       	sub	r18, r24
    1d0a:	31 09       	sbc	r19, r1
    1d0c:	41 09       	sbc	r20, r1
    1d0e:	51 09       	sbc	r21, r1
    1d10:	c9 01       	movw	r24, r18
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	08 95       	ret

00001d1c <__pack_f>:
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	fc 01       	movw	r30, r24
    1d28:	e4 80       	ldd	r14, Z+4	; 0x04
    1d2a:	f5 80       	ldd	r15, Z+5	; 0x05
    1d2c:	06 81       	ldd	r16, Z+6	; 0x06
    1d2e:	17 81       	ldd	r17, Z+7	; 0x07
    1d30:	d1 80       	ldd	r13, Z+1	; 0x01
    1d32:	80 81       	ld	r24, Z
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	48 f4       	brcc	.+18     	; 0x1d4a <__pack_f+0x2e>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e1       	ldi	r26, 0x10	; 16
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e8 2a       	or	r14, r24
    1d42:	f9 2a       	or	r15, r25
    1d44:	0a 2b       	or	r16, r26
    1d46:	1b 2b       	or	r17, r27
    1d48:	a5 c0       	rjmp	.+330    	; 0x1e94 <__pack_f+0x178>
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	09 f4       	brne	.+2      	; 0x1d50 <__pack_f+0x34>
    1d4e:	9f c0       	rjmp	.+318    	; 0x1e8e <__pack_f+0x172>
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <__pack_f+0x40>
    1d54:	ee 24       	eor	r14, r14
    1d56:	ff 24       	eor	r15, r15
    1d58:	87 01       	movw	r16, r14
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <__pack_f+0x4a>
    1d5c:	e1 14       	cp	r14, r1
    1d5e:	f1 04       	cpc	r15, r1
    1d60:	01 05       	cpc	r16, r1
    1d62:	11 05       	cpc	r17, r1
    1d64:	19 f4       	brne	.+6      	; 0x1d6c <__pack_f+0x50>
    1d66:	e0 e0       	ldi	r30, 0x00	; 0
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	96 c0       	rjmp	.+300    	; 0x1e98 <__pack_f+0x17c>
    1d6c:	62 81       	ldd	r22, Z+2	; 0x02
    1d6e:	73 81       	ldd	r23, Z+3	; 0x03
    1d70:	9f ef       	ldi	r25, 0xFF	; 255
    1d72:	62 38       	cpi	r22, 0x82	; 130
    1d74:	79 07       	cpc	r23, r25
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <__pack_f+0x5e>
    1d78:	5b c0       	rjmp	.+182    	; 0x1e30 <__pack_f+0x114>
    1d7a:	22 e8       	ldi	r18, 0x82	; 130
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	26 1b       	sub	r18, r22
    1d80:	37 0b       	sbc	r19, r23
    1d82:	2a 31       	cpi	r18, 0x1A	; 26
    1d84:	31 05       	cpc	r19, r1
    1d86:	2c f0       	brlt	.+10     	; 0x1d92 <__pack_f+0x76>
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	2a c0       	rjmp	.+84     	; 0x1de6 <__pack_f+0xca>
    1d92:	b8 01       	movw	r22, r16
    1d94:	a7 01       	movw	r20, r14
    1d96:	02 2e       	mov	r0, r18
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <__pack_f+0x86>
    1d9a:	76 95       	lsr	r23
    1d9c:	67 95       	ror	r22
    1d9e:	57 95       	ror	r21
    1da0:	47 95       	ror	r20
    1da2:	0a 94       	dec	r0
    1da4:	d2 f7       	brpl	.-12     	; 0x1d9a <__pack_f+0x7e>
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	a0 e0       	ldi	r26, 0x00	; 0
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <__pack_f+0x9c>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	aa 1f       	adc	r26, r26
    1db6:	bb 1f       	adc	r27, r27
    1db8:	2a 95       	dec	r18
    1dba:	d2 f7       	brpl	.-12     	; 0x1db0 <__pack_f+0x94>
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	a1 09       	sbc	r26, r1
    1dc0:	b1 09       	sbc	r27, r1
    1dc2:	8e 21       	and	r24, r14
    1dc4:	9f 21       	and	r25, r15
    1dc6:	a0 23       	and	r26, r16
    1dc8:	b1 23       	and	r27, r17
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	a1 05       	cpc	r26, r1
    1dce:	b1 05       	cpc	r27, r1
    1dd0:	21 f0       	breq	.+8      	; 0x1dda <__pack_f+0xbe>
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e0       	ldi	r26, 0x00	; 0
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	9a 01       	movw	r18, r20
    1ddc:	ab 01       	movw	r20, r22
    1dde:	28 2b       	or	r18, r24
    1de0:	39 2b       	or	r19, r25
    1de2:	4a 2b       	or	r20, r26
    1de4:	5b 2b       	or	r21, r27
    1de6:	da 01       	movw	r26, r20
    1de8:	c9 01       	movw	r24, r18
    1dea:	8f 77       	andi	r24, 0x7F	; 127
    1dec:	90 70       	andi	r25, 0x00	; 0
    1dee:	a0 70       	andi	r26, 0x00	; 0
    1df0:	b0 70       	andi	r27, 0x00	; 0
    1df2:	80 34       	cpi	r24, 0x40	; 64
    1df4:	91 05       	cpc	r25, r1
    1df6:	a1 05       	cpc	r26, r1
    1df8:	b1 05       	cpc	r27, r1
    1dfa:	39 f4       	brne	.+14     	; 0x1e0a <__pack_f+0xee>
    1dfc:	27 ff       	sbrs	r18, 7
    1dfe:	09 c0       	rjmp	.+18     	; 0x1e12 <__pack_f+0xf6>
    1e00:	20 5c       	subi	r18, 0xC0	; 192
    1e02:	3f 4f       	sbci	r19, 0xFF	; 255
    1e04:	4f 4f       	sbci	r20, 0xFF	; 255
    1e06:	5f 4f       	sbci	r21, 0xFF	; 255
    1e08:	04 c0       	rjmp	.+8      	; 0x1e12 <__pack_f+0xf6>
    1e0a:	21 5c       	subi	r18, 0xC1	; 193
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	e0 e0       	ldi	r30, 0x00	; 0
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	20 30       	cpi	r18, 0x00	; 0
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	3a 07       	cpc	r19, r26
    1e1c:	a0 e0       	ldi	r26, 0x00	; 0
    1e1e:	4a 07       	cpc	r20, r26
    1e20:	a0 e4       	ldi	r26, 0x40	; 64
    1e22:	5a 07       	cpc	r21, r26
    1e24:	10 f0       	brcs	.+4      	; 0x1e2a <__pack_f+0x10e>
    1e26:	e1 e0       	ldi	r30, 0x01	; 1
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	79 01       	movw	r14, r18
    1e2c:	8a 01       	movw	r16, r20
    1e2e:	27 c0       	rjmp	.+78     	; 0x1e7e <__pack_f+0x162>
    1e30:	60 38       	cpi	r22, 0x80	; 128
    1e32:	71 05       	cpc	r23, r1
    1e34:	64 f5       	brge	.+88     	; 0x1e8e <__pack_f+0x172>
    1e36:	fb 01       	movw	r30, r22
    1e38:	e1 58       	subi	r30, 0x81	; 129
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	d8 01       	movw	r26, r16
    1e3e:	c7 01       	movw	r24, r14
    1e40:	8f 77       	andi	r24, 0x7F	; 127
    1e42:	90 70       	andi	r25, 0x00	; 0
    1e44:	a0 70       	andi	r26, 0x00	; 0
    1e46:	b0 70       	andi	r27, 0x00	; 0
    1e48:	80 34       	cpi	r24, 0x40	; 64
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	a1 05       	cpc	r26, r1
    1e4e:	b1 05       	cpc	r27, r1
    1e50:	39 f4       	brne	.+14     	; 0x1e60 <__pack_f+0x144>
    1e52:	e7 fe       	sbrs	r14, 7
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <__pack_f+0x154>
    1e56:	80 e4       	ldi	r24, 0x40	; 64
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e0       	ldi	r26, 0x00	; 0
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <__pack_f+0x14c>
    1e60:	8f e3       	ldi	r24, 0x3F	; 63
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e0       	ldi	r26, 0x00	; 0
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e8 0e       	add	r14, r24
    1e6a:	f9 1e       	adc	r15, r25
    1e6c:	0a 1f       	adc	r16, r26
    1e6e:	1b 1f       	adc	r17, r27
    1e70:	17 ff       	sbrs	r17, 7
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <__pack_f+0x162>
    1e74:	16 95       	lsr	r17
    1e76:	07 95       	ror	r16
    1e78:	f7 94       	ror	r15
    1e7a:	e7 94       	ror	r14
    1e7c:	31 96       	adiw	r30, 0x01	; 1
    1e7e:	87 e0       	ldi	r24, 0x07	; 7
    1e80:	16 95       	lsr	r17
    1e82:	07 95       	ror	r16
    1e84:	f7 94       	ror	r15
    1e86:	e7 94       	ror	r14
    1e88:	8a 95       	dec	r24
    1e8a:	d1 f7       	brne	.-12     	; 0x1e80 <__pack_f+0x164>
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <__pack_f+0x17c>
    1e8e:	ee 24       	eor	r14, r14
    1e90:	ff 24       	eor	r15, r15
    1e92:	87 01       	movw	r16, r14
    1e94:	ef ef       	ldi	r30, 0xFF	; 255
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	6e 2f       	mov	r22, r30
    1e9a:	67 95       	ror	r22
    1e9c:	66 27       	eor	r22, r22
    1e9e:	67 95       	ror	r22
    1ea0:	90 2f       	mov	r25, r16
    1ea2:	9f 77       	andi	r25, 0x7F	; 127
    1ea4:	d7 94       	ror	r13
    1ea6:	dd 24       	eor	r13, r13
    1ea8:	d7 94       	ror	r13
    1eaa:	8e 2f       	mov	r24, r30
    1eac:	86 95       	lsr	r24
    1eae:	49 2f       	mov	r20, r25
    1eb0:	46 2b       	or	r20, r22
    1eb2:	58 2f       	mov	r21, r24
    1eb4:	5d 29       	or	r21, r13
    1eb6:	b7 01       	movw	r22, r14
    1eb8:	ca 01       	movw	r24, r20
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	ff 90       	pop	r15
    1ec0:	ef 90       	pop	r14
    1ec2:	df 90       	pop	r13
    1ec4:	08 95       	ret

00001ec6 <__unpack_f>:
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	db 01       	movw	r26, r22
    1eca:	40 81       	ld	r20, Z
    1ecc:	51 81       	ldd	r21, Z+1	; 0x01
    1ece:	22 81       	ldd	r18, Z+2	; 0x02
    1ed0:	62 2f       	mov	r22, r18
    1ed2:	6f 77       	andi	r22, 0x7F	; 127
    1ed4:	70 e0       	ldi	r23, 0x00	; 0
    1ed6:	22 1f       	adc	r18, r18
    1ed8:	22 27       	eor	r18, r18
    1eda:	22 1f       	adc	r18, r18
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	89 2f       	mov	r24, r25
    1ee0:	88 0f       	add	r24, r24
    1ee2:	82 2b       	or	r24, r18
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	99 1f       	adc	r25, r25
    1eea:	99 27       	eor	r25, r25
    1eec:	99 1f       	adc	r25, r25
    1eee:	11 96       	adiw	r26, 0x01	; 1
    1ef0:	9c 93       	st	X, r25
    1ef2:	11 97       	sbiw	r26, 0x01	; 1
    1ef4:	21 15       	cp	r18, r1
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	a9 f5       	brne	.+106    	; 0x1f64 <__unpack_f+0x9e>
    1efa:	41 15       	cp	r20, r1
    1efc:	51 05       	cpc	r21, r1
    1efe:	61 05       	cpc	r22, r1
    1f00:	71 05       	cpc	r23, r1
    1f02:	11 f4       	brne	.+4      	; 0x1f08 <__unpack_f+0x42>
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	37 c0       	rjmp	.+110    	; 0x1f76 <__unpack_f+0xb0>
    1f08:	82 e8       	ldi	r24, 0x82	; 130
    1f0a:	9f ef       	ldi	r25, 0xFF	; 255
    1f0c:	13 96       	adiw	r26, 0x03	; 3
    1f0e:	9c 93       	st	X, r25
    1f10:	8e 93       	st	-X, r24
    1f12:	12 97       	sbiw	r26, 0x02	; 2
    1f14:	9a 01       	movw	r18, r20
    1f16:	ab 01       	movw	r20, r22
    1f18:	67 e0       	ldi	r22, 0x07	; 7
    1f1a:	22 0f       	add	r18, r18
    1f1c:	33 1f       	adc	r19, r19
    1f1e:	44 1f       	adc	r20, r20
    1f20:	55 1f       	adc	r21, r21
    1f22:	6a 95       	dec	r22
    1f24:	d1 f7       	brne	.-12     	; 0x1f1a <__unpack_f+0x54>
    1f26:	83 e0       	ldi	r24, 0x03	; 3
    1f28:	8c 93       	st	X, r24
    1f2a:	0d c0       	rjmp	.+26     	; 0x1f46 <__unpack_f+0x80>
    1f2c:	22 0f       	add	r18, r18
    1f2e:	33 1f       	adc	r19, r19
    1f30:	44 1f       	adc	r20, r20
    1f32:	55 1f       	adc	r21, r21
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	8d 91       	ld	r24, X+
    1f38:	9c 91       	ld	r25, X
    1f3a:	13 97       	sbiw	r26, 0x03	; 3
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	13 96       	adiw	r26, 0x03	; 3
    1f40:	9c 93       	st	X, r25
    1f42:	8e 93       	st	-X, r24
    1f44:	12 97       	sbiw	r26, 0x02	; 2
    1f46:	20 30       	cpi	r18, 0x00	; 0
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	38 07       	cpc	r19, r24
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	48 07       	cpc	r20, r24
    1f50:	80 e4       	ldi	r24, 0x40	; 64
    1f52:	58 07       	cpc	r21, r24
    1f54:	58 f3       	brcs	.-42     	; 0x1f2c <__unpack_f+0x66>
    1f56:	14 96       	adiw	r26, 0x04	; 4
    1f58:	2d 93       	st	X+, r18
    1f5a:	3d 93       	st	X+, r19
    1f5c:	4d 93       	st	X+, r20
    1f5e:	5c 93       	st	X, r21
    1f60:	17 97       	sbiw	r26, 0x07	; 7
    1f62:	08 95       	ret
    1f64:	2f 3f       	cpi	r18, 0xFF	; 255
    1f66:	31 05       	cpc	r19, r1
    1f68:	79 f4       	brne	.+30     	; 0x1f88 <__unpack_f+0xc2>
    1f6a:	41 15       	cp	r20, r1
    1f6c:	51 05       	cpc	r21, r1
    1f6e:	61 05       	cpc	r22, r1
    1f70:	71 05       	cpc	r23, r1
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <__unpack_f+0xb4>
    1f74:	84 e0       	ldi	r24, 0x04	; 4
    1f76:	8c 93       	st	X, r24
    1f78:	08 95       	ret
    1f7a:	64 ff       	sbrs	r22, 4
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <__unpack_f+0xbe>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	8c 93       	st	X, r24
    1f82:	12 c0       	rjmp	.+36     	; 0x1fa8 <__unpack_f+0xe2>
    1f84:	1c 92       	st	X, r1
    1f86:	10 c0       	rjmp	.+32     	; 0x1fa8 <__unpack_f+0xe2>
    1f88:	2f 57       	subi	r18, 0x7F	; 127
    1f8a:	30 40       	sbci	r19, 0x00	; 0
    1f8c:	13 96       	adiw	r26, 0x03	; 3
    1f8e:	3c 93       	st	X, r19
    1f90:	2e 93       	st	-X, r18
    1f92:	12 97       	sbiw	r26, 0x02	; 2
    1f94:	83 e0       	ldi	r24, 0x03	; 3
    1f96:	8c 93       	st	X, r24
    1f98:	87 e0       	ldi	r24, 0x07	; 7
    1f9a:	44 0f       	add	r20, r20
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	66 1f       	adc	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	8a 95       	dec	r24
    1fa4:	d1 f7       	brne	.-12     	; 0x1f9a <__unpack_f+0xd4>
    1fa6:	70 64       	ori	r23, 0x40	; 64
    1fa8:	14 96       	adiw	r26, 0x04	; 4
    1faa:	4d 93       	st	X+, r20
    1fac:	5d 93       	st	X+, r21
    1fae:	6d 93       	st	X+, r22
    1fb0:	7c 93       	st	X, r23
    1fb2:	17 97       	sbiw	r26, 0x07	; 7
    1fb4:	08 95       	ret

00001fb6 <__fpcmp_parts_f>:
    1fb6:	1f 93       	push	r17
    1fb8:	dc 01       	movw	r26, r24
    1fba:	fb 01       	movw	r30, r22
    1fbc:	9c 91       	ld	r25, X
    1fbe:	92 30       	cpi	r25, 0x02	; 2
    1fc0:	08 f4       	brcc	.+2      	; 0x1fc4 <__fpcmp_parts_f+0xe>
    1fc2:	47 c0       	rjmp	.+142    	; 0x2052 <__fpcmp_parts_f+0x9c>
    1fc4:	80 81       	ld	r24, Z
    1fc6:	82 30       	cpi	r24, 0x02	; 2
    1fc8:	08 f4       	brcc	.+2      	; 0x1fcc <__fpcmp_parts_f+0x16>
    1fca:	43 c0       	rjmp	.+134    	; 0x2052 <__fpcmp_parts_f+0x9c>
    1fcc:	94 30       	cpi	r25, 0x04	; 4
    1fce:	51 f4       	brne	.+20     	; 0x1fe4 <__fpcmp_parts_f+0x2e>
    1fd0:	11 96       	adiw	r26, 0x01	; 1
    1fd2:	1c 91       	ld	r17, X
    1fd4:	84 30       	cpi	r24, 0x04	; 4
    1fd6:	99 f5       	brne	.+102    	; 0x203e <__fpcmp_parts_f+0x88>
    1fd8:	81 81       	ldd	r24, Z+1	; 0x01
    1fda:	68 2f       	mov	r22, r24
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	61 1b       	sub	r22, r17
    1fe0:	71 09       	sbc	r23, r1
    1fe2:	3f c0       	rjmp	.+126    	; 0x2062 <__fpcmp_parts_f+0xac>
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	21 f0       	breq	.+8      	; 0x1ff0 <__fpcmp_parts_f+0x3a>
    1fe8:	92 30       	cpi	r25, 0x02	; 2
    1fea:	31 f4       	brne	.+12     	; 0x1ff8 <__fpcmp_parts_f+0x42>
    1fec:	82 30       	cpi	r24, 0x02	; 2
    1fee:	b9 f1       	breq	.+110    	; 0x205e <__fpcmp_parts_f+0xa8>
    1ff0:	81 81       	ldd	r24, Z+1	; 0x01
    1ff2:	88 23       	and	r24, r24
    1ff4:	89 f1       	breq	.+98     	; 0x2058 <__fpcmp_parts_f+0xa2>
    1ff6:	2d c0       	rjmp	.+90     	; 0x2052 <__fpcmp_parts_f+0x9c>
    1ff8:	11 96       	adiw	r26, 0x01	; 1
    1ffa:	1c 91       	ld	r17, X
    1ffc:	11 97       	sbiw	r26, 0x01	; 1
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	f1 f0       	breq	.+60     	; 0x203e <__fpcmp_parts_f+0x88>
    2002:	81 81       	ldd	r24, Z+1	; 0x01
    2004:	18 17       	cp	r17, r24
    2006:	d9 f4       	brne	.+54     	; 0x203e <__fpcmp_parts_f+0x88>
    2008:	12 96       	adiw	r26, 0x02	; 2
    200a:	2d 91       	ld	r18, X+
    200c:	3c 91       	ld	r19, X
    200e:	13 97       	sbiw	r26, 0x03	; 3
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	93 81       	ldd	r25, Z+3	; 0x03
    2014:	82 17       	cp	r24, r18
    2016:	93 07       	cpc	r25, r19
    2018:	94 f0       	brlt	.+36     	; 0x203e <__fpcmp_parts_f+0x88>
    201a:	28 17       	cp	r18, r24
    201c:	39 07       	cpc	r19, r25
    201e:	bc f0       	brlt	.+46     	; 0x204e <__fpcmp_parts_f+0x98>
    2020:	14 96       	adiw	r26, 0x04	; 4
    2022:	8d 91       	ld	r24, X+
    2024:	9d 91       	ld	r25, X+
    2026:	0d 90       	ld	r0, X+
    2028:	bc 91       	ld	r27, X
    202a:	a0 2d       	mov	r26, r0
    202c:	24 81       	ldd	r18, Z+4	; 0x04
    202e:	35 81       	ldd	r19, Z+5	; 0x05
    2030:	46 81       	ldd	r20, Z+6	; 0x06
    2032:	57 81       	ldd	r21, Z+7	; 0x07
    2034:	28 17       	cp	r18, r24
    2036:	39 07       	cpc	r19, r25
    2038:	4a 07       	cpc	r20, r26
    203a:	5b 07       	cpc	r21, r27
    203c:	18 f4       	brcc	.+6      	; 0x2044 <__fpcmp_parts_f+0x8e>
    203e:	11 23       	and	r17, r17
    2040:	41 f0       	breq	.+16     	; 0x2052 <__fpcmp_parts_f+0x9c>
    2042:	0a c0       	rjmp	.+20     	; 0x2058 <__fpcmp_parts_f+0xa2>
    2044:	82 17       	cp	r24, r18
    2046:	93 07       	cpc	r25, r19
    2048:	a4 07       	cpc	r26, r20
    204a:	b5 07       	cpc	r27, r21
    204c:	40 f4       	brcc	.+16     	; 0x205e <__fpcmp_parts_f+0xa8>
    204e:	11 23       	and	r17, r17
    2050:	19 f0       	breq	.+6      	; 0x2058 <__fpcmp_parts_f+0xa2>
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	05 c0       	rjmp	.+10     	; 0x2062 <__fpcmp_parts_f+0xac>
    2058:	6f ef       	ldi	r22, 0xFF	; 255
    205a:	7f ef       	ldi	r23, 0xFF	; 255
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <__fpcmp_parts_f+0xac>
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	cb 01       	movw	r24, r22
    2064:	1f 91       	pop	r17
    2066:	08 95       	ret

00002068 <__divmodhi4>:
    2068:	97 fb       	bst	r25, 7
    206a:	09 2e       	mov	r0, r25
    206c:	07 26       	eor	r0, r23
    206e:	0a d0       	rcall	.+20     	; 0x2084 <__divmodhi4_neg1>
    2070:	77 fd       	sbrc	r23, 7
    2072:	04 d0       	rcall	.+8      	; 0x207c <__divmodhi4_neg2>
    2074:	0c d0       	rcall	.+24     	; 0x208e <__udivmodhi4>
    2076:	06 d0       	rcall	.+12     	; 0x2084 <__divmodhi4_neg1>
    2078:	00 20       	and	r0, r0
    207a:	1a f4       	brpl	.+6      	; 0x2082 <__divmodhi4_exit>

0000207c <__divmodhi4_neg2>:
    207c:	70 95       	com	r23
    207e:	61 95       	neg	r22
    2080:	7f 4f       	sbci	r23, 0xFF	; 255

00002082 <__divmodhi4_exit>:
    2082:	08 95       	ret

00002084 <__divmodhi4_neg1>:
    2084:	f6 f7       	brtc	.-4      	; 0x2082 <__divmodhi4_exit>
    2086:	90 95       	com	r25
    2088:	81 95       	neg	r24
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	08 95       	ret

0000208e <__udivmodhi4>:
    208e:	aa 1b       	sub	r26, r26
    2090:	bb 1b       	sub	r27, r27
    2092:	51 e1       	ldi	r21, 0x11	; 17
    2094:	07 c0       	rjmp	.+14     	; 0x20a4 <__udivmodhi4_ep>

00002096 <__udivmodhi4_loop>:
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	a6 17       	cp	r26, r22
    209c:	b7 07       	cpc	r27, r23
    209e:	10 f0       	brcs	.+4      	; 0x20a4 <__udivmodhi4_ep>
    20a0:	a6 1b       	sub	r26, r22
    20a2:	b7 0b       	sbc	r27, r23

000020a4 <__udivmodhi4_ep>:
    20a4:	88 1f       	adc	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	5a 95       	dec	r21
    20aa:	a9 f7       	brne	.-22     	; 0x2096 <__udivmodhi4_loop>
    20ac:	80 95       	com	r24
    20ae:	90 95       	com	r25
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	08 95       	ret

000020b6 <__prologue_saves__>:
    20b6:	2f 92       	push	r2
    20b8:	3f 92       	push	r3
    20ba:	4f 92       	push	r4
    20bc:	5f 92       	push	r5
    20be:	6f 92       	push	r6
    20c0:	7f 92       	push	r7
    20c2:	8f 92       	push	r8
    20c4:	9f 92       	push	r9
    20c6:	af 92       	push	r10
    20c8:	bf 92       	push	r11
    20ca:	cf 92       	push	r12
    20cc:	df 92       	push	r13
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	ca 1b       	sub	r28, r26
    20e0:	db 0b       	sbc	r29, r27
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	19 94       	eijmp

000020ee <__epilogue_restores__>:
    20ee:	2a 88       	ldd	r2, Y+18	; 0x12
    20f0:	39 88       	ldd	r3, Y+17	; 0x11
    20f2:	48 88       	ldd	r4, Y+16	; 0x10
    20f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    20f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    20f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    20fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    20fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    20fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2100:	b9 84       	ldd	r11, Y+9	; 0x09
    2102:	c8 84       	ldd	r12, Y+8	; 0x08
    2104:	df 80       	ldd	r13, Y+7	; 0x07
    2106:	ee 80       	ldd	r14, Y+6	; 0x06
    2108:	fd 80       	ldd	r15, Y+5	; 0x05
    210a:	0c 81       	ldd	r16, Y+4	; 0x04
    210c:	1b 81       	ldd	r17, Y+3	; 0x03
    210e:	aa 81       	ldd	r26, Y+2	; 0x02
    2110:	b9 81       	ldd	r27, Y+1	; 0x01
    2112:	ce 0f       	add	r28, r30
    2114:	d1 1d       	adc	r29, r1
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	ed 01       	movw	r28, r26
    2122:	08 95       	ret

00002124 <snprintf>:
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	2e 97       	sbiw	r28, 0x0e	; 14
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	0e 89       	ldd	r16, Y+22	; 0x16
    213e:	1f 89       	ldd	r17, Y+23	; 0x17
    2140:	88 8d       	ldd	r24, Y+24	; 0x18
    2142:	99 8d       	ldd	r25, Y+25	; 0x19
    2144:	97 ff       	sbrs	r25, 7
    2146:	02 c0       	rjmp	.+4      	; 0x214c <snprintf+0x28>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e8       	ldi	r25, 0x80	; 128
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	1a 83       	std	Y+2, r17	; 0x02
    2154:	09 83       	std	Y+1, r16	; 0x01
    2156:	86 e0       	ldi	r24, 0x06	; 6
    2158:	8c 83       	std	Y+4, r24	; 0x04
    215a:	9e 01       	movw	r18, r28
    215c:	24 5e       	subi	r18, 0xE4	; 228
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	ce 01       	movw	r24, r28
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2166:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2168:	a9 01       	movw	r20, r18
    216a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <vfprintf>
    216e:	4d 81       	ldd	r20, Y+5	; 0x05
    2170:	5e 81       	ldd	r21, Y+6	; 0x06
    2172:	57 fd       	sbrc	r21, 7
    2174:	0a c0       	rjmp	.+20     	; 0x218a <snprintf+0x66>
    2176:	2f 81       	ldd	r18, Y+7	; 0x07
    2178:	38 85       	ldd	r19, Y+8	; 0x08
    217a:	42 17       	cp	r20, r18
    217c:	53 07       	cpc	r21, r19
    217e:	0c f4       	brge	.+2      	; 0x2182 <snprintf+0x5e>
    2180:	9a 01       	movw	r18, r20
    2182:	02 0f       	add	r16, r18
    2184:	13 1f       	adc	r17, r19
    2186:	f8 01       	movw	r30, r16
    2188:	10 82       	st	Z, r1
    218a:	2e 96       	adiw	r28, 0x0e	; 14
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <vfprintf>:
    21a0:	2f 92       	push	r2
    21a2:	3f 92       	push	r3
    21a4:	4f 92       	push	r4
    21a6:	5f 92       	push	r5
    21a8:	6f 92       	push	r6
    21aa:	7f 92       	push	r7
    21ac:	8f 92       	push	r8
    21ae:	9f 92       	push	r9
    21b0:	af 92       	push	r10
    21b2:	bf 92       	push	r11
    21b4:	cf 92       	push	r12
    21b6:	df 92       	push	r13
    21b8:	ef 92       	push	r14
    21ba:	ff 92       	push	r15
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	2b 97       	sbiw	r28, 0x0b	; 11
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	3c 01       	movw	r6, r24
    21d6:	2b 01       	movw	r4, r22
    21d8:	5a 01       	movw	r10, r20
    21da:	fc 01       	movw	r30, r24
    21dc:	17 82       	std	Z+7, r1	; 0x07
    21de:	16 82       	std	Z+6, r1	; 0x06
    21e0:	83 81       	ldd	r24, Z+3	; 0x03
    21e2:	81 fd       	sbrc	r24, 1
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <vfprintf+0x4c>
    21e6:	6f ef       	ldi	r22, 0xFF	; 255
    21e8:	7f ef       	ldi	r23, 0xFF	; 255
    21ea:	c6 c1       	rjmp	.+908    	; 0x2578 <__stack+0x379>
    21ec:	9a e0       	ldi	r25, 0x0A	; 10
    21ee:	89 2e       	mov	r8, r25
    21f0:	1e 01       	movw	r2, r28
    21f2:	08 94       	sec
    21f4:	21 1c       	adc	r2, r1
    21f6:	31 1c       	adc	r3, r1
    21f8:	f3 01       	movw	r30, r6
    21fa:	23 81       	ldd	r18, Z+3	; 0x03
    21fc:	f2 01       	movw	r30, r4
    21fe:	23 fd       	sbrc	r18, 3
    2200:	85 91       	lpm	r24, Z+
    2202:	23 ff       	sbrs	r18, 3
    2204:	81 91       	ld	r24, Z+
    2206:	2f 01       	movw	r4, r30
    2208:	88 23       	and	r24, r24
    220a:	09 f4       	brne	.+2      	; 0x220e <__stack+0xf>
    220c:	b2 c1       	rjmp	.+868    	; 0x2572 <__stack+0x373>
    220e:	85 32       	cpi	r24, 0x25	; 37
    2210:	39 f4       	brne	.+14     	; 0x2220 <__stack+0x21>
    2212:	23 fd       	sbrc	r18, 3
    2214:	85 91       	lpm	r24, Z+
    2216:	23 ff       	sbrs	r18, 3
    2218:	81 91       	ld	r24, Z+
    221a:	2f 01       	movw	r4, r30
    221c:	85 32       	cpi	r24, 0x25	; 37
    221e:	29 f4       	brne	.+10     	; 0x222a <__stack+0x2b>
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	b3 01       	movw	r22, r6
    2224:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    2228:	e7 cf       	rjmp	.-50     	; 0x21f8 <vfprintf+0x58>
    222a:	98 2f       	mov	r25, r24
    222c:	ff 24       	eor	r15, r15
    222e:	ee 24       	eor	r14, r14
    2230:	99 24       	eor	r9, r9
    2232:	ff e1       	ldi	r31, 0x1F	; 31
    2234:	ff 15       	cp	r31, r15
    2236:	d0 f0       	brcs	.+52     	; 0x226c <__stack+0x6d>
    2238:	9b 32       	cpi	r25, 0x2B	; 43
    223a:	69 f0       	breq	.+26     	; 0x2256 <__stack+0x57>
    223c:	9c 32       	cpi	r25, 0x2C	; 44
    223e:	28 f4       	brcc	.+10     	; 0x224a <__stack+0x4b>
    2240:	90 32       	cpi	r25, 0x20	; 32
    2242:	59 f0       	breq	.+22     	; 0x225a <__stack+0x5b>
    2244:	93 32       	cpi	r25, 0x23	; 35
    2246:	91 f4       	brne	.+36     	; 0x226c <__stack+0x6d>
    2248:	0e c0       	rjmp	.+28     	; 0x2266 <__stack+0x67>
    224a:	9d 32       	cpi	r25, 0x2D	; 45
    224c:	49 f0       	breq	.+18     	; 0x2260 <__stack+0x61>
    224e:	90 33       	cpi	r25, 0x30	; 48
    2250:	69 f4       	brne	.+26     	; 0x226c <__stack+0x6d>
    2252:	41 e0       	ldi	r20, 0x01	; 1
    2254:	24 c0       	rjmp	.+72     	; 0x229e <__stack+0x9f>
    2256:	52 e0       	ldi	r21, 0x02	; 2
    2258:	f5 2a       	or	r15, r21
    225a:	84 e0       	ldi	r24, 0x04	; 4
    225c:	f8 2a       	or	r15, r24
    225e:	28 c0       	rjmp	.+80     	; 0x22b0 <__stack+0xb1>
    2260:	98 e0       	ldi	r25, 0x08	; 8
    2262:	f9 2a       	or	r15, r25
    2264:	25 c0       	rjmp	.+74     	; 0x22b0 <__stack+0xb1>
    2266:	e0 e1       	ldi	r30, 0x10	; 16
    2268:	fe 2a       	or	r15, r30
    226a:	22 c0       	rjmp	.+68     	; 0x22b0 <__stack+0xb1>
    226c:	f7 fc       	sbrc	r15, 7
    226e:	29 c0       	rjmp	.+82     	; 0x22c2 <__stack+0xc3>
    2270:	89 2f       	mov	r24, r25
    2272:	80 53       	subi	r24, 0x30	; 48
    2274:	8a 30       	cpi	r24, 0x0A	; 10
    2276:	70 f4       	brcc	.+28     	; 0x2294 <__stack+0x95>
    2278:	f6 fe       	sbrs	r15, 6
    227a:	05 c0       	rjmp	.+10     	; 0x2286 <__stack+0x87>
    227c:	98 9c       	mul	r9, r8
    227e:	90 2c       	mov	r9, r0
    2280:	11 24       	eor	r1, r1
    2282:	98 0e       	add	r9, r24
    2284:	15 c0       	rjmp	.+42     	; 0x22b0 <__stack+0xb1>
    2286:	e8 9c       	mul	r14, r8
    2288:	e0 2c       	mov	r14, r0
    228a:	11 24       	eor	r1, r1
    228c:	e8 0e       	add	r14, r24
    228e:	f0 e2       	ldi	r31, 0x20	; 32
    2290:	ff 2a       	or	r15, r31
    2292:	0e c0       	rjmp	.+28     	; 0x22b0 <__stack+0xb1>
    2294:	9e 32       	cpi	r25, 0x2E	; 46
    2296:	29 f4       	brne	.+10     	; 0x22a2 <__stack+0xa3>
    2298:	f6 fc       	sbrc	r15, 6
    229a:	6b c1       	rjmp	.+726    	; 0x2572 <__stack+0x373>
    229c:	40 e4       	ldi	r20, 0x40	; 64
    229e:	f4 2a       	or	r15, r20
    22a0:	07 c0       	rjmp	.+14     	; 0x22b0 <__stack+0xb1>
    22a2:	9c 36       	cpi	r25, 0x6C	; 108
    22a4:	19 f4       	brne	.+6      	; 0x22ac <__stack+0xad>
    22a6:	50 e8       	ldi	r21, 0x80	; 128
    22a8:	f5 2a       	or	r15, r21
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <__stack+0xb1>
    22ac:	98 36       	cpi	r25, 0x68	; 104
    22ae:	49 f4       	brne	.+18     	; 0x22c2 <__stack+0xc3>
    22b0:	f2 01       	movw	r30, r4
    22b2:	23 fd       	sbrc	r18, 3
    22b4:	95 91       	lpm	r25, Z+
    22b6:	23 ff       	sbrs	r18, 3
    22b8:	91 91       	ld	r25, Z+
    22ba:	2f 01       	movw	r4, r30
    22bc:	99 23       	and	r25, r25
    22be:	09 f0       	breq	.+2      	; 0x22c2 <__stack+0xc3>
    22c0:	b8 cf       	rjmp	.-144    	; 0x2232 <__stack+0x33>
    22c2:	89 2f       	mov	r24, r25
    22c4:	85 54       	subi	r24, 0x45	; 69
    22c6:	83 30       	cpi	r24, 0x03	; 3
    22c8:	18 f0       	brcs	.+6      	; 0x22d0 <__stack+0xd1>
    22ca:	80 52       	subi	r24, 0x20	; 32
    22cc:	83 30       	cpi	r24, 0x03	; 3
    22ce:	38 f4       	brcc	.+14     	; 0x22de <__stack+0xdf>
    22d0:	44 e0       	ldi	r20, 0x04	; 4
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	a4 0e       	add	r10, r20
    22d6:	b5 1e       	adc	r11, r21
    22d8:	5f e3       	ldi	r21, 0x3F	; 63
    22da:	59 83       	std	Y+1, r21	; 0x01
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <__stack+0xfd>
    22de:	93 36       	cpi	r25, 0x63	; 99
    22e0:	31 f0       	breq	.+12     	; 0x22ee <__stack+0xef>
    22e2:	93 37       	cpi	r25, 0x73	; 115
    22e4:	79 f0       	breq	.+30     	; 0x2304 <__stack+0x105>
    22e6:	93 35       	cpi	r25, 0x53	; 83
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__stack+0xed>
    22ea:	56 c0       	rjmp	.+172    	; 0x2398 <__stack+0x199>
    22ec:	20 c0       	rjmp	.+64     	; 0x232e <__stack+0x12f>
    22ee:	f5 01       	movw	r30, r10
    22f0:	80 81       	ld	r24, Z
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	42 e0       	ldi	r20, 0x02	; 2
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	a4 0e       	add	r10, r20
    22fa:	b5 1e       	adc	r11, r21
    22fc:	61 01       	movw	r12, r2
    22fe:	01 e0       	ldi	r16, 0x01	; 1
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	12 c0       	rjmp	.+36     	; 0x2328 <__stack+0x129>
    2304:	f5 01       	movw	r30, r10
    2306:	c0 80       	ld	r12, Z
    2308:	d1 80       	ldd	r13, Z+1	; 0x01
    230a:	f6 fc       	sbrc	r15, 6
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <__stack+0x115>
    230e:	6f ef       	ldi	r22, 0xFF	; 255
    2310:	7f ef       	ldi	r23, 0xFF	; 255
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <__stack+0x119>
    2314:	69 2d       	mov	r22, r9
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	42 e0       	ldi	r20, 0x02	; 2
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	a4 0e       	add	r10, r20
    231e:	b5 1e       	adc	r11, r21
    2320:	c6 01       	movw	r24, r12
    2322:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <strnlen>
    2326:	8c 01       	movw	r16, r24
    2328:	5f e7       	ldi	r21, 0x7F	; 127
    232a:	f5 22       	and	r15, r21
    232c:	14 c0       	rjmp	.+40     	; 0x2356 <__stack+0x157>
    232e:	f5 01       	movw	r30, r10
    2330:	c0 80       	ld	r12, Z
    2332:	d1 80       	ldd	r13, Z+1	; 0x01
    2334:	f6 fc       	sbrc	r15, 6
    2336:	03 c0       	rjmp	.+6      	; 0x233e <__stack+0x13f>
    2338:	6f ef       	ldi	r22, 0xFF	; 255
    233a:	7f ef       	ldi	r23, 0xFF	; 255
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <__stack+0x143>
    233e:	69 2d       	mov	r22, r9
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	42 e0       	ldi	r20, 0x02	; 2
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	a4 0e       	add	r10, r20
    2348:	b5 1e       	adc	r11, r21
    234a:	c6 01       	movw	r24, r12
    234c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <strnlen_P>
    2350:	8c 01       	movw	r16, r24
    2352:	50 e8       	ldi	r21, 0x80	; 128
    2354:	f5 2a       	or	r15, r21
    2356:	f3 fe       	sbrs	r15, 3
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <__stack+0x169>
    235a:	1a c0       	rjmp	.+52     	; 0x2390 <__stack+0x191>
    235c:	80 e2       	ldi	r24, 0x20	; 32
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	b3 01       	movw	r22, r6
    2362:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    2366:	ea 94       	dec	r14
    2368:	8e 2d       	mov	r24, r14
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	08 17       	cp	r16, r24
    236e:	19 07       	cpc	r17, r25
    2370:	a8 f3       	brcs	.-22     	; 0x235c <__stack+0x15d>
    2372:	0e c0       	rjmp	.+28     	; 0x2390 <__stack+0x191>
    2374:	f6 01       	movw	r30, r12
    2376:	f7 fc       	sbrc	r15, 7
    2378:	85 91       	lpm	r24, Z+
    237a:	f7 fe       	sbrs	r15, 7
    237c:	81 91       	ld	r24, Z+
    237e:	6f 01       	movw	r12, r30
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	b3 01       	movw	r22, r6
    2384:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    2388:	e1 10       	cpse	r14, r1
    238a:	ea 94       	dec	r14
    238c:	01 50       	subi	r16, 0x01	; 1
    238e:	10 40       	sbci	r17, 0x00	; 0
    2390:	01 15       	cp	r16, r1
    2392:	11 05       	cpc	r17, r1
    2394:	79 f7       	brne	.-34     	; 0x2374 <__stack+0x175>
    2396:	ea c0       	rjmp	.+468    	; 0x256c <__stack+0x36d>
    2398:	94 36       	cpi	r25, 0x64	; 100
    239a:	11 f0       	breq	.+4      	; 0x23a0 <__stack+0x1a1>
    239c:	99 36       	cpi	r25, 0x69	; 105
    239e:	69 f5       	brne	.+90     	; 0x23fa <__stack+0x1fb>
    23a0:	f7 fe       	sbrs	r15, 7
    23a2:	08 c0       	rjmp	.+16     	; 0x23b4 <__stack+0x1b5>
    23a4:	f5 01       	movw	r30, r10
    23a6:	20 81       	ld	r18, Z
    23a8:	31 81       	ldd	r19, Z+1	; 0x01
    23aa:	42 81       	ldd	r20, Z+2	; 0x02
    23ac:	53 81       	ldd	r21, Z+3	; 0x03
    23ae:	84 e0       	ldi	r24, 0x04	; 4
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0a c0       	rjmp	.+20     	; 0x23c8 <__stack+0x1c9>
    23b4:	f5 01       	movw	r30, r10
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	9c 01       	movw	r18, r24
    23bc:	44 27       	eor	r20, r20
    23be:	37 fd       	sbrc	r19, 7
    23c0:	40 95       	com	r20
    23c2:	54 2f       	mov	r21, r20
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	a8 0e       	add	r10, r24
    23ca:	b9 1e       	adc	r11, r25
    23cc:	9f e6       	ldi	r25, 0x6F	; 111
    23ce:	f9 22       	and	r15, r25
    23d0:	57 ff       	sbrs	r21, 7
    23d2:	09 c0       	rjmp	.+18     	; 0x23e6 <__stack+0x1e7>
    23d4:	50 95       	com	r21
    23d6:	40 95       	com	r20
    23d8:	30 95       	com	r19
    23da:	21 95       	neg	r18
    23dc:	3f 4f       	sbci	r19, 0xFF	; 255
    23de:	4f 4f       	sbci	r20, 0xFF	; 255
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	e0 e8       	ldi	r30, 0x80	; 128
    23e4:	fe 2a       	or	r15, r30
    23e6:	ca 01       	movw	r24, r20
    23e8:	b9 01       	movw	r22, r18
    23ea:	a1 01       	movw	r20, r2
    23ec:	2a e0       	ldi	r18, 0x0A	; 10
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	0e 94 18 13 	call	0x2630	; 0x2630 <__ultoa_invert>
    23f4:	d8 2e       	mov	r13, r24
    23f6:	d2 18       	sub	r13, r2
    23f8:	40 c0       	rjmp	.+128    	; 0x247a <__stack+0x27b>
    23fa:	95 37       	cpi	r25, 0x75	; 117
    23fc:	29 f4       	brne	.+10     	; 0x2408 <__stack+0x209>
    23fe:	1f 2d       	mov	r17, r15
    2400:	1f 7e       	andi	r17, 0xEF	; 239
    2402:	2a e0       	ldi	r18, 0x0A	; 10
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	1d c0       	rjmp	.+58     	; 0x2442 <__stack+0x243>
    2408:	1f 2d       	mov	r17, r15
    240a:	19 7f       	andi	r17, 0xF9	; 249
    240c:	9f 36       	cpi	r25, 0x6F	; 111
    240e:	61 f0       	breq	.+24     	; 0x2428 <__stack+0x229>
    2410:	90 37       	cpi	r25, 0x70	; 112
    2412:	20 f4       	brcc	.+8      	; 0x241c <__stack+0x21d>
    2414:	98 35       	cpi	r25, 0x58	; 88
    2416:	09 f0       	breq	.+2      	; 0x241a <__stack+0x21b>
    2418:	ac c0       	rjmp	.+344    	; 0x2572 <__stack+0x373>
    241a:	0f c0       	rjmp	.+30     	; 0x243a <__stack+0x23b>
    241c:	90 37       	cpi	r25, 0x70	; 112
    241e:	39 f0       	breq	.+14     	; 0x242e <__stack+0x22f>
    2420:	98 37       	cpi	r25, 0x78	; 120
    2422:	09 f0       	breq	.+2      	; 0x2426 <__stack+0x227>
    2424:	a6 c0       	rjmp	.+332    	; 0x2572 <__stack+0x373>
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <__stack+0x231>
    2428:	28 e0       	ldi	r18, 0x08	; 8
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	0a c0       	rjmp	.+20     	; 0x2442 <__stack+0x243>
    242e:	10 61       	ori	r17, 0x10	; 16
    2430:	14 fd       	sbrc	r17, 4
    2432:	14 60       	ori	r17, 0x04	; 4
    2434:	20 e1       	ldi	r18, 0x10	; 16
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	04 c0       	rjmp	.+8      	; 0x2442 <__stack+0x243>
    243a:	14 fd       	sbrc	r17, 4
    243c:	16 60       	ori	r17, 0x06	; 6
    243e:	20 e1       	ldi	r18, 0x10	; 16
    2440:	32 e0       	ldi	r19, 0x02	; 2
    2442:	17 ff       	sbrs	r17, 7
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <__stack+0x257>
    2446:	f5 01       	movw	r30, r10
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	44 e0       	ldi	r20, 0x04	; 4
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	08 c0       	rjmp	.+16     	; 0x2466 <__stack+0x267>
    2456:	f5 01       	movw	r30, r10
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	bc 01       	movw	r22, r24
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	42 e0       	ldi	r20, 0x02	; 2
    2464:	50 e0       	ldi	r21, 0x00	; 0
    2466:	a4 0e       	add	r10, r20
    2468:	b5 1e       	adc	r11, r21
    246a:	a1 01       	movw	r20, r2
    246c:	0e 94 18 13 	call	0x2630	; 0x2630 <__ultoa_invert>
    2470:	d8 2e       	mov	r13, r24
    2472:	d2 18       	sub	r13, r2
    2474:	8f e7       	ldi	r24, 0x7F	; 127
    2476:	f8 2e       	mov	r15, r24
    2478:	f1 22       	and	r15, r17
    247a:	f6 fe       	sbrs	r15, 6
    247c:	0b c0       	rjmp	.+22     	; 0x2494 <__stack+0x295>
    247e:	5e ef       	ldi	r21, 0xFE	; 254
    2480:	f5 22       	and	r15, r21
    2482:	d9 14       	cp	r13, r9
    2484:	38 f4       	brcc	.+14     	; 0x2494 <__stack+0x295>
    2486:	f4 fe       	sbrs	r15, 4
    2488:	07 c0       	rjmp	.+14     	; 0x2498 <__stack+0x299>
    248a:	f2 fc       	sbrc	r15, 2
    248c:	05 c0       	rjmp	.+10     	; 0x2498 <__stack+0x299>
    248e:	8f ee       	ldi	r24, 0xEF	; 239
    2490:	f8 22       	and	r15, r24
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <__stack+0x299>
    2494:	1d 2d       	mov	r17, r13
    2496:	01 c0       	rjmp	.+2      	; 0x249a <__stack+0x29b>
    2498:	19 2d       	mov	r17, r9
    249a:	f4 fe       	sbrs	r15, 4
    249c:	0d c0       	rjmp	.+26     	; 0x24b8 <__stack+0x2b9>
    249e:	fe 01       	movw	r30, r28
    24a0:	ed 0d       	add	r30, r13
    24a2:	f1 1d       	adc	r31, r1
    24a4:	80 81       	ld	r24, Z
    24a6:	80 33       	cpi	r24, 0x30	; 48
    24a8:	19 f4       	brne	.+6      	; 0x24b0 <__stack+0x2b1>
    24aa:	99 ee       	ldi	r25, 0xE9	; 233
    24ac:	f9 22       	and	r15, r25
    24ae:	08 c0       	rjmp	.+16     	; 0x24c0 <__stack+0x2c1>
    24b0:	1f 5f       	subi	r17, 0xFF	; 255
    24b2:	f2 fe       	sbrs	r15, 2
    24b4:	05 c0       	rjmp	.+10     	; 0x24c0 <__stack+0x2c1>
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <__stack+0x2bf>
    24b8:	8f 2d       	mov	r24, r15
    24ba:	86 78       	andi	r24, 0x86	; 134
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <__stack+0x2c1>
    24be:	1f 5f       	subi	r17, 0xFF	; 255
    24c0:	0f 2d       	mov	r16, r15
    24c2:	f3 fc       	sbrc	r15, 3
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <__stack+0x2ef>
    24c6:	f0 fe       	sbrs	r15, 0
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <__stack+0x2e9>
    24ca:	1e 15       	cp	r17, r14
    24cc:	10 f0       	brcs	.+4      	; 0x24d2 <__stack+0x2d3>
    24ce:	9d 2c       	mov	r9, r13
    24d0:	0b c0       	rjmp	.+22     	; 0x24e8 <__stack+0x2e9>
    24d2:	9d 2c       	mov	r9, r13
    24d4:	9e 0c       	add	r9, r14
    24d6:	91 1a       	sub	r9, r17
    24d8:	1e 2d       	mov	r17, r14
    24da:	06 c0       	rjmp	.+12     	; 0x24e8 <__stack+0x2e9>
    24dc:	80 e2       	ldi	r24, 0x20	; 32
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	b3 01       	movw	r22, r6
    24e2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    24e6:	1f 5f       	subi	r17, 0xFF	; 255
    24e8:	1e 15       	cp	r17, r14
    24ea:	c0 f3       	brcs	.-16     	; 0x24dc <__stack+0x2dd>
    24ec:	04 c0       	rjmp	.+8      	; 0x24f6 <__stack+0x2f7>
    24ee:	1e 15       	cp	r17, r14
    24f0:	10 f4       	brcc	.+4      	; 0x24f6 <__stack+0x2f7>
    24f2:	e1 1a       	sub	r14, r17
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <__stack+0x2f9>
    24f6:	ee 24       	eor	r14, r14
    24f8:	04 ff       	sbrs	r16, 4
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <__stack+0x31b>
    24fc:	80 e3       	ldi	r24, 0x30	; 48
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	b3 01       	movw	r22, r6
    2502:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    2506:	02 ff       	sbrs	r16, 2
    2508:	1d c0       	rjmp	.+58     	; 0x2544 <__stack+0x345>
    250a:	01 fd       	sbrc	r16, 1
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <__stack+0x315>
    250e:	88 e7       	ldi	r24, 0x78	; 120
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e c0       	rjmp	.+28     	; 0x2530 <__stack+0x331>
    2514:	88 e5       	ldi	r24, 0x58	; 88
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0b c0       	rjmp	.+22     	; 0x2530 <__stack+0x331>
    251a:	80 2f       	mov	r24, r16
    251c:	86 78       	andi	r24, 0x86	; 134
    251e:	91 f0       	breq	.+36     	; 0x2544 <__stack+0x345>
    2520:	01 ff       	sbrs	r16, 1
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <__stack+0x329>
    2524:	8b e2       	ldi	r24, 0x2B	; 43
    2526:	01 c0       	rjmp	.+2      	; 0x252a <__stack+0x32b>
    2528:	80 e2       	ldi	r24, 0x20	; 32
    252a:	f7 fc       	sbrc	r15, 7
    252c:	8d e2       	ldi	r24, 0x2D	; 45
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	b3 01       	movw	r22, r6
    2532:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <__stack+0x345>
    2538:	80 e3       	ldi	r24, 0x30	; 48
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	b3 01       	movw	r22, r6
    253e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    2542:	9a 94       	dec	r9
    2544:	d9 14       	cp	r13, r9
    2546:	c0 f3       	brcs	.-16     	; 0x2538 <__stack+0x339>
    2548:	da 94       	dec	r13
    254a:	f1 01       	movw	r30, r2
    254c:	ed 0d       	add	r30, r13
    254e:	f1 1d       	adc	r31, r1
    2550:	80 81       	ld	r24, Z
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	b3 01       	movw	r22, r6
    2556:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    255a:	dd 20       	and	r13, r13
    255c:	a9 f7       	brne	.-22     	; 0x2548 <__stack+0x349>
    255e:	06 c0       	rjmp	.+12     	; 0x256c <__stack+0x36d>
    2560:	80 e2       	ldi	r24, 0x20	; 32
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	b3 01       	movw	r22, r6
    2566:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <fputc>
    256a:	ea 94       	dec	r14
    256c:	ee 20       	and	r14, r14
    256e:	c1 f7       	brne	.-16     	; 0x2560 <__stack+0x361>
    2570:	43 ce       	rjmp	.-890    	; 0x21f8 <vfprintf+0x58>
    2572:	f3 01       	movw	r30, r6
    2574:	66 81       	ldd	r22, Z+6	; 0x06
    2576:	77 81       	ldd	r23, Z+7	; 0x07
    2578:	cb 01       	movw	r24, r22
    257a:	2b 96       	adiw	r28, 0x0b	; 11
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	df 90       	pop	r13
    2594:	cf 90       	pop	r12
    2596:	bf 90       	pop	r11
    2598:	af 90       	pop	r10
    259a:	9f 90       	pop	r9
    259c:	8f 90       	pop	r8
    259e:	7f 90       	pop	r7
    25a0:	6f 90       	pop	r6
    25a2:	5f 90       	pop	r5
    25a4:	4f 90       	pop	r4
    25a6:	3f 90       	pop	r3
    25a8:	2f 90       	pop	r2
    25aa:	08 95       	ret

000025ac <strnlen_P>:
    25ac:	fc 01       	movw	r30, r24
    25ae:	05 90       	lpm	r0, Z+
    25b0:	61 50       	subi	r22, 0x01	; 1
    25b2:	70 40       	sbci	r23, 0x00	; 0
    25b4:	01 10       	cpse	r0, r1
    25b6:	d8 f7       	brcc	.-10     	; 0x25ae <strnlen_P+0x2>
    25b8:	80 95       	com	r24
    25ba:	90 95       	com	r25
    25bc:	8e 0f       	add	r24, r30
    25be:	9f 1f       	adc	r25, r31
    25c0:	08 95       	ret

000025c2 <strnlen>:
    25c2:	fc 01       	movw	r30, r24
    25c4:	61 50       	subi	r22, 0x01	; 1
    25c6:	70 40       	sbci	r23, 0x00	; 0
    25c8:	01 90       	ld	r0, Z+
    25ca:	01 10       	cpse	r0, r1
    25cc:	d8 f7       	brcc	.-10     	; 0x25c4 <strnlen+0x2>
    25ce:	80 95       	com	r24
    25d0:	90 95       	com	r25
    25d2:	8e 0f       	add	r24, r30
    25d4:	9f 1f       	adc	r25, r31
    25d6:	08 95       	ret

000025d8 <fputc>:
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	8c 01       	movw	r16, r24
    25e2:	eb 01       	movw	r28, r22
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	81 ff       	sbrs	r24, 1
    25e8:	1b c0       	rjmp	.+54     	; 0x2620 <fputc+0x48>
    25ea:	82 ff       	sbrs	r24, 2
    25ec:	0d c0       	rjmp	.+26     	; 0x2608 <fputc+0x30>
    25ee:	2e 81       	ldd	r18, Y+6	; 0x06
    25f0:	3f 81       	ldd	r19, Y+7	; 0x07
    25f2:	8c 81       	ldd	r24, Y+4	; 0x04
    25f4:	9d 81       	ldd	r25, Y+5	; 0x05
    25f6:	28 17       	cp	r18, r24
    25f8:	39 07       	cpc	r19, r25
    25fa:	64 f4       	brge	.+24     	; 0x2614 <fputc+0x3c>
    25fc:	e8 81       	ld	r30, Y
    25fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2600:	01 93       	st	Z+, r16
    2602:	f9 83       	std	Y+1, r31	; 0x01
    2604:	e8 83       	st	Y, r30
    2606:	06 c0       	rjmp	.+12     	; 0x2614 <fputc+0x3c>
    2608:	e8 85       	ldd	r30, Y+8	; 0x08
    260a:	f9 85       	ldd	r31, Y+9	; 0x09
    260c:	80 2f       	mov	r24, r16
    260e:	19 95       	eicall
    2610:	89 2b       	or	r24, r25
    2612:	31 f4       	brne	.+12     	; 0x2620 <fputc+0x48>
    2614:	8e 81       	ldd	r24, Y+6	; 0x06
    2616:	9f 81       	ldd	r25, Y+7	; 0x07
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	9f 83       	std	Y+7, r25	; 0x07
    261c:	8e 83       	std	Y+6, r24	; 0x06
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <fputc+0x4c>
    2620:	0f ef       	ldi	r16, 0xFF	; 255
    2622:	1f ef       	ldi	r17, 0xFF	; 255
    2624:	c8 01       	movw	r24, r16
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	08 95       	ret

00002630 <__ultoa_invert>:
    2630:	fa 01       	movw	r30, r20
    2632:	aa 27       	eor	r26, r26
    2634:	28 30       	cpi	r18, 0x08	; 8
    2636:	51 f1       	breq	.+84     	; 0x268c <__ultoa_invert+0x5c>
    2638:	20 31       	cpi	r18, 0x10	; 16
    263a:	81 f1       	breq	.+96     	; 0x269c <__ultoa_invert+0x6c>
    263c:	e8 94       	clt
    263e:	6f 93       	push	r22
    2640:	6e 7f       	andi	r22, 0xFE	; 254
    2642:	6e 5f       	subi	r22, 0xFE	; 254
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	8f 4f       	sbci	r24, 0xFF	; 255
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	af 4f       	sbci	r26, 0xFF	; 255
    264c:	b1 e0       	ldi	r27, 0x01	; 1
    264e:	3e d0       	rcall	.+124    	; 0x26cc <__ultoa_invert+0x9c>
    2650:	b4 e0       	ldi	r27, 0x04	; 4
    2652:	3c d0       	rcall	.+120    	; 0x26cc <__ultoa_invert+0x9c>
    2654:	67 0f       	add	r22, r23
    2656:	78 1f       	adc	r23, r24
    2658:	89 1f       	adc	r24, r25
    265a:	9a 1f       	adc	r25, r26
    265c:	a1 1d       	adc	r26, r1
    265e:	68 0f       	add	r22, r24
    2660:	79 1f       	adc	r23, r25
    2662:	8a 1f       	adc	r24, r26
    2664:	91 1d       	adc	r25, r1
    2666:	a1 1d       	adc	r26, r1
    2668:	6a 0f       	add	r22, r26
    266a:	71 1d       	adc	r23, r1
    266c:	81 1d       	adc	r24, r1
    266e:	91 1d       	adc	r25, r1
    2670:	a1 1d       	adc	r26, r1
    2672:	20 d0       	rcall	.+64     	; 0x26b4 <__ultoa_invert+0x84>
    2674:	09 f4       	brne	.+2      	; 0x2678 <__ultoa_invert+0x48>
    2676:	68 94       	set
    2678:	3f 91       	pop	r19
    267a:	2a e0       	ldi	r18, 0x0A	; 10
    267c:	26 9f       	mul	r18, r22
    267e:	11 24       	eor	r1, r1
    2680:	30 19       	sub	r19, r0
    2682:	30 5d       	subi	r19, 0xD0	; 208
    2684:	31 93       	st	Z+, r19
    2686:	de f6       	brtc	.-74     	; 0x263e <__ultoa_invert+0xe>
    2688:	cf 01       	movw	r24, r30
    268a:	08 95       	ret
    268c:	46 2f       	mov	r20, r22
    268e:	47 70       	andi	r20, 0x07	; 7
    2690:	40 5d       	subi	r20, 0xD0	; 208
    2692:	41 93       	st	Z+, r20
    2694:	b3 e0       	ldi	r27, 0x03	; 3
    2696:	0f d0       	rcall	.+30     	; 0x26b6 <__ultoa_invert+0x86>
    2698:	c9 f7       	brne	.-14     	; 0x268c <__ultoa_invert+0x5c>
    269a:	f6 cf       	rjmp	.-20     	; 0x2688 <__ultoa_invert+0x58>
    269c:	46 2f       	mov	r20, r22
    269e:	4f 70       	andi	r20, 0x0F	; 15
    26a0:	40 5d       	subi	r20, 0xD0	; 208
    26a2:	4a 33       	cpi	r20, 0x3A	; 58
    26a4:	18 f0       	brcs	.+6      	; 0x26ac <__ultoa_invert+0x7c>
    26a6:	49 5d       	subi	r20, 0xD9	; 217
    26a8:	31 fd       	sbrc	r19, 1
    26aa:	40 52       	subi	r20, 0x20	; 32
    26ac:	41 93       	st	Z+, r20
    26ae:	02 d0       	rcall	.+4      	; 0x26b4 <__ultoa_invert+0x84>
    26b0:	a9 f7       	brne	.-22     	; 0x269c <__ultoa_invert+0x6c>
    26b2:	ea cf       	rjmp	.-44     	; 0x2688 <__ultoa_invert+0x58>
    26b4:	b4 e0       	ldi	r27, 0x04	; 4
    26b6:	a6 95       	lsr	r26
    26b8:	97 95       	ror	r25
    26ba:	87 95       	ror	r24
    26bc:	77 95       	ror	r23
    26be:	67 95       	ror	r22
    26c0:	ba 95       	dec	r27
    26c2:	c9 f7       	brne	.-14     	; 0x26b6 <__ultoa_invert+0x86>
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	61 05       	cpc	r22, r1
    26c8:	71 05       	cpc	r23, r1
    26ca:	08 95       	ret
    26cc:	9b 01       	movw	r18, r22
    26ce:	ac 01       	movw	r20, r24
    26d0:	0a 2e       	mov	r0, r26
    26d2:	06 94       	lsr	r0
    26d4:	57 95       	ror	r21
    26d6:	47 95       	ror	r20
    26d8:	37 95       	ror	r19
    26da:	27 95       	ror	r18
    26dc:	ba 95       	dec	r27
    26de:	c9 f7       	brne	.-14     	; 0x26d2 <__ultoa_invert+0xa2>
    26e0:	62 0f       	add	r22, r18
    26e2:	73 1f       	adc	r23, r19
    26e4:	84 1f       	adc	r24, r20
    26e6:	95 1f       	adc	r25, r21
    26e8:	a0 1d       	adc	r26, r0
    26ea:	08 95       	ret

000026ec <_exit>:
    26ec:	f8 94       	cli

000026ee <__stop_program>:
    26ee:	ff cf       	rjmp	.-2      	; 0x26ee <__stop_program>
