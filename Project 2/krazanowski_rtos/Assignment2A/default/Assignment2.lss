
Assignment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800200  00003354  000033e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000013cf  008003a0  008003a0  00003588  2**0
                  ALLOC
  3 .debug_aranges 00000188  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000a2f  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000345c  00000000  00000000  0000413f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001090  00000000  00000000  0000759b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000026eb  00000000  00000000  0000862b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000680  00000000  00000000  0000ad18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000157d  00000000  00000000  0000b398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eb0  00000000  00000000  0000c915  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000298  00000000  00000000  0000d7c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 * Any interrupt ISR definition in the C code will
 * overwrite these default definitions.
 */
void __vectors (void) __attribute__ ((naked)) __attribute__ ((section (".vectors")));
void __vectors (void)
{
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <init2>
    asm("jmp        __init\n"::);

    vector("__vector_1");
       4:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__vector_1>
    vector("__vector_2");
       8:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_3");
       c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_4");
      10:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_5");
      14:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_6");
      18:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_7");
      1c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_8");
      20:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_9");
      24:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_10");
      28:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_11");
      2c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_12");
      30:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_13");
      34:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_14");
      38:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_15");
      3c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_16");
      40:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_17");
      44:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_17>
    vector("__vector_18");
      48:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_19");
      4c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_20");
      50:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_21");
      54:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_22");
      58:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_23");
      5c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_24");
      60:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_25");
      64:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__vector_25>
    vector("__vector_26");
      68:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_27");
      6c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_28");
      70:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_29");
      74:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_30");
      78:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_31");
      7c:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_31>
    vector("__vector_32");
      80:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_33");
      84:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_34");
      88:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_35");
      8c:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_36");
      90:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>
    vector("__vector_37");
      94:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_not_set>

00000098 <init2>:
}
      98:	11 24       	eor	r1, r1
void init2 (void) __attribute__ ((naked)) __attribute__ ((section (".init2")));
void init2 (void)
{
    asm("clr   " zero_reg "\n\t"::);

    SREG = 0;
      9a:	1f be       	out	0x3f, r1	; 63
    SP = RAMEND;
      9c:	8f ef       	ldi	r24, 0xFF	; 255
      9e:	91 e2       	ldi	r25, 0x21	; 33
      a0:	9e bf       	out	0x3e, r25	; 62
      a2:	8d bf       	out	0x3d, r24	; 61

000000a4 <__do_copy_data>:
}
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b2 e0       	ldi	r27, 0x02	; 2
      aa:	e4 e5       	ldi	r30, 0x54	; 84
      ac:	f3 e3       	ldi	r31, 0x33	; 51
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 3a       	cpi	r26, 0xA0	; 160
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	17 e1       	ldi	r17, 0x17	; 23
      c0:	a0 ea       	ldi	r26, 0xA0	; 160
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	af 36       	cpi	r26, 0x6F	; 111
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <init9>:
 * The last of the init functions.
 * Usually this would be the jump to "main()"
 */
void init9 (void) __attribute__ ((naked)) __attribute__ ((section (".init9")));
void init9 (void)
{
      ce:	0e 94 06 0c 	call	0x180c	; 0x180c <OS_Init>
      d2:	ff cf       	rjmp	.-2      	; 0xd2 <init9+0x4>

000000d4 <Ass2_Task_UpdateSweep>:
}

void Ass2_Task_UpdateSweep()
{
	#if PROFILECODE && PROFILE_STATES
	EnableProfileSample2();
      d4:	41 9a       	sbi	0x08, 1	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      d6:	8a ef       	ldi	r24, 0xFA	; 250
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	01 97       	sbiw	r24, 0x01	; 1
      dc:	f1 f7       	brne	.-4      	; 0xda <Ass2_Task_UpdateSweep+0x6>
	#endif

	#if PROFILECODE && PROFILE_STATES
	_delay_ms( 1 );
	DisableProfileSample2();
      de:	41 98       	cbi	0x08, 1	; 8
	}
	
	#if PROFILECODE && PROFILE_STATES
	DisableProfileSample2();
	#endif
}
      e0:	08 95       	ret

000000e2 <Ass2_Task_CalculateAndReport>:
}

void Ass2_Task_CalculateAndReport()
{
	#if PROFILECODE && PROFILE_STATES
	EnableProfileSample7();
      e2:	46 9a       	sbi	0x08, 6	; 8
      e4:	8a ef       	ldi	r24, 0xFA	; 250
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	01 97       	sbiw	r24, 0x01	; 1
      ea:	f1 f7       	brne	.-4      	; 0xe8 <Ass2_Task_CalculateAndReport+0x6>
	#endif

	#if PROFILECODE && PROFILE_STATES
	_delay_ms( 1 );
	DisableProfileSample7();
      ec:	46 98       	cbi	0x08, 6	; 8
	// }

	#if PROFILECODE && PROFILE_REPORT 
	DisableProfileSample1();
	#endif	
}
      ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
	clock8MHz();
      f4:	e1 e6       	ldi	r30, 0x61	; 97
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 e8       	ldi	r24, 0x80	; 128
      fa:	80 83       	st	Z, r24
      fc:	10 82       	st	Z, r1

	#if PROFILECODE
	InitializeLogicAnalyzerProfiler();
      fe:	87 b1       	in	r24, 0x07	; 7
     100:	8f ef       	ldi	r24, 0xFF	; 255
     102:	87 b9       	out	0x07, r24	; 7
	#endif

    // Set up the UART
	uart_init(UART_38400);
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <uart_init>
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "HELLO WORLD: starts echoing\n\r");
     10a:	00 d0       	rcall	.+0      	; 0x10c <main+0x1c>
     10c:	00 d0       	rcall	.+0      	; 0x10e <main+0x1e>
     10e:	ed b7       	in	r30, 0x3d	; 61
     110:	fe b7       	in	r31, 0x3e	; 62
     112:	31 96       	adiw	r30, 0x01	; 1
     114:	0e ed       	ldi	r16, 0xDE	; 222
     116:	16 e1       	ldi	r17, 0x16	; 22
     118:	ad b7       	in	r26, 0x3d	; 61
     11a:	be b7       	in	r27, 0x3e	; 62
     11c:	12 96       	adiw	r26, 0x02	; 2
     11e:	1c 93       	st	X, r17
     120:	0e 93       	st	-X, r16
     122:	11 97       	sbiw	r26, 0x01	; 1
     124:	81 e5       	ldi	r24, 0x51	; 81
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	93 83       	std	Z+3, r25	; 0x03
     12a:	82 83       	std	Z+2, r24	; 0x02
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	92 e0       	ldi	r25, 0x02	; 2
     130:	95 83       	std	Z+5, r25	; 0x05
     132:	84 83       	std	Z+4, r24	; 0x04
     134:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <snprintf>
	uart_putstr(ASS_UART_BUFF);
     138:	8d b7       	in	r24, 0x3d	; 61
     13a:	9e b7       	in	r25, 0x3e	; 62
     13c:	06 96       	adiw	r24, 0x06	; 6
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	f8 94       	cli
     142:	9e bf       	out	0x3e, r25	; 62
     144:	0f be       	out	0x3f, r0	; 63
     146:	8d bf       	out	0x3d, r24	; 61
     148:	c8 01       	movw	r24, r16
     14a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <uart_putstr>
      
	Task_Create( Ass2_Task_InitSweepReport, LOCALIZATIONSTATE_Initialization, PERIODIC, LOCALIZATIONSTATE_Initialization); 
     14e:	84 e5       	ldi	r24, 0x54	; 84
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	61 e0       	ldi	r22, 0x01	; 1
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	42 e0       	ldi	r20, 0x02	; 2
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <Task_Create>
	Task_Create( Ass2_Task_SendRequest, LOCALIZATIONSTATE_SendRequest, PERIODIC, LOCALIZATIONSTATE_SendRequest);
     162:	8c e2       	ldi	r24, 0x2C	; 44
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	63 e0       	ldi	r22, 0x03	; 3
     168:	70 e0       	ldi	r23, 0x00	; 0
     16a:	42 e0       	ldi	r20, 0x02	; 2
     16c:	50 e0       	ldi	r21, 0x00	; 0
     16e:	23 e0       	ldi	r18, 0x03	; 3
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <Task_Create>
	Task_Create( Ass2_Task_GetPINGResponse, LOCALIZATIONSTATE_GetPINGResponse, PERIODIC, LOCALIZATIONSTATE_GetPINGResponse);
     176:	82 e1       	ldi	r24, 0x12	; 18
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	64 e0       	ldi	r22, 0x04	; 4
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	42 e0       	ldi	r20, 0x02	; 2
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	24 e0       	ldi	r18, 0x04	; 4
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <Task_Create>
	Task_Create( Ass2_Task_GetSonarResponse, LOCALIZATIONSTATE_GetSonarResponse, PERIODIC, LOCALIZATIONSTATE_GetSonarResponse);
     18a:	88 ef       	ldi	r24, 0xF8	; 248
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	65 e0       	ldi	r22, 0x05	; 5
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	42 e0       	ldi	r20, 0x02	; 2
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	25 e0       	ldi	r18, 0x05	; 5
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <Task_Create>
	Task_Create( Ass2_Task_UpdateStatistics, LOCALIZATIONSTATE_UpdateStatistics, PERIODIC, LOCALIZATIONSTATE_UpdateStatistics);
     19e:	8e ed       	ldi	r24, 0xDE	; 222
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	66 e0       	ldi	r22, 0x06	; 6
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	42 e0       	ldi	r20, 0x02	; 2
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	26 e0       	ldi	r18, 0x06	; 6
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <Task_Create>
}
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	08 95       	ret

000001bc <Ass2_Task_UpdateStatistics>:
		Task_Next();
	}
}

void Ass2_Task_UpdateStatistics()
{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ca ef       	ldi	r28, 0xFA	; 250
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;)
    {
		// If we have not yet initialized, or if we are
		// reporting, skip executing this process/state
		if( (0 == InitializedSystem) || (0 != ReportingOutcome) )
     1c4:	80 91 a0 03 	lds	r24, 0x03A0
     1c8:	90 91 a1 03 	lds	r25, 0x03A1
     1cc:	89 2b       	or	r24, r25
     1ce:	31 f0       	breq	.+12     	; 0x1dc <Ass2_Task_UpdateStatistics+0x20>
     1d0:	80 91 a2 03 	lds	r24, 0x03A2
     1d4:	90 91 a3 03 	lds	r25, 0x03A3
     1d8:	89 2b       	or	r24, r25
     1da:	11 f0       	breq	.+4      	; 0x1e0 <Ass2_Task_UpdateStatistics+0x24>
		{
			Task_Next();
     1dc:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample6();
     1e0:	45 9a       	sbi	0x08, 5	; 8
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 97       	sbiw	r24, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <Ass2_Task_UpdateStatistics+0x28>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample6();
     1e8:	45 98       	cbi	0x08, 5	; 8
		#endif
	
		#if SIMPLESTATES
		Task_Next();
     1ea:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
     1ee:	ea cf       	rjmp	.-44     	; 0x1c4 <Ass2_Task_UpdateStatistics+0x8>

000001f0 <Ass2_Task_GetSonarResponse>:
		Task_Next();
	}
}

void Ass2_Task_GetSonarResponse()
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	ca ef       	ldi	r28, 0xFA	; 250
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;)
    {
		// If we have not yet initialized, or if we are
		// reporting, skip executing this process/state
		if( (0 == InitializedSystem) || (0 != ReportingOutcome) )
     1f8:	80 91 a0 03 	lds	r24, 0x03A0
     1fc:	90 91 a1 03 	lds	r25, 0x03A1
     200:	89 2b       	or	r24, r25
     202:	31 f0       	breq	.+12     	; 0x210 <Ass2_Task_GetSonarResponse+0x20>
     204:	80 91 a2 03 	lds	r24, 0x03A2
     208:	90 91 a3 03 	lds	r25, 0x03A3
     20c:	89 2b       	or	r24, r25
     20e:	11 f0       	breq	.+4      	; 0x214 <Ass2_Task_GetSonarResponse+0x24>
		{
			Task_Next();
     210:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample5();
     214:	44 9a       	sbi	0x08, 4	; 8
     216:	ce 01       	movw	r24, r28
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <Ass2_Task_GetSonarResponse+0x28>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample5();
     21c:	44 98       	cbi	0x08, 4	; 8
		#endif
	
		#if SIMPLESTATES
		Task_Next();
     21e:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
     222:	ea cf       	rjmp	.-44     	; 0x1f8 <Ass2_Task_GetSonarResponse+0x8>

00000224 <Ass2_Task_GetPINGResponse>:
		Task_Next();
	}
}

void Ass2_Task_GetPINGResponse()
{
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ca ef       	ldi	r28, 0xFA	; 250
     22a:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;)
    {
		// If we have not yet initialized, or if we are
		// reporting, skip executing this process/state
		if( (0 == InitializedSystem) || (0 != ReportingOutcome) )
     22c:	80 91 a0 03 	lds	r24, 0x03A0
     230:	90 91 a1 03 	lds	r25, 0x03A1
     234:	89 2b       	or	r24, r25
     236:	31 f0       	breq	.+12     	; 0x244 <Ass2_Task_GetPINGResponse+0x20>
     238:	80 91 a2 03 	lds	r24, 0x03A2
     23c:	90 91 a3 03 	lds	r25, 0x03A3
     240:	89 2b       	or	r24, r25
     242:	11 f0       	breq	.+4      	; 0x248 <Ass2_Task_GetPINGResponse+0x24>
		{
			Task_Next();
     244:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample4();
     248:	43 9a       	sbi	0x08, 3	; 8
     24a:	ce 01       	movw	r24, r28
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <Ass2_Task_GetPINGResponse+0x28>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample4();
     250:	43 98       	cbi	0x08, 3	; 8
		#endif
	
		#if SIMPLESTATES
		Task_Next();
     252:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
     256:	ea cf       	rjmp	.-44     	; 0x22c <Ass2_Task_GetPINGResponse+0x8>

00000258 <Ass2_Task_SendRequest>:
	DisableProfileSample2();
	#endif
}

void Ass2_Task_SendRequest()
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ca ef       	ldi	r28, 0xFA	; 250
     25e:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;)
    {
		// If we have not yet initialized, or if we are
		// reporting, skip executing this process/state
		if( (0 == InitializedSystem) || (0 != ReportingOutcome) )
     260:	80 91 a0 03 	lds	r24, 0x03A0
     264:	90 91 a1 03 	lds	r25, 0x03A1
     268:	89 2b       	or	r24, r25
     26a:	31 f0       	breq	.+12     	; 0x278 <Ass2_Task_SendRequest+0x20>
     26c:	80 91 a2 03 	lds	r24, 0x03A2
     270:	90 91 a3 03 	lds	r25, 0x03A3
     274:	89 2b       	or	r24, r25
     276:	11 f0       	breq	.+4      	; 0x27c <Ass2_Task_SendRequest+0x24>
		{
			Task_Next();
     278:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample3();
     27c:	42 9a       	sbi	0x08, 2	; 8
     27e:	ce 01       	movw	r24, r28
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <Ass2_Task_SendRequest+0x28>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample3();
     284:	42 98       	cbi	0x08, 2	; 8
		#endif
	
		#if SIMPLESTATES
		Task_Next();
     286:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
     28a:	ea cf       	rjmp	.-44     	; 0x260 <Ass2_Task_SendRequest+0x8>

0000028c <Ass2_Task_Initialization>:
		}
	}
}

void Ass2_Task_Initialization()
{
     28c:	1f 93       	push	r17
	#if PROFILECODE && PROFILE_STATES
	EnableProfileSample1();
     28e:	40 9a       	sbi	0x08, 0	; 8
	#endif

	int sreg = SREG;
     290:	1f b7       	in	r17, 0x3f	; 63
	cli();
     292:	f8 94       	cli
	InitializeServoController( &SonarDirectionServo );
	InitializeCommunication( station_addr, remote_addr );
	StatisticsInitialize();
	#endif

	ServoStartSweep();
     294:	0e 94 5d 03 	call	0x6ba	; 0x6ba <ServoStartSweep>
	SweepComplete = 0;
     298:	10 92 a5 03 	sts	0x03A5, r1
     29c:	10 92 a4 03 	sts	0x03A4, r1
	
	SREG = sreg;
     2a0:	1f bf       	out	0x3f, r17	; 63

	#if PROFILECODE && PROFILE_STATES
	DisableProfileSample1();
     2a2:	40 98       	cbi	0x08, 0	; 8
	#endif
}
     2a4:	1f 91       	pop	r17
     2a6:	08 95       	ret

000002a8 <Ass2_Task_InitSweepReport>:
void Ass2_Task_UpdateStatistics();

void Ass2_Task_CalculateAndReport();

void Ass2_Task_InitSweepReport()
{
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
    { 
		if( 0 == InitializedSystem )
		{
			Ass2_Task_Initialization();
			Task_Next();
			InitializedSystem = 1;
     2b0:	01 e0       	ldi	r16, 0x01	; 1
     2b2:	10 e0       	ldi	r17, 0x00	; 0
     2b4:	ca ef       	ldi	r28, 0xFA	; 250
     2b6:	d0 e0       	ldi	r29, 0x00	; 0

void Ass2_Task_InitSweepReport()
{
	for(;;)
    { 
		if( 0 == InitializedSystem )
     2b8:	80 91 a0 03 	lds	r24, 0x03A0
     2bc:	90 91 a1 03 	lds	r25, 0x03A1
     2c0:	89 2b       	or	r24, r25
     2c2:	49 f4       	brne	.+18     	; 0x2d6 <Ass2_Task_InitSweepReport+0x2e>
		{
			Ass2_Task_Initialization();
     2c4:	0e 94 46 01 	call	0x28c	; 0x28c <Ass2_Task_Initialization>
			Task_Next();
     2c8:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
			InitializedSystem = 1;
     2cc:	10 93 a1 03 	sts	0x03A1, r17
     2d0:	00 93 a0 03 	sts	0x03A0, r16
     2d4:	f1 cf       	rjmp	.-30     	; 0x2b8 <Ass2_Task_InitSweepReport+0x10>
		}
		else if( (0 != InitializedSystem) && (0 == ReportingOutcome) )
     2d6:	80 91 a0 03 	lds	r24, 0x03A0
     2da:	90 91 a1 03 	lds	r25, 0x03A1
     2de:	89 2b       	or	r24, r25
     2e0:	61 f0       	breq	.+24     	; 0x2fa <Ass2_Task_InitSweepReport+0x52>
     2e2:	80 91 a2 03 	lds	r24, 0x03A2
     2e6:	90 91 a3 03 	lds	r25, 0x03A3
     2ea:	89 2b       	or	r24, r25
     2ec:	31 f4       	brne	.+12     	; 0x2fa <Ass2_Task_InitSweepReport+0x52>
}

void Ass2_Task_UpdateSweep()
{
	#if PROFILECODE && PROFILE_STATES
	EnableProfileSample2();
     2ee:	41 9a       	sbi	0x08, 1	; 8
     2f0:	ce 01       	movw	r24, r28
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <Ass2_Task_InitSweepReport+0x4a>
	#endif

	#if PROFILECODE && PROFILE_STATES
	_delay_ms( 1 );
	DisableProfileSample2();
     2f6:	41 98       	cbi	0x08, 1	; 8
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <Ass2_Task_InitSweepReport+0x5c>
}

void Ass2_Task_CalculateAndReport()
{
	#if PROFILECODE && PROFILE_STATES
	EnableProfileSample7();
     2fa:	46 9a       	sbi	0x08, 6	; 8
     2fc:	ce 01       	movw	r24, r28
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <Ass2_Task_InitSweepReport+0x56>
	#endif

	#if PROFILECODE && PROFILE_STATES
	_delay_ms( 1 );
	DisableProfileSample7();
     302:	46 98       	cbi	0x08, 6	; 8
			Task_Next();
		}
		else // if( (0 != InitializedSystem) && (0 != ReportingOutcome) )
		{
			Ass2_Task_CalculateAndReport();
			Task_Next();
     304:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <Task_Next>
     308:	d7 cf       	rjmp	.-82     	; 0x2b8 <Ass2_Task_InitSweepReport+0x10>

0000030a <ResetMessageClock>:

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     30a:	10 92 a7 03 	sts	0x03A7, r1
     30e:	10 92 a6 03 	sts	0x03A6, r1

	// Reset the hardware clock
}
     312:	08 95       	ret

00000314 <GetMessageClock>:

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     314:	20 91 a6 03 	lds	r18, 0x03A6
     318:	30 91 a7 03 	lds	r19, 0x03A7
}
     31c:	c9 01       	movw	r24, r18
     31e:	08 95       	ret

00000320 <CommunicationPINGTimeout>:
{
	#if PROFILECODE && PROFILE_AVR 
	DisableProfileSample1();  // Needs to be disabled in the call
	#endif

	if( 0 == PINGReceivedFlag )
     320:	80 91 69 17 	lds	r24, 0x1769
     324:	88 23       	and	r24, r24
     326:	19 f0       	breq	.+6      	; 0x32e <CommunicationPINGTimeout+0xe>
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	0b c0       	rjmp	.+22     	; 0x344 <CommunicationPINGTimeout+0x24>

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     32e:	80 91 a6 03 	lds	r24, 0x03A6
     332:	90 91 a7 03 	lds	r25, 0x03A7
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	81 52       	subi	r24, 0x21	; 33
     33c:	9e 44       	sbci	r25, 0x4E	; 78
     33e:	10 f0       	brcs	.+4      	; 0x344 <CommunicationPINGTimeout+0x24>
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	30 e0       	ldi	r19, 0x00	; 0
			return 1;
		}
	}
	  
	return 0;  /// Currently wait indefinately, todo: add a timeout
}
     344:	c9 01       	movw	r24, r18
     346:	08 95       	ret

00000348 <CommunicationPingResetRetryCount>:

void CommunicationPingResetRetryCount()
{
	TimeoutCounter = 0;
     348:	10 92 6b 17 	sts	0x176B, r1
     34c:	10 92 6a 17 	sts	0x176A, r1
}
     350:	08 95       	ret

00000352 <CommunicationPingUpdateRetryCount>:

#define PINGRETRYCOUNT 0

int CommunicationPingUpdateRetryCount()
{
	if( TimeoutCounter<=PINGRETRYCOUNT )
     352:	80 91 6a 17 	lds	r24, 0x176A
     356:	90 91 6b 17 	lds	r25, 0x176B
     35a:	18 16       	cp	r1, r24
     35c:	19 06       	cpc	r1, r25
     35e:	1c f4       	brge	.+6      	; 0x366 <CommunicationPingUpdateRetryCount+0x14>
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	0b c0       	rjmp	.+22     	; 0x37c <CommunicationPingUpdateRetryCount+0x2a>
	{
		TimeoutCounter++;
     366:	80 91 6a 17 	lds	r24, 0x176A
     36a:	90 91 6b 17 	lds	r25, 0x176B
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	90 93 6b 17 	sts	0x176B, r25
     374:	80 93 6a 17 	sts	0x176A, r24
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
		return 0;
	}

	return 1;
}
     37c:	c9 01       	movw	r24, r18
     37e:	08 95       	ret

00000380 <radio_rxhandler>:
{
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample8();
	#endif

	PINGReceivedFlag = 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 69 17 	sts	0x1769, r24
	SONARReceivedFlag = 0;
     386:	10 92 5d 17 	sts	0x175D, r1

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     38a:	10 92 a7 03 	sts	0x03A7, r1
     38e:	10 92 a6 03 	sts	0x03A6, r1
	ResetMessageClock();

	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample8();
	#endif
}
     392:	08 95       	ret

00000394 <CommunicationReportDistance>:
	uart_putstr(ASS_UART_BUFF);
	#endif
}

void CommunicationReportDistance( CommunicationStatStruct *CommStat )
{
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	0f 92       	push	r0
     3a6:	0f 92       	push	r0
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
	Profile8();
     3ac:	47 9a       	sbi	0x08, 7	; 8
     3ae:	1a 82       	std	Y+2, r1	; 0x02
     3b0:	19 82       	std	Y+1, r1	; 0x01
     3b2:	29 81       	ldd	r18, Y+1	; 0x01
     3b4:	3a 81       	ldd	r19, Y+2	; 0x02
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
     3b8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ba:	3a 83       	std	Y+2, r19	; 0x02
     3bc:	29 83       	std	Y+1, r18	; 0x01
     3be:	29 81       	ldd	r18, Y+1	; 0x01
     3c0:	3a 81       	ldd	r19, Y+2	; 0x02
     3c2:	2f 5f       	subi	r18, 0xFF	; 255
     3c4:	3f 4f       	sbci	r19, 0xFF	; 255
     3c6:	3a 83       	std	Y+2, r19	; 0x02
     3c8:	29 83       	std	Y+1, r18	; 0x01
     3ca:	47 98       	cbi	0x08, 7	; 8

	float ActualDistance = (340.0 * CommStat->Distance/1000.0)/10.0 - 0.8192;
     3cc:	fc 01       	movw	r30, r24
     3ce:	e7 80       	ldd	r14, Z+7	; 0x07
     3d0:	f0 84       	ldd	r15, Z+8	; 0x08
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "distance %u (%u)\n\r", (unsigned int)ActualDistance, (unsigned int)CommStat->Distance);
     3d2:	8d b7       	in	r24, 0x3d	; 61
     3d4:	9e b7       	in	r25, 0x3e	; 62
     3d6:	0a 97       	sbiw	r24, 0x0a	; 10
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	9e bf       	out	0x3e, r25	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	8d bf       	out	0x3d, r24	; 61
     3e2:	0d b7       	in	r16, 0x3d	; 61
     3e4:	1e b7       	in	r17, 0x3e	; 62
     3e6:	0f 5f       	subi	r16, 0xFF	; 255
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	8e ed       	ldi	r24, 0xDE	; 222
     3ec:	c8 2e       	mov	r12, r24
     3ee:	86 e1       	ldi	r24, 0x16	; 22
     3f0:	d8 2e       	mov	r13, r24
     3f2:	ed b7       	in	r30, 0x3d	; 61
     3f4:	fe b7       	in	r31, 0x3e	; 62
     3f6:	d2 82       	std	Z+2, r13	; 0x02
     3f8:	c1 82       	std	Z+1, r12	; 0x01
     3fa:	81 e5       	ldi	r24, 0x51	; 81
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	f8 01       	movw	r30, r16
     400:	93 83       	std	Z+3, r25	; 0x03
     402:	82 83       	std	Z+2, r24	; 0x02
     404:	86 e3       	ldi	r24, 0x36	; 54
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	95 83       	std	Z+5, r25	; 0x05
     40a:	84 83       	std	Z+4, r24	; 0x04
     40c:	b7 01       	movw	r22, r14
     40e:	88 27       	eor	r24, r24
     410:	77 fd       	sbrc	r23, 7
     412:	80 95       	com	r24
     414:	98 2f       	mov	r25, r24
     416:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__floatsisf>
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	4a ea       	ldi	r20, 0xAA	; 170
     420:	53 e4       	ldi	r21, 0x43	; 67
     422:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	4a e7       	ldi	r20, 0x7A	; 122
     42c:	54 e4       	ldi	r21, 0x44	; 68
     42e:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 e2       	ldi	r20, 0x20	; 32
     438:	51 e4       	ldi	r21, 0x41	; 65
     43a:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
     43e:	27 e1       	ldi	r18, 0x17	; 23
     440:	37 eb       	ldi	r19, 0xB7	; 183
     442:	41 e5       	ldi	r20, 0x51	; 81
     444:	5f e3       	ldi	r21, 0x3F	; 63
     446:	0e 94 c3 11 	call	0x2386	; 0x2386 <__subsf3>
     44a:	0e 94 4b 10 	call	0x2096	; 0x2096 <__fixunssfsi>
     44e:	f8 01       	movw	r30, r16
     450:	77 83       	std	Z+7, r23	; 0x07
     452:	66 83       	std	Z+6, r22	; 0x06
     454:	f1 86       	std	Z+9, r15	; 0x09
     456:	e0 86       	std	Z+8, r14	; 0x08
     458:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <snprintf>
	uart_putstr(ASS_UART_BUFF);
     45c:	8d b7       	in	r24, 0x3d	; 61
     45e:	9e b7       	in	r25, 0x3e	; 62
     460:	0a 96       	adiw	r24, 0x0a	; 10
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	9e bf       	out	0x3e, r25	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	8d bf       	out	0x3d, r24	; 61
     46c:	c6 01       	movw	r24, r12
     46e:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <uart_putstr>
}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	08 95       	ret

00000488 <CommunicationGetResponseStatistics>:

	return SONARReceivedFlag;
}

void CommunicationGetResponseStatistics( CommunicationStatStruct *CommStat )
{ 
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	8c 01       	movw	r16, r24
	
	CommStat->PingReceiveTime = sonar_get_ping_time();
     49a:	0e 94 41 08 	call	0x1082	; 0x1082 <sonar_get_ping_time>
     49e:	d8 01       	movw	r26, r16
     4a0:	14 96       	adiw	r26, 0x04	; 4
     4a2:	9c 93       	st	X, r25
     4a4:	8e 93       	st	-X, r24
     4a6:	13 97       	sbiw	r26, 0x03	; 3
	CommStat->SonarReceiveTime = sonar_get_sonar_time();
     4a8:	0e 94 47 08 	call	0x108e	; 0x108e <sonar_get_sonar_time>
     4ac:	f8 01       	movw	r30, r16
     4ae:	96 83       	std	Z+6, r25	; 0x06
     4b0:	85 83       	std	Z+5, r24	; 0x05
	CommStat->Distance = sonar_get_ping_time(); 
     4b2:	0e 94 41 08 	call	0x1082	; 0x1082 <sonar_get_ping_time>
     4b6:	d8 01       	movw	r26, r16
     4b8:	18 96       	adiw	r26, 0x08	; 8
     4ba:	9c 93       	st	X, r25
     4bc:	8e 93       	st	-X, r24
     4be:	17 97       	sbiw	r26, 0x07	; 7

	#if 1
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "R: %u (%u) [%u, %u]\n\r", sonar_get_distance(), (int)CommStat->Distance, sonar_get_ping_time(), sonar_get_sonar_time() );
     4c0:	0e 94 35 08 	call	0x106a	; 0x106a <sonar_get_distance>
     4c4:	6c 01       	movw	r12, r24
     4c6:	f8 01       	movw	r30, r16
     4c8:	a7 80       	ldd	r10, Z+7	; 0x07
     4ca:	b0 84       	ldd	r11, Z+8	; 0x08
     4cc:	0e 94 41 08 	call	0x1082	; 0x1082 <sonar_get_ping_time>
     4d0:	7c 01       	movw	r14, r24
     4d2:	0e 94 47 08 	call	0x108e	; 0x108e <sonar_get_sonar_time>
     4d6:	2d b7       	in	r18, 0x3d	; 61
     4d8:	3e b7       	in	r19, 0x3e	; 62
     4da:	2e 50       	subi	r18, 0x0E	; 14
     4dc:	30 40       	sbci	r19, 0x00	; 0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	3e bf       	out	0x3e, r19	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	2d bf       	out	0x3d, r18	; 61
     4e8:	ed b7       	in	r30, 0x3d	; 61
     4ea:	fe b7       	in	r31, 0x3e	; 62
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	0e ed       	ldi	r16, 0xDE	; 222
     4f0:	16 e1       	ldi	r17, 0x16	; 22
     4f2:	ad b7       	in	r26, 0x3d	; 61
     4f4:	be b7       	in	r27, 0x3e	; 62
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	1c 93       	st	X, r17
     4fa:	0e 93       	st	-X, r16
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	21 e5       	ldi	r18, 0x51	; 81
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	33 83       	std	Z+3, r19	; 0x03
     504:	22 83       	std	Z+2, r18	; 0x02
     506:	29 e4       	ldi	r18, 0x49	; 73
     508:	32 e0       	ldi	r19, 0x02	; 2
     50a:	35 83       	std	Z+5, r19	; 0x05
     50c:	24 83       	std	Z+4, r18	; 0x04
     50e:	d7 82       	std	Z+7, r13	; 0x07
     510:	c6 82       	std	Z+6, r12	; 0x06
     512:	b1 86       	std	Z+9, r11	; 0x09
     514:	a0 86       	std	Z+8, r10	; 0x08
     516:	f3 86       	std	Z+11, r15	; 0x0b
     518:	e2 86       	std	Z+10, r14	; 0x0a
     51a:	95 87       	std	Z+13, r25	; 0x0d
     51c:	84 87       	std	Z+12, r24	; 0x0c
     51e:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <snprintf>
	uart_putstr(ASS_UART_BUFF);
     522:	ed b7       	in	r30, 0x3d	; 61
     524:	fe b7       	in	r31, 0x3e	; 62
     526:	3e 96       	adiw	r30, 0x0e	; 14
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	fe bf       	out	0x3e, r31	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	ed bf       	out	0x3d, r30	; 61
     532:	c8 01       	movw	r24, r16
     534:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <uart_putstr>
	#endif
}
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	bf 90       	pop	r11
     546:	af 90       	pop	r10
     548:	08 95       	ret

0000054a <CommunicationReceivedSonarResponse>:
{
	#if PROFILECODE && PROFILE_ULTRASOUND
	EnableProfileSample4();
	#endif

	if( 0 != sonar_echo_received() )
     54a:	0e 94 2d 08 	call	0x105a	; 0x105a <sonar_echo_received>
     54e:	88 23       	and	r24, r24
     550:	19 f0       	breq	.+6      	; 0x558 <CommunicationReceivedSonarResponse+0xe>
		#if PROFILECODE && PROFILE_ULTRASOUND
		DisableProfileSample4();
		EnableProfileSample5();
		#endif

		SONARReceivedFlag = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 5d 17 	sts	0x175D, r24

	#if PROFILECODE && PROFILE_ULTRASOUND
	DisableProfileSample4();
	#endif

	return SONARReceivedFlag;
     558:	80 91 5d 17 	lds	r24, 0x175D
}
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	08 95       	ret

00000560 <CommuncationReceivedPING>:

	return 1;
}

int CommuncationReceivedPING()
{
     560:	1f 93       	push	r17
     562:	df 93       	push	r29
     564:	cf 93       	push	r28
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	a0 97       	sbiw	r28, 0x20	; 32
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample2();
	#endif

	int Received = PINGReceivedFlag;
     576:	10 91 69 17 	lds	r17, 0x1769
	if( 0 != PINGReceivedFlag )
     57a:	80 91 69 17 	lds	r24, 0x1769
     57e:	88 23       	and	r24, r24
     580:	a9 f0       	breq	.+42     	; 0x5ac <CommuncationReceivedPING+0x4c>
	{
		#if PROFILECODE && PROFILE_AVR
		EnableProfileSample2();
		#endif

		cli();
     582:	f8 94       	cli

		#if PROFILECODE && PROFILE_AVR 
		DisableProfileSample2();
		#endif

		PINGReceivedFlag = 0;
     584:	10 92 69 17 	sts	0x1769, r1
		SONARReceivedFlag = 0;
     588:	10 92 5d 17 	sts	0x175D, r1
	
		#if PROFILECODE && PROFILE_WIRELESS 
		EnableProfileSample3();
		#endif	
		radiopacket_t ReceivePacket;
		RADIO_RX_STATUS status = Radio_Receive( &ReceivePacket );
     58c:	ce 01       	movw	r24, r28
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	0e 94 88 05 	call	0xb10	; 0xb10 <Radio_Receive>
		#if PROFILECODE && PROFILE_AVR
		EnableProfileSample3();
		#endif

		// enable interrupts
		sei();
     594:	78 94       	sei
		#if PROFILECODE && PROFILE_ULTRASOUND
		EnableProfileSample3();
		#endif
		// Set the current time
		// sonar_reset_trigger_time();
		sonar_trigger();
     596:	0e 94 27 08 	call	0x104e	; 0x104e <sonar_trigger>
     59a:	80 e9       	ldi	r24, 0x90	; 144
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	28 ec       	ldi	r18, 0xC8	; 200
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	f9 01       	movw	r30, r18
     5a4:	31 97       	sbiw	r30, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <CommuncationReceivedPING+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5aa:	d9 f7       	brne	.-10     	; 0x5a2 <CommuncationReceivedPING+0x42>
	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample2();
	#endif

	return Received;
}
     5ac:	81 2f       	mov	r24, r17
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	a0 96       	adiw	r28, 0x20	; 32
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	cf 91       	pop	r28
     5be:	df 91       	pop	r29
     5c0:	1f 91       	pop	r17
     5c2:	08 95       	ret

000005c4 <CommunicationSendTriggerMessage>:

	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample6();
	#endif

	PINGReceivedFlag = 0;
     5c4:	10 92 69 17 	sts	0x1769, r1
	SONARReceivedFlag = 0;
     5c8:	10 92 5d 17 	sts	0x175D, r1

	// disable interrupts during setup

	packet.type = COMMAND;
     5cc:	10 92 3d 17 	sts	0x173D, r1
	packet.payload.command.command = Trigger;
     5d0:	10 92 45 17 	sts	0x1745, r1
	packet.payload.command.sender_address[0] = station_addr[0];
     5d4:	80 91 2c 02 	lds	r24, 0x022C
     5d8:	80 93 40 17 	sts	0x1740, r24
	packet.payload.command.sender_address[1] = station_addr[1];
     5dc:	80 91 2d 02 	lds	r24, 0x022D
     5e0:	80 93 41 17 	sts	0x1741, r24
	packet.payload.command.sender_address[2] = station_addr[2];
     5e4:	80 91 2e 02 	lds	r24, 0x022E
     5e8:	80 93 42 17 	sts	0x1742, r24
	packet.payload.command.sender_address[3] = station_addr[3];
     5ec:	80 91 2f 02 	lds	r24, 0x022F
     5f0:	80 93 43 17 	sts	0x1743, r24
	packet.payload.command.sender_address[4] = station_addr[4];
     5f4:	80 91 30 02 	lds	r24, 0x0230
     5f8:	80 93 44 17 	sts	0x1744, r24

	Radio_Set_Tx_Addr( (uint8_t*)remote_addr );
     5fc:	81 e3       	ldi	r24, 0x31	; 49
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	0e 94 47 05 	call	0xa8e	; 0xa8e <Radio_Set_Tx_Addr>
	// uint8_t result = Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
	Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
     604:	8d e3       	ldi	r24, 0x3D	; 61
     606:	97 e1       	ldi	r25, 0x17	; 23
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	0e 94 10 07 	call	0xe20	; 0xe20 <Radio_Transmit>

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     60e:	10 92 a7 03 	sts	0x03A7, r1
     612:	10 92 a6 03 	sts	0x03A6, r1
	ResetMessageClock();

	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample6();
	#endif
}
     616:	08 95       	ret

00000618 <InitializeCommunication>:

	return message_clock;
}

void InitializeCommunication(  uint8_t sa[5], uint8_t ra[5] )
{
     618:	1f 93       	push	r17
     61a:	dc 01       	movw	r26, r24
     61c:	fb 01       	movw	r30, r22
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample1();
	#endif

	TimeoutCounter = 0;
     61e:	10 92 6b 17 	sts	0x176B, r1
     622:	10 92 6a 17 	sts	0x176A, r1

	WorkingStruct.TriggerSent = 0;
     626:	10 92 5e 17 	sts	0x175E, r1
	WorkingStruct.PingResponseReceived = 0;
     62a:	10 92 5f 17 	sts	0x175F, r1
	WorkingStruct.SonarReceived = 0;
     62e:	10 92 60 17 	sts	0x1760, r1

	WorkingStruct.PingReceiveTime = 0;
     632:	10 92 62 17 	sts	0x1762, r1
     636:	10 92 61 17 	sts	0x1761, r1
	WorkingStruct.SonarReceiveTime = 0;
     63a:	10 92 64 17 	sts	0x1764, r1
     63e:	10 92 63 17 	sts	0x1763, r1

	WorkingStruct.Percent = 0;
     642:	10 92 68 17 	sts	0x1768, r1
     646:	10 92 67 17 	sts	0x1767, r1

	// #if PROFILECODE && PROFILE_WIRELESS 
	// EnableProfileSample2();
	// #endif

	remote_addr[0] = ra[0];
     64a:	80 81       	ld	r24, Z
     64c:	80 93 31 02 	sts	0x0231, r24
	remote_addr[1] = ra[1];
     650:	81 81       	ldd	r24, Z+1	; 0x01
     652:	80 93 32 02 	sts	0x0232, r24
	remote_addr[2] = ra[2];
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	80 93 33 02 	sts	0x0233, r24
	remote_addr[3] = ra[3];
     65c:	83 81       	ldd	r24, Z+3	; 0x03
     65e:	80 93 34 02 	sts	0x0234, r24
	remote_addr[4] = ra[4];
     662:	84 81       	ldd	r24, Z+4	; 0x04
     664:	80 93 35 02 	sts	0x0235, r24

	station_addr[0] = sa[0];
     668:	8c 91       	ld	r24, X
     66a:	80 93 2c 02 	sts	0x022C, r24
	station_addr[1] = sa[1];
     66e:	11 96       	adiw	r26, 0x01	; 1
     670:	8c 91       	ld	r24, X
     672:	11 97       	sbiw	r26, 0x01	; 1
     674:	80 93 2d 02 	sts	0x022D, r24
	station_addr[2] = sa[2];
     678:	12 96       	adiw	r26, 0x02	; 2
     67a:	8c 91       	ld	r24, X
     67c:	12 97       	sbiw	r26, 0x02	; 2
     67e:	80 93 2e 02 	sts	0x022E, r24
	station_addr[3] = sa[3];
     682:	13 96       	adiw	r26, 0x03	; 3
     684:	8c 91       	ld	r24, X
     686:	13 97       	sbiw	r26, 0x03	; 3
     688:	80 93 2f 02 	sts	0x022F, r24
	station_addr[4] = sa[4];
     68c:	14 96       	adiw	r26, 0x04	; 4
     68e:	8c 91       	ld	r24, X
     690:	80 93 30 02 	sts	0x0230, r24

	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample2();
	// #endif	

	int sreg = SREG;
     694:	1f b7       	in	r17, 0x3f	; 63
	cli();
     696:	f8 94       	cli

	// #if PROFILECODE && PROFILE_WIRELESS 
	// EnableProfileSample3();
	// #endif

	Radio_Init();
     698:	0e 94 01 06 	call	0xc02	; 0xc02 <Radio_Init>
	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample3();
	// EnableProfileSample4();
	// #endif

	Radio_Configure_Rx( RADIO_PIPE_0, (uint8_t*)station_addr, ENABLE );
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	6c e2       	ldi	r22, 0x2C	; 44
     6a0:	72 e0       	ldi	r23, 0x02	; 2
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <Radio_Configure_Rx>
	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample4();
	// EnableProfileSample5();
	// #endif

	Radio_Configure( RADIO_2MBPS, RADIO_HIGHEST_POWER );
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	63 e0       	ldi	r22, 0x03	; 3
     6ac:	0e 94 3f 06 	call	0xc7e	; 0xc7e <Radio_Configure>

	#if PROFILECODE && PROFILE_ULTRASOUND
	EnableProfileSample2();
	#endif

	sonar_init();
     6b0:	0e 94 0d 08 	call	0x101a	; 0x101a <sonar_init>
	#if PROFILECODE && PROFILE_ULTRASOUND
	DisableProfileSample2();
	#endif
	
	// enable interrupts
	SREG = sreg;
     6b4:	1f bf       	out	0x3f, r17	; 63
	// _delay_ms(500);

	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample1();
	// #endif
}
     6b6:	1f 91       	pop	r17
     6b8:	08 95       	ret

000006ba <ServoStartSweep>:
	#endif
}

void ServoStartSweep()
{
	SweepPercent = 0;
     6ba:	10 92 6d 17 	sts	0x176D, r1
     6be:	10 92 6c 17 	sts	0x176C, r1
}
     6c2:	08 95       	ret

000006c4 <ServoUpdateSweepPosition>:

int ServoUpdateSweepPosition( CommunicationStatStruct *CommStat )
{
     6c4:	fc 01       	movw	r30, r24
	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample2();
	#endif

	if( (SweepPercent + SWEEPINCREMENTAMOUNT) < 1000 )
     6c6:	80 91 6c 17 	lds	r24, 0x176C
     6ca:	90 91 6d 17 	lds	r25, 0x176D
     6ce:	84 58       	subi	r24, 0x84	; 132
     6d0:	93 40       	sbci	r25, 0x03	; 3
     6d2:	1c f0       	brlt	.+6      	; 0x6da <ServoUpdateSweepPosition+0x16>
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	12 c0       	rjmp	.+36     	; 0x6fe <ServoUpdateSweepPosition+0x3a>
	{
		SweepPercent = SweepPercent + SWEEPINCREMENTAMOUNT;
     6da:	80 91 6c 17 	lds	r24, 0x176C
     6de:	90 91 6d 17 	lds	r25, 0x176D
     6e2:	8c 59       	subi	r24, 0x9C	; 156
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	90 93 6d 17 	sts	0x176D, r25
     6ea:	80 93 6c 17 	sts	0x176C, r24
		CommStat->Percent = SweepPercent;
     6ee:	80 91 6c 17 	lds	r24, 0x176C
     6f2:	90 91 6d 17 	lds	r25, 0x176D
     6f6:	92 87       	std	Z+10, r25	; 0x0a
     6f8:	81 87       	std	Z+9, r24	; 0x09
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample2();
	#endif

	return 1;
}
     6fe:	c9 01       	movw	r24, r18
     700:	08 95       	ret

00000702 <ServoSetDirection>:

void ServoSetDirection( ServoControlStruct *ServoController, CommunicationStatStruct *CommStat )
{
     702:	fb 01       	movw	r30, r22

	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample3();
	#endif

	SetServoValue( ServoController, CommStat->Percent );
     704:	61 85       	ldd	r22, Z+9	; 0x09
     706:	72 85       	ldd	r23, Z+10	; 0x0a
     708:	0e 94 7e 04 	call	0x8fc	; 0x8fc <SetServoValue>

	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample3();
	#endif
}
     70c:	08 95       	ret

0000070e <InitializeServoController>:
volatile int SweepPercent;

#define OUTPUTDIRECTION 0

void InitializeServoController( ServoControlStruct *ServoController )
{
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	8c 01       	movw	r16, r24
	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample1();
	#endif
	SweepPercent = 0;
     714:	10 92 6d 17 	sts	0x176D, r1
     718:	10 92 6c 17 	sts	0x176C, r1

	SetServoPeriod( ServoController, 20000 );
     71c:	60 e2       	ldi	r22, 0x20	; 32
     71e:	7e e4       	ldi	r23, 0x4E	; 78
     720:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <SetServoPeriod>
	SetServoRange( ServoController, 1000, 2000 );
     724:	c8 01       	movw	r24, r16
     726:	68 ee       	ldi	r22, 0xE8	; 232
     728:	73 e0       	ldi	r23, 0x03	; 3
     72a:	40 ed       	ldi	r20, 0xD0	; 208
     72c:	57 e0       	ldi	r21, 0x07	; 7
     72e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <SetServoRange>
	SetServoValue( ServoController, 0 );
     732:	c8 01       	movw	r24, r16
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	0e 94 7e 04 	call	0x8fc	; 0x8fc <SetServoValue>

	ServoInitialize( ServoController );
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <ServoInitialize>

	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample1();
	#endif
}
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <StatisticsInitialize>:
static volatile CommunicationStatStruct ShortestPath;

void StatisticsInitialize()
{
	// Set the distance to FAR AWAY
	ShortestPath.Distance = 0x8FFF;
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	9f e8       	ldi	r25, 0x8F	; 143
     74c:	90 93 b0 03 	sts	0x03B0, r25
     750:	80 93 af 03 	sts	0x03AF, r24

	// Set the default angle to the mid-range
	ShortestPath.Percent = 500;
     754:	84 ef       	ldi	r24, 0xF4	; 244
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	90 93 b2 03 	sts	0x03B2, r25
     75c:	80 93 b1 03 	sts	0x03B1, r24
}
     760:	08 95       	ret

00000762 <StatisticsResetSample>:

void StatisticsResetSample( CommunicationStatStruct *CommStat )
{
     762:	fc 01       	movw	r30, r24
	CommStat->TriggerSent = 0;
     764:	10 82       	st	Z, r1
	CommStat->PingResponseReceived = 0;
     766:	11 82       	std	Z+1, r1	; 0x01
	CommStat->SonarReceived = 0;
     768:	12 82       	std	Z+2, r1	; 0x02

	CommStat->PingReceiveTime = 0;
     76a:	14 82       	std	Z+4, r1	; 0x04
     76c:	13 82       	std	Z+3, r1	; 0x03
	CommStat->SonarReceiveTime = 0;
     76e:	16 82       	std	Z+6, r1	; 0x06
     770:	15 82       	std	Z+5, r1	; 0x05
	CommStat->Distance = 0x8FFF;
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	9f e8       	ldi	r25, 0x8F	; 143
     776:	90 87       	std	Z+8, r25	; 0x08
     778:	87 83       	std	Z+7, r24	; 0x07

	CommStat->Percent = 500;
     77a:	84 ef       	ldi	r24, 0xF4	; 244
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	92 87       	std	Z+10, r25	; 0x0a
     780:	81 87       	std	Z+9, r24	; 0x09
}
     782:	08 95       	ret

00000784 <StatisticsCalculateDirectionAndDistance>:
		ShortestPath.Percent = CommStat->Percent;
	}
}

void StatisticsCalculateDirectionAndDistance( CommunicationStatStruct *CommStat )
{
     784:	fc 01       	movw	r30, r24
	CommStat->Distance = ShortestPath.Distance;
     786:	80 91 af 03 	lds	r24, 0x03AF
     78a:	90 91 b0 03 	lds	r25, 0x03B0
     78e:	90 87       	std	Z+8, r25	; 0x08
     790:	87 83       	std	Z+7, r24	; 0x07
	CommStat->Percent = ShortestPath.Percent;
     792:	80 91 b1 03 	lds	r24, 0x03B1
     796:	90 91 b2 03 	lds	r25, 0x03B2
     79a:	92 87       	std	Z+10, r25	; 0x0a
     79c:	81 87       	std	Z+9, r24	; 0x09
}
     79e:	08 95       	ret

000007a0 <StatisticsAddNewSample>:

	CommStat->Percent = 500;
}

void StatisticsAddNewSample( CommunicationStatStruct *CommStat )
{
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
	#if 1
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "Here: %u %u\n\r", (unsigned int)CommStat->Distance, (unsigned int)ShortestPath.Distance );
     7ae:	20 91 af 03 	lds	r18, 0x03AF
     7b2:	30 91 b0 03 	lds	r19, 0x03B0
     7b6:	8d b7       	in	r24, 0x3d	; 61
     7b8:	9e b7       	in	r25, 0x3e	; 62
     7ba:	0a 97       	sbiw	r24, 0x0a	; 10
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	9e bf       	out	0x3e, r25	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	8d bf       	out	0x3d, r24	; 61
     7c6:	ed b7       	in	r30, 0x3d	; 61
     7c8:	fe b7       	in	r31, 0x3e	; 62
     7ca:	31 96       	adiw	r30, 0x01	; 1
     7cc:	0e ed       	ldi	r16, 0xDE	; 222
     7ce:	16 e1       	ldi	r17, 0x16	; 22
     7d0:	ad b7       	in	r26, 0x3d	; 61
     7d2:	be b7       	in	r27, 0x3e	; 62
     7d4:	12 96       	adiw	r26, 0x02	; 2
     7d6:	1c 93       	st	X, r17
     7d8:	0e 93       	st	-X, r16
     7da:	11 97       	sbiw	r26, 0x01	; 1
     7dc:	81 e5       	ldi	r24, 0x51	; 81
     7de:	e8 2e       	mov	r14, r24
     7e0:	f1 2c       	mov	r15, r1
     7e2:	f3 82       	std	Z+3, r15	; 0x03
     7e4:	e2 82       	std	Z+2, r14	; 0x02
     7e6:	8f e5       	ldi	r24, 0x5F	; 95
     7e8:	92 e0       	ldi	r25, 0x02	; 2
     7ea:	95 83       	std	Z+5, r25	; 0x05
     7ec:	84 83       	std	Z+4, r24	; 0x04
     7ee:	8f 81       	ldd	r24, Y+7	; 0x07
     7f0:	98 85       	ldd	r25, Y+8	; 0x08
     7f2:	97 83       	std	Z+7, r25	; 0x07
     7f4:	86 83       	std	Z+6, r24	; 0x06
     7f6:	31 87       	std	Z+9, r19	; 0x09
     7f8:	20 87       	std	Z+8, r18	; 0x08
     7fa:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <snprintf>
	uart_putstr( ASS_UART_BUFF );
     7fe:	8d b7       	in	r24, 0x3d	; 61
     800:	9e b7       	in	r25, 0x3e	; 62
     802:	0a 96       	adiw	r24, 0x0a	; 10
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	9e bf       	out	0x3e, r25	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	8d bf       	out	0x3d, r24	; 61
     80e:	c8 01       	movw	r24, r16
     810:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <uart_putstr>
	#endif

	// Check if this result is closer
	if( (unsigned int)CommStat->Distance < (unsigned int)ShortestPath.Distance )
     814:	6f 81       	ldd	r22, Y+7	; 0x07
     816:	78 85       	ldd	r23, Y+8	; 0x08
     818:	80 91 af 03 	lds	r24, 0x03AF
     81c:	90 91 b0 03 	lds	r25, 0x03B0
     820:	68 17       	cp	r22, r24
     822:	79 07       	cpc	r23, r25
     824:	08 f0       	brcs	.+2      	; 0x828 <StatisticsAddNewSample+0x88>
     826:	40 c0       	rjmp	.+128    	; 0x8a8 <StatisticsAddNewSample+0x108>
	{	
		snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "SU: %u, %u, %u, %u\n\r", (int)CommStat->Distance, (int)CommStat->Percent, (unsigned int)ShortestPath.Distance, (int)ShortestPath.Percent );
     828:	20 91 af 03 	lds	r18, 0x03AF
     82c:	30 91 b0 03 	lds	r19, 0x03B0
     830:	40 91 b1 03 	lds	r20, 0x03B1
     834:	50 91 b2 03 	lds	r21, 0x03B2
     838:	ad b7       	in	r26, 0x3d	; 61
     83a:	be b7       	in	r27, 0x3e	; 62
     83c:	1e 97       	sbiw	r26, 0x0e	; 14
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	be bf       	out	0x3e, r27	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	ad bf       	out	0x3d, r26	; 61
     848:	ed b7       	in	r30, 0x3d	; 61
     84a:	fe b7       	in	r31, 0x3e	; 62
     84c:	31 96       	adiw	r30, 0x01	; 1
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	1c 93       	st	X, r17
     852:	0e 93       	st	-X, r16
     854:	11 97       	sbiw	r26, 0x01	; 1
     856:	f3 82       	std	Z+3, r15	; 0x03
     858:	e2 82       	std	Z+2, r14	; 0x02
     85a:	8d e6       	ldi	r24, 0x6D	; 109
     85c:	92 e0       	ldi	r25, 0x02	; 2
     85e:	95 83       	std	Z+5, r25	; 0x05
     860:	84 83       	std	Z+4, r24	; 0x04
     862:	77 83       	std	Z+7, r23	; 0x07
     864:	66 83       	std	Z+6, r22	; 0x06
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	9a 85       	ldd	r25, Y+10	; 0x0a
     86a:	91 87       	std	Z+9, r25	; 0x09
     86c:	80 87       	std	Z+8, r24	; 0x08
     86e:	33 87       	std	Z+11, r19	; 0x0b
     870:	22 87       	std	Z+10, r18	; 0x0a
     872:	55 87       	std	Z+13, r21	; 0x0d
     874:	44 87       	std	Z+12, r20	; 0x0c
     876:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <snprintf>
		uart_putstr( ASS_UART_BUFF );
     87a:	8d b7       	in	r24, 0x3d	; 61
     87c:	9e b7       	in	r25, 0x3e	; 62
     87e:	0e 96       	adiw	r24, 0x0e	; 14
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	9e bf       	out	0x3e, r25	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	8d bf       	out	0x3d, r24	; 61
     88a:	c8 01       	movw	r24, r16
     88c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <uart_putstr>

		// If it is closer, set this 
		// as the current distance
		ShortestPath.Distance = CommStat->Distance;
     890:	8f 81       	ldd	r24, Y+7	; 0x07
     892:	98 85       	ldd	r25, Y+8	; 0x08
     894:	90 93 b0 03 	sts	0x03B0, r25
     898:	80 93 af 03 	sts	0x03AF, r24
		ShortestPath.Percent = CommStat->Percent;
     89c:	89 85       	ldd	r24, Y+9	; 0x09
     89e:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a0:	90 93 b2 03 	sts	0x03B2, r25
     8a4:	80 93 b1 03 	sts	0x03B1, r24
	}
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	08 95       	ret

000008b6 <ServoInitialize>:
#include <util\delay.h>

#define F_CPU 8000000UL

void ServoInitialize( ServoControlStruct *SCS )
{
     8b6:	dc 01       	movw	r26, r24
	int sreg = SREG;
     8b8:	2f b7       	in	r18, 0x3f	; 63
	cli();
     8ba:	f8 94       	cli

	ICR1 = SCS->PWMPeriod; // period of output PWM signal
	OCR1B = SCS->PWMHighTime;
	*/

	DDRL |= 0b00010000; // set pin L.4 for output (OC4B)
     8bc:	ea e0       	ldi	r30, 0x0A	; 10
     8be:	f1 e0       	ldi	r31, 0x01	; 1
     8c0:	80 81       	ld	r24, Z
     8c2:	80 61       	ori	r24, 0x10	; 16
     8c4:	80 83       	st	Z, r24
	// TCCR1B:  ICNC1  | ICES1  | ------ | WGM13  | WGM12 | CS12  | CS11  | CS10

	// WGM11:WGM10 = 10: with WGM13-WGM12 to select timer mode 1110
	// Fast PWM, timer 1 runs from 0 to ICR1
	// COM1A1:COM1A0 = 10: clear OC1A when compare match, set OC5A when 0
	TCCR5A = 0b00100010; // compare match occurs timer = OCR5B
     8c6:	82 e2       	ldi	r24, 0x22	; 34
     8c8:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0b00011010; // WGM13:WGM12=11; CS12:CS0=001: internal clock 8MHz, 1/8 prescaler
     8cc:	8a e1       	ldi	r24, 0x1A	; 26
     8ce:	80 93 21 01 	sts	0x0121, r24

	ICR5 = SCS->PWMPeriod; // period of output PWM signal
     8d2:	8d 91       	ld	r24, X+
     8d4:	9c 91       	ld	r25, X
     8d6:	11 97       	sbiw	r26, 0x01	; 1
     8d8:	90 93 27 01 	sts	0x0127, r25
     8dc:	80 93 26 01 	sts	0x0126, r24
	OCR5B = SCS->PWMHighTime;
     8e0:	14 96       	adiw	r26, 0x04	; 4
     8e2:	8d 91       	ld	r24, X+
     8e4:	9c 91       	ld	r25, X
     8e6:	15 97       	sbiw	r26, 0x05	; 5
     8e8:	90 93 2b 01 	sts	0x012B, r25
     8ec:	80 93 2a 01 	sts	0x012A, r24

	// Since  the range is clamped to -90..90 degrees, 
	// and with a 10ms delay requirement per degree = 1800
	// _delay_ms( 1800 );

	SREG = sreg;
     8f0:	2f bf       	out	0x3f, r18	; 63
}
     8f2:	08 95       	ret

000008f4 <SetServoPeriod>:

void SetServoPeriod( ServoControlStruct *SCS, int MicrosecondPeriod )
{
     8f4:	fc 01       	movw	r30, r24
	SCS->PWMPeriod = MicrosecondPeriod;
     8f6:	71 83       	std	Z+1, r23	; 0x01
     8f8:	60 83       	st	Z, r22
}
     8fa:	08 95       	ret

000008fc <SetServoValue>:

void SetServoValue( ServoControlStruct *SCS, int TenthPercent )
{
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	6c 01       	movw	r12, r24
     90e:	cb 01       	movw	r24, r22
     910:	23 e0       	ldi	r18, 0x03	; 3
     912:	68 3e       	cpi	r22, 0xE8	; 232
     914:	72 07       	cpc	r23, r18
     916:	14 f0       	brlt	.+4      	; 0x91c <SetServoValue+0x20>
     918:	87 ee       	ldi	r24, 0xE7	; 231
     91a:	93 e0       	ldi	r25, 0x03	; 3
     91c:	ec 01       	movw	r28, r24
     91e:	97 ff       	sbrs	r25, 7
     920:	02 c0       	rjmp	.+4      	; 0x926 <SetServoValue+0x2a>
     922:	c0 e0       	ldi	r28, 0x00	; 0
     924:	d0 e0       	ldi	r29, 0x00	; 0
	}

	int OldValue = SCS->Value;

	// Set the percentage value
	SCS->Value = TenthPercent;
     926:	f6 01       	movw	r30, r12
     928:	d7 83       	std	Z+7, r29	; 0x07
     92a:	c6 83       	std	Z+6, r28	; 0x06
	// Interpolate between the low and the high value
	SCS->PWMHighTime = SCS->LowThreshold + (int)(SCS->DeltaThreshold * ((float)SCS->Value / 1000.0f));
     92c:	64 85       	ldd	r22, Z+12	; 0x0c
     92e:	75 85       	ldd	r23, Z+13	; 0x0d
     930:	88 27       	eor	r24, r24
     932:	77 fd       	sbrc	r23, 7
     934:	80 95       	com	r24
     936:	98 2f       	mov	r25, r24
     938:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__floatsisf>
     93c:	7b 01       	movw	r14, r22
     93e:	8c 01       	movw	r16, r24
     940:	be 01       	movw	r22, r28
     942:	88 27       	eor	r24, r24
     944:	77 fd       	sbrc	r23, 7
     946:	80 95       	com	r24
     948:	98 2f       	mov	r25, r24
     94a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__floatsisf>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	4a e7       	ldi	r20, 0x7A	; 122
     954:	54 e4       	ldi	r21, 0x44	; 68
     956:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divsf3>
     95a:	9b 01       	movw	r18, r22
     95c:	ac 01       	movw	r20, r24
     95e:	c8 01       	movw	r24, r16
     960:	b7 01       	movw	r22, r14
     962:	0e 94 21 12 	call	0x2442	; 0x2442 <__mulsf3>
     966:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixsfsi>
     96a:	f6 01       	movw	r30, r12
     96c:	20 85       	ldd	r18, Z+8	; 0x08
     96e:	31 85       	ldd	r19, Z+9	; 0x09
     970:	62 0f       	add	r22, r18
     972:	73 1f       	adc	r23, r19
     974:	75 83       	std	Z+5, r23	; 0x05
     976:	64 83       	std	Z+4, r22	; 0x04

	int sreg = SREG;
     978:	2f b7       	in	r18, 0x3f	; 63
	cli();
     97a:	f8 94       	cli

	// OCR1B = SCS->PWMHighTime; // set high time of output PWM signal
	OCR5B = SCS->PWMHighTime; // set high time of output PWM signal
     97c:	70 93 2b 01 	sts	0x012B, r23
     980:	60 93 2a 01 	sts	0x012A, r22
	
	SREG = sreg;
     984:	2f bf       	out	0x3f, r18	; 63
	// Convert the difference from percent to angle (degrees)
	// then multiply it by the 10ms delay/degree
	// int DelayTime = ((PosDifference * 90) /10) * 100;

	// _delay_ms( DelayTime );
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <AddServoValueDelta>:

void AddServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     998:	fc 01       	movw	r30, r24
     99a:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value + TenthPercent;

	SetServoValue( SCS, NewValue );
     99c:	66 81       	ldd	r22, Z+6	; 0x06
     99e:	77 81       	ldd	r23, Z+7	; 0x07
     9a0:	68 0f       	add	r22, r24
     9a2:	79 1f       	adc	r23, r25
     9a4:	cf 01       	movw	r24, r30
     9a6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <SetServoValue>
}
     9aa:	08 95       	ret

000009ac <SubtractServoValueDelta>:

void SubtractServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     9ac:	fc 01       	movw	r30, r24
     9ae:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value - TenthPercent;

	SetServoValue( SCS, NewValue );
     9b0:	66 81       	ldd	r22, Z+6	; 0x06
     9b2:	77 81       	ldd	r23, Z+7	; 0x07
     9b4:	68 1b       	sub	r22, r24
     9b6:	79 0b       	sbc	r23, r25
     9b8:	cf 01       	movw	r24, r30
     9ba:	0e 94 7e 04 	call	0x8fc	; 0x8fc <SetServoValue>
}
     9be:	08 95       	ret

000009c0 <SetServoRange>:

void SetServoRange( ServoControlStruct *SCS, int Low, int High )
{
     9c0:	fc 01       	movw	r30, r24
     9c2:	9a 01       	movw	r18, r20
	SCS->LowThreshold = Low;
     9c4:	71 87       	std	Z+9, r23	; 0x09
     9c6:	60 87       	std	Z+8, r22	; 0x08
	SCS->HighThreshold = High;
     9c8:	53 87       	std	Z+11, r21	; 0x0b
     9ca:	42 87       	std	Z+10, r20	; 0x0a
	SCS->DeltaThreshold = High-Low;
     9cc:	ca 01       	movw	r24, r20
     9ce:	86 1b       	sub	r24, r22
     9d0:	97 0b       	sbc	r25, r23
     9d2:	95 87       	std	Z+13, r25	; 0x0d
     9d4:	84 87       	std	Z+12, r24	; 0x0c

	SCS->LowAngle = -SCS->LowThreshold * 9 / 1000;
     9d6:	87 ef       	ldi	r24, 0xF7	; 247
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	ac 01       	movw	r20, r24
     9dc:	64 9f       	mul	r22, r20
     9de:	c0 01       	movw	r24, r0
     9e0:	65 9f       	mul	r22, r21
     9e2:	90 0d       	add	r25, r0
     9e4:	74 9f       	mul	r23, r20
     9e6:	90 0d       	add	r25, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	68 ee       	ldi	r22, 0xE8	; 232
     9ec:	73 e0       	ldi	r23, 0x03	; 3
     9ee:	0e 94 4c 19 	call	0x3298	; 0x3298 <__divmodhi4>
     9f2:	77 87       	std	Z+15, r23	; 0x0f
     9f4:	66 87       	std	Z+14, r22	; 0x0e
	SCS->HighAngle = SCS->HighThreshold * 9 / 1000;
     9f6:	c9 01       	movw	r24, r18
     9f8:	43 e0       	ldi	r20, 0x03	; 3
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	4a 95       	dec	r20
     a00:	e1 f7       	brne	.-8      	; 0x9fa <SetServoRange+0x3a>
     a02:	82 0f       	add	r24, r18
     a04:	93 1f       	adc	r25, r19
     a06:	68 ee       	ldi	r22, 0xE8	; 232
     a08:	73 e0       	ldi	r23, 0x03	; 3
     a0a:	0e 94 4c 19 	call	0x3298	; 0x3298 <__divmodhi4>
     a0e:	71 8b       	std	Z+17, r23	; 0x11
     a10:	60 8b       	std	Z+16, r22	; 0x10
}
     a12:	08 95       	ret

00000a14 <Radio_Drop_Rate>:
}

// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
     a14:	80 91 92 02 	lds	r24, 0x0292
     a18:	90 91 93 02 	lds	r25, 0x0293
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	04 c0       	rjmp	.+8      	; 0xa28 <Radio_Drop_Rate+0x14>
	uint8_t weight = 0;

	while (wh != 0) {
		if ((wh & 1) != 0) weight++;
     a20:	80 fd       	sbrc	r24, 0
     a22:	2f 5f       	subi	r18, 0xFF	; 255
		wh >>= 1;
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
	uint8_t weight = 0;

	while (wh != 0) {
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <Radio_Drop_Rate+0xc>
		if ((wh & 1) != 0) weight++;
		wh >>= 1;
	}

	wh = (16 - weight) * 100;
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	82 1b       	sub	r24, r18
     a32:	91 09       	sbc	r25, r1
     a34:	24 e6       	ldi	r18, 0x64	; 100
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	ac 01       	movw	r20, r24
     a3a:	42 9f       	mul	r20, r18
     a3c:	c0 01       	movw	r24, r0
     a3e:	43 9f       	mul	r20, r19
     a40:	90 0d       	add	r25, r0
     a42:	52 9f       	mul	r21, r18
     a44:	90 0d       	add	r25, r0
     a46:	11 24       	eor	r1, r1
     a48:	24 e0       	ldi	r18, 0x04	; 4
     a4a:	96 95       	lsr	r25
     a4c:	87 95       	ror	r24
     a4e:	2a 95       	dec	r18
     a50:	e1 f7       	brne	.-8      	; 0xa4a <Radio_Drop_Rate+0x36>
	wh /= 16;
	return wh;
}
     a52:	08 95       	ret

00000a54 <_get_status>:
extern void radio_rxhandler(uint8_t pipenumber);

uint8_t _get_status()
{
        uint8_t status = 0;
        RADIO_CSN_LOW();
     a54:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(NOP);
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	0e 94 07 08 	call	0x100e	; 0x100e <SPI_Write_Byte>

        RADIO_CSN_HIGH();
     a5c:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     a5e:	08 95       	ret

00000a60 <_set_register>:

uint8_t _set_register(radio_register_t reg, uint8_t* value, uint8_t len)
{
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	8b 01       	movw	r16, r22
     a6a:	e4 2e       	mov	r14, r20
        uint8_t status;
        RADIO_CSN_LOW();
     a6c:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     a6e:	8f 71       	andi	r24, 0x1F	; 31
     a70:	80 62       	ori	r24, 0x20	; 32
     a72:	0e 94 07 08 	call	0x100e	; 0x100e <SPI_Write_Byte>
     a76:	f8 2e       	mov	r15, r24
        SPI_Write_Block(value, len);
     a78:	c8 01       	movw	r24, r16
     a7a:	6e 2d       	mov	r22, r14
     a7c:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_Write_Block>

        RADIO_CSN_HIGH();
     a80:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     a82:	8f 2d       	mov	r24, r15
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	08 95       	ret

00000a8e <Radio_Set_Tx_Addr>:
	_set_register(EN_RXADDR, &value, 1);
}

// default transmitter address is 0xe7e7e7e7e7.
void Radio_Set_Tx_Addr(uint8_t* address)
{
     a8e:	fc 01       	movw	r30, r24
	tx_address[0] = address[0];
     a90:	80 81       	ld	r24, Z
     a92:	80 93 88 02 	sts	0x0288, r24
	tx_address[1] = address[1];
     a96:	81 81       	ldd	r24, Z+1	; 0x01
     a98:	80 93 89 02 	sts	0x0289, r24
	tx_address[2] = address[2];
     a9c:	82 81       	ldd	r24, Z+2	; 0x02
     a9e:	80 93 8a 02 	sts	0x028A, r24
	tx_address[3] = address[3];
     aa2:	83 81       	ldd	r24, Z+3	; 0x03
     aa4:	80 93 8b 02 	sts	0x028B, r24
	tx_address[4] = address[4];
     aa8:	84 81       	ldd	r24, Z+4	; 0x04
     aaa:	80 93 8c 02 	sts	0x028C, r24
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
     aae:	80 e1       	ldi	r24, 0x10	; 16
     ab0:	bf 01       	movw	r22, r30
     ab2:	45 e0       	ldi	r20, 0x05	; 5
     ab4:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>
}
     ab8:	08 95       	ret

00000aba <_reset_pipe0_address>:
	}
}

void _reset_pipe0_address()
{
        if (rx_pipe_widths[RADIO_PIPE_0] != 0)
     aba:	80 91 82 02 	lds	r24, 0x0282
     abe:	88 23       	and	r24, r24
     ac0:	31 f0       	breq	.+12     	; 0xace <_reset_pipe0_address+0x14>
        {
                // reset the pipe 0 address if pipe 0 is enabled.
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
     ac2:	8a e0       	ldi	r24, 0x0A	; 10
     ac4:	6d e8       	ldi	r22, 0x8D	; 141
     ac6:	72 e0       	ldi	r23, 0x02	; 2
     ac8:	45 e0       	ldi	r20, 0x05	; 5
     aca:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>
     ace:	08 95       	ret

00000ad0 <send_instruction>:

        return status;
}

void send_instruction(uint8_t instruction, uint8_t* data, uint8_t* buffer, uint8_t len)
{
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	7b 01       	movw	r14, r22
     adc:	ea 01       	movw	r28, r20
     ade:	12 2f       	mov	r17, r18
    RADIO_CSN_LOW();
     ae0:	2d 98       	cbi	0x05, 5	; 5

    // send the instruction
    SPI_Write_Byte(instruction);
     ae2:	0e 94 07 08 	call	0x100e	; 0x100e <SPI_Write_Byte>

    // pass in args
    if (len > 0)
     ae6:	11 23       	and	r17, r17
     ae8:	61 f0       	breq	.+24     	; 0xb02 <send_instruction+0x32>
    {
    	if (buffer == NULL)     //
     aea:	20 97       	sbiw	r28, 0x00	; 0
     aec:	29 f4       	brne	.+10     	; 0xaf8 <send_instruction+0x28>
    		SPI_Write_Block(data, len);
     aee:	c7 01       	movw	r24, r14
     af0:	61 2f       	mov	r22, r17
     af2:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_Write_Block>
     af6:	05 c0       	rjmp	.+10     	; 0xb02 <send_instruction+0x32>
    	else
    		SPI_ReadWrite_Block(data, buffer, len);
     af8:	c7 01       	movw	r24, r14
     afa:	be 01       	movw	r22, r28
     afc:	41 2f       	mov	r20, r17
     afe:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_ReadWrite_Block>
    }

    // resynch SPI
    RADIO_CSN_HIGH();
     b02:	2d 9a       	sbi	0x05, 5	; 5
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	08 95       	ret

00000b10 <Radio_Receive>:

    return RADIO_TX_SUCCESS;
}

RADIO_RX_STATUS Radio_Receive(radiopacket_t* buffer)
{
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	18 2f       	mov	r17, r24
     b16:	09 2f       	mov	r16, r25
	uint8_t status;
	uint8_t pipe_number;
	uint8_t doMove = 1;
	RADIO_RX_STATUS result;

	transmit_lock = 0;
     b18:	10 92 6e 17 	sts	0x176E, r1

	RADIO_CE_LOW();
     b1c:	2c 98       	cbi	0x05, 4	; 5

	status = _get_status();
     b1e:	0e 94 2a 05 	call	0xa54	; 0xa54 <_get_status>
    pipe_number =  (status & 0xE) >> 1;
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	8e 70       	andi	r24, 0x0E	; 14
     b26:	90 70       	andi	r25, 0x00	; 0
     b28:	95 95       	asr	r25
     b2a:	87 95       	ror	r24
    if (pipe_number == RADIO_PIPE_EMPTY) {
    	result = RADIO_RX_FIFO_EMPTY;
    	doMove = 0;
    }

    if (rx_pipe_widths[pipe_number] > len) {
     b2c:	28 2f       	mov	r18, r24
     b2e:	fc 01       	movw	r30, r24
     b30:	ee 57       	subi	r30, 0x7E	; 126
     b32:	fd 4f       	sbci	r31, 0xFD	; 253
     b34:	80 81       	ld	r24, Z
     b36:	81 32       	cpi	r24, 0x21	; 33
     b38:	10 f0       	brcs	.+4      	; 0xb3e <Radio_Receive+0x2e>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	18 c0       	rjmp	.+48     	; 0xb6e <Radio_Receive+0x5e>
    	// the buffer isn't big enough, so don't copy the data.
    	result = RADIO_RX_INVALID_ARGS;
    	doMove = 0;
    }

    if (doMove) {
     b3e:	27 30       	cpi	r18, 0x07	; 7
     b40:	11 f4       	brne	.+4      	; 0xb46 <Radio_Receive+0x36>
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	14 c0       	rjmp	.+40     	; 0xb6e <Radio_Receive+0x5e>
    	// Move the data payload into the local
    	send_instruction(R_RX_PAYLOAD, (uint8_t*)buffer, (uint8_t*)buffer, rx_pipe_widths[pipe_number]);
     b46:	20 81       	ld	r18, Z
     b48:	81 e6       	ldi	r24, 0x61	; 97
     b4a:	61 2f       	mov	r22, r17
     b4c:	70 2f       	mov	r23, r16
     b4e:	41 2f       	mov	r20, r17
     b50:	50 2f       	mov	r21, r16
     b52:	0e 94 68 05 	call	0xad0	; 0xad0 <send_instruction>

    	status = _get_status();
     b56:	0e 94 2a 05 	call	0xa54	; 0xa54 <_get_status>
    	pipe_number =  (status & 0xE) >> 1;

    	if (pipe_number != RADIO_PIPE_EMPTY)
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	8e 70       	andi	r24, 0x0E	; 14
     b5e:	90 70       	andi	r25, 0x00	; 0
     b60:	95 95       	asr	r25
     b62:	87 95       	ror	r24
     b64:	87 30       	cpi	r24, 0x07	; 7
     b66:	11 f4       	brne	.+4      	; 0xb6c <Radio_Receive+0x5c>
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <Radio_Receive+0x5e>
     b6c:	83 e0       	ldi	r24, 0x03	; 3
    		result = RADIO_RX_MORE_PACKETS;
    	else
    		result = RADIO_RX_SUCCESS;
    }

    RADIO_CE_HIGH();
     b6e:	2c 9a       	sbi	0x05, 4	; 5
    transmit_lock = 0;
     b70:	10 92 6e 17 	sts	0x176E, r1

    return result;
}
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <_config>:
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
        }
}

void _config()
{
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	0f 92       	push	r0
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;

	SPI_Init();
     b88:	0e 94 da 07 	call	0xfb4	; 0xfb4 <SPI_Init>

	// set address width to 5 bytes.
	value = ADDRESS_LENGTH - 2;                     // 0b11 for 5 bytes, 0b10 for 4 bytes, 0b01 for 3 bytes
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	89 83       	std	Y+1, r24	; 0x01
	_set_register(SETUP_AW, &value, 1);
     b90:	8e 01       	movw	r16, r28
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	b8 01       	movw	r22, r16
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

	// set Enhanced Shockburst retry to every 586 us, up to 5 times.  If packet collisions are a problem even with AA enabled,
	// then consider changing the retry delay to be different on the different stations so that they do not keep colliding on each retry.
	value = 0x15;
     b9e:	85 e1       	ldi	r24, 0x15	; 21
     ba0:	89 83       	std	Y+1, r24	; 0x01
	//value = 0x10;
	_set_register(SETUP_RETR, &value, 1);
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	b8 01       	movw	r22, r16
     ba6:	41 e0       	ldi	r20, 0x01	; 1
     ba8:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

	// Set to use 2.4 GHz channel 110.
	value = CHANNEL;
     bac:	80 e7       	ldi	r24, 0x70	; 112
     bae:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_CH, &value, 1);
     bb0:	85 e0       	ldi	r24, 0x05	; 5
     bb2:	b8 01       	movw	r22, r16
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

	// Set radio to 2 Mbps and high power.  Leave LNA_HCURR at its default.
	value = _BV(RF_DR) | _BV(LNA_HCURR);
     bba:	89 e0       	ldi	r24, 0x09	; 9
     bbc:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_SETUP, &value, 1);
     bbe:	86 e0       	ldi	r24, 0x06	; 6
     bc0:	b8 01       	movw	r22, r16
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

	// Enable 2-byte CRC and power up in receive mode.
	value = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     bc8:	8f e0       	ldi	r24, 0x0F	; 15
     bca:	89 83       	std	Y+1, r24	; 0x01
	_set_register(CONFIG, &value, 1);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	b8 01       	movw	r22, r16
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

	send_instruction(FLUSH_TX, NULL, NULL, 0);
     bd6:	81 ee       	ldi	r24, 0xE1	; 225
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	0e 94 68 05 	call	0xad0	; 0xad0 <send_instruction>
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     be6:	82 ee       	ldi	r24, 0xE2	; 226
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	0e 94 68 05 	call	0xad0	; 0xad0 <send_instruction>
}
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	08 95       	ret

00000c02 <Radio_Init>:

void Radio_Init()
{
        transmit_lock = 0;
     c02:	10 92 6e 17 	sts	0x176E, r1

        // disable radio during config
        RADIO_CE_LOW();
     c06:	2c 98       	cbi	0x05, 4	; 5

        // set CE and CSN
        RADIO_DDR |= _BV(RADIO_CE);
     c08:	24 9a       	sbi	0x04, 4	; 4
        RADIO_DDR |= _BV(RADIO_CSN);
     c0a:	25 9a       	sbi	0x04, 5	; 4

        // Enable radio interrupt.
		// INT0 This interrupt is triggered when data are received and when a transmission completes.
        DDRE &= ~_BV(PORTD0);
     c0c:	68 98       	cbi	0x0d, 0	; 13
        EICRB |= _BV(ISC01);
     c0e:	ea e6       	ldi	r30, 0x6A	; 106
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	80 83       	st	Z, r24
        EICRB &= ~_BV(ISC00);
     c18:	80 81       	ld	r24, Z
     c1a:	8e 7f       	andi	r24, 0xFE	; 254
     c1c:	80 83       	st	Z, r24
        EIMSK |= _BV(INT0);
     c1e:	e8 9a       	sbi	0x1d, 0	; 29

        // Configure the radio registers that are not application-dependent.
        _config();
     c20:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_config>
     c24:	84 ef       	ldi	r24, 0xF4	; 244
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <Radio_Init+0x26>

        // Wait for the radio to power up.
        _delay_ms(2);

        // enable radio as a receiver
        RADIO_CE_HIGH();
     c2c:	2c 9a       	sbi	0x05, 4	; 5
}
     c2e:	08 95       	ret

00000c30 <_get_register>:

        return status;
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	58 2f       	mov	r21, r24
     c3a:	f6 2e       	mov	r15, r22
     c3c:	e7 2e       	mov	r14, r23
     c3e:	04 2f       	mov	r16, r20
     c40:	86 2f       	mov	r24, r22
     c42:	97 2f       	mov	r25, r23
     c44:	9c 01       	movw	r18, r24
     c46:	f9 01       	movw	r30, r18
     c48:	80 e0       	ldi	r24, 0x00	; 0
        uint8_t status, i;
        for (i = 0; i < len; i++)
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
     c4a:	9f ef       	ldi	r25, 0xFF	; 255
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <_get_register+0x22>
     c4e:	91 93       	st	Z+, r25
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
        uint8_t status, i;
        for (i = 0; i < len; i++)
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	80 17       	cp	r24, r16
     c54:	e0 f3       	brcs	.-8      	; 0xc4e <_get_register+0x1e>
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
        }
        RADIO_CSN_LOW();
     c56:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     c58:	85 2f       	mov	r24, r21
     c5a:	8f 71       	andi	r24, 0x1F	; 31
     c5c:	0e 94 07 08 	call	0x100e	; 0x100e <SPI_Write_Byte>
     c60:	18 2f       	mov	r17, r24
        SPI_ReadWrite_Block(NULL, buffer, len);
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	6f 2d       	mov	r22, r15
     c68:	7e 2d       	mov	r23, r14
     c6a:	40 2f       	mov	r20, r16
     c6c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <SPI_ReadWrite_Block>

        RADIO_CSN_HIGH();
     c70:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     c72:	81 2f       	mov	r24, r17
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	08 95       	ret

00000c7e <Radio_Configure>:
	tx_address[4] = address[4];
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
}

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
{
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	0f 92       	push	r0
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	08 2f       	mov	r16, r24
     c8e:	16 2f       	mov	r17, r22
	uint8_t value;

	if (power < RADIO_LOWEST_POWER || power > RADIO_HIGHEST_POWER
     c90:	64 30       	cpi	r22, 0x04	; 4
     c92:	d8 f4       	brcc	.+54     	; 0xcca <Radio_Configure+0x4c>
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	c8 f4       	brcc	.+50     	; 0xcca <Radio_Configure+0x4c>
			|| dr < RADIO_1MBPS || dr > RADIO_2MBPS)
		return;

	// set the data rate and power bits in the RF_SETUP register
	_get_register(RF_SETUP, &value, 1);
     c98:	86 e0       	ldi	r24, 0x06	; 6
     c9a:	be 01       	movw	r22, r28
     c9c:	6f 5f       	subi	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 18 06 	call	0xc30	; 0xc30 <_get_register>

	value |= 3 << RF_PWR;	// set the power bits so that the & will mask the power value in properly.
	value &= power << RF_PWR;	// mask the power value into the RF status byte.
     ca6:	61 2f       	mov	r22, r17
     ca8:	66 0f       	add	r22, r22
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	86 60       	ori	r24, 0x06	; 6
     cae:	68 23       	and	r22, r24

	if (dr)
     cb0:	00 23       	and	r16, r16
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <Radio_Configure+0x3a>
		value |= _BV(RF_DR);
     cb4:	68 60       	ori	r22, 0x08	; 8
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <Radio_Configure+0x3c>
	else
		value &= ~_BV(RF_DR);
     cb8:	67 7f       	andi	r22, 0xF7	; 247
     cba:	69 83       	std	Y+1, r22	; 0x01

	_set_register(RF_SETUP, &value, 1);
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	be 01       	movw	r22, r28
     cc0:	6f 5f       	subi	r22, 0xFF	; 255
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>
}
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <Radio_Configure_Rx>:
// default address for pipe 2 is 0xc2c2c2c2c3 (disabled)
// default address for pipe 3 is 0xc2c2c2c2c4 (disabled)
// default address for pipe 4 is 0xc2c2c2c2c5 (disabled)
// default address for pipe 5 is 0xc2c2c2c2c6 (disabled)
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, uint8_t enable)
{
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	0f 92       	push	r0
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	08 2f       	mov	r16, r24
     cf0:	fb 01       	movw	r30, r22
     cf2:	c4 2e       	mov	r12, r20
	uint8_t value;
	uint8_t use_aa = 1;
	uint8_t payload_width = 32;
	if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;
     cf4:	86 30       	cpi	r24, 0x06	; 6
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <Radio_Configure_Rx+0x24>
     cf8:	63 c0       	rjmp	.+198    	; 0xdc0 <Radio_Configure_Rx+0xea>

	// store the pipe 0 address so that it can be overwritten when transmitting with auto-ack enabled.
	if (pipe == RADIO_PIPE_0)
     cfa:	88 23       	and	r24, r24
     cfc:	81 f4       	brne	.+32     	; 0xd1e <Radio_Configure_Rx+0x48>
	{
		rx_pipe0_address[0] = address[0];
     cfe:	80 81       	ld	r24, Z
     d00:	80 93 8d 02 	sts	0x028D, r24
		rx_pipe0_address[1] = address[1];
     d04:	81 81       	ldd	r24, Z+1	; 0x01
     d06:	80 93 8e 02 	sts	0x028E, r24
		rx_pipe0_address[2] = address[2];
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	80 93 8f 02 	sts	0x028F, r24
		rx_pipe0_address[3] = address[3];
     d10:	83 81       	ldd	r24, Z+3	; 0x03
     d12:	80 93 90 02 	sts	0x0290, r24
		rx_pipe0_address[4] = address[4];
     d16:	84 81       	ldd	r24, Z+4	; 0x04
     d18:	80 93 91 02 	sts	0x0291, r24
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <Radio_Configure_Rx+0x4c>
	}

	// Set the address.  We set this stuff even if the pipe is being disabled, because for example the transmitter
	// needs pipe 0 to have the same address as the Tx address for auto-ack to work, even if pipe 0 is disabled.
	_set_register(RX_ADDR_P0 + pipe, address, pipe > RADIO_PIPE_1 ? 1 : ADDRESS_LENGTH);
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	10 f4       	brcc	.+4      	; 0xd26 <Radio_Configure_Rx+0x50>
     d22:	45 e0       	ldi	r20, 0x05	; 5
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <Radio_Configure_Rx+0x52>
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	80 2f       	mov	r24, r16
     d2a:	86 5f       	subi	r24, 0xF6	; 246
     d2c:	bf 01       	movw	r22, r30
     d2e:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

	// Set auto-ack.
	_get_register(EN_AA, &value, 1);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	5e 01       	movw	r10, r28
     d36:	08 94       	sec
     d38:	a1 1c       	adc	r10, r1
     d3a:	b1 1c       	adc	r11, r1
     d3c:	b5 01       	movw	r22, r10
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	0e 94 18 06 	call	0xc30	; 0xc30 <_get_register>
	if (use_aa)
		value |= _BV(pipe);
     d44:	e0 2e       	mov	r14, r16
     d46:	ff 24       	eor	r15, r15
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	00 2e       	mov	r0, r16
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <Radio_Configure_Rx+0x7e>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <Radio_Configure_Rx+0x7a>
     d58:	d8 2e       	mov	r13, r24
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	8d 29       	or	r24, r13
     d5e:	89 83       	std	Y+1, r24	; 0x01
	else
		value &= ~_BV(pipe);

	_set_register(EN_AA, &value, 1);
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	b5 01       	movw	r22, r10
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

	// Set the pipe's payload width.  If the pipe is being disabled, then the payload width is set to 0.
	value = enable ? payload_width : 0;
     d6a:	cc 20       	and	r12, r12
     d6c:	11 f4       	brne	.+4      	; 0xd72 <Radio_Configure_Rx+0x9c>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <Radio_Configure_Rx+0x9e>
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RX_PW_P0 + pipe, &value, 1);
     d76:	80 2f       	mov	r24, r16
     d78:	8f 5e       	subi	r24, 0xEF	; 239
     d7a:	be 01       	movw	r22, r28
     d7c:	6f 5f       	subi	r22, 0xFF	; 255
     d7e:	7f 4f       	sbci	r23, 0xFF	; 255
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>
	rx_pipe_widths[pipe] = value;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	22 e8       	ldi	r18, 0x82	; 130
     d8a:	32 e0       	ldi	r19, 0x02	; 2
     d8c:	e2 0e       	add	r14, r18
     d8e:	f3 1e       	adc	r15, r19
     d90:	f7 01       	movw	r30, r14
     d92:	80 83       	st	Z, r24

	// Enable or disable the pipe.
	_get_register(EN_RXADDR, &value, 1);
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	be 01       	movw	r22, r28
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 18 06 	call	0xc30	; 0xc30 <_get_register>
     da2:	89 81       	ldd	r24, Y+1	; 0x01
	if (enable)
     da4:	cc 20       	and	r12, r12
     da6:	11 f0       	breq	.+4      	; 0xdac <Radio_Configure_Rx+0xd6>
		value |= _BV(pipe);
     da8:	8d 29       	or	r24, r13
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <Radio_Configure_Rx+0xda>
	else
		value &= ~_BV(pipe);
     dac:	d0 94       	com	r13
     dae:	8d 21       	and	r24, r13
     db0:	89 83       	std	Y+1, r24	; 0x01
	_set_register(EN_RXADDR, &value, 1);
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	be 01       	movw	r22, r28
     db6:	6f 5f       	subi	r22, 0xFF	; 255
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>
}
     dc0:	0f 90       	pop	r0
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	0f 91       	pop	r16
     dc8:	ff 90       	pop	r15
     dca:	ef 90       	pop	r14
     dcc:	df 90       	pop	r13
     dce:	cf 90       	pop	r12
     dd0:	bf 90       	pop	r11
     dd2:	af 90       	pop	r10
     dd4:	08 95       	ret

00000dd6 <_set_tx_mode>:
		_delay_us(65);
	}
}

void _set_tx_mode()
{
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	0f 92       	push	r0
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	8e 01       	movw	r16, r28
     de8:	0f 5f       	subi	r16, 0xFF	; 255
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	b8 01       	movw	r22, r16
     dee:	41 e0       	ldi	r20, 0x01	; 1
     df0:	0e 94 18 06 	call	0xc30	; 0xc30 <_get_register>
	if ((config & _BV(PRIM_RX)) != 0)
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	80 ff       	sbrs	r24, 0
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <_set_tx_mode+0x3e>
	{
		config &= ~_BV(PRIM_RX);
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	b8 01       	movw	r22, r16
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e08:	85 e1       	ldi	r24, 0x15	; 21
     e0a:	98 2f       	mov	r25, r24
     e0c:	9a 95       	dec	r25
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <_set_tx_mode+0x36>
		// You can delete this if you're sending large packets (I'm thinking > 25 bytes, but I'm not sure) because it
		// sending the bytes over SPI can take this long.
		_delay_us(65);
		_delay_us(65);
	}
}
     e10:	8a 95       	dec	r24
     e12:	f1 f7       	brne	.-4      	; 0xe10 <_set_tx_mode+0x3a>
     e14:	0f 90       	pop	r0
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <Radio_Transmit>:

	_set_register(RF_SETUP, &value, 1);
}

uint8_t Radio_Transmit(radiopacket_t* payload, RADIO_TX_WAIT wait)
{
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	8c 01       	movw	r16, r24
     e28:	f6 2e       	mov	r15, r22
	uint8_t len = 32;

	// indicate that the driver is transmitting.
    transmit_lock = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	80 93 6e 17 	sts	0x176E, r24

    // disable the radio while writing to the Tx FIFO.
    RADIO_CE_LOW();
     e30:	2c 98       	cbi	0x05, 4	; 5

	_set_tx_mode();
     e32:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <_set_tx_mode>

    // for auto-ack to work, the pipe0 address must be set to the Tx address while the radio is transmitting.
    // The register will be set back to the original pipe 0 address when the TX_DS or MAX_RT interrupt is asserted.
    _set_register(RX_ADDR_P0, (uint8_t*)tx_address, ADDRESS_LENGTH);
     e36:	8a e0       	ldi	r24, 0x0A	; 10
     e38:	68 e8       	ldi	r22, 0x88	; 136
     e3a:	72 e0       	ldi	r23, 0x02	; 2
     e3c:	45 e0       	ldi	r20, 0x05	; 5
     e3e:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

    // enable SPI
    RADIO_CSN_LOW();
     e42:	2d 98       	cbi	0x05, 5	; 5
    // send the "write transmit payload" instruction.
    SPI_Write_Byte(W_TX_PAYLOAD);
     e44:	80 ea       	ldi	r24, 0xA0	; 160
     e46:	0e 94 07 08 	call	0x100e	; 0x100e <SPI_Write_Byte>
    // write the payload to the Tx FIFO
    SPI_Write_Block((uint8_t*)payload,len);
     e4a:	c8 01       	movw	r24, r16
     e4c:	60 e2       	ldi	r22, 0x20	; 32
     e4e:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_Write_Block>
    // disable SPI
    RADIO_CSN_HIGH();
     e52:	2d 9a       	sbi	0x05, 5	; 5

    // start the transmission.
    RADIO_CE_HIGH();
     e54:	2c 9a       	sbi	0x05, 4	; 5

    if (wait == RADIO_WAIT_FOR_TX)
     e56:	ff 20       	and	r15, r15
     e58:	11 f0       	breq	.+4      	; 0xe5e <Radio_Transmit+0x3e>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <Radio_Transmit+0x4a>
    {
        while (transmit_lock);
     e5e:	80 91 6e 17 	lds	r24, 0x176E
     e62:	88 23       	and	r24, r24
     e64:	e1 f7       	brne	.-8      	; 0xe5e <Radio_Transmit+0x3e>
        return tx_last_status;
     e66:	80 91 94 02 	lds	r24, 0x0294
    }

    return RADIO_TX_SUCCESS;
}
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	08 95       	ret

00000e72 <_set_rx_mode>:
    // resynch SPI
    RADIO_CSN_HIGH();
}

void _set_rx_mode()
{
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	8e 01       	movw	r16, r28
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	b8 01       	movw	r22, r16
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	0e 94 18 06 	call	0xc30	; 0xc30 <_get_register>
	if ((config & _BV(PRIM_RX)) == 0)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	80 fd       	sbrc	r24, 0
     e94:	0d c0       	rjmp	.+26     	; 0xeb0 <_set_rx_mode+0x3e>
	{
		config |= _BV(PRIM_RX);
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	b8 01       	movw	r22, r16
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>
     ea4:	85 e1       	ldi	r24, 0x15	; 21
     ea6:	98 2f       	mov	r25, r24
     ea8:	9a 95       	dec	r25
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <_set_rx_mode+0x36>
		// the radio takes 130 us to power up the receiver.
		_delay_us(65);
		_delay_us(65);
	}
}
     eac:	8a 95       	dec	r24
     eae:	f1 f7       	brne	.-4      	; 0xeac <_set_rx_mode+0x3a>
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	1f 91       	pop	r17
     eb8:	0f 91       	pop	r16
     eba:	08 95       	ret

00000ebc <__vector_1>:
	return wh;
}

// Interrupt handler
ISR(INT0_vect)
{
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
     eec:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
     eee:	0e 94 2a 05 	call	0xa54	; 0xa54 <_get_status>
     ef2:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	86 ff       	sbrs	r24, 6
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <__vector_1+0x4a>
        pipe_number =  (status & 0xE) >> 1;
        radio_rxhandler(pipe_number);
     efa:	8e 70       	andi	r24, 0x0E	; 14
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	95 95       	asr	r25
     f00:	87 95       	ror	r24
     f02:	0e 94 c0 01 	call	0x380	; 0x380 <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	85 ff       	sbrs	r24, 5
     f0a:	1d c0       	rjmp	.+58     	; 0xf46 <__vector_1+0x8a>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
     f0c:	10 92 6e 17 	sts	0x176E, r1
        _reset_pipe0_address();
     f10:	0e 94 5d 05 	call	0xaba	; 0xaba <_reset_pipe0_address>
        _set_rx_mode();
     f14:	0e 94 39 07 	call	0xe72	; 0xe72 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
     f18:	80 91 92 02 	lds	r24, 0x0292
     f1c:	90 91 93 02 	lds	r25, 0x0293
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	90 93 93 02 	sts	0x0293, r25
     f28:	80 93 92 02 	sts	0x0292, r24
        tx_history |= 1;
     f2c:	80 91 92 02 	lds	r24, 0x0292
     f30:	90 91 93 02 	lds	r25, 0x0293
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	90 93 93 02 	sts	0x0293, r25
     f3a:	80 93 92 02 	sts	0x0292, r24
        tx_last_status = RADIO_TX_SUCCESS;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	80 93 94 02 	sts	0x0294, r24
     f44:	17 c0       	rjmp	.+46     	; 0xf74 <__vector_1+0xb8>
    } else if (status & _BV(MAX_RT)) {
     f46:	84 ff       	sbrs	r24, 4
     f48:	15 c0       	rjmp	.+42     	; 0xf74 <__vector_1+0xb8>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
     f4a:	81 ee       	ldi	r24, 0xE1	; 225
     f4c:	0e 94 07 08 	call	0x100e	; 0x100e <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
     f50:	10 92 6e 17 	sts	0x176E, r1
        _reset_pipe0_address();
     f54:	0e 94 5d 05 	call	0xaba	; 0xaba <_reset_pipe0_address>
        _set_rx_mode();
     f58:	0e 94 39 07 	call	0xe72	; 0xe72 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
     f5c:	80 91 92 02 	lds	r24, 0x0292
     f60:	90 91 93 02 	lds	r25, 0x0293
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	90 93 93 02 	sts	0x0293, r25
     f6c:	80 93 92 02 	sts	0x0292, r24
        tx_last_status = RADIO_TX_MAX_RT;
     f70:	10 92 94 02 	sts	0x0294, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     f74:	80 e7       	ldi	r24, 0x70	; 112
     f76:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
     f78:	87 e0       	ldi	r24, 0x07	; 7
     f7a:	be 01       	movw	r22, r28
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	0e 94 30 05 	call	0xa60	; 0xa60 <_set_register>

    RADIO_CE_HIGH();
     f86:	2c 9a       	sbi	0x05, 4	; 5
}
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0b be       	out	0x3b, r0	; 59
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <SPI_Init>:
#define SPI_WAIT()              while (!(SPSR & _BV(SPIF)));

void SPI_Init()
{
	// set MOSI, SCK, and SS output, MISO input
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | ~(_BV(SPI_MISO));
     fb4:	84 b1       	in	r24, 0x04	; 4
     fb6:	87 6f       	ori	r24, 0xF7	; 247
     fb8:	84 b9       	out	0x04, r24	; 4

	SPI_PORT |= _BV(SPI_SS);
     fba:	28 9a       	sbi	0x05, 0	; 5

	SPCR |= _BV(SPE) | _BV(MSTR);
     fbc:	8c b5       	in	r24, 0x2c	; 44
     fbe:	80 65       	ori	r24, 0x50	; 80
     fc0:	8c bd       	out	0x2c, r24	; 44
}
     fc2:	08 95       	ret

00000fc4 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	ec 01       	movw	r28, r24
     fca:	db 01       	movw	r26, r22
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	0c c0       	rjmp	.+24     	; 0xfea <SPI_ReadWrite_Block+0x26>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     fd2:	fe 01       	movw	r30, r28
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	80 81       	ld	r24, Z
     fda:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
     fdc:	0d b4       	in	r0, 0x2d	; 45
     fde:	07 fe       	sbrs	r0, 7
     fe0:	fd cf       	rjmp	.-6      	; 0xfdc <SPI_ReadWrite_Block+0x18>
          buffer[i] = SPDR;
     fe2:	8e b5       	in	r24, 0x2e	; 46
     fe4:	8d 93       	st	X+, r24
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
     fea:	24 17       	cp	r18, r20
     fec:	90 f3       	brcs	.-28     	; 0xfd2 <SPI_ReadWrite_Block+0xe>
          SPDR = data[i];
          SPI_WAIT();
          buffer[i] = SPDR;
    }
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <SPI_Write_Block>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
     ff4:	fc 01       	movw	r30, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	07 c0       	rjmp	.+14     	; 0x1008 <SPI_Write_Block+0x14>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
     ffa:	80 81       	ld	r24, Z
     ffc:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
     ffe:	0d b4       	in	r0, 0x2d	; 45
    1000:	07 fe       	sbrs	r0, 7
    1002:	fd cf       	rjmp	.-6      	; 0xffe <SPI_Write_Block+0xa>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1004:	9f 5f       	subi	r25, 0xFF	; 255
    1006:	31 96       	adiw	r30, 0x01	; 1
    1008:	96 17       	cp	r25, r22
    100a:	b8 f3       	brcs	.-18     	; 0xffa <SPI_Write_Block+0x6>
          SPDR = data[i];
          SPI_WAIT();
    }
}
    100c:	08 95       	ret

0000100e <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    100e:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    1010:	0d b4       	in	r0, 0x2d	; 45
    1012:	07 fe       	sbrs	r0, 7
    1014:	fd cf       	rjmp	.-6      	; 0x1010 <SPI_Write_Byte+0x2>
    return SPDR;
    1016:	8e b5       	in	r24, 0x2e	; 46
}
    1018:	08 95       	ret

0000101a <sonar_init>:
uint16_t _get_TCNT3();

void sonar_init()
{
	// set PE6 for output
	DDRE |= _BV(PORTE6);
    101a:	6e 9a       	sbi	0x0d, 6	; 13

	// set timer3 to run 1/8 of the microprocessor's clock frequency
	TCCR3B &= ~_BV(CS30);
    101c:	e1 e9       	ldi	r30, 0x91	; 145
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	80 83       	st	Z, r24
	TCCR3B |= _BV(CS31);
    1026:	80 81       	ld	r24, Z
    1028:	82 60       	ori	r24, 0x02	; 2
    102a:	80 83       	st	Z, r24
	TCCR3B &= ~_BV(CS32);
    102c:	80 81       	ld	r24, Z
    102e:	8b 7f       	andi	r24, 0xFB	; 251
    1030:	80 83       	st	Z, r24

	// enable noise canceler for input capture
	TCCR3B |= _BV(ICNC3);
    1032:	80 81       	ld	r24, Z
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	80 83       	st	Z, r24

	// set input capture on rising edge
	TCCR3B |= _BV(ICES3);
    1038:	80 81       	ld	r24, Z
    103a:	80 64       	ori	r24, 0x40	; 64
    103c:	80 83       	st	Z, r24

	// clear input capture flag
	TIFR3 |= _BV(ICF3);
    103e:	c5 9a       	sbi	0x18, 5	; 24

	// enable input capture interrupt
	TIMSK3 |= _BV(ICIE3);
    1040:	e1 e7       	ldi	r30, 0x71	; 113
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 62       	ori	r24, 0x20	; 32
    1048:	80 83       	st	Z, r24

	sei();
    104a:	78 94       	sei
}
    104c:	08 95       	ret

0000104e <sonar_trigger>:

void sonar_trigger()
{
	// trigger a 10 us pulse
	PORTE |= _BV(PE6);
    104e:	76 9a       	sbi	0x0e, 6	; 14
    1050:	8a e1       	ldi	r24, 0x1A	; 26
    1052:	8a 95       	dec	r24
    1054:	f1 f7       	brne	.-4      	; 0x1052 <sonar_trigger+0x4>
	_delay_us(10);
	PORTE &= ~_BV(PE6);
    1056:	76 98       	cbi	0x0e, 6	; 14
}
    1058:	08 95       	ret

0000105a <sonar_echo_received>:

uint8_t sonar_echo_received()
{
	char sreg = SREG;
    105a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    105c:	f8 94       	cli
	uint8_t temp = received;
    105e:	80 91 b5 03 	lds	r24, 0x03B5
	received = 0;
    1062:	10 92 b5 03 	sts	0x03B5, r1
	SREG = sreg;
    1066:	9f bf       	out	0x3f, r25	; 63
	return temp;
}
    1068:	08 95       	ret

0000106a <sonar_get_distance>:

uint16_t sonar_get_distance()
{
	return trigger_time - echo_time;
    106a:	20 91 b6 03 	lds	r18, 0x03B6
    106e:	30 91 b7 03 	lds	r19, 0x03B7
    1072:	80 91 b3 03 	lds	r24, 0x03B3
    1076:	90 91 b4 03 	lds	r25, 0x03B4
    107a:	28 1b       	sub	r18, r24
    107c:	39 0b       	sbc	r19, r25
}
    107e:	c9 01       	movw	r24, r18
    1080:	08 95       	ret

00001082 <sonar_get_ping_time>:

uint16_t sonar_get_ping_time()
{
	return trigger_time;
    1082:	20 91 b6 03 	lds	r18, 0x03B6
    1086:	30 91 b7 03 	lds	r19, 0x03B7
}
    108a:	c9 01       	movw	r24, r18
    108c:	08 95       	ret

0000108e <sonar_get_sonar_time>:

uint16_t sonar_get_sonar_time()
{
	return echo_time;
    108e:	20 91 b3 03 	lds	r18, 0x03B3
    1092:	30 91 b4 03 	lds	r19, 0x03B4
}
    1096:	c9 01       	movw	r24, r18
    1098:	08 95       	ret

0000109a <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
	if (TCCR3B & _BV(ICES3)) { // a rising edge is captured
    10a8:	80 91 91 00 	lds	r24, 0x0091
    10ac:	86 ff       	sbrs	r24, 6
    10ae:	10 c0       	rjmp	.+32     	; 0x10d0 <__vector_31+0x36>

		echo_time = ICR3;
    10b0:	80 91 96 00 	lds	r24, 0x0096
    10b4:	90 91 97 00 	lds	r25, 0x0097
    10b8:	90 93 b4 03 	sts	0x03B4, r25
    10bc:	80 93 b3 03 	sts	0x03B3, r24

		TCNT3 = 0;
    10c0:	10 92 95 00 	sts	0x0095, r1
    10c4:	10 92 94 00 	sts	0x0094, r1

		// set input capture on falling edge
		TCCR3B &= ~_BV(ICES3);
    10c8:	80 91 91 00 	lds	r24, 0x0091
    10cc:	8f 7b       	andi	r24, 0xBF	; 191
    10ce:	0e c0       	rjmp	.+28     	; 0x10ec <__vector_31+0x52>

		// clear input capture flag
		TIFR3 |= _BV(ICF3);

	} else { // a falling edge is captured
		received = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	80 93 b5 03 	sts	0x03B5, r24
		trigger_time = ICR3;
    10d6:	80 91 96 00 	lds	r24, 0x0096
    10da:	90 91 97 00 	lds	r25, 0x0097
    10de:	90 93 b7 03 	sts	0x03B7, r25
    10e2:	80 93 b6 03 	sts	0x03B6, r24
		// echo_time = trigger_time;

		// set input capture on rising edge
		TCCR3B |= _BV(ICES3);
    10e6:	80 91 91 00 	lds	r24, 0x0091
    10ea:	80 64       	ori	r24, 0x40	; 64
    10ec:	80 93 91 00 	sts	0x0091, r24

		// clear input capture flag
		TIFR3 |= _BV(ICF3);
    10f0:	c5 9a       	sbi	0x18, 5	; 24
	}
}
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <idle>:
 */
/**
 *  @brief The idle task does nothing but busy loop.
 */
static void idle (void)
{
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <idle>

00001102 <exit_kernel>:
{
	/*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
     SAVE_CTX();
    1102:	ff 93       	push	r31
    1104:	fc b7       	in	r31, 0x3c	; 60
    1106:	ff 93       	push	r31
    1108:	ff b7       	in	r31, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	ff 93       	push	r31
    110e:	ef 93       	push	r30
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	bf 93       	push	r27
    1116:	af 93       	push	r26
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	7f 93       	push	r23
    111e:	6f 93       	push	r22
    1120:	5f 93       	push	r21
    1122:	4f 93       	push	r20
    1124:	3f 93       	push	r19
    1126:	2f 93       	push	r18
    1128:	1f 93       	push	r17
    112a:	0f 93       	push	r16
    112c:	ff 92       	push	r15
    112e:	ef 92       	push	r14
    1130:	df 92       	push	r13
    1132:	cf 92       	push	r12
    1134:	bf 92       	push	r11
    1136:	af 92       	push	r10
    1138:	9f 92       	push	r9
    113a:	8f 92       	push	r8
    113c:	7f 92       	push	r7
    113e:	6f 92       	push	r6
    1140:	5f 92       	push	r5
    1142:	4f 92       	push	r4
    1144:	3f 92       	push	r3
    1146:	2f 92       	push	r2
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    kernel_sp = SP;
    114c:	8d b7       	in	r24, 0x3d	; 61
    114e:	9e b7       	in	r25, 0x3e	; 62
    1150:	90 93 c0 03 	sts	0x03C0, r25
    1154:	80 93 bf 03 	sts	0x03BF, r24

    /*
     * Now restore the task's context, SP first.
     */
    SP = (uint16_t)(cur_task->sp);
    1158:	e0 91 b8 03 	lds	r30, 0x03B8
    115c:	f0 91 b9 03 	lds	r31, 0x03B9
    1160:	e0 50       	subi	r30, 0x00	; 0
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	80 81       	ld	r24, Z
    1166:	91 81       	ldd	r25, Z+1	; 0x01
    1168:	9e bf       	out	0x3e, r25	; 62
    116a:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    116c:	0f 90       	pop	r0
    116e:	1f 90       	pop	r1
    1170:	2f 90       	pop	r2
    1172:	3f 90       	pop	r3
    1174:	4f 90       	pop	r4
    1176:	5f 90       	pop	r5
    1178:	6f 90       	pop	r6
    117a:	7f 90       	pop	r7
    117c:	8f 90       	pop	r8
    117e:	9f 90       	pop	r9
    1180:	af 90       	pop	r10
    1182:	bf 90       	pop	r11
    1184:	cf 90       	pop	r12
    1186:	df 90       	pop	r13
    1188:	ef 90       	pop	r14
    118a:	ff 90       	pop	r15
    118c:	0f 91       	pop	r16
    118e:	1f 91       	pop	r17
    1190:	2f 91       	pop	r18
    1192:	3f 91       	pop	r19
    1194:	4f 91       	pop	r20
    1196:	5f 91       	pop	r21
    1198:	6f 91       	pop	r22
    119a:	7f 91       	pop	r23
    119c:	8f 91       	pop	r24
    119e:	9f 91       	pop	r25
    11a0:	af 91       	pop	r26
    11a2:	bf 91       	pop	r27
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	ef 91       	pop	r30
    11aa:	ff 91       	pop	r31
    11ac:	ff bf       	out	0x3f, r31	; 63
    11ae:	ff 91       	pop	r31
    11b0:	fc bf       	out	0x3c, r31	; 60
    11b2:	ff 91       	pop	r31
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */

	asm volatile ("ret\n"::);
    11b4:	08 95       	ret

000011b6 <enter_kernel>:
{
	/*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
    SAVE_CTX();
    11b6:	ff 93       	push	r31
    11b8:	fc b7       	in	r31, 0x3c	; 60
    11ba:	ff 93       	push	r31
    11bc:	ff b7       	in	r31, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	ff 93       	push	r31
    11c2:	ef 93       	push	r30
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	bf 93       	push	r27
    11ca:	af 93       	push	r26
    11cc:	9f 93       	push	r25
    11ce:	8f 93       	push	r24
    11d0:	7f 93       	push	r23
    11d2:	6f 93       	push	r22
    11d4:	5f 93       	push	r21
    11d6:	4f 93       	push	r20
    11d8:	3f 93       	push	r19
    11da:	2f 93       	push	r18
    11dc:	1f 93       	push	r17
    11de:	0f 93       	push	r16
    11e0:	ff 92       	push	r15
    11e2:	ef 92       	push	r14
    11e4:	df 92       	push	r13
    11e6:	cf 92       	push	r12
    11e8:	bf 92       	push	r11
    11ea:	af 92       	push	r10
    11ec:	9f 92       	push	r9
    11ee:	8f 92       	push	r8
    11f0:	7f 92       	push	r7
    11f2:	6f 92       	push	r6
    11f4:	5f 92       	push	r5
    11f6:	4f 92       	push	r4
    11f8:	3f 92       	push	r3
    11fa:	2f 92       	push	r2
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    cur_task->sp = (uint8_t*)SP;
    1200:	e0 91 b8 03 	lds	r30, 0x03B8
    1204:	f0 91 b9 03 	lds	r31, 0x03B9
    1208:	8d b7       	in	r24, 0x3d	; 61
    120a:	9e b7       	in	r25, 0x3e	; 62
    120c:	e0 50       	subi	r30, 0x00	; 0
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24

    /*
     * Now restore the kernel's context, SP first.
     */
    SP = kernel_sp;
    1214:	80 91 bf 03 	lds	r24, 0x03BF
    1218:	90 91 c0 03 	lds	r25, 0x03C0
    121c:	9e bf       	out	0x3e, r25	; 62
    121e:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    1220:	0f 90       	pop	r0
    1222:	1f 90       	pop	r1
    1224:	2f 90       	pop	r2
    1226:	3f 90       	pop	r3
    1228:	4f 90       	pop	r4
    122a:	5f 90       	pop	r5
    122c:	6f 90       	pop	r6
    122e:	7f 90       	pop	r7
    1230:	8f 90       	pop	r8
    1232:	9f 90       	pop	r9
    1234:	af 90       	pop	r10
    1236:	bf 90       	pop	r11
    1238:	cf 90       	pop	r12
    123a:	df 90       	pop	r13
    123c:	ef 90       	pop	r14
    123e:	ff 90       	pop	r15
    1240:	0f 91       	pop	r16
    1242:	1f 91       	pop	r17
    1244:	2f 91       	pop	r18
    1246:	3f 91       	pop	r19
    1248:	4f 91       	pop	r20
    124a:	5f 91       	pop	r21
    124c:	6f 91       	pop	r22
    124e:	7f 91       	pop	r23
    1250:	8f 91       	pop	r24
    1252:	9f 91       	pop	r25
    1254:	af 91       	pop	r26
    1256:	bf 91       	pop	r27
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	ef 91       	pop	r30
    125e:	ff 91       	pop	r31
    1260:	ff bf       	out	0x3f, r31	; 63
    1262:	ff 91       	pop	r31
    1264:	fc bf       	out	0x3c, r31	; 60
    1266:	ff 91       	pop	r31
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */

	asm volatile ("ret\n"::);
    1268:	08 95       	ret

0000126a <__vector_17>:
     * of SREG. We know it should have interrupts enabled because this
     * ISR was able to execute, but it has interrupts disabled because
     * it was stored while this ISR was executing. So we set the bit (I = bit 7)
     * in the stored value.
     */
    SAVE_CTX_TOP();
    126a:	ff 93       	push	r31
    126c:	fc b7       	in	r31, 0x3c	; 60
    126e:	ff 93       	push	r31
    1270:	ff b7       	in	r31, 0x3f	; 63
    1272:	f8 94       	cli
   
    STACK_SREG_SET_I_BIT();
    1274:	f0 68       	ori	r31, 0x80	; 128

    SAVE_CTX_BOTTOM();
    1276:	ff 93       	push	r31
    1278:	ef 93       	push	r30
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	bf 93       	push	r27
    1280:	af 93       	push	r26
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	7f 93       	push	r23
    1288:	6f 93       	push	r22
    128a:	5f 93       	push	r21
    128c:	4f 93       	push	r20
    128e:	3f 93       	push	r19
    1290:	2f 93       	push	r18
    1292:	1f 93       	push	r17
    1294:	0f 93       	push	r16
    1296:	ff 92       	push	r15
    1298:	ef 92       	push	r14
    129a:	df 92       	push	r13
    129c:	cf 92       	push	r12
    129e:	bf 92       	push	r11
    12a0:	af 92       	push	r10
    12a2:	9f 92       	push	r9
    12a4:	8f 92       	push	r8
    12a6:	7f 92       	push	r7
    12a8:	6f 92       	push	r6
    12aa:	5f 92       	push	r5
    12ac:	4f 92       	push	r4
    12ae:	3f 92       	push	r3
    12b0:	2f 92       	push	r2
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0

    cur_task->sp = (uint8_t*)SP;
    12b6:	e0 91 b8 03 	lds	r30, 0x03B8
    12ba:	f0 91 b9 03 	lds	r31, 0x03B9
    12be:	8d b7       	in	r24, 0x3d	; 61
    12c0:	9e b7       	in	r25, 0x3e	; 62
    12c2:	e0 50       	subi	r30, 0x00	; 0
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	80 83       	st	Z, r24
    /*
     * Now that we already saved a copy of the stack pointer
     * for every context including the kernel, we can move to
     * the kernel stack and use it. We will restore it again later.
     */
    SP = kernel_sp;
    12ca:	80 91 bf 03 	lds	r24, 0x03BF
    12ce:	90 91 c0 03 	lds	r25, 0x03C0
    12d2:	9e bf       	out	0x3e, r25	; 62
    12d4:	8d bf       	out	0x3d, r24	; 61

    /*
     * Inform the kernel that this task was interrupted.
     */
    kernel_request = TIMER_EXPIRED;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 93 12 16 	sts	0x1612, r24

    /*
     * Prepare for next tick interrupt.
     */
    OCR1A += TICK_CYCLES;
    12dc:	e8 e8       	ldi	r30, 0x88	; 136
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	91 81       	ldd	r25, Z+1	; 0x01
    12e4:	80 5c       	subi	r24, 0xC0	; 192
    12e6:	93 46       	sbci	r25, 0x63	; 99
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	80 83       	st	Z, r24

    /*
     * Restore the kernel context. (The stack pointer is restored again.)
     */
    SP = kernel_sp;
    12ec:	80 91 bf 03 	lds	r24, 0x03BF
    12f0:	90 91 c0 03 	lds	r25, 0x03C0
    12f4:	9e bf       	out	0x3e, r25	; 62
    12f6:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    12f8:	0f 90       	pop	r0
    12fa:	1f 90       	pop	r1
    12fc:	2f 90       	pop	r2
    12fe:	3f 90       	pop	r3
    1300:	4f 90       	pop	r4
    1302:	5f 90       	pop	r5
    1304:	6f 90       	pop	r6
    1306:	7f 90       	pop	r7
    1308:	8f 90       	pop	r8
    130a:	9f 90       	pop	r9
    130c:	af 90       	pop	r10
    130e:	bf 90       	pop	r11
    1310:	cf 90       	pop	r12
    1312:	df 90       	pop	r13
    1314:	ef 90       	pop	r14
    1316:	ff 90       	pop	r15
    1318:	0f 91       	pop	r16
    131a:	1f 91       	pop	r17
    131c:	2f 91       	pop	r18
    131e:	3f 91       	pop	r19
    1320:	4f 91       	pop	r20
    1322:	5f 91       	pop	r21
    1324:	6f 91       	pop	r22
    1326:	7f 91       	pop	r23
    1328:	8f 91       	pop	r24
    132a:	9f 91       	pop	r25
    132c:	af 91       	pop	r26
    132e:	bf 91       	pop	r27
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	ef 91       	pop	r30
    1336:	ff 91       	pop	r31
    1338:	ff bf       	out	0x3f, r31	; 63
    133a:	ff 91       	pop	r31
    133c:	fc bf       	out	0x3c, r31	; 60
    133e:	ff 91       	pop	r31
     * Explilictly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
    1340:	08 95       	ret

00001342 <OS_Abort>:
}

/** @brief Abort the execution of this RTOS due to an unrecoverable erorr.
 */
void OS_Abort(void)
{
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    uint8_t i, j;
    uint8_t flashes, mask;

    Disable_Interrupt();
    1348:	f8 94       	cli

    /* Initialize port for output */
    DDRG = LED_RED_MASK | LED_GREEN_MASK;
    134a:	80 ef       	ldi	r24, 0xF0	; 240
    134c:	83 bb       	out	0x13, r24	; 19

    if(error_msg < ERR_RUN_1_USER_CALLED_OS_ABORT)
    134e:	80 91 95 02 	lds	r24, 0x0295
    1352:	86 30       	cpi	r24, 0x06	; 6
    1354:	28 f4       	brcc	.+10     	; 0x1360 <OS_Abort+0x1e>
    {
        flashes = error_msg + 1;
    1356:	60 91 95 02 	lds	r22, 0x0295
    135a:	6f 5f       	subi	r22, 0xFF	; 255
    135c:	70 e6       	ldi	r23, 0x60	; 96
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <OS_Abort+0x26>
        mask = LED_GREEN_MASK;
    }
    else
    {
        flashes = error_msg + 1 - ERR_RUN_1_USER_CALLED_OS_ABORT;
    1360:	60 91 95 02 	lds	r22, 0x0295
    1364:	65 50       	subi	r22, 0x05	; 5
    1366:	70 e9       	ldi	r23, 0x90	; 144
    }


    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);
    1368:	e0 ef       	ldi	r30, 0xF0	; 240
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    136a:	20 e5       	ldi	r18, 0x50	; 80
    136c:	33 ec       	ldi	r19, 0xC3	; 195
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    }


    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);
    1372:	e4 bb       	out	0x14, r30	; 20
    1374:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1376:	da 01       	movw	r26, r20
    1378:	c9 01       	movw	r24, r18
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <OS_Abort+0x38>

    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);

        for(i = 0; i < 100; ++i)
    137e:	ff 5f       	subi	r31, 0xFF	; 255
    1380:	f4 36       	cpi	r31, 0x64	; 100
    1382:	c9 f7       	brne	.-14     	; 0x1376 <OS_Abort+0x34>
        {
               _delay_25ms();
        }

        PORTG = (uint8_t) 0;
    1384:	14 ba       	out	0x14, r1	; 20
    1386:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1388:	da 01       	movw	r26, r20
    138a:	c9 01       	movw	r24, r18
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <OS_Abort+0x4a>
               _delay_25ms();
        }

        PORTG = (uint8_t) 0;

        for(i = 0; i < 40; ++i)
    1390:	ff 5f       	subi	r31, 0xFF	; 255
    1392:	f8 32       	cpi	r31, 0x28	; 40
    1394:	c9 f7       	brne	.-14     	; 0x1388 <OS_Abort+0x46>
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	13 c0       	rjmp	.+38     	; 0x13c0 <OS_Abort+0x7e>
        }

 
        for(j = 0; j < flashes; ++j)
        {
            PORTG = mask;
    139a:	74 bb       	out	0x14, r23	; 20
    139c:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    139e:	da 01       	movw	r26, r20
    13a0:	c9 01       	movw	r24, r18
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <OS_Abort+0x60>
 
        for(j = 0; j < flashes; ++j)
        {
            PORTG = mask;

            for(i = 0; i < 10; ++i)
    13a6:	ff 5f       	subi	r31, 0xFF	; 255
    13a8:	fa 30       	cpi	r31, 0x0A	; 10
    13aa:	c9 f7       	brne	.-14     	; 0x139e <OS_Abort+0x5c>
            {
                _delay_25ms();
            }

            PORTG = (uint8_t) 0;
    13ac:	14 ba       	out	0x14, r1	; 20
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    13b0:	da 01       	movw	r26, r20
    13b2:	c9 01       	movw	r24, r18
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <OS_Abort+0x72>
                _delay_25ms();
            }

            PORTG = (uint8_t) 0;

            for(i = 0; i < 10; ++i)
    13b8:	ff 5f       	subi	r31, 0xFF	; 255
    13ba:	fa 30       	cpi	r31, 0x0A	; 10
    13bc:	c9 f7       	brne	.-14     	; 0x13b0 <OS_Abort+0x6e>
        {
               _delay_25ms();
        }

 
        for(j = 0; j < flashes; ++j)
    13be:	1f 5f       	subi	r17, 0xFF	; 255
    13c0:	16 17       	cp	r17, r22
    13c2:	58 f3       	brcs	.-42     	; 0x139a <OS_Abort+0x58>
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    13c6:	da 01       	movw	r26, r20
    13c8:	c9 01       	movw	r24, r18
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <OS_Abort+0x88>
            {
                _delay_25ms();
            }
        }

        for(i = 0; i < 20; ++i)
    13ce:	ff 5f       	subi	r31, 0xFF	; 255
    13d0:	f4 31       	cpi	r31, 0x14	; 20
    13d2:	c9 f7       	brne	.-14     	; 0x13c6 <OS_Abort+0x84>
    13d4:	ce cf       	rjmp	.-100    	; 0x1372 <OS_Abort+0x30>

000013d6 <kernel_create_task>:
 * it has called "enter_kernel()"; so that when we switch to it later, we
 * can just restore its execution context on its stack.
 * @sa enter_kernel 
 */
static int kernel_create_task()
{
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;
    

    if (dead_pool_queue.head == NULL)
    13da:	c0 91 1d 16 	lds	r28, 0x161D
    13de:	d0 91 1e 16 	lds	r29, 0x161E
    13e2:	20 97       	sbiw	r28, 0x00	; 0
    13e4:	19 f4       	brne	.+6      	; 0x13ec <kernel_create_task+0x16>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	cf c0       	rjmp	.+414    	; 0x158a <kernel_create_task+0x1b4>
    {
        /* Too many tasks! */
        return 0;
    }

    if(kernel_request_create_args.level == PERIODIC &&
    13ec:	80 91 17 16 	lds	r24, 0x1617
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	69 f4       	brne	.+26     	; 0x140e <kernel_create_task+0x38>
    13f4:	80 91 18 16 	lds	r24, 0x1618
    13f8:	88 23       	and	r24, r24
    13fa:	21 f0       	breq	.+8      	; 0x1404 <kernel_create_task+0x2e>
    13fc:	80 91 18 16 	lds	r24, 0x1618
    1400:	89 30       	cpi	r24, 0x09	; 9
    1402:	28 f0       	brcs	.+10     	; 0x140e <kernel_create_task+0x38>
        (kernel_request_create_args.name == IDLE ||
         kernel_request_create_args.name > MAXNAME))
    {
        /* PERIODIC name is out of range [1 .. MAXNAME] */
        error_msg = ERR_2_CREATE_NAME_OUT_OF_RANGE;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    140a:	0e 94 a1 09 	call	0x1342	; 0x1342 <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    140e:	80 91 17 16 	lds	r24, 0x1617
    1412:	82 30       	cpi	r24, 0x02	; 2
    1414:	69 f4       	brne	.+26     	; 0x1430 <kernel_create_task+0x5a>
    1416:	e0 91 18 16 	lds	r30, 0x1618
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	e5 5a       	subi	r30, 0xA5	; 165
    141e:	f9 4e       	sbci	r31, 0xE9	; 233
    1420:	80 81       	ld	r24, Z
    1422:	88 23       	and	r24, r24
    1424:	29 f4       	brne	.+10     	; 0x1430 <kernel_create_task+0x5a>
        name_in_PPP[kernel_request_create_args.name] == 0)
    {
        error_msg = ERR_5_NAME_NOT_IN_PPP;
    1426:	84 e0       	ldi	r24, 0x04	; 4
    1428:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    142c:	0e 94 a1 09 	call	0x1342	; 0x1342 <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    1430:	80 91 17 16 	lds	r24, 0x1617
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	81 f4       	brne	.+32     	; 0x1458 <kernel_create_task+0x82>
    1438:	e0 91 18 16 	lds	r30, 0x1618
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	e7 5b       	subi	r30, 0xB7	; 183
    1444:	f9 4e       	sbci	r31, 0xE9	; 233
    1446:	80 81       	ld	r24, Z
    1448:	91 81       	ldd	r25, Z+1	; 0x01
    144a:	89 2b       	or	r24, r25
    144c:	29 f0       	breq	.+10     	; 0x1458 <kernel_create_task+0x82>
    name_to_task_ptr[kernel_request_create_args.name] != NULL)
    {
        /* PERIODIC name already used */
        error_msg = ERR_4_PERIODIC_NAME_IN_USE;
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    1454:	0e 94 a1 09 	call	0x1342	; 0x1342 <OS_Abort>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
    1458:	80 91 17 16 	lds	r24, 0x1617
    145c:	88 23       	and	r24, r24
    145e:	19 f4       	brne	.+6      	; 0x1466 <kernel_create_task+0x90>
    1460:	c9 e0       	ldi	r28, 0x09	; 9
    1462:	d4 e1       	ldi	r29, 0x14	; 20
    1464:	0b c0       	rjmp	.+22     	; 0x147c <kernel_create_task+0xa6>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    1466:	fe 01       	movw	r30, r28
    1468:	e9 5f       	subi	r30, 0xF9	; 249
    146a:	fd 4f       	sbci	r31, 0xFD	; 253
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	90 93 1e 16 	sts	0x161E, r25
    1474:	80 93 1d 16 	sts	0x161D, r24
        task_ptr->next = NULL;
    1478:	11 82       	std	Z+1, r1	; 0x01
    147a:	10 82       	st	Z, r1
     *   register 31,
     *   the stored SREG, and
     *   the stored EIND (for 2560), and
	 *   registers 30 to 0.
     */
    uint8_t* stack_top = stack_bottom - STACKCONTEXTSIZE;
    147c:	fe 01       	movw	r30, r28
    147e:	e9 52       	subi	r30, 0x29	; 41
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	df 01       	movw	r26, r30
    1484:	80 e0       	ldi	r24, 0x00	; 0

	for( int i = 0; i < 31; i++ )
	{
		stack_top[i] = i;
    1486:	8d 93       	st	X+, r24
    1488:	8f 5f       	subi	r24, 0xFF	; 255
     *   the stored EIND (for 2560), and
	 *   registers 30 to 0.
     */
    uint8_t* stack_top = stack_bottom - STACKCONTEXTSIZE;

	for( int i = 0; i < 31; i++ )
    148a:	8f 31       	cpi	r24, 0x1F	; 31
    148c:	e1 f7       	brne	.-8      	; 0x1486 <kernel_create_task+0xb0>
	{
		stack_top[i] = i;
	}
	stack_top[31] = 0x55;
    148e:	85 e5       	ldi	r24, 0x55	; 85
    1490:	87 8f       	std	Z+31, r24	; 0x1f
	stack_top[32] = 0xEE;
    1492:	8e ee       	ldi	r24, 0xEE	; 238
    1494:	80 a3       	std	Z+32, r24	; 0x20
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
    1496:	12 82       	std	Z+2, r1	; 0x02
	// stack_bottom[-2] = (uint8_t) 0; /* r1 is the "zero" register. */
    /* stack_top[31] is r30. */
    stack_top[33] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	81 a3       	std	Z+33, r24	; 0x21
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
	#if USE_AVR2560_GREATER
    stack_top[KERNELARG_STACKOFFSET+0] = (uint8_t)(0);
    149c:	13 a2       	std	Z+35, r1	; 0x23
	stack_top[KERNELARG_STACKOFFSET+1] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
    149e:	80 91 13 16 	lds	r24, 0x1613
    14a2:	90 91 14 16 	lds	r25, 0x1614
    14a6:	94 a3       	std	Z+36, r25	; 0x24
    stack_top[KERNELARG_STACKOFFSET+2] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
    14a8:	80 91 13 16 	lds	r24, 0x1613
    14ac:	90 91 14 16 	lds	r25, 0x1614
    14b0:	85 a3       	std	Z+37, r24	; 0x25
    stack_top[KERNELARG_STACKOFFSET+3] = (uint8_t)(0);
    14b2:	16 a2       	std	Z+38, r1	; 0x26
	stack_top[KERNELARG_STACKOFFSET+4] = (uint8_t)((uint16_t)Task_Terminate >> 8);
    14b4:	80 e5       	ldi	r24, 0x50	; 80
    14b6:	9f e0       	ldi	r25, 0x0F	; 15
    14b8:	97 a3       	std	Z+39, r25	; 0x27
    stack_top[KERNELARG_STACKOFFSET+5] = (uint8_t)(uint16_t)Task_Terminate;
    14ba:	c1 50       	subi	r28, 0x01	; 1
    14bc:	de 4f       	sbci	r29, 0xFE	; 254
    14be:	89 93       	st	Y+, r24

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
    14c0:	f9 83       	std	Y+1, r31	; 0x01
    14c2:	e8 83       	st	Y, r30

    p->state = READY;
    14c4:	23 96       	adiw	r28, 0x03	; 3
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	89 93       	st	Y+, r24
    p->arg = kernel_request_create_args.arg;
    14ca:	80 91 15 16 	lds	r24, 0x1615
    14ce:	90 91 16 16 	lds	r25, 0x1616
    14d2:	89 93       	st	Y+, r24
    14d4:	99 93       	st	Y+, r25
    p->level = kernel_request_create_args.level;
    14d6:	80 91 17 16 	lds	r24, 0x1617
    14da:	88 83       	st	Y, r24
    p->name = kernel_request_create_args.name;
    14dc:	80 91 18 16 	lds	r24, 0x1618
    14e0:	24 97       	sbiw	r28, 0x04	; 4
    14e2:	88 83       	st	Y, r24
    14e4:	c2 50       	subi	r28, 0x02	; 2
    14e6:	d2 40       	sbci	r29, 0x02	; 2

	switch(kernel_request_create_args.level)
    14e8:	80 91 17 16 	lds	r24, 0x1617
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	31 f0       	breq	.+12     	; 0x14fc <kernel_create_task+0x126>
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	71 f0       	breq	.+28     	; 0x1510 <kernel_create_task+0x13a>
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	09 f0       	breq	.+2      	; 0x14fa <kernel_create_task+0x124>
    14f8:	46 c0       	rjmp	.+140    	; 0x1586 <kernel_create_task+0x1b0>
    14fa:	28 c0       	rjmp	.+80     	; 0x154c <kernel_create_task+0x176>
	{
	case PERIODIC:
		/* Put this newly created PPP task into the PPP lookup array */
        name_to_task_ptr[kernel_request_create_args.name] = p;
    14fc:	e0 91 18 16 	lds	r30, 0x1618
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	e7 5b       	subi	r30, 0xB7	; 183
    1508:	f9 4e       	sbci	r31, 0xE9	; 233
    150a:	d1 83       	std	Z+1, r29	; 0x01
    150c:	c0 83       	st	Z, r28
    150e:	3b c0       	rjmp	.+118    	; 0x1586 <kernel_create_task+0x1b0>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1510:	c9 5f       	subi	r28, 0xF9	; 249
    1512:	dd 4f       	sbci	r29, 0xFD	; 253
    1514:	19 82       	std	Y+1, r1	; 0x01
    1516:	18 82       	st	Y, r1
    1518:	c7 50       	subi	r28, 0x07	; 7
    151a:	d2 40       	sbci	r29, 0x02	; 2

    if(queue_ptr->head == NULL)
    151c:	80 91 25 16 	lds	r24, 0x1625
    1520:	90 91 26 16 	lds	r25, 0x1626
    1524:	89 2b       	or	r24, r25
    1526:	29 f4       	brne	.+10     	; 0x1532 <kernel_create_task+0x15c>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1528:	d0 93 26 16 	sts	0x1626, r29
    152c:	c0 93 25 16 	sts	0x1625, r28
    1530:	08 c0       	rjmp	.+16     	; 0x1542 <kernel_create_task+0x16c>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1532:	e0 91 27 16 	lds	r30, 0x1627
    1536:	f0 91 28 16 	lds	r31, 0x1628
    153a:	e9 5f       	subi	r30, 0xF9	; 249
    153c:	fd 4f       	sbci	r31, 0xFD	; 253
    153e:	d1 83       	std	Z+1, r29	; 0x01
    1540:	c0 83       	st	Z, r28
        queue_ptr->tail = task_to_add;
    1542:	d0 93 28 16 	sts	0x1628, r29
    1546:	c0 93 27 16 	sts	0x1627, r28
    154a:	1d c0       	rjmp	.+58     	; 0x1586 <kernel_create_task+0x1b0>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    154c:	c9 5f       	subi	r28, 0xF9	; 249
    154e:	dd 4f       	sbci	r29, 0xFD	; 253
    1550:	19 82       	std	Y+1, r1	; 0x01
    1552:	18 82       	st	Y, r1
    1554:	c7 50       	subi	r28, 0x07	; 7
    1556:	d2 40       	sbci	r29, 0x02	; 2

    if(queue_ptr->head == NULL)
    1558:	80 91 21 16 	lds	r24, 0x1621
    155c:	90 91 22 16 	lds	r25, 0x1622
    1560:	89 2b       	or	r24, r25
    1562:	29 f4       	brne	.+10     	; 0x156e <kernel_create_task+0x198>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1564:	d0 93 22 16 	sts	0x1622, r29
    1568:	c0 93 21 16 	sts	0x1621, r28
    156c:	08 c0       	rjmp	.+16     	; 0x157e <kernel_create_task+0x1a8>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    156e:	e0 91 23 16 	lds	r30, 0x1623
    1572:	f0 91 24 16 	lds	r31, 0x1624
    1576:	e9 5f       	subi	r30, 0xF9	; 249
    1578:	fd 4f       	sbci	r31, 0xFD	; 253
    157a:	d1 83       	std	Z+1, r29	; 0x01
    157c:	c0 83       	st	Z, r28
        queue_ptr->tail = task_to_add;
    157e:	d0 93 24 16 	sts	0x1624, r29
    1582:	c0 93 23 16 	sts	0x1623, r28
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
    

    return 1;
}
    158a:	c9 01       	movw	r24, r18
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <kernel_event_signal>:
 *
 * Handles signals and broadcasts, with or without yielding.
 * May cause current task to be suspended.
 */
static void kernel_event_signal(uint8_t is_broadcast, uint8_t and_next)
{
    1592:	2f 92       	push	r2
    1594:	3f 92       	push	r3
    1596:	4f 92       	push	r4
    1598:	5f 92       	push	r5
    159a:	6f 92       	push	r6
    159c:	7f 92       	push	r7
    159e:	8f 92       	push	r8
    15a0:	9f 92       	push	r9
    15a2:	af 92       	push	r10
    15a4:	bf 92       	push	r11
    15a6:	cf 92       	push	r12
    15a8:	df 92       	push	r13
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <kernel_event_signal+0x26>
    15b8:	0f 92       	push	r0
    15ba:	0f 92       	push	r0
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	89 83       	std	Y+1, r24	; 0x01
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    15c2:	80 91 1b 16 	lds	r24, 0x161B
    15c6:	98 2f       	mov	r25, r24
    15c8:	91 50       	subi	r25, 0x01	; 1

    if(handle >= num_events_created)
    15ca:	80 91 be 03 	lds	r24, 0x03BE
    15ce:	98 17       	cp	r25, r24
    15d0:	30 f0       	brcs	.+12     	; 0x15de <kernel_event_signal+0x4c>
    {
        /* Error code. */
        error_msg = ERR_RUN_4_SIGNAL_ON_BAD_EVENT;
    15d2:	89 e0       	ldi	r24, 0x09	; 9
    15d4:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    15d8:	0e 94 a1 09 	call	0x1342	; 0x1342 <OS_Abort>
    15dc:	ff c0       	rjmp	.+510    	; 0x17dc <kernel_event_signal+0x24a>
    15de:	61 11       	cpse	r22, r1
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	b6 2e       	mov	r11, r22
        }

        while(event_queue[handle].head != NULL)
        {
            /* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
    15e4:	69 2f       	mov	r22, r25
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	66 0f       	add	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	67 5d       	subi	r22, 0xD7	; 215
    15f2:	79 4e       	sbci	r23, 0xE9	; 233
            default:
                break;
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
    15f4:	20 91 b8 03 	lds	r18, 0x03B8
    15f8:	30 91 b9 03 	lds	r19, 0x03B9
    15fc:	3b 83       	std	Y+3, r19	; 0x03
    15fe:	2a 83       	std	Y+2, r18	; 0x02
    1600:	80 90 96 02 	lds	r8, 0x0296
    1604:	90 90 97 02 	lds	r9, 0x0297
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    1608:	20 90 1e 02 	lds	r2, 0x021E
    160c:	30 90 1f 02 	lds	r3, 0x021F
    1610:	a0 90 bb 03 	lds	r10, 0x03BB
    1614:	c0 90 bc 03 	lds	r12, 0x03BC
    1618:	d0 90 bd 03 	lds	r13, 0x03BD
    161c:	20 91 23 16 	lds	r18, 0x1623
    1620:	30 91 24 16 	lds	r19, 0x1624
    1624:	00 91 21 16 	lds	r16, 0x1621
    1628:	10 91 22 16 	lds	r17, 0x1622
    162c:	40 91 27 16 	lds	r20, 0x1627
    1630:	50 91 28 16 	lds	r21, 0x1628
    1634:	e0 90 25 16 	lds	r14, 0x1625
    1638:	f0 90 26 16 	lds	r15, 0x1626
        if(and_next)
        {
            make_ready = 1;
        }

        while(event_queue[handle].head != NULL)
    163c:	2b 01       	movw	r4, r22
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
    163e:	96 e0       	ldi	r25, 0x06	; 6
    1640:	69 2e       	mov	r6, r25
    1642:	92 e0       	ldi	r25, 0x02	; 2
    1644:	79 2e       	mov	r7, r25
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	68 0e       	add	r6, r24
    164c:	79 1e       	adc	r7, r25
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    164e:	e0 e2       	ldi	r30, 0x20	; 32
    1650:	f2 e0       	ldi	r31, 0x02	; 2
    1652:	ce 0e       	add	r12, r30
    1654:	df 1e       	adc	r13, r31
    1656:	73 c0       	rjmp	.+230    	; 0x173e <kernel_event_signal+0x1ac>
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr)
{
    task_descriptor_t* task_ptr = queue_ptr->head;
    1658:	fb 01       	movw	r30, r22
    165a:	a0 81       	ld	r26, Z
    165c:	b1 81       	ldd	r27, Z+1	; 0x01

    if(queue_ptr->head != NULL)
    165e:	10 97       	sbiw	r26, 0x00	; 0
    1660:	79 f0       	breq	.+30     	; 0x1680 <kernel_event_signal+0xee>
    {
        queue_ptr->head = queue_ptr->head->next;
    1662:	cd 01       	movw	r24, r26
    1664:	89 5f       	subi	r24, 0xF9	; 249
    1666:	9d 4f       	sbci	r25, 0xFD	; 253
    1668:	9d 83       	std	Y+5, r25	; 0x05
    166a:	8c 83       	std	Y+4, r24	; 0x04
    166c:	fc 01       	movw	r30, r24
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	fb 01       	movw	r30, r22
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
        task_ptr->next = NULL;
    1678:	ec 81       	ldd	r30, Y+4	; 0x04
    167a:	fd 81       	ldd	r31, Y+5	; 0x05
    167c:	11 82       	std	Z+1, r1	; 0x01
    167e:	10 82       	st	Z, r1

        while(event_queue[handle].head != NULL)
        {
            /* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
            task_ptr->state = READY;
    1680:	ad 5f       	subi	r26, 0xFD	; 253
    1682:	bd 4f       	sbci	r27, 0xFD	; 253
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	fc 93       	st	X, r31

            switch(task_ptr->level)
    1688:	13 96       	adiw	r26, 0x03	; 3
    168a:	8c 91       	ld	r24, X
    168c:	a6 50       	subi	r26, 0x06	; 6
    168e:	b2 40       	sbci	r27, 0x02	; 2
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	b1 f0       	breq	.+44     	; 0x16c0 <kernel_event_signal+0x12e>
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	39 f5       	brne	.+78     	; 0x16e6 <kernel_event_signal+0x154>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1698:	a9 5f       	subi	r26, 0xF9	; 249
    169a:	bd 4f       	sbci	r27, 0xFD	; 253
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	1c 92       	st	X, r1
    16a0:	1e 92       	st	-X, r1
    16a2:	a7 50       	subi	r26, 0x07	; 7
    16a4:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    16a6:	e1 14       	cp	r14, r1
    16a8:	f1 04       	cpc	r15, r1
    16aa:	19 f4       	brne	.+6      	; 0x16b2 <kernel_event_signal+0x120>
    16ac:	ad 01       	movw	r20, r26
    16ae:	7d 01       	movw	r14, r26
    16b0:	1a c0       	rjmp	.+52     	; 0x16e6 <kernel_event_signal+0x154>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    16b2:	49 5f       	subi	r20, 0xF9	; 249
    16b4:	5d 4f       	sbci	r21, 0xFD	; 253
    16b6:	fa 01       	movw	r30, r20
    16b8:	b1 83       	std	Z+1, r27	; 0x01
    16ba:	a0 83       	st	Z, r26
    16bc:	ad 01       	movw	r20, r26
    16be:	13 c0       	rjmp	.+38     	; 0x16e6 <kernel_event_signal+0x154>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    16c0:	a9 5f       	subi	r26, 0xF9	; 249
    16c2:	bd 4f       	sbci	r27, 0xFD	; 253
    16c4:	11 96       	adiw	r26, 0x01	; 1
    16c6:	1c 92       	st	X, r1
    16c8:	1e 92       	st	-X, r1
    16ca:	a7 50       	subi	r26, 0x07	; 7
    16cc:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    16ce:	01 15       	cp	r16, r1
    16d0:	11 05       	cpc	r17, r1
    16d2:	19 f4       	brne	.+6      	; 0x16da <kernel_event_signal+0x148>
    16d4:	9d 01       	movw	r18, r26
    16d6:	8d 01       	movw	r16, r26
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <kernel_event_signal+0x154>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    16da:	29 5f       	subi	r18, 0xF9	; 249
    16dc:	3d 4f       	sbci	r19, 0xFD	; 253
    16de:	f9 01       	movw	r30, r18
    16e0:	b1 83       	std	Z+1, r27	; 0x01
    16e2:	a0 83       	st	Z, r26
    16e4:	9d 01       	movw	r18, r26
            default:
                break;
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ea:	88 15       	cp	r24, r8
    16ec:	99 05       	cpc	r25, r9
    16ee:	21 f1       	breq	.+72     	; 0x1738 <kernel_event_signal+0x1a6>
    16f0:	bb 20       	and	r11, r11
    16f2:	11 f5       	brne	.+68     	; 0x1738 <kernel_event_signal+0x1a6>
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
    16f4:	f3 01       	movw	r30, r6
    16f6:	90 81       	ld	r25, Z
    16f8:	93 30       	cpi	r25, 0x03	; 3
    16fa:	f1 f0       	breq	.+60     	; 0x1738 <kernel_event_signal+0x1a6>
    16fc:	aa 5f       	subi	r26, 0xFA	; 250
    16fe:	bd 4f       	sbci	r27, 0xFD	; 253
    1700:	8c 91       	ld	r24, X
    1702:	a6 50       	subi	r26, 0x06	; 6
    1704:	b2 40       	sbci	r27, 0x02	; 2
    1706:	83 30       	cpi	r24, 0x03	; 3
    1708:	a9 f0       	breq	.+42     	; 0x1734 <kernel_event_signal+0x1a2>
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    170a:	91 30       	cpi	r25, 0x01	; 1
    170c:	a9 f4       	brne	.+42     	; 0x1738 <kernel_event_signal+0x1a6>
    170e:	21 14       	cp	r2, r1
    1710:	31 04       	cpc	r3, r1
    1712:	91 f0       	breq	.+36     	; 0x1738 <kernel_event_signal+0x1a6>
    1714:	aa 20       	and	r10, r10
    1716:	81 f4       	brne	.+32     	; 0x1738 <kernel_event_signal+0x1a6>
    1718:	ba 2c       	mov	r11, r10
    171a:	f6 01       	movw	r30, r12
    171c:	80 81       	ld	r24, Z
    171e:	e8 2f       	mov	r30, r24
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	e7 5b       	subi	r30, 0xB7	; 183
    1728:	f9 4e       	sbci	r31, 0xE9	; 233
    172a:	80 81       	ld	r24, Z
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	a8 17       	cp	r26, r24
    1730:	b9 07       	cpc	r27, r25
    1732:	11 f4       	brne	.+4      	; 0x1738 <kernel_event_signal+0x1a6>
    1734:	bb 24       	eor	r11, r11
    1736:	b3 94       	inc	r11
                {
                    make_ready = 1;
                }
            }

            if(!is_broadcast)
    1738:	f9 81       	ldd	r31, Y+1	; 0x01
    173a:	ff 23       	and	r31, r31
    173c:	31 f0       	breq	.+12     	; 0x174a <kernel_event_signal+0x1b8>
        if(and_next)
        {
            make_ready = 1;
        }

        while(event_queue[handle].head != NULL)
    173e:	f2 01       	movw	r30, r4
    1740:	80 81       	ld	r24, Z
    1742:	91 81       	ldd	r25, Z+1	; 0x01
    1744:	89 2b       	or	r24, r25
    1746:	09 f0       	breq	.+2      	; 0x174a <kernel_event_signal+0x1b8>
    1748:	87 cf       	rjmp	.-242    	; 0x1658 <kernel_event_signal+0xc6>
    174a:	30 93 24 16 	sts	0x1624, r19
    174e:	20 93 23 16 	sts	0x1623, r18
    1752:	10 93 22 16 	sts	0x1622, r17
    1756:	00 93 21 16 	sts	0x1621, r16
    175a:	50 93 28 16 	sts	0x1628, r21
    175e:	40 93 27 16 	sts	0x1627, r20
    1762:	f0 92 26 16 	sts	0x1626, r15
    1766:	e0 92 25 16 	sts	0x1625, r14
            {
                break;
            }
        }

        if(make_ready && cur_task != idle_task)
    176a:	bb 20       	and	r11, r11
    176c:	b9 f1       	breq	.+110    	; 0x17dc <kernel_event_signal+0x24a>
    176e:	2a 81       	ldd	r18, Y+2	; 0x02
    1770:	3b 81       	ldd	r19, Y+3	; 0x03
    1772:	28 15       	cp	r18, r8
    1774:	39 05       	cpc	r19, r9
    1776:	91 f1       	breq	.+100    	; 0x17dc <kernel_event_signal+0x24a>
        {
            cur_task->state = READY;
    1778:	2d 5f       	subi	r18, 0xFD	; 253
    177a:	3d 4f       	sbci	r19, 0xFD	; 253
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	f9 01       	movw	r30, r18
    1780:	80 83       	st	Z, r24
            if(cur_task->level == RR)
    1782:	33 96       	adiw	r30, 0x03	; 3
    1784:	80 81       	ld	r24, Z
    1786:	e6 50       	subi	r30, 0x06	; 6
    1788:	f2 40       	sbci	r31, 0x02	; 2
    178a:	fb 83       	std	Y+3, r31	; 0x03
    178c:	ea 83       	std	Y+2, r30	; 0x02
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	29 f5       	brne	.+74     	; 0x17dc <kernel_event_signal+0x24a>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1792:	e9 5f       	subi	r30, 0xF9	; 249
    1794:	fd 4f       	sbci	r31, 0xFD	; 253
    1796:	11 82       	std	Z+1, r1	; 0x01
    1798:	10 82       	st	Z, r1
    179a:	e7 50       	subi	r30, 0x07	; 7
    179c:	f2 40       	sbci	r31, 0x02	; 2
    179e:	fb 83       	std	Y+3, r31	; 0x03
    17a0:	ea 83       	std	Y+2, r30	; 0x02

    if(queue_ptr->head == NULL)
    17a2:	80 91 21 16 	lds	r24, 0x1621
    17a6:	90 91 22 16 	lds	r25, 0x1622
    17aa:	89 2b       	or	r24, r25
    17ac:	49 f4       	brne	.+18     	; 0x17c0 <kernel_event_signal+0x22e>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    17ae:	f0 93 22 16 	sts	0x1622, r31
    17b2:	e0 93 21 16 	sts	0x1621, r30
        queue_ptr->tail = task_to_add;
    17b6:	f0 93 24 16 	sts	0x1624, r31
    17ba:	e0 93 23 16 	sts	0x1623, r30
    17be:	0e c0       	rjmp	.+28     	; 0x17dc <kernel_event_signal+0x24a>
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    17c0:	e0 91 23 16 	lds	r30, 0x1623
    17c4:	f0 91 24 16 	lds	r31, 0x1624
    17c8:	e9 5f       	subi	r30, 0xF9	; 249
    17ca:	fd 4f       	sbci	r31, 0xFD	; 253
    17cc:	2a 81       	ldd	r18, Y+2	; 0x02
    17ce:	3b 81       	ldd	r19, Y+3	; 0x03
    17d0:	31 83       	std	Z+1, r19	; 0x01
    17d2:	20 83       	st	Z, r18
        queue_ptr->tail = task_to_add;
    17d4:	30 93 24 16 	sts	0x1624, r19
    17d8:	20 93 23 16 	sts	0x1623, r18
            {
                enqueue(&rr_queue, cur_task);
            }
        }
    }
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	bf 90       	pop	r11
    17f8:	af 90       	pop	r10
    17fa:	9f 90       	pop	r9
    17fc:	8f 90       	pop	r8
    17fe:	7f 90       	pop	r7
    1800:	6f 90       	pop	r6
    1802:	5f 90       	pop	r5
    1804:	4f 90       	pop	r4
    1806:	3f 90       	pop	r3
    1808:	2f 90       	pop	r2
    180a:	08 95       	ret

0000180c <OS_Init>:
 * @brief Setup the RTOS and create main() as the first SYSTEM level task.
 *
 * Point of entry from the C runtime crt0.S.
 */
void OS_Init()
{
    180c:	4f 92       	push	r4
    180e:	5f 92       	push	r5
    1810:	6f 92       	push	r6
    1812:	7f 92       	push	r7
    1814:	8f 92       	push	r8
    1816:	9f 92       	push	r9
    1818:	af 92       	push	r10
    181a:	bf 92       	push	r11
    181c:	cf 92       	push	r12
    181e:	df 92       	push	r13
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    int i;

    /* Set up the clocks */
    CLOCK8MHZ();
    182c:	80 e8       	ldi	r24, 0x80	; 128
    182e:	80 93 61 00 	sts	0x0061, r24
    1832:	10 92 61 00 	sts	0x0061, r1

    TCCR1B &= ~(_BV(CS12) | _BV(CS11));
    1836:	80 91 81 00 	lds	r24, 0x0081
    183a:	89 7f       	andi	r24, 0xF9	; 249
    183c:	80 93 81 00 	sts	0x0081, r24
    TCCR1B |= (_BV(CS10));
    1840:	80 91 81 00 	lds	r24, 0x0081
    1844:	81 60       	ori	r24, 0x01	; 1
    1846:	80 93 81 00 	sts	0x0081, r24
static void check_PPP_names(void)
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    184a:	c0 90 1e 02 	lds	r12, 0x021E
    184e:	d0 90 1f 02 	lds	r13, 0x021F
    1852:	56 01       	movw	r10, r12
    1854:	aa 0c       	add	r10, r10
    1856:	bb 1c       	adc	r11, r11
    1858:	00 e0       	ldi	r16, 0x00	; 0
        name = PPP[i];

        /* name == IDLE or 0 < name <= MAXNAME */
        if(name <= MAXNAME)
        {
            name_in_PPP[name] = 1;
    185a:	11 e0       	ldi	r17, 0x01	; 1
    185c:	0f c0       	rjmp	.+30     	; 0x187c <OS_Init+0x70>
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    {
        name = PPP[i];
    185e:	e0 5e       	subi	r30, 0xE0	; 224
    1860:	fd 4f       	sbci	r31, 0xFD	; 253
    1862:	e0 81       	ld	r30, Z

        /* name == IDLE or 0 < name <= MAXNAME */
        if(name <= MAXNAME)
    1864:	e9 30       	cpi	r30, 0x09	; 9
    1866:	28 f4       	brcc	.+10     	; 0x1872 <OS_Init+0x66>
        {
            name_in_PPP[name] = 1;
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	e5 5a       	subi	r30, 0xA5	; 165
    186c:	f9 4e       	sbci	r31, 0xE9	; 233
    186e:	10 83       	st	Z, r17
    1870:	04 c0       	rjmp	.+8      	; 0x187a <OS_Init+0x6e>
        }
        else
        {
            error_msg = ERR_1_PPP_NAME_OUT_OF_RANGE;
    1872:	10 92 95 02 	sts	0x0295, r1
            OS_Abort();
    1876:	0e 94 a1 09 	call	0x1342	; 0x1342 <OS_Abort>
static void check_PPP_names(void)
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    187a:	0e 5f       	subi	r16, 0xFE	; 254
    187c:	e0 2f       	mov	r30, r16
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	ea 15       	cp	r30, r10
    1882:	fb 05       	cpc	r31, r11
    1884:	60 f3       	brcs	.-40     	; 0x185e <OS_Init+0x52>
    1886:	e4 ec       	ldi	r30, 0xC4	; 196
    1888:	f5 e0       	ldi	r31, 0x05	; 5
    188a:	a9 e4       	ldi	r26, 0x49	; 73
    188c:	b6 e1       	ldi	r27, 0x16	; 22
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    {
        task_desc[i].state = DEAD;
    188e:	10 82       	st	Z, r1
        name_to_task_ptr[i] = NULL;
    1890:	1d 92       	st	X+, r1
    1892:	1d 92       	st	X+, r1
        task_desc[i].next = &task_desc[i + 1];
    1894:	cf 01       	movw	r24, r30
    1896:	06 96       	adiw	r24, 0x06	; 6
    1898:	95 83       	std	Z+5, r25	; 0x05
    189a:	84 83       	std	Z+4, r24	; 0x04
    189c:	e7 5f       	subi	r30, 0xF7	; 247
    189e:	fd 4f       	sbci	r31, 0xFD	; 253
    /* 
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    18a0:	84 e1       	ldi	r24, 0x14	; 20
    18a2:	e3 30       	cpi	r30, 0x03	; 3
    18a4:	f8 07       	cpc	r31, r24
    18a6:	99 f7       	brne	.-26     	; 0x188e <OS_Init+0x82>
    {
        task_desc[i].state = DEAD;
        name_to_task_ptr[i] = NULL;
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[MAXPROCESS - 1].next = NULL;
    18a8:	15 82       	std	Z+5, r1	; 0x05
    18aa:	14 82       	std	Z+4, r1	; 0x04
    dead_pool_queue.head = &task_desc[0];
    18ac:	01 ec       	ldi	r16, 0xC1	; 193
    18ae:	13 e0       	ldi	r17, 0x03	; 3
    18b0:	10 93 1e 16 	sts	0x161E, r17
    18b4:	00 93 1d 16 	sts	0x161D, r16
    dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	92 e1       	ldi	r25, 0x12	; 18
    18bc:	90 93 20 16 	sts	0x1620, r25
    18c0:	80 93 1f 16 	sts	0x161F, r24

	/* Create idle "task" */
    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
    18c4:	80 e8       	ldi	r24, 0x80	; 128
    18c6:	98 e0       	ldi	r25, 0x08	; 8
    18c8:	90 93 14 16 	sts	0x1614, r25
    18cc:	80 93 13 16 	sts	0x1613, r24
    kernel_request_create_args.level = NULL;
    18d0:	10 92 17 16 	sts	0x1617, r1
    kernel_create_task();
    18d4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <kernel_create_task>

    /* Create "main" task as SYSTEM level. */
    kernel_request_create_args.f = (voidfuncvoid_ptr)main;
    18d8:	88 e7       	ldi	r24, 0x78	; 120
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	90 93 14 16 	sts	0x1614, r25
    18e0:	80 93 13 16 	sts	0x1613, r24
    kernel_request_create_args.level = SYSTEM;
    18e4:	83 e0       	ldi	r24, 0x03	; 3
    18e6:	80 93 17 16 	sts	0x1617, r24
    kernel_create_task();
    18ea:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <kernel_create_task>

    /* First time through. Select "main" task to run first. */
    cur_task = task_desc;
    18ee:	10 93 b9 03 	sts	0x03B9, r17
    18f2:	00 93 b8 03 	sts	0x03B8, r16
    cur_task->state = RUNNING;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 93 c4 05 	sts	0x05C4, r24
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr)
{
    task_descriptor_t* task_ptr = queue_ptr->head;
    18fc:	e0 91 25 16 	lds	r30, 0x1625
    1900:	f0 91 26 16 	lds	r31, 0x1626

    if(queue_ptr->head != NULL)
    1904:	30 97       	sbiw	r30, 0x00	; 0
    1906:	51 f0       	breq	.+20     	; 0x191c <OS_Init+0x110>
    {
        queue_ptr->head = queue_ptr->head->next;
    1908:	e9 5f       	subi	r30, 0xF9	; 249
    190a:	fd 4f       	sbci	r31, 0xFD	; 253
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	90 93 26 16 	sts	0x1626, r25
    1914:	80 93 25 16 	sts	0x1625, r24
        task_ptr->next = NULL;
    1918:	11 82       	std	Z+1, r1	; 0x01
    191a:	10 82       	st	Z, r1
    cur_task = task_desc;
    cur_task->state = RUNNING;
    dequeue(&system_queue);

    /* Initilize time slot */
    if(PT > 0)
    191c:	c1 14       	cp	r12, r1
    191e:	d1 04       	cpc	r13, r1
    1920:	21 f0       	breq	.+8      	; 0x192a <OS_Init+0x11e>
    {
        ticks_remaining = PPP[1];
    1922:	80 91 21 02 	lds	r24, 0x0221
    1926:	80 93 ba 03 	sts	0x03BA, r24
    }

    /* Set up Timer 1 Output Compare interrupt,the TICK clock. */
    TIMSK1 |= _BV(OCIE1A);
    192a:	80 91 6f 00 	lds	r24, 0x006F
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	80 93 6f 00 	sts	0x006F, r24
    OCR1A = TCNT1 + 40000;
    1934:	80 91 84 00 	lds	r24, 0x0084
    1938:	90 91 85 00 	lds	r25, 0x0085
    193c:	80 5c       	subi	r24, 0xC0	; 192
    193e:	93 46       	sbci	r25, 0x63	; 99
    1940:	90 93 89 00 	sts	0x0089, r25
    1944:	80 93 88 00 	sts	0x0088, r24
    /* Clear flag. */
    TIFR1 = _BV(OCF1A);
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	86 bb       	out	0x16, r24	; 22
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    194c:	e0 90 96 02 	lds	r14, 0x0296
    1950:	f0 90 97 02 	lds	r15, 0x0297
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }   

        cur_task->state = RUNNING;
    1954:	11 e0       	ldi	r17, 0x01	; 1
        kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
        break;

    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
    1956:	0d e0       	ldi	r16, 0x0D	; 13
    1958:	80 2e       	mov	r8, r16
		OS_Abort();
	}
	else
    {
        /* Place this task in a queue. */
        cur_task->state = WAITING;
    195a:	b3 e0       	ldi	r27, 0x03	; 3
    195c:	7b 2e       	mov	r7, r27
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
        OS_Abort();
    }
    else if(cur_task->level == PERIODIC)
	{
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
    195e:	ac e0       	ldi	r26, 0x0C	; 12
    1960:	6a 2e       	mov	r6, r26
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);

    if(handle >= num_events_created)
    {
        /* Error code. */
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
    1962:	fa e0       	ldi	r31, 0x0A	; 10
    1964:	5f 2e       	mov	r5, r31

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
    1966:	e2 e0       	ldi	r30, 0x02	; 2
    1968:	9e 2e       	mov	r9, r30
        {                
			/* If Periodic task still running then error */
            if(cur_task != NULL && cur_task->level == PERIODIC && slot_task_finished == 0)
            {
                /* error handling */
                error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
    196a:	78 e0       	ldi	r23, 0x08	; 8
    196c:	47 2e       	mov	r4, r23
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    196e:	e0 91 b8 03 	lds	r30, 0x03B8
    1972:	f0 91 b9 03 	lds	r31, 0x03B9
    1976:	ed 5f       	subi	r30, 0xFD	; 253
    1978:	fd 4f       	sbci	r31, 0xFD	; 253
    197a:	80 81       	ld	r24, Z
    197c:	e3 50       	subi	r30, 0x03	; 3
    197e:	f2 40       	sbci	r31, 0x02	; 2
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	21 f4       	brne	.+8      	; 0x198c <OS_Init+0x180>
    1984:	ee 15       	cp	r30, r14
    1986:	ff 05       	cpc	r31, r15
    1988:	09 f0       	breq	.+2      	; 0x198c <OS_Init+0x180>
    198a:	50 c0       	rjmp	.+160    	; 0x1a2c <OS_Init+0x220>
    {
		if(system_queue.head != NULL)
    198c:	20 91 25 16 	lds	r18, 0x1625
    1990:	30 91 26 16 	lds	r19, 0x1626
    1994:	21 15       	cp	r18, r1
    1996:	31 05       	cpc	r19, r1
    1998:	51 f0       	breq	.+20     	; 0x19ae <OS_Init+0x1a2>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    199a:	f9 01       	movw	r30, r18
    199c:	e9 5f       	subi	r30, 0xF9	; 249
    199e:	fd 4f       	sbci	r31, 0xFD	; 253
    19a0:	80 81       	ld	r24, Z
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	90 93 26 16 	sts	0x1626, r25
    19a8:	80 93 25 16 	sts	0x1625, r24
    19ac:	2d c0       	rjmp	.+90     	; 0x1a08 <OS_Init+0x1fc>
    {
		if(system_queue.head != NULL)
        {
			cur_task = dequeue(&system_queue);
        }
        else if(!slot_task_finished && PT > 0 && name_to_task_ptr[PPP[slot_name_index]] != NULL)
    19ae:	80 91 bb 03 	lds	r24, 0x03BB
    19b2:	88 23       	and	r24, r24
    19b4:	c9 f4       	brne	.+50     	; 0x19e8 <OS_Init+0x1dc>
    19b6:	c1 14       	cp	r12, r1
    19b8:	d1 04       	cpc	r13, r1
    19ba:	b1 f0       	breq	.+44     	; 0x19e8 <OS_Init+0x1dc>
    19bc:	e0 91 bc 03 	lds	r30, 0x03BC
    19c0:	f0 91 bd 03 	lds	r31, 0x03BD
    19c4:	e0 5e       	subi	r30, 0xE0	; 224
    19c6:	fd 4f       	sbci	r31, 0xFD	; 253
    19c8:	e0 81       	ld	r30, Z
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	ee 0f       	add	r30, r30
    19ce:	ff 1f       	adc	r31, r31
    19d0:	e7 5b       	subi	r30, 0xB7	; 183
    19d2:	f9 4e       	sbci	r31, 0xE9	; 233
    19d4:	01 90       	ld	r0, Z+
    19d6:	f0 81       	ld	r31, Z
    19d8:	e0 2d       	mov	r30, r0
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	29 f0       	breq	.+10     	; 0x19e8 <OS_Init+0x1dc>
        {
			/* Keep running the current PERIODIC task. */
            cur_task = name_to_task_ptr[PPP[slot_name_index]];
    19de:	f0 93 b9 03 	sts	0x03B9, r31
    19e2:	e0 93 b8 03 	sts	0x03B8, r30
    19e6:	1b c0       	rjmp	.+54     	; 0x1a1e <OS_Init+0x212>
        }
        else if(rr_queue.head != NULL)
    19e8:	20 91 21 16 	lds	r18, 0x1621
    19ec:	30 91 22 16 	lds	r19, 0x1622
    19f0:	21 15       	cp	r18, r1
    19f2:	31 05       	cpc	r19, r1
    19f4:	81 f0       	breq	.+32     	; 0x1a16 <OS_Init+0x20a>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    19f6:	f9 01       	movw	r30, r18
    19f8:	e9 5f       	subi	r30, 0xF9	; 249
    19fa:	fd 4f       	sbci	r31, 0xFD	; 253
    19fc:	80 81       	ld	r24, Z
    19fe:	91 81       	ldd	r25, Z+1	; 0x01
    1a00:	90 93 22 16 	sts	0x1622, r25
    1a04:	80 93 21 16 	sts	0x1621, r24
        task_ptr->next = NULL;
    1a08:	11 82       	std	Z+1, r1	; 0x01
    1a0a:	10 82       	st	Z, r1
			/* Keep running the current PERIODIC task. */
            cur_task = name_to_task_ptr[PPP[slot_name_index]];
        }
        else if(rr_queue.head != NULL)
        {
			cur_task = dequeue(&rr_queue);
    1a0c:	30 93 b9 03 	sts	0x03B9, r19
    1a10:	20 93 b8 03 	sts	0x03B8, r18
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <OS_Init+0x212>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    1a16:	f0 92 b9 03 	sts	0x03B9, r15
    1a1a:	e0 92 b8 03 	sts	0x03B8, r14
        }   

        cur_task->state = RUNNING;
    1a1e:	e0 91 b8 03 	lds	r30, 0x03B8
    1a22:	f0 91 b9 03 	lds	r31, 0x03B9
    1a26:	ed 5f       	subi	r30, 0xFD	; 253
    1a28:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2a:	10 83       	st	Z, r17
{
    for(;;)
    {
        kernel_dispatch();

        exit_kernel();
    1a2c:	0e 94 81 08 	call	0x1102	; 0x1102 <exit_kernel>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waitng queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
    1a30:	00 91 12 16 	lds	r16, 0x1612
    1a34:	05 30       	cpi	r16, 0x05	; 5
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <OS_Init+0x22e>
    1a38:	01 c2       	rjmp	.+1026   	; 0x1e3c <OS_Init+0x630>
    1a3a:	06 30       	cpi	r16, 0x06	; 6
    1a3c:	98 f4       	brcc	.+38     	; 0x1a64 <OS_Init+0x258>
    1a3e:	02 30       	cpi	r16, 0x02	; 2
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <OS_Init+0x238>
    1a42:	92 c0       	rjmp	.+292    	; 0x1b68 <OS_Init+0x35c>
    1a44:	03 30       	cpi	r16, 0x03	; 3
    1a46:	38 f4       	brcc	.+14     	; 0x1a56 <OS_Init+0x24a>
    1a48:	00 23       	and	r16, r16
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <OS_Init+0x242>
    1a4c:	f7 c1       	rjmp	.+1006   	; 0x1e3c <OS_Init+0x630>
    1a4e:	01 30       	cpi	r16, 0x01	; 1
    1a50:	09 f0       	breq	.+2      	; 0x1a54 <OS_Init+0x248>
    1a52:	f0 c1       	rjmp	.+992    	; 0x1e34 <OS_Init+0x628>
    1a54:	1d c0       	rjmp	.+58     	; 0x1a90 <OS_Init+0x284>
    1a56:	03 30       	cpi	r16, 0x03	; 3
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <OS_Init+0x250>
    1a5a:	e7 c0       	rjmp	.+462    	; 0x1c2a <OS_Init+0x41e>
    1a5c:	04 30       	cpi	r16, 0x04	; 4
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <OS_Init+0x256>
    1a60:	e9 c1       	rjmp	.+978    	; 0x1e34 <OS_Init+0x628>
    1a62:	1f c1       	rjmp	.+574    	; 0x1ca2 <OS_Init+0x496>
    1a64:	08 30       	cpi	r16, 0x08	; 8
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <OS_Init+0x25e>
    1a68:	c3 c1       	rjmp	.+902    	; 0x1df0 <OS_Init+0x5e4>
    1a6a:	09 30       	cpi	r16, 0x09	; 9
    1a6c:	38 f4       	brcc	.+14     	; 0x1a7c <OS_Init+0x270>
    1a6e:	06 30       	cpi	r16, 0x06	; 6
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <OS_Init+0x268>
    1a72:	6c c1       	rjmp	.+728    	; 0x1d4c <OS_Init+0x540>
    1a74:	07 30       	cpi	r16, 0x07	; 7
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <OS_Init+0x26e>
    1a78:	dd c1       	rjmp	.+954    	; 0x1e34 <OS_Init+0x628>
    1a7a:	7c c1       	rjmp	.+760    	; 0x1d74 <OS_Init+0x568>
    1a7c:	0a 30       	cpi	r16, 0x0A	; 10
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <OS_Init+0x276>
    1a80:	bc c1       	rjmp	.+888    	; 0x1dfa <OS_Init+0x5ee>
    1a82:	0a 30       	cpi	r16, 0x0A	; 10
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <OS_Init+0x27c>
    1a86:	b6 c1       	rjmp	.+876    	; 0x1df4 <OS_Init+0x5e8>
    1a88:	0b 30       	cpi	r16, 0x0B	; 11
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <OS_Init+0x282>
    1a8c:	d3 c1       	rjmp	.+934    	; 0x1e34 <OS_Init+0x628>
    1a8e:	c2 c1       	rjmp	.+900    	; 0x1e14 <OS_Init+0x608>
 */
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */

    if(PT > 0)
    1a90:	c1 14       	cp	r12, r1
    1a92:	d1 04       	cpc	r13, r1
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <OS_Init+0x28c>
    1a96:	46 c0       	rjmp	.+140    	; 0x1b24 <OS_Init+0x318>
    {
        --ticks_remaining;
    1a98:	80 91 ba 03 	lds	r24, 0x03BA
    1a9c:	81 50       	subi	r24, 0x01	; 1
    1a9e:	80 93 ba 03 	sts	0x03BA, r24

        if(ticks_remaining <= 0)
    1aa2:	80 91 ba 03 	lds	r24, 0x03BA
    1aa6:	18 16       	cp	r1, r24
    1aa8:	ec f1       	brlt	.+122    	; 0x1b24 <OS_Init+0x318>
        {                
			/* If Periodic task still running then error */
            if(cur_task != NULL && cur_task->level == PERIODIC && slot_task_finished == 0)
    1aaa:	e0 91 b8 03 	lds	r30, 0x03B8
    1aae:	f0 91 b9 03 	lds	r31, 0x03B9
    1ab2:	30 97       	sbiw	r30, 0x00	; 0
    1ab4:	69 f0       	breq	.+26     	; 0x1ad0 <OS_Init+0x2c4>
    1ab6:	ea 5f       	subi	r30, 0xFA	; 250
    1ab8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aba:	80 81       	ld	r24, Z
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	41 f4       	brne	.+16     	; 0x1ad0 <OS_Init+0x2c4>
    1ac0:	80 91 bb 03 	lds	r24, 0x03BB
    1ac4:	88 23       	and	r24, r24
    1ac6:	21 f4       	brne	.+8      	; 0x1ad0 <OS_Init+0x2c4>
            {
                /* error handling */
                error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
    1ac8:	40 92 95 02 	sts	0x0295, r4
                OS_Abort();
    1acc:	0e 94 a1 09 	call	0x1342	; 0x1342 <OS_Abort>
            }

            slot_name_index += 2;
    1ad0:	80 91 bc 03 	lds	r24, 0x03BC
    1ad4:	90 91 bd 03 	lds	r25, 0x03BD
    1ad8:	02 96       	adiw	r24, 0x02	; 2
    1ada:	90 93 bd 03 	sts	0x03BD, r25
    1ade:	80 93 bc 03 	sts	0x03BC, r24
            if(slot_name_index >= 2 * PT)
    1ae2:	8a 15       	cp	r24, r10
    1ae4:	9b 05       	cpc	r25, r11
    1ae6:	20 f0       	brcs	.+8      	; 0x1af0 <OS_Init+0x2e4>
            {
                slot_name_index = 0;
    1ae8:	10 92 bd 03 	sts	0x03BD, r1
    1aec:	10 92 bc 03 	sts	0x03BC, r1
            }

            ticks_remaining = PPP[slot_name_index + 1];
    1af0:	e0 91 bc 03 	lds	r30, 0x03BC
    1af4:	f0 91 bd 03 	lds	r31, 0x03BD
    1af8:	e0 5e       	subi	r30, 0xE0	; 224
    1afa:	fd 4f       	sbci	r31, 0xFD	; 253
    1afc:	81 81       	ldd	r24, Z+1	; 0x01
    1afe:	80 93 ba 03 	sts	0x03BA, r24

            if(PPP[slot_name_index] == IDLE || name_to_task_ptr[PPP[slot_name_index]] == NULL)
    1b02:	e0 81       	ld	r30, Z
    1b04:	ee 23       	and	r30, r30
    1b06:	49 f0       	breq	.+18     	; 0x1b1a <OS_Init+0x30e>
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	e7 5b       	subi	r30, 0xB7	; 183
    1b10:	f9 4e       	sbci	r31, 0xE9	; 233
    1b12:	80 81       	ld	r24, Z
    1b14:	91 81       	ldd	r25, Z+1	; 0x01
    1b16:	89 2b       	or	r24, r25
    1b18:	19 f4       	brne	.+6      	; 0x1b20 <OS_Init+0x314>
            {
				slot_task_finished = 1;
    1b1a:	10 93 bb 03 	sts	0x03BB, r17
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <OS_Init+0x318>
            }
            else
            {
                slot_task_finished = 0;
    1b20:	10 92 bb 03 	sts	0x03BB, r1

    case TIMER_EXPIRED:
		kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
    1b24:	a0 91 b8 03 	lds	r26, 0x03B8
    1b28:	b0 91 b9 03 	lds	r27, 0x03B9
    1b2c:	aa 5f       	subi	r26, 0xFA	; 250
    1b2e:	bd 4f       	sbci	r27, 0xFD	; 253
    1b30:	8c 91       	ld	r24, X
    1b32:	a6 50       	subi	r26, 0x06	; 6
    1b34:	b2 40       	sbci	r27, 0x02	; 2
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <OS_Init+0x330>
    1b3a:	80 c1       	rjmp	.+768    	; 0x1e3c <OS_Init+0x630>
    1b3c:	fd 01       	movw	r30, r26
    1b3e:	ed 5f       	subi	r30, 0xFD	; 253
    1b40:	fd 4f       	sbci	r31, 0xFD	; 253
    1b42:	80 81       	ld	r24, Z
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <OS_Init+0x33e>
    1b48:	79 c1       	rjmp	.+754    	; 0x1e3c <OS_Init+0x630>
        {
            cur_task->state = READY;
    1b4a:	90 82       	st	Z, r9
    1b4c:	5b c0       	rjmp	.+182    	; 0x1c04 <OS_Init+0x3f8>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1b4e:	e0 91 23 16 	lds	r30, 0x1623
    1b52:	f0 91 24 16 	lds	r31, 0x1624
    1b56:	e9 5f       	subi	r30, 0xF9	; 249
    1b58:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5a:	b1 83       	std	Z+1, r27	; 0x01
    1b5c:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1b5e:	b0 93 24 16 	sts	0x1624, r27
    1b62:	a0 93 23 16 	sts	0x1623, r26
    1b66:	6a c1       	rjmp	.+724    	; 0x1e3c <OS_Init+0x630>
            enqueue(&rr_queue, cur_task);
        }
        break;

    case TASK_CREATE:
		kernel_request_retval = kernel_create_task();
    1b68:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <kernel_create_task>
    1b6c:	90 93 1a 16 	sts	0x161A, r25
    1b70:	80 93 19 16 	sts	0x1619, r24

        /* Check if new task has higer priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
    1b74:	80 91 19 16 	lds	r24, 0x1619
    1b78:	90 91 1a 16 	lds	r25, 0x161A
    1b7c:	89 2b       	or	r24, r25
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <OS_Init+0x376>
    1b80:	5d c1       	rjmp	.+698    	; 0x1e3c <OS_Init+0x630>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
    1b82:	80 91 17 16 	lds	r24, 0x1617
    1b86:	83 30       	cpi	r24, 0x03	; 3
    1b88:	71 f4       	brne	.+28     	; 0x1ba6 <OS_Init+0x39a>
    1b8a:	e0 91 b8 03 	lds	r30, 0x03B8
    1b8e:	f0 91 b9 03 	lds	r31, 0x03B9
    1b92:	ea 5f       	subi	r30, 0xFA	; 250
    1b94:	fd 4f       	sbci	r31, 0xFD	; 253
    1b96:	80 81       	ld	r24, Z
    1b98:	e6 50       	subi	r30, 0x06	; 6
    1b9a:	f2 40       	sbci	r31, 0x02	; 2
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	19 f0       	breq	.+6      	; 0x1ba6 <OS_Init+0x39a>
            {
                cur_task->state = READY;
    1ba0:	ed 5f       	subi	r30, 0xFD	; 253
    1ba2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ba4:	00 83       	st	Z, r16
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
    1ba6:	a0 91 b8 03 	lds	r26, 0x03B8
    1baa:	b0 91 b9 03 	lds	r27, 0x03B9
    1bae:	aa 5f       	subi	r26, 0xFA	; 250
    1bb0:	bd 4f       	sbci	r27, 0xFD	; 253
    1bb2:	8c 91       	ld	r24, X
    1bb4:	a6 50       	subi	r26, 0x06	; 6
    1bb6:	b2 40       	sbci	r27, 0x02	; 2
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	a1 f4       	brne	.+40     	; 0x1be4 <OS_Init+0x3d8>
    1bbc:	20 91 17 16 	lds	r18, 0x1617
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	81 f4       	brne	.+32     	; 0x1be4 <OS_Init+0x3d8>
    1bc4:	80 91 18 16 	lds	r24, 0x1618
    1bc8:	e0 91 bc 03 	lds	r30, 0x03BC
    1bcc:	f0 91 bd 03 	lds	r31, 0x03BD
    1bd0:	e0 5e       	subi	r30, 0xE0	; 224
    1bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd4:	90 81       	ld	r25, Z
    1bd6:	98 17       	cp	r25, r24
    1bd8:	29 f4       	brne	.+10     	; 0x1be4 <OS_Init+0x3d8>
               kernel_request_create_args.level == PERIODIC &&
               PPP[slot_name_index] == kernel_request_create_args.name)
            {
                cur_task->state = READY;
    1bda:	ad 5f       	subi	r26, 0xFD	; 253
    1bdc:	bd 4f       	sbci	r27, 0xFD	; 253
    1bde:	2c 93       	st	X, r18
    1be0:	a3 50       	subi	r26, 0x03	; 3
    1be2:	b2 40       	sbci	r27, 0x02	; 2
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
    1be4:	aa 5f       	subi	r26, 0xFA	; 250
    1be6:	bd 4f       	sbci	r27, 0xFD	; 253
    1be8:	8c 91       	ld	r24, X
    1bea:	a6 50       	subi	r26, 0x06	; 6
    1bec:	b2 40       	sbci	r27, 0x02	; 2
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <OS_Init+0x3e8>
    1bf2:	24 c1       	rjmp	.+584    	; 0x1e3c <OS_Init+0x630>
    1bf4:	ad 5f       	subi	r26, 0xFD	; 253
    1bf6:	bd 4f       	sbci	r27, 0xFD	; 253
    1bf8:	8c 91       	ld	r24, X
    1bfa:	a3 50       	subi	r26, 0x03	; 3
    1bfc:	b2 40       	sbci	r27, 0x02	; 2
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <OS_Init+0x3f8>
    1c02:	1c c1       	rjmp	.+568    	; 0x1e3c <OS_Init+0x630>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1c04:	a9 5f       	subi	r26, 0xF9	; 249
    1c06:	bd 4f       	sbci	r27, 0xFD	; 253
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	1c 92       	st	X, r1
    1c0c:	1e 92       	st	-X, r1
    1c0e:	a7 50       	subi	r26, 0x07	; 7
    1c10:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1c12:	80 91 21 16 	lds	r24, 0x1621
    1c16:	90 91 22 16 	lds	r25, 0x1622
    1c1a:	89 2b       	or	r24, r25
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <OS_Init+0x414>
    1c1e:	97 cf       	rjmp	.-210    	; 0x1b4e <OS_Init+0x342>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1c20:	b0 93 22 16 	sts	0x1622, r27
    1c24:	a0 93 21 16 	sts	0x1621, r26
    1c28:	9a cf       	rjmp	.-204    	; 0x1b5e <OS_Init+0x352>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
    1c2a:	a0 91 b8 03 	lds	r26, 0x03B8
    1c2e:	b0 91 b9 03 	lds	r27, 0x03B9
    1c32:	ae 15       	cp	r26, r14
    1c34:	bf 05       	cpc	r27, r15
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <OS_Init+0x42e>
    1c38:	01 c1       	rjmp	.+514    	; 0x1e3c <OS_Init+0x630>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
    1c3a:	ad 5f       	subi	r26, 0xFD	; 253
    1c3c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c3e:	1c 92       	st	X, r1
    if(cur_task->level == PERIODIC)
    1c40:	13 96       	adiw	r26, 0x03	; 3
    1c42:	8c 91       	ld	r24, X
    1c44:	a6 50       	subi	r26, 0x06	; 6
    1c46:	b2 40       	sbci	r27, 0x02	; 2
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	61 f4       	brne	.+24     	; 0x1c64 <OS_Init+0x458>
    {
        name_to_task_ptr[cur_task->name] = NULL;
    1c4c:	ae 5f       	subi	r26, 0xFE	; 254
    1c4e:	bd 4f       	sbci	r27, 0xFD	; 253
    1c50:	ec 91       	ld	r30, X
    1c52:	a2 50       	subi	r26, 0x02	; 2
    1c54:	b2 40       	sbci	r27, 0x02	; 2
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	e7 5b       	subi	r30, 0xB7	; 183
    1c5e:	f9 4e       	sbci	r31, 0xE9	; 233
    1c60:	11 82       	std	Z+1, r1	; 0x01
    1c62:	10 82       	st	Z, r1
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1c64:	a9 5f       	subi	r26, 0xF9	; 249
    1c66:	bd 4f       	sbci	r27, 0xFD	; 253
    1c68:	11 96       	adiw	r26, 0x01	; 1
    1c6a:	1c 92       	st	X, r1
    1c6c:	1e 92       	st	-X, r1
    1c6e:	a7 50       	subi	r26, 0x07	; 7
    1c70:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1c72:	80 91 1d 16 	lds	r24, 0x161D
    1c76:	90 91 1e 16 	lds	r25, 0x161E
    1c7a:	89 2b       	or	r24, r25
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <OS_Init+0x47c>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1c7e:	b0 93 1e 16 	sts	0x161E, r27
    1c82:	a0 93 1d 16 	sts	0x161D, r26
    1c86:	08 c0       	rjmp	.+16     	; 0x1c98 <OS_Init+0x48c>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1c88:	e0 91 1f 16 	lds	r30, 0x161F
    1c8c:	f0 91 20 16 	lds	r31, 0x1620
    1c90:	e9 5f       	subi	r30, 0xF9	; 249
    1c92:	fd 4f       	sbci	r31, 0xFD	; 253
    1c94:	b1 83       	std	Z+1, r27	; 0x01
    1c96:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1c98:	b0 93 20 16 	sts	0x1620, r27
    1c9c:	a0 93 1f 16 	sts	0x161F, r26
    1ca0:	cd c0       	rjmp	.+410    	; 0x1e3c <OS_Init+0x630>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
    1ca2:	a0 91 b8 03 	lds	r26, 0x03B8
    1ca6:	b0 91 b9 03 	lds	r27, 0x03B9
    1caa:	aa 5f       	subi	r26, 0xFA	; 250
    1cac:	bd 4f       	sbci	r27, 0xFD	; 253
    1cae:	8c 91       	ld	r24, X
    1cb0:	a6 50       	subi	r26, 0x06	; 6
    1cb2:	b2 40       	sbci	r27, 0x02	; 2
    1cb4:	82 30       	cpi	r24, 0x02	; 2
    1cb6:	29 f1       	breq	.+74     	; 0x1d02 <OS_Init+0x4f6>
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	21 f0       	breq	.+8      	; 0x1cc4 <OS_Init+0x4b8>
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <OS_Init+0x4b6>
    1cc0:	41 c0       	rjmp	.+130    	; 0x1d44 <OS_Init+0x538>
    1cc2:	22 c0       	rjmp	.+68     	; 0x1d08 <OS_Init+0x4fc>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1cc4:	a9 5f       	subi	r26, 0xF9	; 249
    1cc6:	bd 4f       	sbci	r27, 0xFD	; 253
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	1c 92       	st	X, r1
    1ccc:	1e 92       	st	-X, r1
    1cce:	a7 50       	subi	r26, 0x07	; 7
    1cd0:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1cd2:	80 91 25 16 	lds	r24, 0x1625
    1cd6:	90 91 26 16 	lds	r25, 0x1626
    1cda:	89 2b       	or	r24, r25
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <OS_Init+0x4dc>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1cde:	b0 93 26 16 	sts	0x1626, r27
    1ce2:	a0 93 25 16 	sts	0x1625, r26
    1ce6:	08 c0       	rjmp	.+16     	; 0x1cf8 <OS_Init+0x4ec>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1ce8:	e0 91 27 16 	lds	r30, 0x1627
    1cec:	f0 91 28 16 	lds	r31, 0x1628
    1cf0:	e9 5f       	subi	r30, 0xF9	; 249
    1cf2:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf4:	b1 83       	std	Z+1, r27	; 0x01
    1cf6:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1cf8:	b0 93 28 16 	sts	0x1628, r27
    1cfc:	a0 93 27 16 	sts	0x1627, r26
    1d00:	21 c0       	rjmp	.+66     	; 0x1d44 <OS_Init+0x538>
	    case SYSTEM:
	        enqueue(&system_queue, cur_task);
			break;

	    case PERIODIC:
			slot_task_finished = 1;
    1d02:	10 93 bb 03 	sts	0x03BB, r17
    1d06:	1e c0       	rjmp	.+60     	; 0x1d44 <OS_Init+0x538>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1d08:	a9 5f       	subi	r26, 0xF9	; 249
    1d0a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	1c 92       	st	X, r1
    1d10:	1e 92       	st	-X, r1
    1d12:	a7 50       	subi	r26, 0x07	; 7
    1d14:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1d16:	80 91 21 16 	lds	r24, 0x1621
    1d1a:	90 91 22 16 	lds	r25, 0x1622
    1d1e:	89 2b       	or	r24, r25
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <OS_Init+0x520>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1d22:	b0 93 22 16 	sts	0x1622, r27
    1d26:	a0 93 21 16 	sts	0x1621, r26
    1d2a:	08 c0       	rjmp	.+16     	; 0x1d3c <OS_Init+0x530>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1d2c:	e0 91 23 16 	lds	r30, 0x1623
    1d30:	f0 91 24 16 	lds	r31, 0x1624
    1d34:	e9 5f       	subi	r30, 0xF9	; 249
    1d36:	fd 4f       	sbci	r31, 0xFD	; 253
    1d38:	b1 83       	std	Z+1, r27	; 0x01
    1d3a:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1d3c:	b0 93 24 16 	sts	0x1624, r27
    1d40:	a0 93 23 16 	sts	0x1623, r26

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
    1d44:	ad 5f       	subi	r26, 0xFD	; 253
    1d46:	bd 4f       	sbci	r27, 0xFD	; 253
    1d48:	9c 92       	st	X, r9
    1d4a:	78 c0       	rjmp	.+240    	; 0x1e3c <OS_Init+0x630>
        /* Should not happen. Handled in task itself. */
        break;

    case EVENT_INIT:
        kernel_request_event_ptr = NULL;
        if(num_events_created < MAXEVENT)
    1d4c:	20 91 be 03 	lds	r18, 0x03BE
    1d50:	28 30       	cpi	r18, 0x08	; 8
    1d52:	58 f4       	brcc	.+22     	; 0x1d6a <OS_Init+0x55e>
        {
            /* Pass a number back to the task, but pretend it is a pointer.
             * It is the index of the event_queue plus 1.
             * (0 is return value for failure.)
             */
            kernel_request_event_ptr = (EVENT *)(uint16_t)(num_events_created + 1);
    1d54:	82 2f       	mov	r24, r18
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	01 96       	adiw	r24, 0x01	; 1
    1d5a:	90 93 1c 16 	sts	0x161C, r25
    1d5e:	80 93 1b 16 	sts	0x161B, r24
            /*
            event_queue[num_events_created].head = NULL;
            event_queue[num_events_created].tail = NULL;
            */
            ++num_events_created;
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	20 93 be 03 	sts	0x03BE, r18
    1d68:	69 c0       	rjmp	.+210    	; 0x1e3c <OS_Init+0x630>
        }
        else
        {
            kernel_request_event_ptr = (EVENT *)(uint16_t)0;
    1d6a:	10 92 1c 16 	sts	0x161C, r1
    1d6e:	10 92 1b 16 	sts	0x161B, r1
    1d72:	64 c0       	rjmp	.+200    	; 0x1e3c <OS_Init+0x630>
        }
        break;

    case EVENT_WAIT:
        /* idle_task does not wait. */
		if(cur_task != idle_task)
    1d74:	a0 91 b8 03 	lds	r26, 0x03B8
    1d78:	b0 91 b9 03 	lds	r27, 0x03B9
    1d7c:	ae 15       	cp	r26, r14
    1d7e:	bf 05       	cpc	r27, r15
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <OS_Init+0x578>
    1d82:	5c c0       	rjmp	.+184    	; 0x1e3c <OS_Init+0x630>
 * @brief Kernel function to place current task in a waiting queue.
 */
static void kernel_event_wait(void)
{
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    1d84:	80 91 1b 16 	lds	r24, 0x161B
    1d88:	98 2f       	mov	r25, r24
    1d8a:	91 50       	subi	r25, 0x01	; 1

    if(handle >= num_events_created)
    1d8c:	80 91 be 03 	lds	r24, 0x03BE
    1d90:	98 17       	cp	r25, r24
    1d92:	18 f0       	brcs	.+6      	; 0x1d9a <OS_Init+0x58e>
    {
        /* Error code. */
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
    1d94:	50 92 95 02 	sts	0x0295, r5
    1d98:	4f c0       	rjmp	.+158    	; 0x1e38 <OS_Init+0x62c>
        OS_Abort();
    }
    else if(cur_task->level == PERIODIC)
    1d9a:	aa 5f       	subi	r26, 0xFA	; 250
    1d9c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d9e:	8c 91       	ld	r24, X
    1da0:	a6 50       	subi	r26, 0x06	; 6
    1da2:	b2 40       	sbci	r27, 0x02	; 2
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	19 f4       	brne	.+6      	; 0x1dae <OS_Init+0x5a2>
	{
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
    1da8:	60 92 95 02 	sts	0x0295, r6
    1dac:	45 c0       	rjmp	.+138    	; 0x1e38 <OS_Init+0x62c>
		OS_Abort();
	}
	else
    {
        /* Place this task in a queue. */
        cur_task->state = WAITING;
    1dae:	ad 5f       	subi	r26, 0xFD	; 253
    1db0:	bd 4f       	sbci	r27, 0xFD	; 253
    1db2:	7c 92       	st	X, r7
        enqueue(&event_queue[handle], cur_task);
    1db4:	c9 2f       	mov	r28, r25
    1db6:	d0 e0       	ldi	r29, 0x00	; 0
    1db8:	cc 0f       	add	r28, r28
    1dba:	dd 1f       	adc	r29, r29
    1dbc:	cc 0f       	add	r28, r28
    1dbe:	dd 1f       	adc	r29, r29
    1dc0:	c7 5d       	subi	r28, 0xD7	; 215
    1dc2:	d9 4e       	sbci	r29, 0xE9	; 233
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1dc4:	14 96       	adiw	r26, 0x04	; 4
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	1c 92       	st	X, r1
    1dca:	1e 92       	st	-X, r1
    1dcc:	a7 50       	subi	r26, 0x07	; 7
    1dce:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1dd0:	88 81       	ld	r24, Y
    1dd2:	99 81       	ldd	r25, Y+1	; 0x01
    1dd4:	89 2b       	or	r24, r25
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <OS_Init+0x5d2>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1dd8:	b9 83       	std	Y+1, r27	; 0x01
    1dda:	a8 83       	st	Y, r26
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <OS_Init+0x5de>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1dde:	ea 81       	ldd	r30, Y+2	; 0x02
    1de0:	fb 81       	ldd	r31, Y+3	; 0x03
    1de2:	e9 5f       	subi	r30, 0xF9	; 249
    1de4:	fd 4f       	sbci	r31, 0xFD	; 253
    1de6:	b1 83       	std	Z+1, r27	; 0x01
    1de8:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1dea:	bb 83       	std	Y+3, r27	; 0x03
    1dec:	aa 83       	std	Y+2, r26	; 0x02
    1dee:	26 c0       	rjmp	.+76     	; 0x1e3c <OS_Init+0x630>
        }

        break;

    case EVENT_SIGNAL:
        kernel_event_signal(0 /* not broadcast */, 0 /* not task_next */);
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <OS_Init+0x5ea>
        break;

    case EVENT_BROADCAST:
        kernel_event_signal(1 /* is broadcast */, 0 /* not task_next */);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	1a c0       	rjmp	.+52     	; 0x1e2e <OS_Init+0x622>
        break;

    case EVENT_SIGNAL_AND_NEXT:
        if(cur_task->level == PERIODIC)
    1dfa:	e0 91 b8 03 	lds	r30, 0x03B8
    1dfe:	f0 91 b9 03 	lds	r31, 0x03B9
    1e02:	ea 5f       	subi	r30, 0xFA	; 250
    1e04:	fd 4f       	sbci	r31, 0xFD	; 253
    1e06:	80 81       	ld	r24, Z
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	11 f4       	brne	.+4      	; 0x1e10 <OS_Init+0x604>
        {
            slot_task_finished = 1;
    1e0c:	10 93 bb 03 	sts	0x03BB, r17
        }

        kernel_event_signal(0 /* not broadcast */, 1 /* is task_next */);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	0c c0       	rjmp	.+24     	; 0x1e2c <OS_Init+0x620>

        break;

    case EVENT_BROADCAST_AND_NEXT:
        if(cur_task->level == PERIODIC)
    1e14:	e0 91 b8 03 	lds	r30, 0x03B8
    1e18:	f0 91 b9 03 	lds	r31, 0x03B9
    1e1c:	ea 5f       	subi	r30, 0xFA	; 250
    1e1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e20:	80 81       	ld	r24, Z
    1e22:	82 30       	cpi	r24, 0x02	; 2
    1e24:	11 f4       	brne	.+4      	; 0x1e2a <OS_Init+0x61e>
        {
            slot_task_finished = 1;
    1e26:	10 93 bb 03 	sts	0x03BB, r17
        }

        kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	61 e0       	ldi	r22, 0x01	; 1
    1e2e:	0e 94 c9 0a 	call	0x1592	; 0x1592 <kernel_event_signal>
    1e32:	04 c0       	rjmp	.+8      	; 0x1e3c <OS_Init+0x630>
        break;

    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
    1e34:	80 92 95 02 	sts	0x0295, r8
        OS_Abort();
    1e38:	0e 94 a1 09 	call	0x1342	; 0x1342 <OS_Abort>
        break;
    }

    kernel_request = NONE;
    1e3c:	10 92 12 16 	sts	0x1612, r1
    1e40:	96 cd       	rjmp	.-1236   	; 0x196e <OS_Init+0x162>

00001e42 <Task_Create>:
 *  If the process is PERIODIC, then its @a name is a user-specified name
 *  to be used in the PPP[] array. Otherwise, @a name is ignored.
 * @sa @ref policy
 */
int Task_Create(void (*f)(void), int arg, unsigned int level, unsigned int name)
{
    1e42:	1f 93       	push	r17
    int retval;
    uint8_t sreg;

    sreg = SREG;
    1e44:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1e46:	f8 94       	cli

    kernel_request_create_args.f = (voidfuncvoid_ptr)f;
    1e48:	90 93 14 16 	sts	0x1614, r25
    1e4c:	80 93 13 16 	sts	0x1613, r24
    kernel_request_create_args.arg = arg;
    1e50:	70 93 16 16 	sts	0x1616, r23
    1e54:	60 93 15 16 	sts	0x1615, r22
    kernel_request_create_args.level = (uint8_t)level;
    1e58:	40 93 17 16 	sts	0x1617, r20
    kernel_request_create_args.name = (uint8_t)name;
    1e5c:	20 93 18 16 	sts	0x1618, r18

    kernel_request = TASK_CREATE;
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	80 93 12 16 	sts	0x1612, r24
    enter_kernel();
    1e66:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    retval = kernel_request_retval;
    1e6a:	20 91 19 16 	lds	r18, 0x1619
    1e6e:	30 91 1a 16 	lds	r19, 0x161A
    SREG = sreg;
    1e72:	1f bf       	out	0x3f, r17	; 63

    return retval;
}
    1e74:	c9 01       	movw	r24, r18
    1e76:	1f 91       	pop	r17
    1e78:	08 95       	ret

00001e7a <Task_Next>:

/**
  * @brief The calling task gives up its share of the processor voluntarily.
  */
void Task_Next()
{
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	0f 92       	push	r0
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile sreg;

	sreg = SREG;
    1e84:	8f b7       	in	r24, 0x3f	; 63
    1e86:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    1e88:	f8 94       	cli

    kernel_request = TASK_NEXT;
    1e8a:	84 e0       	ldi	r24, 0x04	; 4
    1e8c:	80 93 12 16 	sts	0x1612, r24
    enter_kernel();
    1e90:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

	SREG = sreg;
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	8f bf       	out	0x3f, r24	; 63
}
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <Task_Terminate>:

/**
  * @brief The calling task terminates itself.
  */
void Task_Terminate()
{
    1ea0:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1ea2:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1ea4:	f8 94       	cli

    kernel_request = TASK_TERMINATE;
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	80 93 12 16 	sts	0x1612, r24
    enter_kernel();
    1eac:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    SREG = sreg;
    1eb0:	1f bf       	out	0x3f, r17	; 63
}
    1eb2:	1f 91       	pop	r17
    1eb4:	08 95       	ret

00001eb6 <Task_GetArg>:
int Task_GetArg(void)
{
    int arg;
    uint8_t sreg;

    sreg = SREG;
    1eb6:	8f b7       	in	r24, 0x3f	; 63
    Disable_Interrupt();
    1eb8:	f8 94       	cli

    arg = cur_task->arg;

    SREG = sreg;
    1eba:	8f bf       	out	0x3f, r24	; 63
    1ebc:	e0 91 b8 03 	lds	r30, 0x03B8
    1ec0:	f0 91 b9 03 	lds	r31, 0x03B9
    1ec4:	ec 5f       	subi	r30, 0xFC	; 252
    1ec6:	fd 4f       	sbci	r31, 0xFD	; 253

    return arg;
}
    1ec8:	80 81       	ld	r24, Z
    1eca:	91 81       	ldd	r25, Z+1	; 0x01
    1ecc:	08 95       	ret

00001ece <Event_Init>:
 * @brief Initialize a new, non-NULL Event descriptor.
 *  
 * @return a non-NULL Event descriptor if successful; NULL otherwise.
 */
EVENT *Event_Init(void)
{
    1ece:	1f 93       	push	r17
    EVENT* event_ptr;
    uint8_t sreg;

    sreg = SREG;
    1ed0:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1ed2:	f8 94       	cli

    kernel_request = EVENT_INIT;
    1ed4:	86 e0       	ldi	r24, 0x06	; 6
    1ed6:	80 93 12 16 	sts	0x1612, r24
    enter_kernel();
    1eda:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    event_ptr = (EVENT *)kernel_request_event_ptr;

    SREG = sreg;
    1ede:	1f bf       	out	0x3f, r17	; 63

    return event_ptr;
}
    1ee0:	80 91 1b 16 	lds	r24, 0x161B
    1ee4:	90 91 1c 16 	lds	r25, 0x161C
    1ee8:	1f 91       	pop	r17
    1eea:	08 95       	ret

00001eec <Event_Wait>:
  * @brief Wait for the next occurrence of a signal on \a e. The calling process always blocks.
  * 
  * @param e  an Event descriptor
  */
void Event_Wait(EVENT *e)
{
    1eec:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1eee:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1ef0:	f8 94       	cli

    kernel_request = EVENT_WAIT;
    1ef2:	27 e0       	ldi	r18, 0x07	; 7
    1ef4:	20 93 12 16 	sts	0x1612, r18
    kernel_request_event_ptr = e;
    1ef8:	90 93 1c 16 	sts	0x161C, r25
    1efc:	80 93 1b 16 	sts	0x161B, r24
    enter_kernel();
    1f00:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    SREG = sreg;
    1f04:	1f bf       	out	0x3f, r17	; 63
}
    1f06:	1f 91       	pop	r17
    1f08:	08 95       	ret

00001f0a <Event_Signal>:
  *
  * @brief Resume a \b single waiting task on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Signal(EVENT *e)
{
    1f0a:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1f0c:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1f0e:	f8 94       	cli

    kernel_request = EVENT_SIGNAL;
    1f10:	28 e0       	ldi	r18, 0x08	; 8
    1f12:	20 93 12 16 	sts	0x1612, r18
    kernel_request_event_ptr = e;
    1f16:	90 93 1c 16 	sts	0x161C, r25
    1f1a:	80 93 1b 16 	sts	0x161B, r24
    enter_kernel();
    1f1e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    SREG = sreg;
    1f22:	1f bf       	out	0x3f, r17	; 63
}
    1f24:	1f 91       	pop	r17
    1f26:	08 95       	ret

00001f28 <Event_Broadcast>:
  *
  * @brief Resume \b ALL waiting tasks on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Broadcast(EVENT *e)
{
    1f28:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1f2a:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1f2c:	f8 94       	cli

    kernel_request = EVENT_BROADCAST;
    1f2e:	29 e0       	ldi	r18, 0x09	; 9
    1f30:	20 93 12 16 	sts	0x1612, r18
    kernel_request_event_ptr = e;
    1f34:	90 93 1c 16 	sts	0x161C, r25
    1f38:	80 93 1b 16 	sts	0x161B, r24
    enter_kernel();
    1f3c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    SREG = sreg;
    1f40:	1f bf       	out	0x3f, r17	; 63
}
    1f42:	1f 91       	pop	r17
    1f44:	08 95       	ret

00001f46 <Signal_And_Next>:
  * an indivisible unit. So conceptually, the calling task resumes another
  * waiting task and gives up its share of the processor simultaneously.
  * \sa Event_Signal(), Task_Next()
  */
void  Signal_And_Next(EVENT *e)
{
    1f46:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1f48:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1f4a:	f8 94       	cli

    kernel_request = EVENT_SIGNAL_AND_NEXT;
    1f4c:	2a e0       	ldi	r18, 0x0A	; 10
    1f4e:	20 93 12 16 	sts	0x1612, r18
    kernel_request_event_ptr = e;
    1f52:	90 93 1c 16 	sts	0x161C, r25
    1f56:	80 93 1b 16 	sts	0x161B, r24
    enter_kernel();
    1f5a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    SREG = sreg;
    1f5e:	1f bf       	out	0x3f, r17	; 63
}
    1f60:	1f 91       	pop	r17
    1f62:	08 95       	ret

00001f64 <Broadcast_And_Next>:
  *
  * This is equivalent to "Event_Broadcast( e ); Task_Next()" in concept.
  * \sa Event_Broadcast(), Task_Next()
  */
void  Broadcast_And_Next(EVENT *e)
{
    1f64:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1f66:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1f68:	f8 94       	cli

    kernel_request = EVENT_BROADCAST_AND_NEXT;
    1f6a:	2b e0       	ldi	r18, 0x0B	; 11
    1f6c:	20 93 12 16 	sts	0x1612, r18
    kernel_request_event_ptr = e;
    1f70:	90 93 1c 16 	sts	0x161C, r25
    1f74:	80 93 1b 16 	sts	0x161B, r24
    enter_kernel();
    1f78:	0e 94 db 08 	call	0x11b6	; 0x11b6 <enter_kernel>

    SREG = sreg;
    1f7c:	1f bf       	out	0x3f, r17	; 63
}
    1f7e:	1f 91       	pop	r17
    1f80:	08 95       	ret

00001f82 <__vector_not_set>:
 * The default action is to reset,
 * but it could be changed to do something else.
 */   
void __vector_not_set (void) __attribute__ ((naked)) __attribute__ ((section (".text")));
void __vector_not_set (void)
{
    1f82:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001f86 <uart_putchar>:
*/
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
    1f86:	98 2f       	mov	r25, r24
	cli();
    1f88:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    1f8a:	80 91 c0 00 	lds	r24, 0x00C0
    1f8e:	85 ff       	sbrs	r24, 5
    1f90:	fc cf       	rjmp	.-8      	; 0x1f8a <uart_putchar+0x4>
	UDR0 = c;  // Putting data into the buffer, forces transmission
    1f92:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    1f96:	78 94       	sei
}
    1f98:	08 95       	ret

00001f9a <uart_getchar>:

char uart_getchar (int index)
{
    1f9a:	fc 01       	movw	r30, r24
	if (index < UART_BUFFER_SIZE) {
    1f9c:	84 36       	cpi	r24, 0x64	; 100
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	14 f0       	brlt	.+4      	; 0x1fa6 <uart_getchar+0xc>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	08 95       	ret
		return rx[index];
    1fa6:	ea 59       	subi	r30, 0x9A	; 154
    1fa8:	f9 4e       	sbci	r31, 0xE9	; 233
    1faa:	80 81       	ld	r24, Z
	}
	return 0;
}
    1fac:	08 95       	ret

00001fae <uart_putstr>:

void uart_putstr(char *s)
{
    1fae:	fc 01       	movw	r30, r24
    1fb0:	09 c0       	rjmp	.+18     	; 0x1fc4 <uart_putstr+0x16>
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
	cli();
    1fb2:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    1fb4:	80 91 c0 00 	lds	r24, 0x00C0
    1fb8:	85 ff       	sbrs	r24, 5
    1fba:	fc cf       	rjmp	.-8      	; 0x1fb4 <uart_putstr+0x6>
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    1fbc:	31 96       	adiw	r30, 0x01	; 1

void uart_putchar (char c)
{
	cli();
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
	UDR0 = c;  // Putting data into the buffer, forces transmission
    1fbe:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    1fc2:	78 94       	sei
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    1fc4:	90 81       	ld	r25, Z
    1fc6:	99 23       	and	r25, r25
    1fc8:	a1 f7       	brne	.-24     	; 0x1fb2 <uart_putstr+0x4>
	
}
    1fca:	08 95       	ret

00001fcc <uart_init>:

void uart_init(UART_BPS bitrate){
    1fcc:	98 2f       	mov	r25, r24

	DDRB = 0xff;
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xff;
    1fd2:	85 b9       	out	0x05, r24	; 5

	rxn = 0;
    1fd4:	10 92 65 16 	sts	0x1665, r1
    1fd8:	10 92 64 16 	sts	0x1664, r1
	uart_rx = 0;
    1fdc:	10 92 3a 17 	sts	0x173A, r1

	/* Set baud rate */
	UBRR0H = 0;
    1fe0:	10 92 c5 00 	sts	0x00C5, r1
	switch (bitrate) {
    1fe4:	99 23       	and	r25, r25
    1fe6:	11 f4       	brne	.+4      	; 0x1fec <uart_init+0x20>
    case UART_38400:
	    UBRR0L = 12;
    1fe8:	8c e0       	ldi	r24, 0x0C	; 12
    1fea:	01 c0       	rjmp	.+2      	; 0x1fee <uart_init+0x22>
		break;
    case UART_57600:
        UBRR0L = 6;
        break;
    default:
        UBRR0L = 6;
    1fec:	86 e0       	ldi	r24, 0x06	; 6
    1fee:	80 93 c4 00 	sts	0x00C4, r24
    }

	/* Enable receiver and transmitter */
	UCSR0B = _BV(RXEN0)|_BV(TXEN0) | _BV(RXCIE0);
    1ff2:	88 e9       	ldi	r24, 0x98	; 152
    1ff4:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(1<<UCSZ00) | _BV(UCSZ01);
    1ff8:	8e e0       	ldi	r24, 0x0E	; 14
    1ffa:	80 93 c2 00 	sts	0x00C2, r24
}
    1ffe:	08 95       	ret

00002000 <uart_bytes_recv>:

uint8_t uart_bytes_recv(void)
{
	return rxn;
    2000:	80 91 64 16 	lds	r24, 0x1664
    2004:	90 91 65 16 	lds	r25, 0x1665
}
    2008:	08 95       	ret

0000200a <uart_reset_recv>:

void uart_reset_recv(void)
{
	rxn = 0;
    200a:	10 92 65 16 	sts	0x1665, r1
    200e:	10 92 64 16 	sts	0x1664, r1
}
    2012:	08 95       	ret

00002014 <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
    2014:	1f 92       	push	r1
    2016:	0f 92       	push	r0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	0f 92       	push	r0
    201c:	0b b6       	in	r0, 0x3b	; 59
    201e:	0f 92       	push	r0
    2020:	11 24       	eor	r1, r1
    2022:	2f 93       	push	r18
    2024:	3f 93       	push	r19
    2026:	5f 93       	push	r21
    2028:	6f 93       	push	r22
    202a:	7f 93       	push	r23
    202c:	8f 93       	push	r24
    202e:	9f 93       	push	r25
    2030:	af 93       	push	r26
    2032:	bf 93       	push	r27
    2034:	ef 93       	push	r30
    2036:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
    2038:	80 91 c0 00 	lds	r24, 0x00C0
    203c:	87 ff       	sbrs	r24, 7
    203e:	fc cf       	rjmp	.-8      	; 0x2038 <__vector_25+0x24>

	//PORTB = ~_BV(PINB1);

	rx[rxn] = UDR0;
    2040:	e0 91 64 16 	lds	r30, 0x1664
    2044:	f0 91 65 16 	lds	r31, 0x1665
    2048:	80 91 c6 00 	lds	r24, 0x00C6
    204c:	ea 59       	subi	r30, 0x9A	; 154
    204e:	f9 4e       	sbci	r31, 0xE9	; 233
    2050:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
    2052:	80 91 64 16 	lds	r24, 0x1664
    2056:	90 91 65 16 	lds	r25, 0x1665
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	64 e6       	ldi	r22, 0x64	; 100
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	0e 94 4c 19 	call	0x3298	; 0x3298 <__divmodhi4>
    2064:	90 93 65 16 	sts	0x1665, r25
    2068:	80 93 64 16 	sts	0x1664, r24
	uart_rx = 1; // notify main of receipt of data.
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	80 93 3a 17 	sts	0x173A, r24
	//PORTB = PORTB | _BV(PINB1);
}
    2072:	ff 91       	pop	r31
    2074:	ef 91       	pop	r30
    2076:	bf 91       	pop	r27
    2078:	af 91       	pop	r26
    207a:	9f 91       	pop	r25
    207c:	8f 91       	pop	r24
    207e:	7f 91       	pop	r23
    2080:	6f 91       	pop	r22
    2082:	5f 91       	pop	r21
    2084:	3f 91       	pop	r19
    2086:	2f 91       	pop	r18
    2088:	0f 90       	pop	r0
    208a:	0b be       	out	0x3b, r0	; 59
    208c:	0f 90       	pop	r0
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	0f 90       	pop	r0
    2092:	1f 90       	pop	r1
    2094:	18 95       	reti

00002096 <__fixunssfsi>:
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	7b 01       	movw	r14, r22
    20a0:	8c 01       	movw	r16, r24
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	5f e4       	ldi	r21, 0x4F	; 79
    20aa:	0e 94 c7 13 	call	0x278e	; 0x278e <__gesf2>
    20ae:	88 23       	and	r24, r24
    20b0:	8c f0       	brlt	.+34     	; 0x20d4 <__fixunssfsi+0x3e>
    20b2:	c8 01       	movw	r24, r16
    20b4:	b7 01       	movw	r22, r14
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	5f e4       	ldi	r21, 0x4F	; 79
    20be:	0e 94 c3 11 	call	0x2386	; 0x2386 <__subsf3>
    20c2:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixsfsi>
    20c6:	9b 01       	movw	r18, r22
    20c8:	ac 01       	movw	r20, r24
    20ca:	20 50       	subi	r18, 0x00	; 0
    20cc:	30 40       	sbci	r19, 0x00	; 0
    20ce:	40 40       	sbci	r20, 0x00	; 0
    20d0:	50 48       	sbci	r21, 0x80	; 128
    20d2:	06 c0       	rjmp	.+12     	; 0x20e0 <__fixunssfsi+0x4a>
    20d4:	c8 01       	movw	r24, r16
    20d6:	b7 01       	movw	r22, r14
    20d8:	0e 94 55 14 	call	0x28aa	; 0x28aa <__fixsfsi>
    20dc:	9b 01       	movw	r18, r22
    20de:	ac 01       	movw	r20, r24
    20e0:	b9 01       	movw	r22, r18
    20e2:	ca 01       	movw	r24, r20
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	08 95       	ret

000020ee <_fpadd_parts>:
    20ee:	a0 e0       	ldi	r26, 0x00	; 0
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ed e7       	ldi	r30, 0x7D	; 125
    20f4:	f0 e1       	ldi	r31, 0x10	; 16
    20f6:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__prologue_saves__>
    20fa:	dc 01       	movw	r26, r24
    20fc:	2b 01       	movw	r4, r22
    20fe:	fa 01       	movw	r30, r20
    2100:	9c 91       	ld	r25, X
    2102:	92 30       	cpi	r25, 0x02	; 2
    2104:	08 f4       	brcc	.+2      	; 0x2108 <_fpadd_parts+0x1a>
    2106:	39 c1       	rjmp	.+626    	; 0x237a <_fpadd_parts+0x28c>
    2108:	eb 01       	movw	r28, r22
    210a:	88 81       	ld	r24, Y
    210c:	82 30       	cpi	r24, 0x02	; 2
    210e:	08 f4       	brcc	.+2      	; 0x2112 <_fpadd_parts+0x24>
    2110:	33 c1       	rjmp	.+614    	; 0x2378 <_fpadd_parts+0x28a>
    2112:	94 30       	cpi	r25, 0x04	; 4
    2114:	69 f4       	brne	.+26     	; 0x2130 <_fpadd_parts+0x42>
    2116:	84 30       	cpi	r24, 0x04	; 4
    2118:	09 f0       	breq	.+2      	; 0x211c <_fpadd_parts+0x2e>
    211a:	2f c1       	rjmp	.+606    	; 0x237a <_fpadd_parts+0x28c>
    211c:	11 96       	adiw	r26, 0x01	; 1
    211e:	9c 91       	ld	r25, X
    2120:	11 97       	sbiw	r26, 0x01	; 1
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	98 17       	cp	r25, r24
    2126:	09 f4       	brne	.+2      	; 0x212a <_fpadd_parts+0x3c>
    2128:	28 c1       	rjmp	.+592    	; 0x237a <_fpadd_parts+0x28c>
    212a:	a8 e9       	ldi	r26, 0x98	; 152
    212c:	b2 e0       	ldi	r27, 0x02	; 2
    212e:	25 c1       	rjmp	.+586    	; 0x237a <_fpadd_parts+0x28c>
    2130:	84 30       	cpi	r24, 0x04	; 4
    2132:	09 f4       	brne	.+2      	; 0x2136 <_fpadd_parts+0x48>
    2134:	21 c1       	rjmp	.+578    	; 0x2378 <_fpadd_parts+0x28a>
    2136:	82 30       	cpi	r24, 0x02	; 2
    2138:	a9 f4       	brne	.+42     	; 0x2164 <_fpadd_parts+0x76>
    213a:	92 30       	cpi	r25, 0x02	; 2
    213c:	09 f0       	breq	.+2      	; 0x2140 <_fpadd_parts+0x52>
    213e:	1d c1       	rjmp	.+570    	; 0x237a <_fpadd_parts+0x28c>
    2140:	9a 01       	movw	r18, r20
    2142:	ad 01       	movw	r20, r26
    2144:	88 e0       	ldi	r24, 0x08	; 8
    2146:	ea 01       	movw	r28, r20
    2148:	09 90       	ld	r0, Y+
    214a:	ae 01       	movw	r20, r28
    214c:	e9 01       	movw	r28, r18
    214e:	09 92       	st	Y+, r0
    2150:	9e 01       	movw	r18, r28
    2152:	81 50       	subi	r24, 0x01	; 1
    2154:	c1 f7       	brne	.-16     	; 0x2146 <_fpadd_parts+0x58>
    2156:	e2 01       	movw	r28, r4
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	11 96       	adiw	r26, 0x01	; 1
    215c:	9c 91       	ld	r25, X
    215e:	89 23       	and	r24, r25
    2160:	81 83       	std	Z+1, r24	; 0x01
    2162:	08 c1       	rjmp	.+528    	; 0x2374 <_fpadd_parts+0x286>
    2164:	92 30       	cpi	r25, 0x02	; 2
    2166:	09 f4       	brne	.+2      	; 0x216a <_fpadd_parts+0x7c>
    2168:	07 c1       	rjmp	.+526    	; 0x2378 <_fpadd_parts+0x28a>
    216a:	12 96       	adiw	r26, 0x02	; 2
    216c:	2d 90       	ld	r2, X+
    216e:	3c 90       	ld	r3, X
    2170:	13 97       	sbiw	r26, 0x03	; 3
    2172:	eb 01       	movw	r28, r22
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	14 96       	adiw	r26, 0x04	; 4
    217a:	ad 90       	ld	r10, X+
    217c:	bd 90       	ld	r11, X+
    217e:	cd 90       	ld	r12, X+
    2180:	dc 90       	ld	r13, X
    2182:	17 97       	sbiw	r26, 0x07	; 7
    2184:	ec 80       	ldd	r14, Y+4	; 0x04
    2186:	fd 80       	ldd	r15, Y+5	; 0x05
    2188:	0e 81       	ldd	r16, Y+6	; 0x06
    218a:	1f 81       	ldd	r17, Y+7	; 0x07
    218c:	91 01       	movw	r18, r2
    218e:	28 1b       	sub	r18, r24
    2190:	39 0b       	sbc	r19, r25
    2192:	b9 01       	movw	r22, r18
    2194:	37 ff       	sbrs	r19, 7
    2196:	04 c0       	rjmp	.+8      	; 0x21a0 <_fpadd_parts+0xb2>
    2198:	66 27       	eor	r22, r22
    219a:	77 27       	eor	r23, r23
    219c:	62 1b       	sub	r22, r18
    219e:	73 0b       	sbc	r23, r19
    21a0:	60 32       	cpi	r22, 0x20	; 32
    21a2:	71 05       	cpc	r23, r1
    21a4:	0c f0       	brlt	.+2      	; 0x21a8 <_fpadd_parts+0xba>
    21a6:	61 c0       	rjmp	.+194    	; 0x226a <_fpadd_parts+0x17c>
    21a8:	12 16       	cp	r1, r18
    21aa:	13 06       	cpc	r1, r19
    21ac:	6c f5       	brge	.+90     	; 0x2208 <_fpadd_parts+0x11a>
    21ae:	37 01       	movw	r6, r14
    21b0:	48 01       	movw	r8, r16
    21b2:	06 2e       	mov	r0, r22
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <_fpadd_parts+0xd0>
    21b6:	96 94       	lsr	r9
    21b8:	87 94       	ror	r8
    21ba:	77 94       	ror	r7
    21bc:	67 94       	ror	r6
    21be:	0a 94       	dec	r0
    21c0:	d2 f7       	brpl	.-12     	; 0x21b6 <_fpadd_parts+0xc8>
    21c2:	21 e0       	ldi	r18, 0x01	; 1
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <_fpadd_parts+0xe6>
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	44 1f       	adc	r20, r20
    21d2:	55 1f       	adc	r21, r21
    21d4:	6a 95       	dec	r22
    21d6:	d2 f7       	brpl	.-12     	; 0x21cc <_fpadd_parts+0xde>
    21d8:	21 50       	subi	r18, 0x01	; 1
    21da:	30 40       	sbci	r19, 0x00	; 0
    21dc:	40 40       	sbci	r20, 0x00	; 0
    21de:	50 40       	sbci	r21, 0x00	; 0
    21e0:	2e 21       	and	r18, r14
    21e2:	3f 21       	and	r19, r15
    21e4:	40 23       	and	r20, r16
    21e6:	51 23       	and	r21, r17
    21e8:	21 15       	cp	r18, r1
    21ea:	31 05       	cpc	r19, r1
    21ec:	41 05       	cpc	r20, r1
    21ee:	51 05       	cpc	r21, r1
    21f0:	21 f0       	breq	.+8      	; 0x21fa <_fpadd_parts+0x10c>
    21f2:	21 e0       	ldi	r18, 0x01	; 1
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	79 01       	movw	r14, r18
    21fc:	8a 01       	movw	r16, r20
    21fe:	e6 28       	or	r14, r6
    2200:	f7 28       	or	r15, r7
    2202:	08 29       	or	r16, r8
    2204:	19 29       	or	r17, r9
    2206:	3c c0       	rjmp	.+120    	; 0x2280 <_fpadd_parts+0x192>
    2208:	23 2b       	or	r18, r19
    220a:	d1 f1       	breq	.+116    	; 0x2280 <_fpadd_parts+0x192>
    220c:	26 0e       	add	r2, r22
    220e:	37 1e       	adc	r3, r23
    2210:	35 01       	movw	r6, r10
    2212:	46 01       	movw	r8, r12
    2214:	06 2e       	mov	r0, r22
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <_fpadd_parts+0x132>
    2218:	96 94       	lsr	r9
    221a:	87 94       	ror	r8
    221c:	77 94       	ror	r7
    221e:	67 94       	ror	r6
    2220:	0a 94       	dec	r0
    2222:	d2 f7       	brpl	.-12     	; 0x2218 <_fpadd_parts+0x12a>
    2224:	21 e0       	ldi	r18, 0x01	; 1
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <_fpadd_parts+0x148>
    222e:	22 0f       	add	r18, r18
    2230:	33 1f       	adc	r19, r19
    2232:	44 1f       	adc	r20, r20
    2234:	55 1f       	adc	r21, r21
    2236:	6a 95       	dec	r22
    2238:	d2 f7       	brpl	.-12     	; 0x222e <_fpadd_parts+0x140>
    223a:	21 50       	subi	r18, 0x01	; 1
    223c:	30 40       	sbci	r19, 0x00	; 0
    223e:	40 40       	sbci	r20, 0x00	; 0
    2240:	50 40       	sbci	r21, 0x00	; 0
    2242:	2a 21       	and	r18, r10
    2244:	3b 21       	and	r19, r11
    2246:	4c 21       	and	r20, r12
    2248:	5d 21       	and	r21, r13
    224a:	21 15       	cp	r18, r1
    224c:	31 05       	cpc	r19, r1
    224e:	41 05       	cpc	r20, r1
    2250:	51 05       	cpc	r21, r1
    2252:	21 f0       	breq	.+8      	; 0x225c <_fpadd_parts+0x16e>
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	59 01       	movw	r10, r18
    225e:	6a 01       	movw	r12, r20
    2260:	a6 28       	or	r10, r6
    2262:	b7 28       	or	r11, r7
    2264:	c8 28       	or	r12, r8
    2266:	d9 28       	or	r13, r9
    2268:	0b c0       	rjmp	.+22     	; 0x2280 <_fpadd_parts+0x192>
    226a:	82 15       	cp	r24, r2
    226c:	93 05       	cpc	r25, r3
    226e:	2c f0       	brlt	.+10     	; 0x227a <_fpadd_parts+0x18c>
    2270:	1c 01       	movw	r2, r24
    2272:	aa 24       	eor	r10, r10
    2274:	bb 24       	eor	r11, r11
    2276:	65 01       	movw	r12, r10
    2278:	03 c0       	rjmp	.+6      	; 0x2280 <_fpadd_parts+0x192>
    227a:	ee 24       	eor	r14, r14
    227c:	ff 24       	eor	r15, r15
    227e:	87 01       	movw	r16, r14
    2280:	11 96       	adiw	r26, 0x01	; 1
    2282:	9c 91       	ld	r25, X
    2284:	d2 01       	movw	r26, r4
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	8c 91       	ld	r24, X
    228a:	98 17       	cp	r25, r24
    228c:	09 f4       	brne	.+2      	; 0x2290 <_fpadd_parts+0x1a2>
    228e:	45 c0       	rjmp	.+138    	; 0x231a <_fpadd_parts+0x22c>
    2290:	99 23       	and	r25, r25
    2292:	39 f0       	breq	.+14     	; 0x22a2 <_fpadd_parts+0x1b4>
    2294:	a8 01       	movw	r20, r16
    2296:	97 01       	movw	r18, r14
    2298:	2a 19       	sub	r18, r10
    229a:	3b 09       	sbc	r19, r11
    229c:	4c 09       	sbc	r20, r12
    229e:	5d 09       	sbc	r21, r13
    22a0:	06 c0       	rjmp	.+12     	; 0x22ae <_fpadd_parts+0x1c0>
    22a2:	a6 01       	movw	r20, r12
    22a4:	95 01       	movw	r18, r10
    22a6:	2e 19       	sub	r18, r14
    22a8:	3f 09       	sbc	r19, r15
    22aa:	40 0b       	sbc	r20, r16
    22ac:	51 0b       	sbc	r21, r17
    22ae:	57 fd       	sbrc	r21, 7
    22b0:	08 c0       	rjmp	.+16     	; 0x22c2 <_fpadd_parts+0x1d4>
    22b2:	11 82       	std	Z+1, r1	; 0x01
    22b4:	33 82       	std	Z+3, r3	; 0x03
    22b6:	22 82       	std	Z+2, r2	; 0x02
    22b8:	24 83       	std	Z+4, r18	; 0x04
    22ba:	35 83       	std	Z+5, r19	; 0x05
    22bc:	46 83       	std	Z+6, r20	; 0x06
    22be:	57 83       	std	Z+7, r21	; 0x07
    22c0:	1d c0       	rjmp	.+58     	; 0x22fc <_fpadd_parts+0x20e>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	81 83       	std	Z+1, r24	; 0x01
    22c6:	33 82       	std	Z+3, r3	; 0x03
    22c8:	22 82       	std	Z+2, r2	; 0x02
    22ca:	88 27       	eor	r24, r24
    22cc:	99 27       	eor	r25, r25
    22ce:	dc 01       	movw	r26, r24
    22d0:	82 1b       	sub	r24, r18
    22d2:	93 0b       	sbc	r25, r19
    22d4:	a4 0b       	sbc	r26, r20
    22d6:	b5 0b       	sbc	r27, r21
    22d8:	84 83       	std	Z+4, r24	; 0x04
    22da:	95 83       	std	Z+5, r25	; 0x05
    22dc:	a6 83       	std	Z+6, r26	; 0x06
    22de:	b7 83       	std	Z+7, r27	; 0x07
    22e0:	0d c0       	rjmp	.+26     	; 0x22fc <_fpadd_parts+0x20e>
    22e2:	22 0f       	add	r18, r18
    22e4:	33 1f       	adc	r19, r19
    22e6:	44 1f       	adc	r20, r20
    22e8:	55 1f       	adc	r21, r21
    22ea:	24 83       	std	Z+4, r18	; 0x04
    22ec:	35 83       	std	Z+5, r19	; 0x05
    22ee:	46 83       	std	Z+6, r20	; 0x06
    22f0:	57 83       	std	Z+7, r21	; 0x07
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	93 83       	std	Z+3, r25	; 0x03
    22fa:	82 83       	std	Z+2, r24	; 0x02
    22fc:	24 81       	ldd	r18, Z+4	; 0x04
    22fe:	35 81       	ldd	r19, Z+5	; 0x05
    2300:	46 81       	ldd	r20, Z+6	; 0x06
    2302:	57 81       	ldd	r21, Z+7	; 0x07
    2304:	da 01       	movw	r26, r20
    2306:	c9 01       	movw	r24, r18
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	a1 09       	sbc	r26, r1
    230c:	b1 09       	sbc	r27, r1
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	af 4f       	sbci	r26, 0xFF	; 255
    2314:	bf 43       	sbci	r27, 0x3F	; 63
    2316:	28 f3       	brcs	.-54     	; 0x22e2 <_fpadd_parts+0x1f4>
    2318:	0b c0       	rjmp	.+22     	; 0x2330 <_fpadd_parts+0x242>
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	33 82       	std	Z+3, r3	; 0x03
    231e:	22 82       	std	Z+2, r2	; 0x02
    2320:	ea 0c       	add	r14, r10
    2322:	fb 1c       	adc	r15, r11
    2324:	0c 1d       	adc	r16, r12
    2326:	1d 1d       	adc	r17, r13
    2328:	e4 82       	std	Z+4, r14	; 0x04
    232a:	f5 82       	std	Z+5, r15	; 0x05
    232c:	06 83       	std	Z+6, r16	; 0x06
    232e:	17 83       	std	Z+7, r17	; 0x07
    2330:	83 e0       	ldi	r24, 0x03	; 3
    2332:	80 83       	st	Z, r24
    2334:	24 81       	ldd	r18, Z+4	; 0x04
    2336:	35 81       	ldd	r19, Z+5	; 0x05
    2338:	46 81       	ldd	r20, Z+6	; 0x06
    233a:	57 81       	ldd	r21, Z+7	; 0x07
    233c:	57 ff       	sbrs	r21, 7
    233e:	1a c0       	rjmp	.+52     	; 0x2374 <_fpadd_parts+0x286>
    2340:	c9 01       	movw	r24, r18
    2342:	aa 27       	eor	r26, r26
    2344:	97 fd       	sbrc	r25, 7
    2346:	a0 95       	com	r26
    2348:	ba 2f       	mov	r27, r26
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	a0 70       	andi	r26, 0x00	; 0
    2350:	b0 70       	andi	r27, 0x00	; 0
    2352:	56 95       	lsr	r21
    2354:	47 95       	ror	r20
    2356:	37 95       	ror	r19
    2358:	27 95       	ror	r18
    235a:	82 2b       	or	r24, r18
    235c:	93 2b       	or	r25, r19
    235e:	a4 2b       	or	r26, r20
    2360:	b5 2b       	or	r27, r21
    2362:	84 83       	std	Z+4, r24	; 0x04
    2364:	95 83       	std	Z+5, r25	; 0x05
    2366:	a6 83       	std	Z+6, r26	; 0x06
    2368:	b7 83       	std	Z+7, r27	; 0x07
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	93 83       	std	Z+3, r25	; 0x03
    2372:	82 83       	std	Z+2, r24	; 0x02
    2374:	df 01       	movw	r26, r30
    2376:	01 c0       	rjmp	.+2      	; 0x237a <_fpadd_parts+0x28c>
    2378:	d2 01       	movw	r26, r4
    237a:	cd 01       	movw	r24, r26
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	e2 e1       	ldi	r30, 0x12	; 18
    2382:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__epilogue_restores__>

00002386 <__subsf3>:
    2386:	a0 e2       	ldi	r26, 0x20	; 32
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e9 ec       	ldi	r30, 0xC9	; 201
    238c:	f1 e1       	ldi	r31, 0x11	; 17
    238e:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__prologue_saves__+0x18>
    2392:	69 83       	std	Y+1, r22	; 0x01
    2394:	7a 83       	std	Y+2, r23	; 0x02
    2396:	8b 83       	std	Y+3, r24	; 0x03
    2398:	9c 83       	std	Y+4, r25	; 0x04
    239a:	2d 83       	std	Y+5, r18	; 0x05
    239c:	3e 83       	std	Y+6, r19	; 0x06
    239e:	4f 83       	std	Y+7, r20	; 0x07
    23a0:	58 87       	std	Y+8, r21	; 0x08
    23a2:	e9 e0       	ldi	r30, 0x09	; 9
    23a4:	ee 2e       	mov	r14, r30
    23a6:	f1 2c       	mov	r15, r1
    23a8:	ec 0e       	add	r14, r28
    23aa:	fd 1e       	adc	r15, r29
    23ac:	ce 01       	movw	r24, r28
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	b7 01       	movw	r22, r14
    23b2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    23b6:	8e 01       	movw	r16, r28
    23b8:	0f 5e       	subi	r16, 0xEF	; 239
    23ba:	1f 4f       	sbci	r17, 0xFF	; 255
    23bc:	ce 01       	movw	r24, r28
    23be:	05 96       	adiw	r24, 0x05	; 5
    23c0:	b8 01       	movw	r22, r16
    23c2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    23c6:	8a 89       	ldd	r24, Y+18	; 0x12
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	89 27       	eor	r24, r25
    23cc:	8a 8b       	std	Y+18, r24	; 0x12
    23ce:	c7 01       	movw	r24, r14
    23d0:	b8 01       	movw	r22, r16
    23d2:	ae 01       	movw	r20, r28
    23d4:	47 5e       	subi	r20, 0xE7	; 231
    23d6:	5f 4f       	sbci	r21, 0xFF	; 255
    23d8:	0e 94 77 10 	call	0x20ee	; 0x20ee <_fpadd_parts>
    23dc:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__pack_f>
    23e0:	a0 96       	adiw	r28, 0x20	; 32
    23e2:	e6 e0       	ldi	r30, 0x06	; 6
    23e4:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__epilogue_restores__+0x18>

000023e8 <__addsf3>:
    23e8:	a0 e2       	ldi	r26, 0x20	; 32
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ea ef       	ldi	r30, 0xFA	; 250
    23ee:	f1 e1       	ldi	r31, 0x11	; 17
    23f0:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__prologue_saves__+0x18>
    23f4:	69 83       	std	Y+1, r22	; 0x01
    23f6:	7a 83       	std	Y+2, r23	; 0x02
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	2d 83       	std	Y+5, r18	; 0x05
    23fe:	3e 83       	std	Y+6, r19	; 0x06
    2400:	4f 83       	std	Y+7, r20	; 0x07
    2402:	58 87       	std	Y+8, r21	; 0x08
    2404:	f9 e0       	ldi	r31, 0x09	; 9
    2406:	ef 2e       	mov	r14, r31
    2408:	f1 2c       	mov	r15, r1
    240a:	ec 0e       	add	r14, r28
    240c:	fd 1e       	adc	r15, r29
    240e:	ce 01       	movw	r24, r28
    2410:	01 96       	adiw	r24, 0x01	; 1
    2412:	b7 01       	movw	r22, r14
    2414:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    2418:	8e 01       	movw	r16, r28
    241a:	0f 5e       	subi	r16, 0xEF	; 239
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	ce 01       	movw	r24, r28
    2420:	05 96       	adiw	r24, 0x05	; 5
    2422:	b8 01       	movw	r22, r16
    2424:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    2428:	c7 01       	movw	r24, r14
    242a:	b8 01       	movw	r22, r16
    242c:	ae 01       	movw	r20, r28
    242e:	47 5e       	subi	r20, 0xE7	; 231
    2430:	5f 4f       	sbci	r21, 0xFF	; 255
    2432:	0e 94 77 10 	call	0x20ee	; 0x20ee <_fpadd_parts>
    2436:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__pack_f>
    243a:	a0 96       	adiw	r28, 0x20	; 32
    243c:	e6 e0       	ldi	r30, 0x06	; 6
    243e:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__epilogue_restores__+0x18>

00002442 <__mulsf3>:
    2442:	a0 e2       	ldi	r26, 0x20	; 32
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e7 e2       	ldi	r30, 0x27	; 39
    2448:	f2 e1       	ldi	r31, 0x12	; 18
    244a:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__prologue_saves__>
    244e:	69 83       	std	Y+1, r22	; 0x01
    2450:	7a 83       	std	Y+2, r23	; 0x02
    2452:	8b 83       	std	Y+3, r24	; 0x03
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	2d 83       	std	Y+5, r18	; 0x05
    2458:	3e 83       	std	Y+6, r19	; 0x06
    245a:	4f 83       	std	Y+7, r20	; 0x07
    245c:	58 87       	std	Y+8, r21	; 0x08
    245e:	ce 01       	movw	r24, r28
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	be 01       	movw	r22, r28
    2464:	67 5f       	subi	r22, 0xF7	; 247
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    246c:	ce 01       	movw	r24, r28
    246e:	05 96       	adiw	r24, 0x05	; 5
    2470:	be 01       	movw	r22, r28
    2472:	6f 5e       	subi	r22, 0xEF	; 239
    2474:	7f 4f       	sbci	r23, 0xFF	; 255
    2476:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    247a:	99 85       	ldd	r25, Y+9	; 0x09
    247c:	92 30       	cpi	r25, 0x02	; 2
    247e:	88 f0       	brcs	.+34     	; 0x24a2 <__mulsf3+0x60>
    2480:	89 89       	ldd	r24, Y+17	; 0x11
    2482:	82 30       	cpi	r24, 0x02	; 2
    2484:	c8 f0       	brcs	.+50     	; 0x24b8 <__mulsf3+0x76>
    2486:	94 30       	cpi	r25, 0x04	; 4
    2488:	19 f4       	brne	.+6      	; 0x2490 <__mulsf3+0x4e>
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	51 f4       	brne	.+20     	; 0x24a2 <__mulsf3+0x60>
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <__mulsf3+0x56>
    2490:	84 30       	cpi	r24, 0x04	; 4
    2492:	29 f4       	brne	.+10     	; 0x249e <__mulsf3+0x5c>
    2494:	92 30       	cpi	r25, 0x02	; 2
    2496:	81 f4       	brne	.+32     	; 0x24b8 <__mulsf3+0x76>
    2498:	88 e9       	ldi	r24, 0x98	; 152
    249a:	92 e0       	ldi	r25, 0x02	; 2
    249c:	c6 c0       	rjmp	.+396    	; 0x262a <__mulsf3+0x1e8>
    249e:	92 30       	cpi	r25, 0x02	; 2
    24a0:	49 f4       	brne	.+18     	; 0x24b4 <__mulsf3+0x72>
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	8a 89       	ldd	r24, Y+18	; 0x12
    24a8:	98 13       	cpse	r25, r24
    24aa:	21 e0       	ldi	r18, 0x01	; 1
    24ac:	2a 87       	std	Y+10, r18	; 0x0a
    24ae:	ce 01       	movw	r24, r28
    24b0:	09 96       	adiw	r24, 0x09	; 9
    24b2:	bb c0       	rjmp	.+374    	; 0x262a <__mulsf3+0x1e8>
    24b4:	82 30       	cpi	r24, 0x02	; 2
    24b6:	49 f4       	brne	.+18     	; 0x24ca <__mulsf3+0x88>
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	8a 89       	ldd	r24, Y+18	; 0x12
    24be:	98 13       	cpse	r25, r24
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	2a 8b       	std	Y+18, r18	; 0x12
    24c4:	ce 01       	movw	r24, r28
    24c6:	41 96       	adiw	r24, 0x11	; 17
    24c8:	b0 c0       	rjmp	.+352    	; 0x262a <__mulsf3+0x1e8>
    24ca:	2d 84       	ldd	r2, Y+13	; 0x0d
    24cc:	3e 84       	ldd	r3, Y+14	; 0x0e
    24ce:	4f 84       	ldd	r4, Y+15	; 0x0f
    24d0:	58 88       	ldd	r5, Y+16	; 0x10
    24d2:	6d 88       	ldd	r6, Y+21	; 0x15
    24d4:	7e 88       	ldd	r7, Y+22	; 0x16
    24d6:	8f 88       	ldd	r8, Y+23	; 0x17
    24d8:	98 8c       	ldd	r9, Y+24	; 0x18
    24da:	ee 24       	eor	r14, r14
    24dc:	ff 24       	eor	r15, r15
    24de:	87 01       	movw	r16, r14
    24e0:	aa 24       	eor	r10, r10
    24e2:	bb 24       	eor	r11, r11
    24e4:	65 01       	movw	r12, r10
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	e0 e0       	ldi	r30, 0x00	; 0
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	c1 01       	movw	r24, r2
    24f4:	81 70       	andi	r24, 0x01	; 1
    24f6:	90 70       	andi	r25, 0x00	; 0
    24f8:	89 2b       	or	r24, r25
    24fa:	e9 f0       	breq	.+58     	; 0x2536 <__mulsf3+0xf4>
    24fc:	e6 0c       	add	r14, r6
    24fe:	f7 1c       	adc	r15, r7
    2500:	08 1d       	adc	r16, r8
    2502:	19 1d       	adc	r17, r9
    2504:	9a 01       	movw	r18, r20
    2506:	ab 01       	movw	r20, r22
    2508:	2a 0d       	add	r18, r10
    250a:	3b 1d       	adc	r19, r11
    250c:	4c 1d       	adc	r20, r12
    250e:	5d 1d       	adc	r21, r13
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e6 14       	cp	r14, r6
    251a:	f7 04       	cpc	r15, r7
    251c:	08 05       	cpc	r16, r8
    251e:	19 05       	cpc	r17, r9
    2520:	20 f4       	brcc	.+8      	; 0x252a <__mulsf3+0xe8>
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	a0 e0       	ldi	r26, 0x00	; 0
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	ba 01       	movw	r22, r20
    252c:	a9 01       	movw	r20, r18
    252e:	48 0f       	add	r20, r24
    2530:	59 1f       	adc	r21, r25
    2532:	6a 1f       	adc	r22, r26
    2534:	7b 1f       	adc	r23, r27
    2536:	aa 0c       	add	r10, r10
    2538:	bb 1c       	adc	r11, r11
    253a:	cc 1c       	adc	r12, r12
    253c:	dd 1c       	adc	r13, r13
    253e:	97 fe       	sbrs	r9, 7
    2540:	08 c0       	rjmp	.+16     	; 0x2552 <__mulsf3+0x110>
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	a0 e0       	ldi	r26, 0x00	; 0
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	a8 2a       	or	r10, r24
    254c:	b9 2a       	or	r11, r25
    254e:	ca 2a       	or	r12, r26
    2550:	db 2a       	or	r13, r27
    2552:	31 96       	adiw	r30, 0x01	; 1
    2554:	e0 32       	cpi	r30, 0x20	; 32
    2556:	f1 05       	cpc	r31, r1
    2558:	49 f0       	breq	.+18     	; 0x256c <__mulsf3+0x12a>
    255a:	66 0c       	add	r6, r6
    255c:	77 1c       	adc	r7, r7
    255e:	88 1c       	adc	r8, r8
    2560:	99 1c       	adc	r9, r9
    2562:	56 94       	lsr	r5
    2564:	47 94       	ror	r4
    2566:	37 94       	ror	r3
    2568:	27 94       	ror	r2
    256a:	c3 cf       	rjmp	.-122    	; 0x24f2 <__mulsf3+0xb0>
    256c:	fa 85       	ldd	r31, Y+10	; 0x0a
    256e:	ea 89       	ldd	r30, Y+18	; 0x12
    2570:	2b 89       	ldd	r18, Y+19	; 0x13
    2572:	3c 89       	ldd	r19, Y+20	; 0x14
    2574:	8b 85       	ldd	r24, Y+11	; 0x0b
    2576:	9c 85       	ldd	r25, Y+12	; 0x0c
    2578:	28 0f       	add	r18, r24
    257a:	39 1f       	adc	r19, r25
    257c:	2e 5f       	subi	r18, 0xFE	; 254
    257e:	3f 4f       	sbci	r19, 0xFF	; 255
    2580:	17 c0       	rjmp	.+46     	; 0x25b0 <__mulsf3+0x16e>
    2582:	ca 01       	movw	r24, r20
    2584:	81 70       	andi	r24, 0x01	; 1
    2586:	90 70       	andi	r25, 0x00	; 0
    2588:	89 2b       	or	r24, r25
    258a:	61 f0       	breq	.+24     	; 0x25a4 <__mulsf3+0x162>
    258c:	16 95       	lsr	r17
    258e:	07 95       	ror	r16
    2590:	f7 94       	ror	r15
    2592:	e7 94       	ror	r14
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e0       	ldi	r26, 0x00	; 0
    259a:	b0 e8       	ldi	r27, 0x80	; 128
    259c:	e8 2a       	or	r14, r24
    259e:	f9 2a       	or	r15, r25
    25a0:	0a 2b       	or	r16, r26
    25a2:	1b 2b       	or	r17, r27
    25a4:	76 95       	lsr	r23
    25a6:	67 95       	ror	r22
    25a8:	57 95       	ror	r21
    25aa:	47 95       	ror	r20
    25ac:	2f 5f       	subi	r18, 0xFF	; 255
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	77 fd       	sbrc	r23, 7
    25b2:	e7 cf       	rjmp	.-50     	; 0x2582 <__mulsf3+0x140>
    25b4:	0c c0       	rjmp	.+24     	; 0x25ce <__mulsf3+0x18c>
    25b6:	44 0f       	add	r20, r20
    25b8:	55 1f       	adc	r21, r21
    25ba:	66 1f       	adc	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	17 fd       	sbrc	r17, 7
    25c0:	41 60       	ori	r20, 0x01	; 1
    25c2:	ee 0c       	add	r14, r14
    25c4:	ff 1c       	adc	r15, r15
    25c6:	00 1f       	adc	r16, r16
    25c8:	11 1f       	adc	r17, r17
    25ca:	21 50       	subi	r18, 0x01	; 1
    25cc:	30 40       	sbci	r19, 0x00	; 0
    25ce:	40 30       	cpi	r20, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	59 07       	cpc	r21, r25
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	69 07       	cpc	r22, r25
    25d8:	90 e4       	ldi	r25, 0x40	; 64
    25da:	79 07       	cpc	r23, r25
    25dc:	60 f3       	brcs	.-40     	; 0x25b6 <__mulsf3+0x174>
    25de:	2b 8f       	std	Y+27, r18	; 0x1b
    25e0:	3c 8f       	std	Y+28, r19	; 0x1c
    25e2:	db 01       	movw	r26, r22
    25e4:	ca 01       	movw	r24, r20
    25e6:	8f 77       	andi	r24, 0x7F	; 127
    25e8:	90 70       	andi	r25, 0x00	; 0
    25ea:	a0 70       	andi	r26, 0x00	; 0
    25ec:	b0 70       	andi	r27, 0x00	; 0
    25ee:	80 34       	cpi	r24, 0x40	; 64
    25f0:	91 05       	cpc	r25, r1
    25f2:	a1 05       	cpc	r26, r1
    25f4:	b1 05       	cpc	r27, r1
    25f6:	61 f4       	brne	.+24     	; 0x2610 <__mulsf3+0x1ce>
    25f8:	47 fd       	sbrc	r20, 7
    25fa:	0a c0       	rjmp	.+20     	; 0x2610 <__mulsf3+0x1ce>
    25fc:	e1 14       	cp	r14, r1
    25fe:	f1 04       	cpc	r15, r1
    2600:	01 05       	cpc	r16, r1
    2602:	11 05       	cpc	r17, r1
    2604:	29 f0       	breq	.+10     	; 0x2610 <__mulsf3+0x1ce>
    2606:	40 5c       	subi	r20, 0xC0	; 192
    2608:	5f 4f       	sbci	r21, 0xFF	; 255
    260a:	6f 4f       	sbci	r22, 0xFF	; 255
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	40 78       	andi	r20, 0x80	; 128
    2610:	1a 8e       	std	Y+26, r1	; 0x1a
    2612:	fe 17       	cp	r31, r30
    2614:	11 f0       	breq	.+4      	; 0x261a <__mulsf3+0x1d8>
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	8a 8f       	std	Y+26, r24	; 0x1a
    261a:	4d 8f       	std	Y+29, r20	; 0x1d
    261c:	5e 8f       	std	Y+30, r21	; 0x1e
    261e:	6f 8f       	std	Y+31, r22	; 0x1f
    2620:	78 a3       	std	Y+32, r23	; 0x20
    2622:	83 e0       	ldi	r24, 0x03	; 3
    2624:	89 8f       	std	Y+25, r24	; 0x19
    2626:	ce 01       	movw	r24, r28
    2628:	49 96       	adiw	r24, 0x19	; 25
    262a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__pack_f>
    262e:	a0 96       	adiw	r28, 0x20	; 32
    2630:	e2 e1       	ldi	r30, 0x12	; 18
    2632:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__epilogue_restores__>

00002636 <__divsf3>:
    2636:	a8 e1       	ldi	r26, 0x18	; 24
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e1 e2       	ldi	r30, 0x21	; 33
    263c:	f3 e1       	ldi	r31, 0x13	; 19
    263e:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <__prologue_saves__+0x10>
    2642:	69 83       	std	Y+1, r22	; 0x01
    2644:	7a 83       	std	Y+2, r23	; 0x02
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	9c 83       	std	Y+4, r25	; 0x04
    264a:	2d 83       	std	Y+5, r18	; 0x05
    264c:	3e 83       	std	Y+6, r19	; 0x06
    264e:	4f 83       	std	Y+7, r20	; 0x07
    2650:	58 87       	std	Y+8, r21	; 0x08
    2652:	b9 e0       	ldi	r27, 0x09	; 9
    2654:	eb 2e       	mov	r14, r27
    2656:	f1 2c       	mov	r15, r1
    2658:	ec 0e       	add	r14, r28
    265a:	fd 1e       	adc	r15, r29
    265c:	ce 01       	movw	r24, r28
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	b7 01       	movw	r22, r14
    2662:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    2666:	8e 01       	movw	r16, r28
    2668:	0f 5e       	subi	r16, 0xEF	; 239
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	ce 01       	movw	r24, r28
    266e:	05 96       	adiw	r24, 0x05	; 5
    2670:	b8 01       	movw	r22, r16
    2672:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    2676:	29 85       	ldd	r18, Y+9	; 0x09
    2678:	22 30       	cpi	r18, 0x02	; 2
    267a:	08 f4       	brcc	.+2      	; 0x267e <__divsf3+0x48>
    267c:	7e c0       	rjmp	.+252    	; 0x277a <__divsf3+0x144>
    267e:	39 89       	ldd	r19, Y+17	; 0x11
    2680:	32 30       	cpi	r19, 0x02	; 2
    2682:	10 f4       	brcc	.+4      	; 0x2688 <__divsf3+0x52>
    2684:	b8 01       	movw	r22, r16
    2686:	7c c0       	rjmp	.+248    	; 0x2780 <__divsf3+0x14a>
    2688:	8a 85       	ldd	r24, Y+10	; 0x0a
    268a:	9a 89       	ldd	r25, Y+18	; 0x12
    268c:	89 27       	eor	r24, r25
    268e:	8a 87       	std	Y+10, r24	; 0x0a
    2690:	24 30       	cpi	r18, 0x04	; 4
    2692:	11 f0       	breq	.+4      	; 0x2698 <__divsf3+0x62>
    2694:	22 30       	cpi	r18, 0x02	; 2
    2696:	31 f4       	brne	.+12     	; 0x26a4 <__divsf3+0x6e>
    2698:	23 17       	cp	r18, r19
    269a:	09 f0       	breq	.+2      	; 0x269e <__divsf3+0x68>
    269c:	6e c0       	rjmp	.+220    	; 0x277a <__divsf3+0x144>
    269e:	68 e9       	ldi	r22, 0x98	; 152
    26a0:	72 e0       	ldi	r23, 0x02	; 2
    26a2:	6e c0       	rjmp	.+220    	; 0x2780 <__divsf3+0x14a>
    26a4:	34 30       	cpi	r19, 0x04	; 4
    26a6:	39 f4       	brne	.+14     	; 0x26b6 <__divsf3+0x80>
    26a8:	1d 86       	std	Y+13, r1	; 0x0d
    26aa:	1e 86       	std	Y+14, r1	; 0x0e
    26ac:	1f 86       	std	Y+15, r1	; 0x0f
    26ae:	18 8a       	std	Y+16, r1	; 0x10
    26b0:	1c 86       	std	Y+12, r1	; 0x0c
    26b2:	1b 86       	std	Y+11, r1	; 0x0b
    26b4:	04 c0       	rjmp	.+8      	; 0x26be <__divsf3+0x88>
    26b6:	32 30       	cpi	r19, 0x02	; 2
    26b8:	21 f4       	brne	.+8      	; 0x26c2 <__divsf3+0x8c>
    26ba:	84 e0       	ldi	r24, 0x04	; 4
    26bc:	89 87       	std	Y+9, r24	; 0x09
    26be:	b7 01       	movw	r22, r14
    26c0:	5f c0       	rjmp	.+190    	; 0x2780 <__divsf3+0x14a>
    26c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    26c4:	3c 85       	ldd	r19, Y+12	; 0x0c
    26c6:	8b 89       	ldd	r24, Y+19	; 0x13
    26c8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ca:	28 1b       	sub	r18, r24
    26cc:	39 0b       	sbc	r19, r25
    26ce:	3c 87       	std	Y+12, r19	; 0x0c
    26d0:	2b 87       	std	Y+11, r18	; 0x0b
    26d2:	ed 84       	ldd	r14, Y+13	; 0x0d
    26d4:	fe 84       	ldd	r15, Y+14	; 0x0e
    26d6:	0f 85       	ldd	r16, Y+15	; 0x0f
    26d8:	18 89       	ldd	r17, Y+16	; 0x10
    26da:	ad 88       	ldd	r10, Y+21	; 0x15
    26dc:	be 88       	ldd	r11, Y+22	; 0x16
    26de:	cf 88       	ldd	r12, Y+23	; 0x17
    26e0:	d8 8c       	ldd	r13, Y+24	; 0x18
    26e2:	ea 14       	cp	r14, r10
    26e4:	fb 04       	cpc	r15, r11
    26e6:	0c 05       	cpc	r16, r12
    26e8:	1d 05       	cpc	r17, r13
    26ea:	40 f4       	brcc	.+16     	; 0x26fc <__divsf3+0xc6>
    26ec:	ee 0c       	add	r14, r14
    26ee:	ff 1c       	adc	r15, r15
    26f0:	00 1f       	adc	r16, r16
    26f2:	11 1f       	adc	r17, r17
    26f4:	21 50       	subi	r18, 0x01	; 1
    26f6:	30 40       	sbci	r19, 0x00	; 0
    26f8:	3c 87       	std	Y+12, r19	; 0x0c
    26fa:	2b 87       	std	Y+11, r18	; 0x0b
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e4       	ldi	r27, 0x40	; 64
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	70 e0       	ldi	r23, 0x00	; 0
    2710:	ea 14       	cp	r14, r10
    2712:	fb 04       	cpc	r15, r11
    2714:	0c 05       	cpc	r16, r12
    2716:	1d 05       	cpc	r17, r13
    2718:	40 f0       	brcs	.+16     	; 0x272a <__divsf3+0xf4>
    271a:	28 2b       	or	r18, r24
    271c:	39 2b       	or	r19, r25
    271e:	4a 2b       	or	r20, r26
    2720:	5b 2b       	or	r21, r27
    2722:	ea 18       	sub	r14, r10
    2724:	fb 08       	sbc	r15, r11
    2726:	0c 09       	sbc	r16, r12
    2728:	1d 09       	sbc	r17, r13
    272a:	b6 95       	lsr	r27
    272c:	a7 95       	ror	r26
    272e:	97 95       	ror	r25
    2730:	87 95       	ror	r24
    2732:	ee 0c       	add	r14, r14
    2734:	ff 1c       	adc	r15, r15
    2736:	00 1f       	adc	r16, r16
    2738:	11 1f       	adc	r17, r17
    273a:	6f 5f       	subi	r22, 0xFF	; 255
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	6f 31       	cpi	r22, 0x1F	; 31
    2740:	71 05       	cpc	r23, r1
    2742:	31 f7       	brne	.-52     	; 0x2710 <__divsf3+0xda>
    2744:	da 01       	movw	r26, r20
    2746:	c9 01       	movw	r24, r18
    2748:	8f 77       	andi	r24, 0x7F	; 127
    274a:	90 70       	andi	r25, 0x00	; 0
    274c:	a0 70       	andi	r26, 0x00	; 0
    274e:	b0 70       	andi	r27, 0x00	; 0
    2750:	80 34       	cpi	r24, 0x40	; 64
    2752:	91 05       	cpc	r25, r1
    2754:	a1 05       	cpc	r26, r1
    2756:	b1 05       	cpc	r27, r1
    2758:	61 f4       	brne	.+24     	; 0x2772 <__divsf3+0x13c>
    275a:	27 fd       	sbrc	r18, 7
    275c:	0a c0       	rjmp	.+20     	; 0x2772 <__divsf3+0x13c>
    275e:	e1 14       	cp	r14, r1
    2760:	f1 04       	cpc	r15, r1
    2762:	01 05       	cpc	r16, r1
    2764:	11 05       	cpc	r17, r1
    2766:	29 f0       	breq	.+10     	; 0x2772 <__divsf3+0x13c>
    2768:	20 5c       	subi	r18, 0xC0	; 192
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	4f 4f       	sbci	r20, 0xFF	; 255
    276e:	5f 4f       	sbci	r21, 0xFF	; 255
    2770:	20 78       	andi	r18, 0x80	; 128
    2772:	2d 87       	std	Y+13, r18	; 0x0d
    2774:	3e 87       	std	Y+14, r19	; 0x0e
    2776:	4f 87       	std	Y+15, r20	; 0x0f
    2778:	58 8b       	std	Y+16, r21	; 0x10
    277a:	be 01       	movw	r22, r28
    277c:	67 5f       	subi	r22, 0xF7	; 247
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	cb 01       	movw	r24, r22
    2782:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__pack_f>
    2786:	68 96       	adiw	r28, 0x18	; 24
    2788:	ea e0       	ldi	r30, 0x0A	; 10
    278a:	0c 94 97 19 	jmp	0x332e	; 0x332e <__epilogue_restores__+0x10>

0000278e <__gesf2>:
    278e:	a8 e1       	ldi	r26, 0x18	; 24
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	ed ec       	ldi	r30, 0xCD	; 205
    2794:	f3 e1       	ldi	r31, 0x13	; 19
    2796:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__prologue_saves__+0x18>
    279a:	69 83       	std	Y+1, r22	; 0x01
    279c:	7a 83       	std	Y+2, r23	; 0x02
    279e:	8b 83       	std	Y+3, r24	; 0x03
    27a0:	9c 83       	std	Y+4, r25	; 0x04
    27a2:	2d 83       	std	Y+5, r18	; 0x05
    27a4:	3e 83       	std	Y+6, r19	; 0x06
    27a6:	4f 83       	std	Y+7, r20	; 0x07
    27a8:	58 87       	std	Y+8, r21	; 0x08
    27aa:	89 e0       	ldi	r24, 0x09	; 9
    27ac:	e8 2e       	mov	r14, r24
    27ae:	f1 2c       	mov	r15, r1
    27b0:	ec 0e       	add	r14, r28
    27b2:	fd 1e       	adc	r15, r29
    27b4:	ce 01       	movw	r24, r28
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	b7 01       	movw	r22, r14
    27ba:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    27be:	8e 01       	movw	r16, r28
    27c0:	0f 5e       	subi	r16, 0xEF	; 239
    27c2:	1f 4f       	sbci	r17, 0xFF	; 255
    27c4:	ce 01       	movw	r24, r28
    27c6:	05 96       	adiw	r24, 0x05	; 5
    27c8:	b8 01       	movw	r22, r16
    27ca:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	82 30       	cpi	r24, 0x02	; 2
    27d2:	40 f0       	brcs	.+16     	; 0x27e4 <__gesf2+0x56>
    27d4:	89 89       	ldd	r24, Y+17	; 0x11
    27d6:	82 30       	cpi	r24, 0x02	; 2
    27d8:	28 f0       	brcs	.+10     	; 0x27e4 <__gesf2+0x56>
    27da:	c7 01       	movw	r24, r14
    27dc:	b8 01       	movw	r22, r16
    27de:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <__fpcmp_parts_f>
    27e2:	01 c0       	rjmp	.+2      	; 0x27e6 <__gesf2+0x58>
    27e4:	8f ef       	ldi	r24, 0xFF	; 255
    27e6:	68 96       	adiw	r28, 0x18	; 24
    27e8:	e6 e0       	ldi	r30, 0x06	; 6
    27ea:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__epilogue_restores__+0x18>

000027ee <__floatsisf>:
    27ee:	a8 e0       	ldi	r26, 0x08	; 8
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	ed ef       	ldi	r30, 0xFD	; 253
    27f4:	f3 e1       	ldi	r31, 0x13	; 19
    27f6:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__prologue_saves__+0x12>
    27fa:	9b 01       	movw	r18, r22
    27fc:	ac 01       	movw	r20, r24
    27fe:	83 e0       	ldi	r24, 0x03	; 3
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	da 01       	movw	r26, r20
    2804:	c9 01       	movw	r24, r18
    2806:	88 27       	eor	r24, r24
    2808:	b7 fd       	sbrc	r27, 7
    280a:	83 95       	inc	r24
    280c:	99 27       	eor	r25, r25
    280e:	aa 27       	eor	r26, r26
    2810:	bb 27       	eor	r27, r27
    2812:	b8 2e       	mov	r11, r24
    2814:	21 15       	cp	r18, r1
    2816:	31 05       	cpc	r19, r1
    2818:	41 05       	cpc	r20, r1
    281a:	51 05       	cpc	r21, r1
    281c:	19 f4       	brne	.+6      	; 0x2824 <__floatsisf+0x36>
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	89 83       	std	Y+1, r24	; 0x01
    2822:	3a c0       	rjmp	.+116    	; 0x2898 <__floatsisf+0xaa>
    2824:	88 23       	and	r24, r24
    2826:	a9 f0       	breq	.+42     	; 0x2852 <__floatsisf+0x64>
    2828:	20 30       	cpi	r18, 0x00	; 0
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	38 07       	cpc	r19, r24
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	48 07       	cpc	r20, r24
    2832:	80 e8       	ldi	r24, 0x80	; 128
    2834:	58 07       	cpc	r21, r24
    2836:	29 f4       	brne	.+10     	; 0x2842 <__floatsisf+0x54>
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	70 e0       	ldi	r23, 0x00	; 0
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	9f ec       	ldi	r25, 0xCF	; 207
    2840:	30 c0       	rjmp	.+96     	; 0x28a2 <__floatsisf+0xb4>
    2842:	ee 24       	eor	r14, r14
    2844:	ff 24       	eor	r15, r15
    2846:	87 01       	movw	r16, r14
    2848:	e2 1a       	sub	r14, r18
    284a:	f3 0a       	sbc	r15, r19
    284c:	04 0b       	sbc	r16, r20
    284e:	15 0b       	sbc	r17, r21
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <__floatsisf+0x68>
    2852:	79 01       	movw	r14, r18
    2854:	8a 01       	movw	r16, r20
    2856:	8e e1       	ldi	r24, 0x1E	; 30
    2858:	c8 2e       	mov	r12, r24
    285a:	d1 2c       	mov	r13, r1
    285c:	dc 82       	std	Y+4, r13	; 0x04
    285e:	cb 82       	std	Y+3, r12	; 0x03
    2860:	ed 82       	std	Y+5, r14	; 0x05
    2862:	fe 82       	std	Y+6, r15	; 0x06
    2864:	0f 83       	std	Y+7, r16	; 0x07
    2866:	18 87       	std	Y+8, r17	; 0x08
    2868:	c8 01       	movw	r24, r16
    286a:	b7 01       	movw	r22, r14
    286c:	0e 94 a9 14 	call	0x2952	; 0x2952 <__clzsi2>
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	18 16       	cp	r1, r24
    2874:	19 06       	cpc	r1, r25
    2876:	84 f4       	brge	.+32     	; 0x2898 <__floatsisf+0xaa>
    2878:	08 2e       	mov	r0, r24
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <__floatsisf+0x96>
    287c:	ee 0c       	add	r14, r14
    287e:	ff 1c       	adc	r15, r15
    2880:	00 1f       	adc	r16, r16
    2882:	11 1f       	adc	r17, r17
    2884:	0a 94       	dec	r0
    2886:	d2 f7       	brpl	.-12     	; 0x287c <__floatsisf+0x8e>
    2888:	ed 82       	std	Y+5, r14	; 0x05
    288a:	fe 82       	std	Y+6, r15	; 0x06
    288c:	0f 83       	std	Y+7, r16	; 0x07
    288e:	18 87       	std	Y+8, r17	; 0x08
    2890:	c8 1a       	sub	r12, r24
    2892:	d9 0a       	sbc	r13, r25
    2894:	dc 82       	std	Y+4, r13	; 0x04
    2896:	cb 82       	std	Y+3, r12	; 0x03
    2898:	ba 82       	std	Y+2, r11	; 0x02
    289a:	ce 01       	movw	r24, r28
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__pack_f>
    28a2:	28 96       	adiw	r28, 0x08	; 8
    28a4:	e9 e0       	ldi	r30, 0x09	; 9
    28a6:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__epilogue_restores__+0x12>

000028aa <__fixsfsi>:
    28aa:	ac e0       	ldi	r26, 0x0C	; 12
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	eb e5       	ldi	r30, 0x5B	; 91
    28b0:	f4 e1       	ldi	r31, 0x14	; 20
    28b2:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x20>
    28b6:	69 83       	std	Y+1, r22	; 0x01
    28b8:	7a 83       	std	Y+2, r23	; 0x02
    28ba:	8b 83       	std	Y+3, r24	; 0x03
    28bc:	9c 83       	std	Y+4, r25	; 0x04
    28be:	ce 01       	movw	r24, r28
    28c0:	01 96       	adiw	r24, 0x01	; 1
    28c2:	be 01       	movw	r22, r28
    28c4:	6b 5f       	subi	r22, 0xFB	; 251
    28c6:	7f 4f       	sbci	r23, 0xFF	; 255
    28c8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <__unpack_f>
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	61 f1       	breq	.+88     	; 0x292a <__fixsfsi+0x80>
    28d2:	82 30       	cpi	r24, 0x02	; 2
    28d4:	50 f1       	brcs	.+84     	; 0x292a <__fixsfsi+0x80>
    28d6:	84 30       	cpi	r24, 0x04	; 4
    28d8:	21 f4       	brne	.+8      	; 0x28e2 <__fixsfsi+0x38>
    28da:	8e 81       	ldd	r24, Y+6	; 0x06
    28dc:	88 23       	and	r24, r24
    28de:	51 f1       	breq	.+84     	; 0x2934 <__fixsfsi+0x8a>
    28e0:	2e c0       	rjmp	.+92     	; 0x293e <__fixsfsi+0x94>
    28e2:	2f 81       	ldd	r18, Y+7	; 0x07
    28e4:	38 85       	ldd	r19, Y+8	; 0x08
    28e6:	37 fd       	sbrc	r19, 7
    28e8:	20 c0       	rjmp	.+64     	; 0x292a <__fixsfsi+0x80>
    28ea:	6e 81       	ldd	r22, Y+6	; 0x06
    28ec:	2f 31       	cpi	r18, 0x1F	; 31
    28ee:	31 05       	cpc	r19, r1
    28f0:	1c f0       	brlt	.+6      	; 0x28f8 <__fixsfsi+0x4e>
    28f2:	66 23       	and	r22, r22
    28f4:	f9 f0       	breq	.+62     	; 0x2934 <__fixsfsi+0x8a>
    28f6:	23 c0       	rjmp	.+70     	; 0x293e <__fixsfsi+0x94>
    28f8:	8e e1       	ldi	r24, 0x1E	; 30
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	82 1b       	sub	r24, r18
    28fe:	93 0b       	sbc	r25, r19
    2900:	29 85       	ldd	r18, Y+9	; 0x09
    2902:	3a 85       	ldd	r19, Y+10	; 0x0a
    2904:	4b 85       	ldd	r20, Y+11	; 0x0b
    2906:	5c 85       	ldd	r21, Y+12	; 0x0c
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <__fixsfsi+0x68>
    290a:	56 95       	lsr	r21
    290c:	47 95       	ror	r20
    290e:	37 95       	ror	r19
    2910:	27 95       	ror	r18
    2912:	8a 95       	dec	r24
    2914:	d2 f7       	brpl	.-12     	; 0x290a <__fixsfsi+0x60>
    2916:	66 23       	and	r22, r22
    2918:	b1 f0       	breq	.+44     	; 0x2946 <__fixsfsi+0x9c>
    291a:	50 95       	com	r21
    291c:	40 95       	com	r20
    291e:	30 95       	com	r19
    2920:	21 95       	neg	r18
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	4f 4f       	sbci	r20, 0xFF	; 255
    2926:	5f 4f       	sbci	r21, 0xFF	; 255
    2928:	0e c0       	rjmp	.+28     	; 0x2946 <__fixsfsi+0x9c>
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	09 c0       	rjmp	.+18     	; 0x2946 <__fixsfsi+0x9c>
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f ef       	ldi	r20, 0xFF	; 255
    293a:	5f e7       	ldi	r21, 0x7F	; 127
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <__fixsfsi+0x9c>
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e8       	ldi	r21, 0x80	; 128
    2946:	b9 01       	movw	r22, r18
    2948:	ca 01       	movw	r24, r20
    294a:	2c 96       	adiw	r28, 0x0c	; 12
    294c:	e2 e0       	ldi	r30, 0x02	; 2
    294e:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x20>

00002952 <__clzsi2>:
    2952:	ef 92       	push	r14
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	7b 01       	movw	r14, r22
    295c:	8c 01       	movw	r16, r24
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	e8 16       	cp	r14, r24
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	f8 06       	cpc	r15, r24
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	08 07       	cpc	r16, r24
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	18 07       	cpc	r17, r24
    296e:	88 f4       	brcc	.+34     	; 0x2992 <__clzsi2+0x40>
    2970:	8f ef       	ldi	r24, 0xFF	; 255
    2972:	e8 16       	cp	r14, r24
    2974:	f1 04       	cpc	r15, r1
    2976:	01 05       	cpc	r16, r1
    2978:	11 05       	cpc	r17, r1
    297a:	31 f0       	breq	.+12     	; 0x2988 <__clzsi2+0x36>
    297c:	28 f0       	brcs	.+10     	; 0x2988 <__clzsi2+0x36>
    297e:	88 e0       	ldi	r24, 0x08	; 8
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a0 e0       	ldi	r26, 0x00	; 0
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	17 c0       	rjmp	.+46     	; 0x29b6 <__clzsi2+0x64>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a0 e0       	ldi	r26, 0x00	; 0
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	12 c0       	rjmp	.+36     	; 0x29b6 <__clzsi2+0x64>
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	e8 16       	cp	r14, r24
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	f8 06       	cpc	r15, r24
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	08 07       	cpc	r16, r24
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	18 07       	cpc	r17, r24
    29a2:	28 f0       	brcs	.+10     	; 0x29ae <__clzsi2+0x5c>
    29a4:	88 e1       	ldi	r24, 0x18	; 24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a0 e0       	ldi	r26, 0x00	; 0
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	04 c0       	rjmp	.+8      	; 0x29b6 <__clzsi2+0x64>
    29ae:	80 e1       	ldi	r24, 0x10	; 16
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 e0       	ldi	r26, 0x00	; 0
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	20 e2       	ldi	r18, 0x20	; 32
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	28 1b       	sub	r18, r24
    29c0:	39 0b       	sbc	r19, r25
    29c2:	4a 0b       	sbc	r20, r26
    29c4:	5b 0b       	sbc	r21, r27
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <__clzsi2+0x7e>
    29c8:	16 95       	lsr	r17
    29ca:	07 95       	ror	r16
    29cc:	f7 94       	ror	r15
    29ce:	e7 94       	ror	r14
    29d0:	8a 95       	dec	r24
    29d2:	d2 f7       	brpl	.-12     	; 0x29c8 <__clzsi2+0x76>
    29d4:	f7 01       	movw	r30, r14
    29d6:	e0 56       	subi	r30, 0x60	; 96
    29d8:	fd 4f       	sbci	r31, 0xFD	; 253
    29da:	80 81       	ld	r24, Z
    29dc:	28 1b       	sub	r18, r24
    29de:	31 09       	sbc	r19, r1
    29e0:	41 09       	sbc	r20, r1
    29e2:	51 09       	sbc	r21, r1
    29e4:	c9 01       	movw	r24, r18
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	08 95       	ret

000029f0 <__pack_f>:
    29f0:	df 92       	push	r13
    29f2:	ef 92       	push	r14
    29f4:	ff 92       	push	r15
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	fc 01       	movw	r30, r24
    29fc:	e4 80       	ldd	r14, Z+4	; 0x04
    29fe:	f5 80       	ldd	r15, Z+5	; 0x05
    2a00:	06 81       	ldd	r16, Z+6	; 0x06
    2a02:	17 81       	ldd	r17, Z+7	; 0x07
    2a04:	d1 80       	ldd	r13, Z+1	; 0x01
    2a06:	80 81       	ld	r24, Z
    2a08:	82 30       	cpi	r24, 0x02	; 2
    2a0a:	48 f4       	brcc	.+18     	; 0x2a1e <__pack_f+0x2e>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a0 e1       	ldi	r26, 0x10	; 16
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e8 2a       	or	r14, r24
    2a16:	f9 2a       	or	r15, r25
    2a18:	0a 2b       	or	r16, r26
    2a1a:	1b 2b       	or	r17, r27
    2a1c:	a5 c0       	rjmp	.+330    	; 0x2b68 <__pack_f+0x178>
    2a1e:	84 30       	cpi	r24, 0x04	; 4
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <__pack_f+0x34>
    2a22:	9f c0       	rjmp	.+318    	; 0x2b62 <__pack_f+0x172>
    2a24:	82 30       	cpi	r24, 0x02	; 2
    2a26:	21 f4       	brne	.+8      	; 0x2a30 <__pack_f+0x40>
    2a28:	ee 24       	eor	r14, r14
    2a2a:	ff 24       	eor	r15, r15
    2a2c:	87 01       	movw	r16, r14
    2a2e:	05 c0       	rjmp	.+10     	; 0x2a3a <__pack_f+0x4a>
    2a30:	e1 14       	cp	r14, r1
    2a32:	f1 04       	cpc	r15, r1
    2a34:	01 05       	cpc	r16, r1
    2a36:	11 05       	cpc	r17, r1
    2a38:	19 f4       	brne	.+6      	; 0x2a40 <__pack_f+0x50>
    2a3a:	e0 e0       	ldi	r30, 0x00	; 0
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	96 c0       	rjmp	.+300    	; 0x2b6c <__pack_f+0x17c>
    2a40:	62 81       	ldd	r22, Z+2	; 0x02
    2a42:	73 81       	ldd	r23, Z+3	; 0x03
    2a44:	9f ef       	ldi	r25, 0xFF	; 255
    2a46:	62 38       	cpi	r22, 0x82	; 130
    2a48:	79 07       	cpc	r23, r25
    2a4a:	0c f0       	brlt	.+2      	; 0x2a4e <__pack_f+0x5e>
    2a4c:	5b c0       	rjmp	.+182    	; 0x2b04 <__pack_f+0x114>
    2a4e:	22 e8       	ldi	r18, 0x82	; 130
    2a50:	3f ef       	ldi	r19, 0xFF	; 255
    2a52:	26 1b       	sub	r18, r22
    2a54:	37 0b       	sbc	r19, r23
    2a56:	2a 31       	cpi	r18, 0x1A	; 26
    2a58:	31 05       	cpc	r19, r1
    2a5a:	2c f0       	brlt	.+10     	; 0x2a66 <__pack_f+0x76>
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e0       	ldi	r20, 0x00	; 0
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	2a c0       	rjmp	.+84     	; 0x2aba <__pack_f+0xca>
    2a66:	b8 01       	movw	r22, r16
    2a68:	a7 01       	movw	r20, r14
    2a6a:	02 2e       	mov	r0, r18
    2a6c:	04 c0       	rjmp	.+8      	; 0x2a76 <__pack_f+0x86>
    2a6e:	76 95       	lsr	r23
    2a70:	67 95       	ror	r22
    2a72:	57 95       	ror	r21
    2a74:	47 95       	ror	r20
    2a76:	0a 94       	dec	r0
    2a78:	d2 f7       	brpl	.-12     	; 0x2a6e <__pack_f+0x7e>
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e0       	ldi	r26, 0x00	; 0
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <__pack_f+0x9c>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	aa 1f       	adc	r26, r26
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	2a 95       	dec	r18
    2a8e:	d2 f7       	brpl	.-12     	; 0x2a84 <__pack_f+0x94>
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	a1 09       	sbc	r26, r1
    2a94:	b1 09       	sbc	r27, r1
    2a96:	8e 21       	and	r24, r14
    2a98:	9f 21       	and	r25, r15
    2a9a:	a0 23       	and	r26, r16
    2a9c:	b1 23       	and	r27, r17
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	a1 05       	cpc	r26, r1
    2aa2:	b1 05       	cpc	r27, r1
    2aa4:	21 f0       	breq	.+8      	; 0x2aae <__pack_f+0xbe>
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e0       	ldi	r26, 0x00	; 0
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	9a 01       	movw	r18, r20
    2ab0:	ab 01       	movw	r20, r22
    2ab2:	28 2b       	or	r18, r24
    2ab4:	39 2b       	or	r19, r25
    2ab6:	4a 2b       	or	r20, r26
    2ab8:	5b 2b       	or	r21, r27
    2aba:	da 01       	movw	r26, r20
    2abc:	c9 01       	movw	r24, r18
    2abe:	8f 77       	andi	r24, 0x7F	; 127
    2ac0:	90 70       	andi	r25, 0x00	; 0
    2ac2:	a0 70       	andi	r26, 0x00	; 0
    2ac4:	b0 70       	andi	r27, 0x00	; 0
    2ac6:	80 34       	cpi	r24, 0x40	; 64
    2ac8:	91 05       	cpc	r25, r1
    2aca:	a1 05       	cpc	r26, r1
    2acc:	b1 05       	cpc	r27, r1
    2ace:	39 f4       	brne	.+14     	; 0x2ade <__pack_f+0xee>
    2ad0:	27 ff       	sbrs	r18, 7
    2ad2:	09 c0       	rjmp	.+18     	; 0x2ae6 <__pack_f+0xf6>
    2ad4:	20 5c       	subi	r18, 0xC0	; 192
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	4f 4f       	sbci	r20, 0xFF	; 255
    2ada:	5f 4f       	sbci	r21, 0xFF	; 255
    2adc:	04 c0       	rjmp	.+8      	; 0x2ae6 <__pack_f+0xf6>
    2ade:	21 5c       	subi	r18, 0xC1	; 193
    2ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae6:	e0 e0       	ldi	r30, 0x00	; 0
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	20 30       	cpi	r18, 0x00	; 0
    2aec:	a0 e0       	ldi	r26, 0x00	; 0
    2aee:	3a 07       	cpc	r19, r26
    2af0:	a0 e0       	ldi	r26, 0x00	; 0
    2af2:	4a 07       	cpc	r20, r26
    2af4:	a0 e4       	ldi	r26, 0x40	; 64
    2af6:	5a 07       	cpc	r21, r26
    2af8:	10 f0       	brcs	.+4      	; 0x2afe <__pack_f+0x10e>
    2afa:	e1 e0       	ldi	r30, 0x01	; 1
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	79 01       	movw	r14, r18
    2b00:	8a 01       	movw	r16, r20
    2b02:	27 c0       	rjmp	.+78     	; 0x2b52 <__pack_f+0x162>
    2b04:	60 38       	cpi	r22, 0x80	; 128
    2b06:	71 05       	cpc	r23, r1
    2b08:	64 f5       	brge	.+88     	; 0x2b62 <__pack_f+0x172>
    2b0a:	fb 01       	movw	r30, r22
    2b0c:	e1 58       	subi	r30, 0x81	; 129
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	d8 01       	movw	r26, r16
    2b12:	c7 01       	movw	r24, r14
    2b14:	8f 77       	andi	r24, 0x7F	; 127
    2b16:	90 70       	andi	r25, 0x00	; 0
    2b18:	a0 70       	andi	r26, 0x00	; 0
    2b1a:	b0 70       	andi	r27, 0x00	; 0
    2b1c:	80 34       	cpi	r24, 0x40	; 64
    2b1e:	91 05       	cpc	r25, r1
    2b20:	a1 05       	cpc	r26, r1
    2b22:	b1 05       	cpc	r27, r1
    2b24:	39 f4       	brne	.+14     	; 0x2b34 <__pack_f+0x144>
    2b26:	e7 fe       	sbrs	r14, 7
    2b28:	0d c0       	rjmp	.+26     	; 0x2b44 <__pack_f+0x154>
    2b2a:	80 e4       	ldi	r24, 0x40	; 64
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <__pack_f+0x14c>
    2b34:	8f e3       	ldi	r24, 0x3F	; 63
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	a0 e0       	ldi	r26, 0x00	; 0
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e8 0e       	add	r14, r24
    2b3e:	f9 1e       	adc	r15, r25
    2b40:	0a 1f       	adc	r16, r26
    2b42:	1b 1f       	adc	r17, r27
    2b44:	17 ff       	sbrs	r17, 7
    2b46:	05 c0       	rjmp	.+10     	; 0x2b52 <__pack_f+0x162>
    2b48:	16 95       	lsr	r17
    2b4a:	07 95       	ror	r16
    2b4c:	f7 94       	ror	r15
    2b4e:	e7 94       	ror	r14
    2b50:	31 96       	adiw	r30, 0x01	; 1
    2b52:	87 e0       	ldi	r24, 0x07	; 7
    2b54:	16 95       	lsr	r17
    2b56:	07 95       	ror	r16
    2b58:	f7 94       	ror	r15
    2b5a:	e7 94       	ror	r14
    2b5c:	8a 95       	dec	r24
    2b5e:	d1 f7       	brne	.-12     	; 0x2b54 <__pack_f+0x164>
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <__pack_f+0x17c>
    2b62:	ee 24       	eor	r14, r14
    2b64:	ff 24       	eor	r15, r15
    2b66:	87 01       	movw	r16, r14
    2b68:	ef ef       	ldi	r30, 0xFF	; 255
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	6e 2f       	mov	r22, r30
    2b6e:	67 95       	ror	r22
    2b70:	66 27       	eor	r22, r22
    2b72:	67 95       	ror	r22
    2b74:	90 2f       	mov	r25, r16
    2b76:	9f 77       	andi	r25, 0x7F	; 127
    2b78:	d7 94       	ror	r13
    2b7a:	dd 24       	eor	r13, r13
    2b7c:	d7 94       	ror	r13
    2b7e:	8e 2f       	mov	r24, r30
    2b80:	86 95       	lsr	r24
    2b82:	49 2f       	mov	r20, r25
    2b84:	46 2b       	or	r20, r22
    2b86:	58 2f       	mov	r21, r24
    2b88:	5d 29       	or	r21, r13
    2b8a:	b7 01       	movw	r22, r14
    2b8c:	ca 01       	movw	r24, r20
    2b8e:	1f 91       	pop	r17
    2b90:	0f 91       	pop	r16
    2b92:	ff 90       	pop	r15
    2b94:	ef 90       	pop	r14
    2b96:	df 90       	pop	r13
    2b98:	08 95       	ret

00002b9a <__unpack_f>:
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	db 01       	movw	r26, r22
    2b9e:	40 81       	ld	r20, Z
    2ba0:	51 81       	ldd	r21, Z+1	; 0x01
    2ba2:	22 81       	ldd	r18, Z+2	; 0x02
    2ba4:	62 2f       	mov	r22, r18
    2ba6:	6f 77       	andi	r22, 0x7F	; 127
    2ba8:	70 e0       	ldi	r23, 0x00	; 0
    2baa:	22 1f       	adc	r18, r18
    2bac:	22 27       	eor	r18, r18
    2bae:	22 1f       	adc	r18, r18
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	89 2f       	mov	r24, r25
    2bb4:	88 0f       	add	r24, r24
    2bb6:	82 2b       	or	r24, r18
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	99 27       	eor	r25, r25
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	11 96       	adiw	r26, 0x01	; 1
    2bc4:	9c 93       	st	X, r25
    2bc6:	11 97       	sbiw	r26, 0x01	; 1
    2bc8:	21 15       	cp	r18, r1
    2bca:	31 05       	cpc	r19, r1
    2bcc:	a9 f5       	brne	.+106    	; 0x2c38 <__unpack_f+0x9e>
    2bce:	41 15       	cp	r20, r1
    2bd0:	51 05       	cpc	r21, r1
    2bd2:	61 05       	cpc	r22, r1
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	11 f4       	brne	.+4      	; 0x2bdc <__unpack_f+0x42>
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	37 c0       	rjmp	.+110    	; 0x2c4a <__unpack_f+0xb0>
    2bdc:	82 e8       	ldi	r24, 0x82	; 130
    2bde:	9f ef       	ldi	r25, 0xFF	; 255
    2be0:	13 96       	adiw	r26, 0x03	; 3
    2be2:	9c 93       	st	X, r25
    2be4:	8e 93       	st	-X, r24
    2be6:	12 97       	sbiw	r26, 0x02	; 2
    2be8:	9a 01       	movw	r18, r20
    2bea:	ab 01       	movw	r20, r22
    2bec:	67 e0       	ldi	r22, 0x07	; 7
    2bee:	22 0f       	add	r18, r18
    2bf0:	33 1f       	adc	r19, r19
    2bf2:	44 1f       	adc	r20, r20
    2bf4:	55 1f       	adc	r21, r21
    2bf6:	6a 95       	dec	r22
    2bf8:	d1 f7       	brne	.-12     	; 0x2bee <__unpack_f+0x54>
    2bfa:	83 e0       	ldi	r24, 0x03	; 3
    2bfc:	8c 93       	st	X, r24
    2bfe:	0d c0       	rjmp	.+26     	; 0x2c1a <__unpack_f+0x80>
    2c00:	22 0f       	add	r18, r18
    2c02:	33 1f       	adc	r19, r19
    2c04:	44 1f       	adc	r20, r20
    2c06:	55 1f       	adc	r21, r21
    2c08:	12 96       	adiw	r26, 0x02	; 2
    2c0a:	8d 91       	ld	r24, X+
    2c0c:	9c 91       	ld	r25, X
    2c0e:	13 97       	sbiw	r26, 0x03	; 3
    2c10:	01 97       	sbiw	r24, 0x01	; 1
    2c12:	13 96       	adiw	r26, 0x03	; 3
    2c14:	9c 93       	st	X, r25
    2c16:	8e 93       	st	-X, r24
    2c18:	12 97       	sbiw	r26, 0x02	; 2
    2c1a:	20 30       	cpi	r18, 0x00	; 0
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	38 07       	cpc	r19, r24
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	48 07       	cpc	r20, r24
    2c24:	80 e4       	ldi	r24, 0x40	; 64
    2c26:	58 07       	cpc	r21, r24
    2c28:	58 f3       	brcs	.-42     	; 0x2c00 <__unpack_f+0x66>
    2c2a:	14 96       	adiw	r26, 0x04	; 4
    2c2c:	2d 93       	st	X+, r18
    2c2e:	3d 93       	st	X+, r19
    2c30:	4d 93       	st	X+, r20
    2c32:	5c 93       	st	X, r21
    2c34:	17 97       	sbiw	r26, 0x07	; 7
    2c36:	08 95       	ret
    2c38:	2f 3f       	cpi	r18, 0xFF	; 255
    2c3a:	31 05       	cpc	r19, r1
    2c3c:	79 f4       	brne	.+30     	; 0x2c5c <__unpack_f+0xc2>
    2c3e:	41 15       	cp	r20, r1
    2c40:	51 05       	cpc	r21, r1
    2c42:	61 05       	cpc	r22, r1
    2c44:	71 05       	cpc	r23, r1
    2c46:	19 f4       	brne	.+6      	; 0x2c4e <__unpack_f+0xb4>
    2c48:	84 e0       	ldi	r24, 0x04	; 4
    2c4a:	8c 93       	st	X, r24
    2c4c:	08 95       	ret
    2c4e:	64 ff       	sbrs	r22, 4
    2c50:	03 c0       	rjmp	.+6      	; 0x2c58 <__unpack_f+0xbe>
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	8c 93       	st	X, r24
    2c56:	12 c0       	rjmp	.+36     	; 0x2c7c <__unpack_f+0xe2>
    2c58:	1c 92       	st	X, r1
    2c5a:	10 c0       	rjmp	.+32     	; 0x2c7c <__unpack_f+0xe2>
    2c5c:	2f 57       	subi	r18, 0x7F	; 127
    2c5e:	30 40       	sbci	r19, 0x00	; 0
    2c60:	13 96       	adiw	r26, 0x03	; 3
    2c62:	3c 93       	st	X, r19
    2c64:	2e 93       	st	-X, r18
    2c66:	12 97       	sbiw	r26, 0x02	; 2
    2c68:	83 e0       	ldi	r24, 0x03	; 3
    2c6a:	8c 93       	st	X, r24
    2c6c:	87 e0       	ldi	r24, 0x07	; 7
    2c6e:	44 0f       	add	r20, r20
    2c70:	55 1f       	adc	r21, r21
    2c72:	66 1f       	adc	r22, r22
    2c74:	77 1f       	adc	r23, r23
    2c76:	8a 95       	dec	r24
    2c78:	d1 f7       	brne	.-12     	; 0x2c6e <__unpack_f+0xd4>
    2c7a:	70 64       	ori	r23, 0x40	; 64
    2c7c:	14 96       	adiw	r26, 0x04	; 4
    2c7e:	4d 93       	st	X+, r20
    2c80:	5d 93       	st	X+, r21
    2c82:	6d 93       	st	X+, r22
    2c84:	7c 93       	st	X, r23
    2c86:	17 97       	sbiw	r26, 0x07	; 7
    2c88:	08 95       	ret

00002c8a <__fpcmp_parts_f>:
    2c8a:	1f 93       	push	r17
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	fb 01       	movw	r30, r22
    2c90:	9c 91       	ld	r25, X
    2c92:	92 30       	cpi	r25, 0x02	; 2
    2c94:	08 f4       	brcc	.+2      	; 0x2c98 <__fpcmp_parts_f+0xe>
    2c96:	47 c0       	rjmp	.+142    	; 0x2d26 <__fpcmp_parts_f+0x9c>
    2c98:	80 81       	ld	r24, Z
    2c9a:	82 30       	cpi	r24, 0x02	; 2
    2c9c:	08 f4       	brcc	.+2      	; 0x2ca0 <__fpcmp_parts_f+0x16>
    2c9e:	43 c0       	rjmp	.+134    	; 0x2d26 <__fpcmp_parts_f+0x9c>
    2ca0:	94 30       	cpi	r25, 0x04	; 4
    2ca2:	51 f4       	brne	.+20     	; 0x2cb8 <__fpcmp_parts_f+0x2e>
    2ca4:	11 96       	adiw	r26, 0x01	; 1
    2ca6:	1c 91       	ld	r17, X
    2ca8:	84 30       	cpi	r24, 0x04	; 4
    2caa:	99 f5       	brne	.+102    	; 0x2d12 <__fpcmp_parts_f+0x88>
    2cac:	81 81       	ldd	r24, Z+1	; 0x01
    2cae:	68 2f       	mov	r22, r24
    2cb0:	70 e0       	ldi	r23, 0x00	; 0
    2cb2:	61 1b       	sub	r22, r17
    2cb4:	71 09       	sbc	r23, r1
    2cb6:	3f c0       	rjmp	.+126    	; 0x2d36 <__fpcmp_parts_f+0xac>
    2cb8:	84 30       	cpi	r24, 0x04	; 4
    2cba:	21 f0       	breq	.+8      	; 0x2cc4 <__fpcmp_parts_f+0x3a>
    2cbc:	92 30       	cpi	r25, 0x02	; 2
    2cbe:	31 f4       	brne	.+12     	; 0x2ccc <__fpcmp_parts_f+0x42>
    2cc0:	82 30       	cpi	r24, 0x02	; 2
    2cc2:	b9 f1       	breq	.+110    	; 0x2d32 <__fpcmp_parts_f+0xa8>
    2cc4:	81 81       	ldd	r24, Z+1	; 0x01
    2cc6:	88 23       	and	r24, r24
    2cc8:	89 f1       	breq	.+98     	; 0x2d2c <__fpcmp_parts_f+0xa2>
    2cca:	2d c0       	rjmp	.+90     	; 0x2d26 <__fpcmp_parts_f+0x9c>
    2ccc:	11 96       	adiw	r26, 0x01	; 1
    2cce:	1c 91       	ld	r17, X
    2cd0:	11 97       	sbiw	r26, 0x01	; 1
    2cd2:	82 30       	cpi	r24, 0x02	; 2
    2cd4:	f1 f0       	breq	.+60     	; 0x2d12 <__fpcmp_parts_f+0x88>
    2cd6:	81 81       	ldd	r24, Z+1	; 0x01
    2cd8:	18 17       	cp	r17, r24
    2cda:	d9 f4       	brne	.+54     	; 0x2d12 <__fpcmp_parts_f+0x88>
    2cdc:	12 96       	adiw	r26, 0x02	; 2
    2cde:	2d 91       	ld	r18, X+
    2ce0:	3c 91       	ld	r19, X
    2ce2:	13 97       	sbiw	r26, 0x03	; 3
    2ce4:	82 81       	ldd	r24, Z+2	; 0x02
    2ce6:	93 81       	ldd	r25, Z+3	; 0x03
    2ce8:	82 17       	cp	r24, r18
    2cea:	93 07       	cpc	r25, r19
    2cec:	94 f0       	brlt	.+36     	; 0x2d12 <__fpcmp_parts_f+0x88>
    2cee:	28 17       	cp	r18, r24
    2cf0:	39 07       	cpc	r19, r25
    2cf2:	bc f0       	brlt	.+46     	; 0x2d22 <__fpcmp_parts_f+0x98>
    2cf4:	14 96       	adiw	r26, 0x04	; 4
    2cf6:	8d 91       	ld	r24, X+
    2cf8:	9d 91       	ld	r25, X+
    2cfa:	0d 90       	ld	r0, X+
    2cfc:	bc 91       	ld	r27, X
    2cfe:	a0 2d       	mov	r26, r0
    2d00:	24 81       	ldd	r18, Z+4	; 0x04
    2d02:	35 81       	ldd	r19, Z+5	; 0x05
    2d04:	46 81       	ldd	r20, Z+6	; 0x06
    2d06:	57 81       	ldd	r21, Z+7	; 0x07
    2d08:	28 17       	cp	r18, r24
    2d0a:	39 07       	cpc	r19, r25
    2d0c:	4a 07       	cpc	r20, r26
    2d0e:	5b 07       	cpc	r21, r27
    2d10:	18 f4       	brcc	.+6      	; 0x2d18 <__fpcmp_parts_f+0x8e>
    2d12:	11 23       	and	r17, r17
    2d14:	41 f0       	breq	.+16     	; 0x2d26 <__fpcmp_parts_f+0x9c>
    2d16:	0a c0       	rjmp	.+20     	; 0x2d2c <__fpcmp_parts_f+0xa2>
    2d18:	82 17       	cp	r24, r18
    2d1a:	93 07       	cpc	r25, r19
    2d1c:	a4 07       	cpc	r26, r20
    2d1e:	b5 07       	cpc	r27, r21
    2d20:	40 f4       	brcc	.+16     	; 0x2d32 <__fpcmp_parts_f+0xa8>
    2d22:	11 23       	and	r17, r17
    2d24:	19 f0       	breq	.+6      	; 0x2d2c <__fpcmp_parts_f+0xa2>
    2d26:	61 e0       	ldi	r22, 0x01	; 1
    2d28:	70 e0       	ldi	r23, 0x00	; 0
    2d2a:	05 c0       	rjmp	.+10     	; 0x2d36 <__fpcmp_parts_f+0xac>
    2d2c:	6f ef       	ldi	r22, 0xFF	; 255
    2d2e:	7f ef       	ldi	r23, 0xFF	; 255
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <__fpcmp_parts_f+0xac>
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	cb 01       	movw	r24, r22
    2d38:	1f 91       	pop	r17
    2d3a:	08 95       	ret

00002d3c <snprintf>:
    2d3c:	ae e0       	ldi	r26, 0x0E	; 14
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	e4 ea       	ldi	r30, 0xA4	; 164
    2d42:	f6 e1       	ldi	r31, 0x16	; 22
    2d44:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x1c>
    2d48:	0e 89       	ldd	r16, Y+22	; 0x16
    2d4a:	1f 89       	ldd	r17, Y+23	; 0x17
    2d4c:	88 8d       	ldd	r24, Y+24	; 0x18
    2d4e:	99 8d       	ldd	r25, Y+25	; 0x19
    2d50:	97 ff       	sbrs	r25, 7
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <snprintf+0x1c>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e8       	ldi	r25, 0x80	; 128
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
    2d5e:	1a 83       	std	Y+2, r17	; 0x02
    2d60:	09 83       	std	Y+1, r16	; 0x01
    2d62:	86 e0       	ldi	r24, 0x06	; 6
    2d64:	8c 83       	std	Y+4, r24	; 0x04
    2d66:	9e 01       	movw	r18, r28
    2d68:	24 5e       	subi	r18, 0xE4	; 228
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d72:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d74:	a9 01       	movw	r20, r18
    2d76:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <vfprintf>
    2d7a:	4d 81       	ldd	r20, Y+5	; 0x05
    2d7c:	5e 81       	ldd	r21, Y+6	; 0x06
    2d7e:	57 fd       	sbrc	r21, 7
    2d80:	0a c0       	rjmp	.+20     	; 0x2d96 <snprintf+0x5a>
    2d82:	2f 81       	ldd	r18, Y+7	; 0x07
    2d84:	38 85       	ldd	r19, Y+8	; 0x08
    2d86:	42 17       	cp	r20, r18
    2d88:	53 07       	cpc	r21, r19
    2d8a:	0c f4       	brge	.+2      	; 0x2d8e <snprintf+0x52>
    2d8c:	9a 01       	movw	r18, r20
    2d8e:	02 0f       	add	r16, r18
    2d90:	13 1f       	adc	r17, r19
    2d92:	f8 01       	movw	r30, r16
    2d94:	10 82       	st	Z, r1
    2d96:	2e 96       	adiw	r28, 0x0e	; 14
    2d98:	e4 e0       	ldi	r30, 0x04	; 4
    2d9a:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x1c>

00002d9e <vfprintf>:
    2d9e:	ab e0       	ldi	r26, 0x0B	; 11
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e5 ed       	ldi	r30, 0xD5	; 213
    2da4:	f6 e1       	ldi	r31, 0x16	; 22
    2da6:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <__prologue_saves__>
    2daa:	3c 01       	movw	r6, r24
    2dac:	2b 01       	movw	r4, r22
    2dae:	5a 01       	movw	r10, r20
    2db0:	fc 01       	movw	r30, r24
    2db2:	17 82       	std	Z+7, r1	; 0x07
    2db4:	16 82       	std	Z+6, r1	; 0x06
    2db6:	83 81       	ldd	r24, Z+3	; 0x03
    2db8:	81 fd       	sbrc	r24, 1
    2dba:	03 c0       	rjmp	.+6      	; 0x2dc2 <vfprintf+0x24>
    2dbc:	6f ef       	ldi	r22, 0xFF	; 255
    2dbe:	7f ef       	ldi	r23, 0xFF	; 255
    2dc0:	c6 c1       	rjmp	.+908    	; 0x314e <vfprintf+0x3b0>
    2dc2:	9a e0       	ldi	r25, 0x0A	; 10
    2dc4:	89 2e       	mov	r8, r25
    2dc6:	1e 01       	movw	r2, r28
    2dc8:	08 94       	sec
    2dca:	21 1c       	adc	r2, r1
    2dcc:	31 1c       	adc	r3, r1
    2dce:	f3 01       	movw	r30, r6
    2dd0:	23 81       	ldd	r18, Z+3	; 0x03
    2dd2:	f2 01       	movw	r30, r4
    2dd4:	23 fd       	sbrc	r18, 3
    2dd6:	85 91       	lpm	r24, Z+
    2dd8:	23 ff       	sbrs	r18, 3
    2dda:	81 91       	ld	r24, Z+
    2ddc:	2f 01       	movw	r4, r30
    2dde:	88 23       	and	r24, r24
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <vfprintf+0x46>
    2de2:	b2 c1       	rjmp	.+868    	; 0x3148 <vfprintf+0x3aa>
    2de4:	85 32       	cpi	r24, 0x25	; 37
    2de6:	39 f4       	brne	.+14     	; 0x2df6 <vfprintf+0x58>
    2de8:	23 fd       	sbrc	r18, 3
    2dea:	85 91       	lpm	r24, Z+
    2dec:	23 ff       	sbrs	r18, 3
    2dee:	81 91       	ld	r24, Z+
    2df0:	2f 01       	movw	r4, r30
    2df2:	85 32       	cpi	r24, 0x25	; 37
    2df4:	29 f4       	brne	.+10     	; 0x2e00 <vfprintf+0x62>
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	b3 01       	movw	r22, r6
    2dfa:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    2dfe:	e7 cf       	rjmp	.-50     	; 0x2dce <vfprintf+0x30>
    2e00:	98 2f       	mov	r25, r24
    2e02:	ff 24       	eor	r15, r15
    2e04:	ee 24       	eor	r14, r14
    2e06:	99 24       	eor	r9, r9
    2e08:	ff e1       	ldi	r31, 0x1F	; 31
    2e0a:	ff 15       	cp	r31, r15
    2e0c:	d0 f0       	brcs	.+52     	; 0x2e42 <vfprintf+0xa4>
    2e0e:	9b 32       	cpi	r25, 0x2B	; 43
    2e10:	69 f0       	breq	.+26     	; 0x2e2c <vfprintf+0x8e>
    2e12:	9c 32       	cpi	r25, 0x2C	; 44
    2e14:	28 f4       	brcc	.+10     	; 0x2e20 <vfprintf+0x82>
    2e16:	90 32       	cpi	r25, 0x20	; 32
    2e18:	59 f0       	breq	.+22     	; 0x2e30 <vfprintf+0x92>
    2e1a:	93 32       	cpi	r25, 0x23	; 35
    2e1c:	91 f4       	brne	.+36     	; 0x2e42 <vfprintf+0xa4>
    2e1e:	0e c0       	rjmp	.+28     	; 0x2e3c <vfprintf+0x9e>
    2e20:	9d 32       	cpi	r25, 0x2D	; 45
    2e22:	49 f0       	breq	.+18     	; 0x2e36 <vfprintf+0x98>
    2e24:	90 33       	cpi	r25, 0x30	; 48
    2e26:	69 f4       	brne	.+26     	; 0x2e42 <vfprintf+0xa4>
    2e28:	41 e0       	ldi	r20, 0x01	; 1
    2e2a:	24 c0       	rjmp	.+72     	; 0x2e74 <vfprintf+0xd6>
    2e2c:	52 e0       	ldi	r21, 0x02	; 2
    2e2e:	f5 2a       	or	r15, r21
    2e30:	84 e0       	ldi	r24, 0x04	; 4
    2e32:	f8 2a       	or	r15, r24
    2e34:	28 c0       	rjmp	.+80     	; 0x2e86 <vfprintf+0xe8>
    2e36:	98 e0       	ldi	r25, 0x08	; 8
    2e38:	f9 2a       	or	r15, r25
    2e3a:	25 c0       	rjmp	.+74     	; 0x2e86 <vfprintf+0xe8>
    2e3c:	e0 e1       	ldi	r30, 0x10	; 16
    2e3e:	fe 2a       	or	r15, r30
    2e40:	22 c0       	rjmp	.+68     	; 0x2e86 <vfprintf+0xe8>
    2e42:	f7 fc       	sbrc	r15, 7
    2e44:	29 c0       	rjmp	.+82     	; 0x2e98 <vfprintf+0xfa>
    2e46:	89 2f       	mov	r24, r25
    2e48:	80 53       	subi	r24, 0x30	; 48
    2e4a:	8a 30       	cpi	r24, 0x0A	; 10
    2e4c:	70 f4       	brcc	.+28     	; 0x2e6a <vfprintf+0xcc>
    2e4e:	f6 fe       	sbrs	r15, 6
    2e50:	05 c0       	rjmp	.+10     	; 0x2e5c <vfprintf+0xbe>
    2e52:	98 9c       	mul	r9, r8
    2e54:	90 2c       	mov	r9, r0
    2e56:	11 24       	eor	r1, r1
    2e58:	98 0e       	add	r9, r24
    2e5a:	15 c0       	rjmp	.+42     	; 0x2e86 <vfprintf+0xe8>
    2e5c:	e8 9c       	mul	r14, r8
    2e5e:	e0 2c       	mov	r14, r0
    2e60:	11 24       	eor	r1, r1
    2e62:	e8 0e       	add	r14, r24
    2e64:	f0 e2       	ldi	r31, 0x20	; 32
    2e66:	ff 2a       	or	r15, r31
    2e68:	0e c0       	rjmp	.+28     	; 0x2e86 <vfprintf+0xe8>
    2e6a:	9e 32       	cpi	r25, 0x2E	; 46
    2e6c:	29 f4       	brne	.+10     	; 0x2e78 <vfprintf+0xda>
    2e6e:	f6 fc       	sbrc	r15, 6
    2e70:	6b c1       	rjmp	.+726    	; 0x3148 <vfprintf+0x3aa>
    2e72:	40 e4       	ldi	r20, 0x40	; 64
    2e74:	f4 2a       	or	r15, r20
    2e76:	07 c0       	rjmp	.+14     	; 0x2e86 <vfprintf+0xe8>
    2e78:	9c 36       	cpi	r25, 0x6C	; 108
    2e7a:	19 f4       	brne	.+6      	; 0x2e82 <vfprintf+0xe4>
    2e7c:	50 e8       	ldi	r21, 0x80	; 128
    2e7e:	f5 2a       	or	r15, r21
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <vfprintf+0xe8>
    2e82:	98 36       	cpi	r25, 0x68	; 104
    2e84:	49 f4       	brne	.+18     	; 0x2e98 <vfprintf+0xfa>
    2e86:	f2 01       	movw	r30, r4
    2e88:	23 fd       	sbrc	r18, 3
    2e8a:	95 91       	lpm	r25, Z+
    2e8c:	23 ff       	sbrs	r18, 3
    2e8e:	91 91       	ld	r25, Z+
    2e90:	2f 01       	movw	r4, r30
    2e92:	99 23       	and	r25, r25
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <vfprintf+0xfa>
    2e96:	b8 cf       	rjmp	.-144    	; 0x2e08 <vfprintf+0x6a>
    2e98:	89 2f       	mov	r24, r25
    2e9a:	85 54       	subi	r24, 0x45	; 69
    2e9c:	83 30       	cpi	r24, 0x03	; 3
    2e9e:	18 f0       	brcs	.+6      	; 0x2ea6 <vfprintf+0x108>
    2ea0:	80 52       	subi	r24, 0x20	; 32
    2ea2:	83 30       	cpi	r24, 0x03	; 3
    2ea4:	38 f4       	brcc	.+14     	; 0x2eb4 <vfprintf+0x116>
    2ea6:	44 e0       	ldi	r20, 0x04	; 4
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	a4 0e       	add	r10, r20
    2eac:	b5 1e       	adc	r11, r21
    2eae:	5f e3       	ldi	r21, 0x3F	; 63
    2eb0:	59 83       	std	Y+1, r21	; 0x01
    2eb2:	0f c0       	rjmp	.+30     	; 0x2ed2 <vfprintf+0x134>
    2eb4:	93 36       	cpi	r25, 0x63	; 99
    2eb6:	31 f0       	breq	.+12     	; 0x2ec4 <vfprintf+0x126>
    2eb8:	93 37       	cpi	r25, 0x73	; 115
    2eba:	79 f0       	breq	.+30     	; 0x2eda <vfprintf+0x13c>
    2ebc:	93 35       	cpi	r25, 0x53	; 83
    2ebe:	09 f0       	breq	.+2      	; 0x2ec2 <vfprintf+0x124>
    2ec0:	56 c0       	rjmp	.+172    	; 0x2f6e <vfprintf+0x1d0>
    2ec2:	20 c0       	rjmp	.+64     	; 0x2f04 <vfprintf+0x166>
    2ec4:	f5 01       	movw	r30, r10
    2ec6:	80 81       	ld	r24, Z
    2ec8:	89 83       	std	Y+1, r24	; 0x01
    2eca:	42 e0       	ldi	r20, 0x02	; 2
    2ecc:	50 e0       	ldi	r21, 0x00	; 0
    2ece:	a4 0e       	add	r10, r20
    2ed0:	b5 1e       	adc	r11, r21
    2ed2:	61 01       	movw	r12, r2
    2ed4:	01 e0       	ldi	r16, 0x01	; 1
    2ed6:	10 e0       	ldi	r17, 0x00	; 0
    2ed8:	12 c0       	rjmp	.+36     	; 0x2efe <vfprintf+0x160>
    2eda:	f5 01       	movw	r30, r10
    2edc:	c0 80       	ld	r12, Z
    2ede:	d1 80       	ldd	r13, Z+1	; 0x01
    2ee0:	f6 fc       	sbrc	r15, 6
    2ee2:	03 c0       	rjmp	.+6      	; 0x2eea <vfprintf+0x14c>
    2ee4:	6f ef       	ldi	r22, 0xFF	; 255
    2ee6:	7f ef       	ldi	r23, 0xFF	; 255
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <vfprintf+0x150>
    2eea:	69 2d       	mov	r22, r9
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	42 e0       	ldi	r20, 0x02	; 2
    2ef0:	50 e0       	ldi	r21, 0x00	; 0
    2ef2:	a4 0e       	add	r10, r20
    2ef4:	b5 1e       	adc	r11, r21
    2ef6:	c6 01       	movw	r24, r12
    2ef8:	0e 94 b7 18 	call	0x316e	; 0x316e <strnlen>
    2efc:	8c 01       	movw	r16, r24
    2efe:	5f e7       	ldi	r21, 0x7F	; 127
    2f00:	f5 22       	and	r15, r21
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <vfprintf+0x18e>
    2f04:	f5 01       	movw	r30, r10
    2f06:	c0 80       	ld	r12, Z
    2f08:	d1 80       	ldd	r13, Z+1	; 0x01
    2f0a:	f6 fc       	sbrc	r15, 6
    2f0c:	03 c0       	rjmp	.+6      	; 0x2f14 <vfprintf+0x176>
    2f0e:	6f ef       	ldi	r22, 0xFF	; 255
    2f10:	7f ef       	ldi	r23, 0xFF	; 255
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <vfprintf+0x17a>
    2f14:	69 2d       	mov	r22, r9
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	42 e0       	ldi	r20, 0x02	; 2
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	a4 0e       	add	r10, r20
    2f1e:	b5 1e       	adc	r11, r21
    2f20:	c6 01       	movw	r24, r12
    2f22:	0e 94 ac 18 	call	0x3158	; 0x3158 <strnlen_P>
    2f26:	8c 01       	movw	r16, r24
    2f28:	50 e8       	ldi	r21, 0x80	; 128
    2f2a:	f5 2a       	or	r15, r21
    2f2c:	f3 fe       	sbrs	r15, 3
    2f2e:	07 c0       	rjmp	.+14     	; 0x2f3e <vfprintf+0x1a0>
    2f30:	1a c0       	rjmp	.+52     	; 0x2f66 <vfprintf+0x1c8>
    2f32:	80 e2       	ldi	r24, 0x20	; 32
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	b3 01       	movw	r22, r6
    2f38:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    2f3c:	ea 94       	dec	r14
    2f3e:	8e 2d       	mov	r24, r14
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	08 17       	cp	r16, r24
    2f44:	19 07       	cpc	r17, r25
    2f46:	a8 f3       	brcs	.-22     	; 0x2f32 <vfprintf+0x194>
    2f48:	0e c0       	rjmp	.+28     	; 0x2f66 <vfprintf+0x1c8>
    2f4a:	f6 01       	movw	r30, r12
    2f4c:	f7 fc       	sbrc	r15, 7
    2f4e:	85 91       	lpm	r24, Z+
    2f50:	f7 fe       	sbrs	r15, 7
    2f52:	81 91       	ld	r24, Z+
    2f54:	6f 01       	movw	r12, r30
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	b3 01       	movw	r22, r6
    2f5a:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    2f5e:	e1 10       	cpse	r14, r1
    2f60:	ea 94       	dec	r14
    2f62:	01 50       	subi	r16, 0x01	; 1
    2f64:	10 40       	sbci	r17, 0x00	; 0
    2f66:	01 15       	cp	r16, r1
    2f68:	11 05       	cpc	r17, r1
    2f6a:	79 f7       	brne	.-34     	; 0x2f4a <vfprintf+0x1ac>
    2f6c:	ea c0       	rjmp	.+468    	; 0x3142 <vfprintf+0x3a4>
    2f6e:	94 36       	cpi	r25, 0x64	; 100
    2f70:	11 f0       	breq	.+4      	; 0x2f76 <vfprintf+0x1d8>
    2f72:	99 36       	cpi	r25, 0x69	; 105
    2f74:	69 f5       	brne	.+90     	; 0x2fd0 <vfprintf+0x232>
    2f76:	f7 fe       	sbrs	r15, 7
    2f78:	08 c0       	rjmp	.+16     	; 0x2f8a <vfprintf+0x1ec>
    2f7a:	f5 01       	movw	r30, r10
    2f7c:	20 81       	ld	r18, Z
    2f7e:	31 81       	ldd	r19, Z+1	; 0x01
    2f80:	42 81       	ldd	r20, Z+2	; 0x02
    2f82:	53 81       	ldd	r21, Z+3	; 0x03
    2f84:	84 e0       	ldi	r24, 0x04	; 4
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0a c0       	rjmp	.+20     	; 0x2f9e <vfprintf+0x200>
    2f8a:	f5 01       	movw	r30, r10
    2f8c:	80 81       	ld	r24, Z
    2f8e:	91 81       	ldd	r25, Z+1	; 0x01
    2f90:	9c 01       	movw	r18, r24
    2f92:	44 27       	eor	r20, r20
    2f94:	37 fd       	sbrc	r19, 7
    2f96:	40 95       	com	r20
    2f98:	54 2f       	mov	r21, r20
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a8 0e       	add	r10, r24
    2fa0:	b9 1e       	adc	r11, r25
    2fa2:	9f e6       	ldi	r25, 0x6F	; 111
    2fa4:	f9 22       	and	r15, r25
    2fa6:	57 ff       	sbrs	r21, 7
    2fa8:	09 c0       	rjmp	.+18     	; 0x2fbc <vfprintf+0x21e>
    2faa:	50 95       	com	r21
    2fac:	40 95       	com	r20
    2fae:	30 95       	com	r19
    2fb0:	21 95       	neg	r18
    2fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb4:	4f 4f       	sbci	r20, 0xFF	; 255
    2fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb8:	e0 e8       	ldi	r30, 0x80	; 128
    2fba:	fe 2a       	or	r15, r30
    2fbc:	ca 01       	movw	r24, r20
    2fbe:	b9 01       	movw	r22, r18
    2fc0:	a1 01       	movw	r20, r2
    2fc2:	2a e0       	ldi	r18, 0x0A	; 10
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__ultoa_invert>
    2fca:	d8 2e       	mov	r13, r24
    2fcc:	d2 18       	sub	r13, r2
    2fce:	40 c0       	rjmp	.+128    	; 0x3050 <vfprintf+0x2b2>
    2fd0:	95 37       	cpi	r25, 0x75	; 117
    2fd2:	29 f4       	brne	.+10     	; 0x2fde <vfprintf+0x240>
    2fd4:	1f 2d       	mov	r17, r15
    2fd6:	1f 7e       	andi	r17, 0xEF	; 239
    2fd8:	2a e0       	ldi	r18, 0x0A	; 10
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	1d c0       	rjmp	.+58     	; 0x3018 <vfprintf+0x27a>
    2fde:	1f 2d       	mov	r17, r15
    2fe0:	19 7f       	andi	r17, 0xF9	; 249
    2fe2:	9f 36       	cpi	r25, 0x6F	; 111
    2fe4:	61 f0       	breq	.+24     	; 0x2ffe <vfprintf+0x260>
    2fe6:	90 37       	cpi	r25, 0x70	; 112
    2fe8:	20 f4       	brcc	.+8      	; 0x2ff2 <vfprintf+0x254>
    2fea:	98 35       	cpi	r25, 0x58	; 88
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <vfprintf+0x252>
    2fee:	ac c0       	rjmp	.+344    	; 0x3148 <vfprintf+0x3aa>
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <vfprintf+0x272>
    2ff2:	90 37       	cpi	r25, 0x70	; 112
    2ff4:	39 f0       	breq	.+14     	; 0x3004 <vfprintf+0x266>
    2ff6:	98 37       	cpi	r25, 0x78	; 120
    2ff8:	09 f0       	breq	.+2      	; 0x2ffc <vfprintf+0x25e>
    2ffa:	a6 c0       	rjmp	.+332    	; 0x3148 <vfprintf+0x3aa>
    2ffc:	04 c0       	rjmp	.+8      	; 0x3006 <vfprintf+0x268>
    2ffe:	28 e0       	ldi	r18, 0x08	; 8
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	0a c0       	rjmp	.+20     	; 0x3018 <vfprintf+0x27a>
    3004:	10 61       	ori	r17, 0x10	; 16
    3006:	14 fd       	sbrc	r17, 4
    3008:	14 60       	ori	r17, 0x04	; 4
    300a:	20 e1       	ldi	r18, 0x10	; 16
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <vfprintf+0x27a>
    3010:	14 fd       	sbrc	r17, 4
    3012:	16 60       	ori	r17, 0x06	; 6
    3014:	20 e1       	ldi	r18, 0x10	; 16
    3016:	32 e0       	ldi	r19, 0x02	; 2
    3018:	17 ff       	sbrs	r17, 7
    301a:	08 c0       	rjmp	.+16     	; 0x302c <vfprintf+0x28e>
    301c:	f5 01       	movw	r30, r10
    301e:	60 81       	ld	r22, Z
    3020:	71 81       	ldd	r23, Z+1	; 0x01
    3022:	82 81       	ldd	r24, Z+2	; 0x02
    3024:	93 81       	ldd	r25, Z+3	; 0x03
    3026:	44 e0       	ldi	r20, 0x04	; 4
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	08 c0       	rjmp	.+16     	; 0x303c <vfprintf+0x29e>
    302c:	f5 01       	movw	r30, r10
    302e:	80 81       	ld	r24, Z
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	bc 01       	movw	r22, r24
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	42 e0       	ldi	r20, 0x02	; 2
    303a:	50 e0       	ldi	r21, 0x00	; 0
    303c:	a4 0e       	add	r10, r20
    303e:	b5 1e       	adc	r11, r21
    3040:	a1 01       	movw	r20, r2
    3042:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__ultoa_invert>
    3046:	d8 2e       	mov	r13, r24
    3048:	d2 18       	sub	r13, r2
    304a:	8f e7       	ldi	r24, 0x7F	; 127
    304c:	f8 2e       	mov	r15, r24
    304e:	f1 22       	and	r15, r17
    3050:	f6 fe       	sbrs	r15, 6
    3052:	0b c0       	rjmp	.+22     	; 0x306a <vfprintf+0x2cc>
    3054:	5e ef       	ldi	r21, 0xFE	; 254
    3056:	f5 22       	and	r15, r21
    3058:	d9 14       	cp	r13, r9
    305a:	38 f4       	brcc	.+14     	; 0x306a <vfprintf+0x2cc>
    305c:	f4 fe       	sbrs	r15, 4
    305e:	07 c0       	rjmp	.+14     	; 0x306e <vfprintf+0x2d0>
    3060:	f2 fc       	sbrc	r15, 2
    3062:	05 c0       	rjmp	.+10     	; 0x306e <vfprintf+0x2d0>
    3064:	8f ee       	ldi	r24, 0xEF	; 239
    3066:	f8 22       	and	r15, r24
    3068:	02 c0       	rjmp	.+4      	; 0x306e <vfprintf+0x2d0>
    306a:	1d 2d       	mov	r17, r13
    306c:	01 c0       	rjmp	.+2      	; 0x3070 <vfprintf+0x2d2>
    306e:	19 2d       	mov	r17, r9
    3070:	f4 fe       	sbrs	r15, 4
    3072:	0d c0       	rjmp	.+26     	; 0x308e <vfprintf+0x2f0>
    3074:	fe 01       	movw	r30, r28
    3076:	ed 0d       	add	r30, r13
    3078:	f1 1d       	adc	r31, r1
    307a:	80 81       	ld	r24, Z
    307c:	80 33       	cpi	r24, 0x30	; 48
    307e:	19 f4       	brne	.+6      	; 0x3086 <vfprintf+0x2e8>
    3080:	99 ee       	ldi	r25, 0xE9	; 233
    3082:	f9 22       	and	r15, r25
    3084:	08 c0       	rjmp	.+16     	; 0x3096 <vfprintf+0x2f8>
    3086:	1f 5f       	subi	r17, 0xFF	; 255
    3088:	f2 fe       	sbrs	r15, 2
    308a:	05 c0       	rjmp	.+10     	; 0x3096 <vfprintf+0x2f8>
    308c:	03 c0       	rjmp	.+6      	; 0x3094 <vfprintf+0x2f6>
    308e:	8f 2d       	mov	r24, r15
    3090:	86 78       	andi	r24, 0x86	; 134
    3092:	09 f0       	breq	.+2      	; 0x3096 <vfprintf+0x2f8>
    3094:	1f 5f       	subi	r17, 0xFF	; 255
    3096:	0f 2d       	mov	r16, r15
    3098:	f3 fc       	sbrc	r15, 3
    309a:	14 c0       	rjmp	.+40     	; 0x30c4 <vfprintf+0x326>
    309c:	f0 fe       	sbrs	r15, 0
    309e:	0f c0       	rjmp	.+30     	; 0x30be <vfprintf+0x320>
    30a0:	1e 15       	cp	r17, r14
    30a2:	10 f0       	brcs	.+4      	; 0x30a8 <vfprintf+0x30a>
    30a4:	9d 2c       	mov	r9, r13
    30a6:	0b c0       	rjmp	.+22     	; 0x30be <vfprintf+0x320>
    30a8:	9d 2c       	mov	r9, r13
    30aa:	9e 0c       	add	r9, r14
    30ac:	91 1a       	sub	r9, r17
    30ae:	1e 2d       	mov	r17, r14
    30b0:	06 c0       	rjmp	.+12     	; 0x30be <vfprintf+0x320>
    30b2:	80 e2       	ldi	r24, 0x20	; 32
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	b3 01       	movw	r22, r6
    30b8:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    30bc:	1f 5f       	subi	r17, 0xFF	; 255
    30be:	1e 15       	cp	r17, r14
    30c0:	c0 f3       	brcs	.-16     	; 0x30b2 <vfprintf+0x314>
    30c2:	04 c0       	rjmp	.+8      	; 0x30cc <vfprintf+0x32e>
    30c4:	1e 15       	cp	r17, r14
    30c6:	10 f4       	brcc	.+4      	; 0x30cc <vfprintf+0x32e>
    30c8:	e1 1a       	sub	r14, r17
    30ca:	01 c0       	rjmp	.+2      	; 0x30ce <vfprintf+0x330>
    30cc:	ee 24       	eor	r14, r14
    30ce:	04 ff       	sbrs	r16, 4
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <vfprintf+0x352>
    30d2:	80 e3       	ldi	r24, 0x30	; 48
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	b3 01       	movw	r22, r6
    30d8:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    30dc:	02 ff       	sbrs	r16, 2
    30de:	1d c0       	rjmp	.+58     	; 0x311a <vfprintf+0x37c>
    30e0:	01 fd       	sbrc	r16, 1
    30e2:	03 c0       	rjmp	.+6      	; 0x30ea <vfprintf+0x34c>
    30e4:	88 e7       	ldi	r24, 0x78	; 120
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e c0       	rjmp	.+28     	; 0x3106 <vfprintf+0x368>
    30ea:	88 e5       	ldi	r24, 0x58	; 88
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0b c0       	rjmp	.+22     	; 0x3106 <vfprintf+0x368>
    30f0:	80 2f       	mov	r24, r16
    30f2:	86 78       	andi	r24, 0x86	; 134
    30f4:	91 f0       	breq	.+36     	; 0x311a <vfprintf+0x37c>
    30f6:	01 ff       	sbrs	r16, 1
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <vfprintf+0x360>
    30fa:	8b e2       	ldi	r24, 0x2B	; 43
    30fc:	01 c0       	rjmp	.+2      	; 0x3100 <vfprintf+0x362>
    30fe:	80 e2       	ldi	r24, 0x20	; 32
    3100:	f7 fc       	sbrc	r15, 7
    3102:	8d e2       	ldi	r24, 0x2D	; 45
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	b3 01       	movw	r22, r6
    3108:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    310c:	06 c0       	rjmp	.+12     	; 0x311a <vfprintf+0x37c>
    310e:	80 e3       	ldi	r24, 0x30	; 48
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	b3 01       	movw	r22, r6
    3114:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    3118:	9a 94       	dec	r9
    311a:	d9 14       	cp	r13, r9
    311c:	c0 f3       	brcs	.-16     	; 0x310e <vfprintf+0x370>
    311e:	da 94       	dec	r13
    3120:	f1 01       	movw	r30, r2
    3122:	ed 0d       	add	r30, r13
    3124:	f1 1d       	adc	r31, r1
    3126:	80 81       	ld	r24, Z
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	b3 01       	movw	r22, r6
    312c:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    3130:	dd 20       	and	r13, r13
    3132:	a9 f7       	brne	.-22     	; 0x311e <vfprintf+0x380>
    3134:	06 c0       	rjmp	.+12     	; 0x3142 <vfprintf+0x3a4>
    3136:	80 e2       	ldi	r24, 0x20	; 32
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	b3 01       	movw	r22, r6
    313c:	0e 94 c2 18 	call	0x3184	; 0x3184 <fputc>
    3140:	ea 94       	dec	r14
    3142:	ee 20       	and	r14, r14
    3144:	c1 f7       	brne	.-16     	; 0x3136 <vfprintf+0x398>
    3146:	43 ce       	rjmp	.-890    	; 0x2dce <vfprintf+0x30>
    3148:	f3 01       	movw	r30, r6
    314a:	66 81       	ldd	r22, Z+6	; 0x06
    314c:	77 81       	ldd	r23, Z+7	; 0x07
    314e:	cb 01       	movw	r24, r22
    3150:	2b 96       	adiw	r28, 0x0b	; 11
    3152:	e2 e1       	ldi	r30, 0x12	; 18
    3154:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__epilogue_restores__>

00003158 <strnlen_P>:
    3158:	fc 01       	movw	r30, r24
    315a:	05 90       	lpm	r0, Z+
    315c:	61 50       	subi	r22, 0x01	; 1
    315e:	70 40       	sbci	r23, 0x00	; 0
    3160:	01 10       	cpse	r0, r1
    3162:	d8 f7       	brcc	.-10     	; 0x315a <strnlen_P+0x2>
    3164:	80 95       	com	r24
    3166:	90 95       	com	r25
    3168:	8e 0f       	add	r24, r30
    316a:	9f 1f       	adc	r25, r31
    316c:	08 95       	ret

0000316e <strnlen>:
    316e:	fc 01       	movw	r30, r24
    3170:	61 50       	subi	r22, 0x01	; 1
    3172:	70 40       	sbci	r23, 0x00	; 0
    3174:	01 90       	ld	r0, Z+
    3176:	01 10       	cpse	r0, r1
    3178:	d8 f7       	brcc	.-10     	; 0x3170 <strnlen+0x2>
    317a:	80 95       	com	r24
    317c:	90 95       	com	r25
    317e:	8e 0f       	add	r24, r30
    3180:	9f 1f       	adc	r25, r31
    3182:	08 95       	ret

00003184 <fputc>:
    3184:	0f 93       	push	r16
    3186:	1f 93       	push	r17
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	8c 01       	movw	r16, r24
    318e:	eb 01       	movw	r28, r22
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	81 ff       	sbrs	r24, 1
    3194:	1b c0       	rjmp	.+54     	; 0x31cc <fputc+0x48>
    3196:	82 ff       	sbrs	r24, 2
    3198:	0d c0       	rjmp	.+26     	; 0x31b4 <fputc+0x30>
    319a:	2e 81       	ldd	r18, Y+6	; 0x06
    319c:	3f 81       	ldd	r19, Y+7	; 0x07
    319e:	8c 81       	ldd	r24, Y+4	; 0x04
    31a0:	9d 81       	ldd	r25, Y+5	; 0x05
    31a2:	28 17       	cp	r18, r24
    31a4:	39 07       	cpc	r19, r25
    31a6:	64 f4       	brge	.+24     	; 0x31c0 <fputc+0x3c>
    31a8:	e8 81       	ld	r30, Y
    31aa:	f9 81       	ldd	r31, Y+1	; 0x01
    31ac:	01 93       	st	Z+, r16
    31ae:	f9 83       	std	Y+1, r31	; 0x01
    31b0:	e8 83       	st	Y, r30
    31b2:	06 c0       	rjmp	.+12     	; 0x31c0 <fputc+0x3c>
    31b4:	e8 85       	ldd	r30, Y+8	; 0x08
    31b6:	f9 85       	ldd	r31, Y+9	; 0x09
    31b8:	80 2f       	mov	r24, r16
    31ba:	19 95       	eicall
    31bc:	89 2b       	or	r24, r25
    31be:	31 f4       	brne	.+12     	; 0x31cc <fputc+0x48>
    31c0:	8e 81       	ldd	r24, Y+6	; 0x06
    31c2:	9f 81       	ldd	r25, Y+7	; 0x07
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	9f 83       	std	Y+7, r25	; 0x07
    31c8:	8e 83       	std	Y+6, r24	; 0x06
    31ca:	02 c0       	rjmp	.+4      	; 0x31d0 <fputc+0x4c>
    31cc:	0f ef       	ldi	r16, 0xFF	; 255
    31ce:	1f ef       	ldi	r17, 0xFF	; 255
    31d0:	c8 01       	movw	r24, r16
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	1f 91       	pop	r17
    31d8:	0f 91       	pop	r16
    31da:	08 95       	ret

000031dc <__ultoa_invert>:
    31dc:	fa 01       	movw	r30, r20
    31de:	aa 27       	eor	r26, r26
    31e0:	28 30       	cpi	r18, 0x08	; 8
    31e2:	51 f1       	breq	.+84     	; 0x3238 <__ultoa_invert+0x5c>
    31e4:	20 31       	cpi	r18, 0x10	; 16
    31e6:	81 f1       	breq	.+96     	; 0x3248 <__ultoa_invert+0x6c>
    31e8:	e8 94       	clt
    31ea:	6f 93       	push	r22
    31ec:	6e 7f       	andi	r22, 0xFE	; 254
    31ee:	6e 5f       	subi	r22, 0xFE	; 254
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	8f 4f       	sbci	r24, 0xFF	; 255
    31f4:	9f 4f       	sbci	r25, 0xFF	; 255
    31f6:	af 4f       	sbci	r26, 0xFF	; 255
    31f8:	b1 e0       	ldi	r27, 0x01	; 1
    31fa:	3e d0       	rcall	.+124    	; 0x3278 <__ultoa_invert+0x9c>
    31fc:	b4 e0       	ldi	r27, 0x04	; 4
    31fe:	3c d0       	rcall	.+120    	; 0x3278 <__ultoa_invert+0x9c>
    3200:	67 0f       	add	r22, r23
    3202:	78 1f       	adc	r23, r24
    3204:	89 1f       	adc	r24, r25
    3206:	9a 1f       	adc	r25, r26
    3208:	a1 1d       	adc	r26, r1
    320a:	68 0f       	add	r22, r24
    320c:	79 1f       	adc	r23, r25
    320e:	8a 1f       	adc	r24, r26
    3210:	91 1d       	adc	r25, r1
    3212:	a1 1d       	adc	r26, r1
    3214:	6a 0f       	add	r22, r26
    3216:	71 1d       	adc	r23, r1
    3218:	81 1d       	adc	r24, r1
    321a:	91 1d       	adc	r25, r1
    321c:	a1 1d       	adc	r26, r1
    321e:	20 d0       	rcall	.+64     	; 0x3260 <__ultoa_invert+0x84>
    3220:	09 f4       	brne	.+2      	; 0x3224 <__ultoa_invert+0x48>
    3222:	68 94       	set
    3224:	3f 91       	pop	r19
    3226:	2a e0       	ldi	r18, 0x0A	; 10
    3228:	26 9f       	mul	r18, r22
    322a:	11 24       	eor	r1, r1
    322c:	30 19       	sub	r19, r0
    322e:	30 5d       	subi	r19, 0xD0	; 208
    3230:	31 93       	st	Z+, r19
    3232:	de f6       	brtc	.-74     	; 0x31ea <__ultoa_invert+0xe>
    3234:	cf 01       	movw	r24, r30
    3236:	08 95       	ret
    3238:	46 2f       	mov	r20, r22
    323a:	47 70       	andi	r20, 0x07	; 7
    323c:	40 5d       	subi	r20, 0xD0	; 208
    323e:	41 93       	st	Z+, r20
    3240:	b3 e0       	ldi	r27, 0x03	; 3
    3242:	0f d0       	rcall	.+30     	; 0x3262 <__ultoa_invert+0x86>
    3244:	c9 f7       	brne	.-14     	; 0x3238 <__ultoa_invert+0x5c>
    3246:	f6 cf       	rjmp	.-20     	; 0x3234 <__ultoa_invert+0x58>
    3248:	46 2f       	mov	r20, r22
    324a:	4f 70       	andi	r20, 0x0F	; 15
    324c:	40 5d       	subi	r20, 0xD0	; 208
    324e:	4a 33       	cpi	r20, 0x3A	; 58
    3250:	18 f0       	brcs	.+6      	; 0x3258 <__ultoa_invert+0x7c>
    3252:	49 5d       	subi	r20, 0xD9	; 217
    3254:	31 fd       	sbrc	r19, 1
    3256:	40 52       	subi	r20, 0x20	; 32
    3258:	41 93       	st	Z+, r20
    325a:	02 d0       	rcall	.+4      	; 0x3260 <__ultoa_invert+0x84>
    325c:	a9 f7       	brne	.-22     	; 0x3248 <__ultoa_invert+0x6c>
    325e:	ea cf       	rjmp	.-44     	; 0x3234 <__ultoa_invert+0x58>
    3260:	b4 e0       	ldi	r27, 0x04	; 4
    3262:	a6 95       	lsr	r26
    3264:	97 95       	ror	r25
    3266:	87 95       	ror	r24
    3268:	77 95       	ror	r23
    326a:	67 95       	ror	r22
    326c:	ba 95       	dec	r27
    326e:	c9 f7       	brne	.-14     	; 0x3262 <__ultoa_invert+0x86>
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	61 05       	cpc	r22, r1
    3274:	71 05       	cpc	r23, r1
    3276:	08 95       	ret
    3278:	9b 01       	movw	r18, r22
    327a:	ac 01       	movw	r20, r24
    327c:	0a 2e       	mov	r0, r26
    327e:	06 94       	lsr	r0
    3280:	57 95       	ror	r21
    3282:	47 95       	ror	r20
    3284:	37 95       	ror	r19
    3286:	27 95       	ror	r18
    3288:	ba 95       	dec	r27
    328a:	c9 f7       	brne	.-14     	; 0x327e <__ultoa_invert+0xa2>
    328c:	62 0f       	add	r22, r18
    328e:	73 1f       	adc	r23, r19
    3290:	84 1f       	adc	r24, r20
    3292:	95 1f       	adc	r25, r21
    3294:	a0 1d       	adc	r26, r0
    3296:	08 95       	ret

00003298 <__divmodhi4>:
    3298:	97 fb       	bst	r25, 7
    329a:	09 2e       	mov	r0, r25
    329c:	07 26       	eor	r0, r23
    329e:	0a d0       	rcall	.+20     	; 0x32b4 <__divmodhi4_neg1>
    32a0:	77 fd       	sbrc	r23, 7
    32a2:	04 d0       	rcall	.+8      	; 0x32ac <__divmodhi4_neg2>
    32a4:	0c d0       	rcall	.+24     	; 0x32be <__udivmodhi4>
    32a6:	06 d0       	rcall	.+12     	; 0x32b4 <__divmodhi4_neg1>
    32a8:	00 20       	and	r0, r0
    32aa:	1a f4       	brpl	.+6      	; 0x32b2 <__divmodhi4_exit>

000032ac <__divmodhi4_neg2>:
    32ac:	70 95       	com	r23
    32ae:	61 95       	neg	r22
    32b0:	7f 4f       	sbci	r23, 0xFF	; 255

000032b2 <__divmodhi4_exit>:
    32b2:	08 95       	ret

000032b4 <__divmodhi4_neg1>:
    32b4:	f6 f7       	brtc	.-4      	; 0x32b2 <__divmodhi4_exit>
    32b6:	90 95       	com	r25
    32b8:	81 95       	neg	r24
    32ba:	9f 4f       	sbci	r25, 0xFF	; 255
    32bc:	08 95       	ret

000032be <__udivmodhi4>:
    32be:	aa 1b       	sub	r26, r26
    32c0:	bb 1b       	sub	r27, r27
    32c2:	51 e1       	ldi	r21, 0x11	; 17
    32c4:	07 c0       	rjmp	.+14     	; 0x32d4 <__udivmodhi4_ep>

000032c6 <__udivmodhi4_loop>:
    32c6:	aa 1f       	adc	r26, r26
    32c8:	bb 1f       	adc	r27, r27
    32ca:	a6 17       	cp	r26, r22
    32cc:	b7 07       	cpc	r27, r23
    32ce:	10 f0       	brcs	.+4      	; 0x32d4 <__udivmodhi4_ep>
    32d0:	a6 1b       	sub	r26, r22
    32d2:	b7 0b       	sbc	r27, r23

000032d4 <__udivmodhi4_ep>:
    32d4:	88 1f       	adc	r24, r24
    32d6:	99 1f       	adc	r25, r25
    32d8:	5a 95       	dec	r21
    32da:	a9 f7       	brne	.-22     	; 0x32c6 <__udivmodhi4_loop>
    32dc:	80 95       	com	r24
    32de:	90 95       	com	r25
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	08 95       	ret

000032e6 <__prologue_saves__>:
    32e6:	2f 92       	push	r2
    32e8:	3f 92       	push	r3
    32ea:	4f 92       	push	r4
    32ec:	5f 92       	push	r5
    32ee:	6f 92       	push	r6
    32f0:	7f 92       	push	r7
    32f2:	8f 92       	push	r8
    32f4:	9f 92       	push	r9
    32f6:	af 92       	push	r10
    32f8:	bf 92       	push	r11
    32fa:	cf 92       	push	r12
    32fc:	df 92       	push	r13
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	ca 1b       	sub	r28, r26
    3310:	db 0b       	sbc	r29, r27
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	19 94       	eijmp

0000331e <__epilogue_restores__>:
    331e:	2a 88       	ldd	r2, Y+18	; 0x12
    3320:	39 88       	ldd	r3, Y+17	; 0x11
    3322:	48 88       	ldd	r4, Y+16	; 0x10
    3324:	5f 84       	ldd	r5, Y+15	; 0x0f
    3326:	6e 84       	ldd	r6, Y+14	; 0x0e
    3328:	7d 84       	ldd	r7, Y+13	; 0x0d
    332a:	8c 84       	ldd	r8, Y+12	; 0x0c
    332c:	9b 84       	ldd	r9, Y+11	; 0x0b
    332e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3330:	b9 84       	ldd	r11, Y+9	; 0x09
    3332:	c8 84       	ldd	r12, Y+8	; 0x08
    3334:	df 80       	ldd	r13, Y+7	; 0x07
    3336:	ee 80       	ldd	r14, Y+6	; 0x06
    3338:	fd 80       	ldd	r15, Y+5	; 0x05
    333a:	0c 81       	ldd	r16, Y+4	; 0x04
    333c:	1b 81       	ldd	r17, Y+3	; 0x03
    333e:	aa 81       	ldd	r26, Y+2	; 0x02
    3340:	b9 81       	ldd	r27, Y+1	; 0x01
    3342:	ce 0f       	add	r28, r30
    3344:	d1 1d       	adc	r29, r1
    3346:	0f b6       	in	r0, 0x3f	; 63
    3348:	f8 94       	cli
    334a:	de bf       	out	0x3e, r29	; 62
    334c:	0f be       	out	0x3f, r0	; 63
    334e:	cd bf       	out	0x3d, r28	; 61
    3350:	ed 01       	movw	r28, r26
    3352:	08 95       	ret
