
Assignment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800200  00003452  000034e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000013cd  008003a0  008003a0  00003686  2**0
                  ALLOC
  3 .debug_aranges 00000188  00000000  00000000  00003686  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000009fb  00000000  00000000  0000380e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033b9  00000000  00000000  00004209  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001041  00000000  00000000  000075c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002929  00000000  00000000  00008603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000af2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001540  00000000  00000000  0000b59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ef0  00000000  00000000  0000cadc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  0000d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 * Any interrupt ISR definition in the C code will
 * overwrite these default definitions.
 */
void __vectors (void) __attribute__ ((naked)) __attribute__ ((section (".vectors")));
void __vectors (void)
{
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <init2>
    asm("jmp        __init\n"::);

    vector("__vector_1");
       4:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_1>
    vector("__vector_2");
       8:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_3");
       c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_4");
      10:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_5");
      14:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_6");
      18:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_7");
      1c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_8");
      20:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_9");
      24:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_10");
      28:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_11");
      2c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_12");
      30:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_13");
      34:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_14");
      38:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_15");
      3c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_16");
      40:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_17");
      44:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_17>
    vector("__vector_18");
      48:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_19");
      4c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_20");
      50:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_21");
      54:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_22");
      58:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_23");
      5c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_24");
      60:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_25");
      64:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__vector_25>
    vector("__vector_26");
      68:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_27");
      6c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_28");
      70:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_29");
      74:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_30");
      78:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_31");
      7c:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_31>
    vector("__vector_32");
      80:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_33");
      84:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_34");
      88:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_35");
      8c:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_36");
      90:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>
    vector("__vector_37");
      94:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_not_set>

00000098 <init2>:
}
      98:	11 24       	eor	r1, r1
void init2 (void) __attribute__ ((naked)) __attribute__ ((section (".init2")));
void init2 (void)
{
    asm("clr   " zero_reg "\n\t"::);

    SREG = 0;
      9a:	1f be       	out	0x3f, r1	; 63
    SP = RAMEND;
      9c:	8f ef       	ldi	r24, 0xFF	; 255
      9e:	91 e2       	ldi	r25, 0x21	; 33
      a0:	9e bf       	out	0x3e, r25	; 62
      a2:	8d bf       	out	0x3d, r24	; 61

000000a4 <__do_copy_data>:
}
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b2 e0       	ldi	r27, 0x02	; 2
      aa:	e2 e5       	ldi	r30, 0x52	; 82
      ac:	f4 e3       	ldi	r31, 0x34	; 52
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 3a       	cpi	r26, 0xA0	; 160
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	17 e1       	ldi	r17, 0x17	; 23
      c0:	a0 ea       	ldi	r26, 0xA0	; 160
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ad 36       	cpi	r26, 0x6D	; 109
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <init9>:
 * The last of the init functions.
 * Usually this would be the jump to "main()"
 */
void init9 (void) __attribute__ ((naked)) __attribute__ ((section (".init9")));
void init9 (void)
{
      ce:	0e 94 85 0c 	call	0x190a	; 0x190a <OS_Init>
      d2:	ff cf       	rjmp	.-2      	; 0xd2 <init9+0x4>

000000d4 <main>:
		#endif
	}
}

int main(void)
{
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
	clock8MHz();
      d8:	e1 e6       	ldi	r30, 0x61	; 97
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 e8       	ldi	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
      e0:	10 82       	st	Z, r1

	#if PROFILECODE
	InitializeLogicAnalyzerProfiler();
      e2:	87 b1       	in	r24, 0x07	; 7
      e4:	8f ef       	ldi	r24, 0xFF	; 255
      e6:	87 b9       	out	0x07, r24	; 7
	#endif

    // Set up the UART
	uart_init(UART_38400);
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 65 10 	call	0x20ca	; 0x20ca <uart_init>
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "HELLO WORLD: starts echoing\n\r");
      ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x1c>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <main+0x1e>
      f2:	ed b7       	in	r30, 0x3d	; 61
      f4:	fe b7       	in	r31, 0x3e	; 62
      f6:	31 96       	adiw	r30, 0x01	; 1
      f8:	0c ed       	ldi	r16, 0xDC	; 220
      fa:	16 e1       	ldi	r17, 0x16	; 22
      fc:	ad b7       	in	r26, 0x3d	; 61
      fe:	be b7       	in	r27, 0x3e	; 62
     100:	12 96       	adiw	r26, 0x02	; 2
     102:	1c 93       	st	X, r17
     104:	0e 93       	st	-X, r16
     106:	11 97       	sbiw	r26, 0x01	; 1
     108:	81 e5       	ldi	r24, 0x51	; 81
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	93 83       	std	Z+3, r25	; 0x03
     10e:	82 83       	std	Z+2, r24	; 0x02
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	92 e0       	ldi	r25, 0x02	; 2
     114:	95 83       	std	Z+5, r25	; 0x05
     116:	84 83       	std	Z+4, r24	; 0x04
     118:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <snprintf>
	uart_putstr(ASS_UART_BUFF);
     11c:	8d b7       	in	r24, 0x3d	; 61
     11e:	9e b7       	in	r25, 0x3e	; 62
     120:	06 96       	adiw	r24, 0x06	; 6
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	9e bf       	out	0x3e, r25	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	8d bf       	out	0x3d, r24	; 61
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 56 10 	call	0x20ac	; 0x20ac <uart_putstr>
      
	// Ass2_Task_Initialization();
	Task_Create( Ass2_Task_Initialization, LOCALIZATIONSTATE_Initialization, SYSTEM, LOCALIZATIONSTATE_Initialization); 
     132:	88 eb       	ldi	r24, 0xB8	; 184
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	61 e0       	ldi	r22, 0x01	; 1
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	43 e0       	ldi	r20, 0x03	; 3
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	21 e0       	ldi	r18, 0x01	; 1
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Task_Create>
	
}
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	1f 91       	pop	r17
     14c:	0f 91       	pop	r16
     14e:	08 95       	ret

00000150 <Ass2_Task_CalculateAndReport>:
		Task_Next();
	}
}

void Ass2_Task_CalculateAndReport()
{
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     158:	0a ef       	ldi	r16, 0xFA	; 250
     15a:	10 e0       	ldi	r17, 0x00	; 0
	for(;;)
	{
		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample7();
     15c:	c9 e1       	ldi	r28, 0x19	; 25
     15e:	d0 e0       	ldi	r29, 0x00	; 0
     160:	46 9a       	sbi	0x08, 6	; 8
     162:	c8 01       	movw	r24, r16
     164:	01 97       	sbiw	r24, 0x01	; 1
     166:	f1 f7       	brne	.-4      	; 0x164 <Ass2_Task_CalculateAndReport+0x14>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample7();
     168:	46 98       	cbi	0x08, 6	; 8
		EnableProfileSample1();
		EnableProfileSample2();
		#endif

		// Hack
		ComStats.Percent = 0;
     16a:	10 92 37 17 	sts	0x1737, r1
     16e:	10 92 36 17 	sts	0x1736, r1
		ServoSetDirection( &SonarDirectionServo, &ComStats );
     172:	8a ec       	ldi	r24, 0xCA	; 202
     174:	96 e1       	ldi	r25, 0x16	; 22
     176:	6d e2       	ldi	r22, 0x2D	; 45
     178:	77 e1       	ldi	r23, 0x17	; 23
     17a:	0e 94 00 04 	call	0x800	; 0x800 <ServoSetDirection>
		DisableProfileSample2();
		EnableProfileSample3();
		#endif

		// Get the shortest distance and the associated direction
		StatisticsCalculateDirectionAndDistance( &ComStats );
     17e:	8d e2       	ldi	r24, 0x2D	; 45
     180:	97 e1       	ldi	r25, 0x17	; 23
     182:	0e 94 41 04 	call	0x882	; 0x882 <StatisticsCalculateDirectionAndDistance>
		EnableProfileSample1();
		EnableProfileSample2();
		#endif

		// Report the calculated beacon direction and distance
		ServoSetDirection( &SonarDirectionServo, &ComStats );
     186:	8a ec       	ldi	r24, 0xCA	; 202
     188:	96 e1       	ldi	r25, 0x16	; 22
     18a:	6d e2       	ldi	r22, 0x2D	; 45
     18c:	77 e1       	ldi	r23, 0x17	; 23
     18e:	0e 94 00 04 	call	0x800	; 0x800 <ServoSetDirection>
		#if PROFILECODE && PROFILE_REPORT 
		DisableProfileSample2();
		EnableProfileSample3();
		#endif

		CommunicationReportDistance( &ComStats );
     192:	8d e2       	ldi	r24, 0x2D	; 45
     194:	97 e1       	ldi	r25, 0x17	; 23
     196:	0e 94 49 02 	call	0x492	; 0x492 <CommunicationReportDistance>
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	9f ef       	ldi	r25, 0xFF	; 255
     19e:	fe 01       	movw	r30, r28
     1a0:	31 97       	sbiw	r30, 0x01	; 1
     1a2:	f1 f7       	brne	.-4      	; 0x1a0 <Ass2_Task_CalculateAndReport+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a6:	d9 f7       	brne	.-10     	; 0x19e <Ass2_Task_CalculateAndReport+0x4e>
     1a8:	db cf       	rjmp	.-74     	; 0x160 <Ass2_Task_CalculateAndReport+0x10>

000001aa <Ass2_Task_UpdateStatistics>:
		Task_Next();
	}
}

void Ass2_Task_UpdateStatistics()
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	ca ef       	ldi	r28, 0xFA	; 250
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;)
    {
		// If we are done with the periodic states
		// return so this process can be killed
		if( ReportingOutcome )
     1b2:	80 91 a0 03 	lds	r24, 0x03A0
     1b6:	90 91 a1 03 	lds	r25, 0x03A1
     1ba:	89 2b       	or	r24, r25
     1bc:	69 f4       	brne	.+26     	; 0x1d8 <Ass2_Task_UpdateStatistics+0x2e>
		{
			return;
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample6();
     1be:	45 9a       	sbi	0x08, 5	; 8
     1c0:	ce 01       	movw	r24, r28
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Ass2_Task_UpdateStatistics+0x18>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample6();
     1c6:	45 98       	cbi	0x08, 5	; 8
		EnableProfileSample2();
		#endif
		*/

		// Add this new sample point to the statistics pool
		StatisticsAddNewSample( &ComStats );
     1c8:	8d e2       	ldi	r24, 0x2D	; 45
     1ca:	97 e1       	ldi	r25, 0x17	; 23
     1cc:	0e 94 4f 04 	call	0x89e	; 0x89e <StatisticsAddNewSample>
		DisableProfileSample1();
		#endif
		*/

		#if PROFILECODE && PROFILE_STATES
		DisableProfileSample6();
     1d0:	45 98       	cbi	0x08, 5	; 8
		#endif

		Task_Next();
     1d2:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Task_Next>
     1d6:	ed cf       	rjmp	.-38     	; 0x1b2 <Ass2_Task_UpdateStatistics+0x8>
	}
}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <Ass2_Task_GetSonarResponse>:
		Task_Next();
	}
}

void Ass2_Task_GetSonarResponse()
{
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	ca ef       	ldi	r28, 0xFA	; 250
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;)
    {
		// If we are done with the periodic states
		// return so this process can be killed
		if( ReportingOutcome )
     1e6:	80 91 a0 03 	lds	r24, 0x03A0
     1ea:	90 91 a1 03 	lds	r25, 0x03A1
     1ee:	89 2b       	or	r24, r25
     1f0:	b9 f4       	brne	.+46     	; 0x220 <Ass2_Task_GetSonarResponse+0x42>
		{
			return;
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample5();
     1f2:	44 9a       	sbi	0x08, 4	; 8
     1f4:	ce 01       	movw	r24, r28
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Ass2_Task_GetSonarResponse+0x18>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample5();
     1fa:	44 98       	cbi	0x08, 4	; 8
		EnableProfileSample1();
		#endif
		*/

		// Check for sonar response
		if( 0 != bPINGRecieved )
     1fc:	80 91 39 17 	lds	r24, 0x1739
     200:	90 91 3a 17 	lds	r25, 0x173A
     204:	89 2b       	or	r24, r25
     206:	41 f0       	breq	.+16     	; 0x218 <Ass2_Task_GetSonarResponse+0x3a>
		{
		
			// According to the docs, the sonar device will 
			// internally timeout after 36ms anyways

			if( CommunicationReceivedSonarResponse() )
     208:	0e 94 24 03 	call	0x648	; 0x648 <CommunicationReceivedSonarResponse>
     20c:	89 2b       	or	r24, r25
     20e:	21 f0       	breq	.+8      	; 0x218 <Ass2_Task_GetSonarResponse+0x3a>
				EnableProfileSample2();
				#endif
				*/
				// Get the communication statistics and go to the
				// update statistics state
				CommunicationGetResponseStatistics( &ComStats );
     210:	8d e2       	ldi	r24, 0x2D	; 45
     212:	97 e1       	ldi	r25, 0x17	; 23
     214:	0e 94 c3 02 	call	0x586	; 0x586 <CommunicationGetResponseStatistics>
		DisableProfileSample1();
		#endif
		*/

		#if PROFILECODE && PROFILE_STATES
		DisableProfileSample5();
     218:	44 98       	cbi	0x08, 4	; 8
		#endif

		Task_Next();
     21a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Task_Next>
     21e:	e3 cf       	rjmp	.-58     	; 0x1e6 <Ass2_Task_GetSonarResponse+0x8>
	}
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <Ass2_Task_GetPINGResponse>:
		Task_Next();
	}
}

void Ass2_Task_GetPINGResponse()
{
     226:	cf 92       	push	r12
     228:	df 92       	push	r13
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	9a ef       	ldi	r25, 0xFA	; 250
     238:	c9 2e       	mov	r12, r25
     23a:	d1 2c       	mov	r13, r1
				{
					SeekState = LOCALIZATIONSTATE_SendRequest;
				}
				else
				{
					SeekState = LOCALIZATIONSTATE_UpdateSweep;
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	e8 2e       	mov	r14, r24
     240:	f1 2c       	mov	r15, r1
			// Check wireless response for a timeout
			if( CommunicationPINGTimeout() )
			{
				if( 0 == CommunicationPingUpdateRetryCount() )
				{
					SeekState = LOCALIZATIONSTATE_SendRequest;
     242:	03 e0       	ldi	r16, 0x03	; 3
     244:	10 e0       	ldi	r17, 0x00	; 0
		*/

		// Check for sonar response
		if( CommuncationReceivedPING() )
		{
			bPINGRecieved = 1;		
     246:	c1 e0       	ldi	r28, 0x01	; 1
     248:	d0 e0       	ldi	r29, 0x00	; 0
{
	for(;;)
    {
		// If we are done with the periodic states
		// return so this process can be killed
		if( ReportingOutcome )
     24a:	80 91 a0 03 	lds	r24, 0x03A0
     24e:	90 91 a1 03 	lds	r25, 0x03A1
     252:	89 2b       	or	r24, r25
     254:	19 f5       	brne	.+70     	; 0x29c <Ass2_Task_GetPINGResponse+0x76>
		{
			return;
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample4();
     256:	43 9a       	sbi	0x08, 3	; 8
     258:	c6 01       	movw	r24, r12
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <Ass2_Task_GetPINGResponse+0x34>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample4();
     25e:	43 98       	cbi	0x08, 3	; 8
		EnableProfileSample8();
		#endif
		*/

		// Check for sonar response
		if( CommuncationReceivedPING() )
     260:	0e 94 2f 03 	call	0x65e	; 0x65e <CommuncationReceivedPING>
     264:	89 2b       	or	r24, r25
     266:	29 f0       	breq	.+10     	; 0x272 <Ass2_Task_GetPINGResponse+0x4c>
		{
			bPINGRecieved = 1;		
     268:	d0 93 3a 17 	sts	0x173A, r29
     26c:	c0 93 39 17 	sts	0x1739, r28
     270:	11 c0       	rjmp	.+34     	; 0x294 <Ass2_Task_GetPINGResponse+0x6e>
			EnableProfileSample1();  // Needs to be disabled in the call
			#endif
			*/

			// Check wireless response for a timeout
			if( CommunicationPINGTimeout() )
     272:	0e 94 0f 02 	call	0x41e	; 0x41e <CommunicationPINGTimeout>
     276:	89 2b       	or	r24, r25
     278:	69 f0       	breq	.+26     	; 0x294 <Ass2_Task_GetPINGResponse+0x6e>
			{
				if( 0 == CommunicationPingUpdateRetryCount() )
     27a:	0e 94 28 02 	call	0x450	; 0x450 <CommunicationPingUpdateRetryCount>
     27e:	89 2b       	or	r24, r25
     280:	29 f4       	brne	.+10     	; 0x28c <Ass2_Task_GetPINGResponse+0x66>
				{
					SeekState = LOCALIZATIONSTATE_SendRequest;
     282:	10 93 2b 02 	sts	0x022B, r17
     286:	00 93 2a 02 	sts	0x022A, r16
     28a:	04 c0       	rjmp	.+8      	; 0x294 <Ass2_Task_GetPINGResponse+0x6e>
				}
				else
				{
					SeekState = LOCALIZATIONSTATE_UpdateSweep;
     28c:	f0 92 2b 02 	sts	0x022B, r15
     290:	e0 92 2a 02 	sts	0x022A, r14
		DisableProfileSample1();
		#endif
		*/

		#if PROFILECODE && PROFILE_STATES
		DisableProfileSample4();
     294:	43 98       	cbi	0x08, 3	; 8
		#endif
	
		Task_Next();
     296:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Task_Next>
     29a:	d7 cf       	rjmp	.-82     	; 0x24a <Ass2_Task_GetPINGResponse+0x24>
	}
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	df 90       	pop	r13
     2aa:	cf 90       	pop	r12
     2ac:	08 95       	ret

000002ae <Ass2_Task_SendRequest>:
		Task_Next();
	}
}

void Ass2_Task_SendRequest()
{
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	ca ef       	ldi	r28, 0xFA	; 250
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
	for(;;)
    {
		// If we are done with the periodic states
		// return so this process can be killed
		if( ReportingOutcome )
     2b6:	80 91 a0 03 	lds	r24, 0x03A0
     2ba:	90 91 a1 03 	lds	r25, 0x03A1
     2be:	89 2b       	or	r24, r25
     2c0:	79 f4       	brne	.+30     	; 0x2e0 <Ass2_Task_SendRequest+0x32>
		{
			return;
		}

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample3();
     2c2:	42 9a       	sbi	0x08, 2	; 8
     2c4:	ce 01       	movw	r24, r28
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <Ass2_Task_SendRequest+0x18>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample3();
     2ca:	42 98       	cbi	0x08, 2	; 8
		#if PROFILECODE && PROFILE_AVR 
		EnableProfileSample1();  // Needs to be disabled in the call
		#endif
		*/
		// Send the request for a ping
		CommunicationSendTriggerMessage();
     2cc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <CommunicationSendTriggerMessage>
		bPINGRecieved = 0;
     2d0:	10 92 3a 17 	sts	0x173A, r1
     2d4:	10 92 39 17 	sts	0x1739, r1
		DisableProfileSample1();
		#endif
		*/

		#if PROFILECODE && PROFILE_STATES
		DisableProfileSample3();
     2d8:	42 98       	cbi	0x08, 2	; 8
		#endif

		Task_Next();
     2da:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Task_Next>
     2de:	eb cf       	rjmp	.-42     	; 0x2b6 <Ass2_Task_SendRequest+0x8>
	}
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <Ass2_Task_UpdateSweep>:
	DisableProfileSample1();
	#endif
}

void Ass2_Task_UpdateSweep()
{
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	0a ef       	ldi	r16, 0xFA	; 250
     2f0:	10 e0       	ldi	r17, 0x00	; 0
			*/
		}	
		else
		{
			// Set process to REPORTING
			ReportingOutcome = 1;
     2f2:	c1 e0       	ldi	r28, 0x01	; 1
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
void Ass2_Task_UpdateSweep()
{
	for(;;)
    {
		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample2();
     2f6:	41 9a       	sbi	0x08, 1	; 8
     2f8:	c8 01       	movw	r24, r16
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <Ass2_Task_UpdateSweep+0x14>
		#endif

		#if PROFILECODE && PROFILE_STATES
		_delay_ms( 1 );
		DisableProfileSample2();
     2fe:	41 98       	cbi	0x08, 1	; 8
		#if PROFILECODE && PROFILE_UPDATESWEEP 
		EnableProfileSample1();
		#endif
		*/

		StatisticsResetSample( &ComStats );
     300:	8d e2       	ldi	r24, 0x2D	; 45
     302:	97 e1       	ldi	r25, 0x17	; 23
     304:	0e 94 30 04 	call	0x860	; 0x860 <StatisticsResetSample>

		if( 0 == SweepComplete )
     308:	80 91 a2 03 	lds	r24, 0x03A2
     30c:	90 91 a3 03 	lds	r25, 0x03A3
     310:	89 2b       	or	r24, r25
     312:	89 f4       	brne	.+34     	; 0x336 <Ass2_Task_UpdateSweep+0x50>
			CommunicationPingResetRetryCount();
			DisableProfileSample4();
			#else
			*/
			// Redirect the servo and attempt to communicate
			SweepComplete = ServoUpdateSweepPosition( &ComStats );
     314:	8d e2       	ldi	r24, 0x2D	; 45
     316:	97 e1       	ldi	r25, 0x17	; 23
     318:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <ServoUpdateSweepPosition>
     31c:	90 93 a3 03 	sts	0x03A3, r25
     320:	80 93 a2 03 	sts	0x03A2, r24
			ServoSetDirection( &SonarDirectionServo, &ComStats );
     324:	8a ec       	ldi	r24, 0xCA	; 202
     326:	96 e1       	ldi	r25, 0x16	; 22
     328:	6d e2       	ldi	r22, 0x2D	; 45
     32a:	77 e1       	ldi	r23, 0x17	; 23
     32c:	0e 94 00 04 	call	0x800	; 0x800 <ServoSetDirection>
			CommunicationPingResetRetryCount();
     330:	0e 94 23 02 	call	0x446	; 0x446 <CommunicationPingResetRetryCount>
     334:	04 c0       	rjmp	.+8      	; 0x33e <Ass2_Task_UpdateSweep+0x58>
			*/
		}	
		else
		{
			// Set process to REPORTING
			ReportingOutcome = 1;
     336:	d0 93 a1 03 	sts	0x03A1, r29
     33a:	c0 93 a0 03 	sts	0x03A0, r28
		}

		// If we are done with the periodic states
		// return so this process can be killed
		if( ReportingOutcome )
     33e:	80 91 a0 03 	lds	r24, 0x03A0
     342:	90 91 a1 03 	lds	r25, 0x03A1
     346:	89 2b       	or	r24, r25
     348:	79 f0       	breq	.+30     	; 0x368 <Ass2_Task_UpdateSweep+0x82>
		{
			Task_Create( Ass2_Task_CalculateAndReport, LOCALIZATIONSTATE_Report, RR, LOCALIZATIONSTATE_Report); 
     34a:	88 ea       	ldi	r24, 0xA8	; 168
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	68 e0       	ldi	r22, 0x08	; 8
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	41 e0       	ldi	r20, 0x01	; 1
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	28 e0       	ldi	r18, 0x08	; 8
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Task_Create>
		DisableProfileSample2();
		#endif

		Task_Next();
	}
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	08 95       	ret
		DisableProfileSample1();
		#endif
		*/

		#if PROFILECODE && PROFILE_STATES
		DisableProfileSample2();
     368:	41 98       	cbi	0x08, 1	; 8
		#endif

		Task_Next();
     36a:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <Task_Next>
     36e:	c3 cf       	rjmp	.-122    	; 0x2f6 <Ass2_Task_UpdateSweep+0x10>

00000370 <Ass2_Task_Initialization>:
void Ass2_Task_UpdateStatistics();

void Ass2_Task_CalculateAndReport();

void Ass2_Task_Initialization()
{
     370:	1f 93       	push	r17
	#if PROFILECODE && PROFILE_STATES
	EnableProfileSample1();
     372:	40 9a       	sbi	0x08, 0	; 8
	SweepComplete = 0;

	#else
	*/

	int sreg = SREG;
     374:	1f b7       	in	r17, 0x3f	; 63
	cli();
     376:	f8 94       	cli

	
	// Initialize all necessary states
	InitializeServoController( &SonarDirectionServo );
     378:	8a ec       	ldi	r24, 0xCA	; 202
     37a:	96 e1       	ldi	r25, 0x16	; 22
     37c:	0e 94 06 04 	call	0x80c	; 0x80c <InitializeServoController>
	InitializeCommunication( station_addr, remote_addr );
     380:	8c e2       	ldi	r24, 0x2C	; 44
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	61 e3       	ldi	r22, 0x31	; 49
     386:	72 e0       	ldi	r23, 0x02	; 2
     388:	0e 94 8b 03 	call	0x716	; 0x716 <InitializeCommunication>
	StatisticsInitialize();
     38c:	0e 94 23 04 	call	0x846	; 0x846 <StatisticsInitialize>

	ServoStartSweep();
     390:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <ServoStartSweep>
	SweepComplete = 0;
     394:	10 92 a3 03 	sts	0x03A3, r1
     398:	10 92 a2 03 	sts	0x03A2, r1
	
	/*
	#endif
	*/
	Task_Create( Ass2_Task_UpdateSweep, LOCALIZATIONSTATE_UpdateSweep, PERIODIC, LOCALIZATIONSTATE_UpdateSweep); 
     39c:	83 e7       	ldi	r24, 0x73	; 115
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	62 e0       	ldi	r22, 0x02	; 2
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	42 e0       	ldi	r20, 0x02	; 2
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	22 e0       	ldi	r18, 0x02	; 2
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Task_Create>
	Task_Create( Ass2_Task_SendRequest, LOCALIZATIONSTATE_SendRequest, PERIODIC, LOCALIZATIONSTATE_SendRequest);
     3b0:	87 e5       	ldi	r24, 0x57	; 87
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	63 e0       	ldi	r22, 0x03	; 3
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	42 e0       	ldi	r20, 0x02	; 2
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	23 e0       	ldi	r18, 0x03	; 3
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Task_Create>
	Task_Create( Ass2_Task_GetPINGResponse, LOCALIZATIONSTATE_GetPINGResponse, PERIODIC, LOCALIZATIONSTATE_GetPINGResponse);
     3c4:	83 e1       	ldi	r24, 0x13	; 19
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	64 e0       	ldi	r22, 0x04	; 4
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	42 e0       	ldi	r20, 0x02	; 2
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	24 e0       	ldi	r18, 0x04	; 4
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Task_Create>
	Task_Create( Ass2_Task_GetSonarResponse, LOCALIZATIONSTATE_GetSonarResponse, PERIODIC, LOCALIZATIONSTATE_GetSonarResponse);
     3d8:	8f ee       	ldi	r24, 0xEF	; 239
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	65 e0       	ldi	r22, 0x05	; 5
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	42 e0       	ldi	r20, 0x02	; 2
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	25 e0       	ldi	r18, 0x05	; 5
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Task_Create>
	Task_Create( Ass2_Task_UpdateStatistics, LOCALIZATIONSTATE_UpdateStatistics, PERIODIC, LOCALIZATIONSTATE_UpdateStatistics);
     3ec:	85 ed       	ldi	r24, 0xD5	; 213
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	66 e0       	ldi	r22, 0x06	; 6
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	42 e0       	ldi	r20, 0x02	; 2
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	26 e0       	ldi	r18, 0x06	; 6
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Task_Create>

	SREG = sreg;
     400:	1f bf       	out	0x3f, r17	; 63
	DisableProfileSample1();
	#endif
	*/

	#if PROFILECODE && PROFILE_STATES
	DisableProfileSample1();
     402:	40 98       	cbi	0x08, 0	; 8
	#endif
}
     404:	1f 91       	pop	r17
     406:	08 95       	ret

00000408 <ResetMessageClock>:

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     408:	10 92 a5 03 	sts	0x03A5, r1
     40c:	10 92 a4 03 	sts	0x03A4, r1

	// Reset the hardware clock
}
     410:	08 95       	ret

00000412 <GetMessageClock>:

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     412:	20 91 a4 03 	lds	r18, 0x03A4
     416:	30 91 a5 03 	lds	r19, 0x03A5
}
     41a:	c9 01       	movw	r24, r18
     41c:	08 95       	ret

0000041e <CommunicationPINGTimeout>:
{
	#if PROFILECODE && PROFILE_AVR 
	DisableProfileSample1();  // Needs to be disabled in the call
	#endif

	if( 0 == PINGReceivedFlag )
     41e:	80 91 67 17 	lds	r24, 0x1767
     422:	88 23       	and	r24, r24
     424:	19 f0       	breq	.+6      	; 0x42c <CommunicationPINGTimeout+0xe>
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	0b c0       	rjmp	.+22     	; 0x442 <CommunicationPINGTimeout+0x24>

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     42c:	80 91 a4 03 	lds	r24, 0x03A4
     430:	90 91 a5 03 	lds	r25, 0x03A5
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	81 52       	subi	r24, 0x21	; 33
     43a:	9e 44       	sbci	r25, 0x4E	; 78
     43c:	10 f0       	brcs	.+4      	; 0x442 <CommunicationPINGTimeout+0x24>
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	30 e0       	ldi	r19, 0x00	; 0
			return 1;
		}
	}
	  
	return 0;  /// Currently wait indefinately, todo: add a timeout
}
     442:	c9 01       	movw	r24, r18
     444:	08 95       	ret

00000446 <CommunicationPingResetRetryCount>:

void CommunicationPingResetRetryCount()
{
	TimeoutCounter = 0;
     446:	10 92 69 17 	sts	0x1769, r1
     44a:	10 92 68 17 	sts	0x1768, r1
}
     44e:	08 95       	ret

00000450 <CommunicationPingUpdateRetryCount>:

#define PINGRETRYCOUNT 0

int CommunicationPingUpdateRetryCount()
{
	if( TimeoutCounter<=PINGRETRYCOUNT )
     450:	80 91 68 17 	lds	r24, 0x1768
     454:	90 91 69 17 	lds	r25, 0x1769
     458:	18 16       	cp	r1, r24
     45a:	19 06       	cpc	r1, r25
     45c:	1c f4       	brge	.+6      	; 0x464 <CommunicationPingUpdateRetryCount+0x14>
     45e:	21 e0       	ldi	r18, 0x01	; 1
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	0b c0       	rjmp	.+22     	; 0x47a <CommunicationPingUpdateRetryCount+0x2a>
	{
		TimeoutCounter++;
     464:	80 91 68 17 	lds	r24, 0x1768
     468:	90 91 69 17 	lds	r25, 0x1769
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	90 93 69 17 	sts	0x1769, r25
     472:	80 93 68 17 	sts	0x1768, r24
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
		return 0;
	}

	return 1;
}
     47a:	c9 01       	movw	r24, r18
     47c:	08 95       	ret

0000047e <radio_rxhandler>:
{
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample8();
	#endif

	PINGReceivedFlag = 1;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 67 17 	sts	0x1767, r24
	SONARReceivedFlag = 0;
     484:	10 92 5b 17 	sts	0x175B, r1

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     488:	10 92 a5 03 	sts	0x03A5, r1
     48c:	10 92 a4 03 	sts	0x03A4, r1
	ResetMessageClock();

	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample8();
	#endif
}
     490:	08 95       	ret

00000492 <CommunicationReportDistance>:
	uart_putstr(ASS_UART_BUFF);
	#endif
}

void CommunicationReportDistance( CommunicationStatStruct *CommStat )
{
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	0f 92       	push	r0
     4a4:	0f 92       	push	r0
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
	Profile8();
     4aa:	47 9a       	sbi	0x08, 7	; 8
     4ac:	1a 82       	std	Y+2, r1	; 0x02
     4ae:	19 82       	std	Y+1, r1	; 0x01
     4b0:	29 81       	ldd	r18, Y+1	; 0x01
     4b2:	3a 81       	ldd	r19, Y+2	; 0x02
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	3a 83       	std	Y+2, r19	; 0x02
     4ba:	29 83       	std	Y+1, r18	; 0x01
     4bc:	29 81       	ldd	r18, Y+1	; 0x01
     4be:	3a 81       	ldd	r19, Y+2	; 0x02
     4c0:	2f 5f       	subi	r18, 0xFF	; 255
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	3a 83       	std	Y+2, r19	; 0x02
     4c6:	29 83       	std	Y+1, r18	; 0x01
     4c8:	47 98       	cbi	0x08, 7	; 8

	float ActualDistance = (340.0 * CommStat->Distance/1000.0)/10.0 - 0.8192;
     4ca:	fc 01       	movw	r30, r24
     4cc:	e7 80       	ldd	r14, Z+7	; 0x07
     4ce:	f0 84       	ldd	r15, Z+8	; 0x08
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "distance %u (%u)\n\r", (unsigned int)ActualDistance, (unsigned int)CommStat->Distance);
     4d0:	8d b7       	in	r24, 0x3d	; 61
     4d2:	9e b7       	in	r25, 0x3e	; 62
     4d4:	0a 97       	sbiw	r24, 0x0a	; 10
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	9e bf       	out	0x3e, r25	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	8d bf       	out	0x3d, r24	; 61
     4e0:	0d b7       	in	r16, 0x3d	; 61
     4e2:	1e b7       	in	r17, 0x3e	; 62
     4e4:	0f 5f       	subi	r16, 0xFF	; 255
     4e6:	1f 4f       	sbci	r17, 0xFF	; 255
     4e8:	8c ed       	ldi	r24, 0xDC	; 220
     4ea:	c8 2e       	mov	r12, r24
     4ec:	86 e1       	ldi	r24, 0x16	; 22
     4ee:	d8 2e       	mov	r13, r24
     4f0:	ed b7       	in	r30, 0x3d	; 61
     4f2:	fe b7       	in	r31, 0x3e	; 62
     4f4:	d2 82       	std	Z+2, r13	; 0x02
     4f6:	c1 82       	std	Z+1, r12	; 0x01
     4f8:	81 e5       	ldi	r24, 0x51	; 81
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	f8 01       	movw	r30, r16
     4fe:	93 83       	std	Z+3, r25	; 0x03
     500:	82 83       	std	Z+2, r24	; 0x02
     502:	86 e3       	ldi	r24, 0x36	; 54
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	95 83       	std	Z+5, r25	; 0x05
     508:	84 83       	std	Z+4, r24	; 0x04
     50a:	b7 01       	movw	r22, r14
     50c:	88 27       	eor	r24, r24
     50e:	77 fd       	sbrc	r23, 7
     510:	80 95       	com	r24
     512:	98 2f       	mov	r25, r24
     514:	0e 94 76 14 	call	0x28ec	; 0x28ec <__floatsisf>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	4a ea       	ldi	r20, 0xAA	; 170
     51e:	53 e4       	ldi	r21, 0x43	; 67
     520:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	4a e7       	ldi	r20, 0x7A	; 122
     52a:	54 e4       	ldi	r21, 0x44	; 68
     52c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divsf3>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e2       	ldi	r20, 0x20	; 32
     536:	51 e4       	ldi	r21, 0x41	; 65
     538:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divsf3>
     53c:	27 e1       	ldi	r18, 0x17	; 23
     53e:	37 eb       	ldi	r19, 0xB7	; 183
     540:	41 e5       	ldi	r20, 0x51	; 81
     542:	5f e3       	ldi	r21, 0x3F	; 63
     544:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
     548:	0e 94 ca 10 	call	0x2194	; 0x2194 <__fixunssfsi>
     54c:	f8 01       	movw	r30, r16
     54e:	77 83       	std	Z+7, r23	; 0x07
     550:	66 83       	std	Z+6, r22	; 0x06
     552:	f1 86       	std	Z+9, r15	; 0x09
     554:	e0 86       	std	Z+8, r14	; 0x08
     556:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <snprintf>
	uart_putstr(ASS_UART_BUFF);
     55a:	8d b7       	in	r24, 0x3d	; 61
     55c:	9e b7       	in	r25, 0x3e	; 62
     55e:	0a 96       	adiw	r24, 0x0a	; 10
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	9e bf       	out	0x3e, r25	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	8d bf       	out	0x3d, r24	; 61
     56a:	c6 01       	movw	r24, r12
     56c:	0e 94 56 10 	call	0x20ac	; 0x20ac <uart_putstr>
}
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	08 95       	ret

00000586 <CommunicationGetResponseStatistics>:

	return SONARReceivedFlag;
}

void CommunicationGetResponseStatistics( CommunicationStatStruct *CommStat )
{ 
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	8c 01       	movw	r16, r24
	
	CommStat->PingReceiveTime = sonar_get_ping_time();
     598:	0e 94 c0 08 	call	0x1180	; 0x1180 <sonar_get_ping_time>
     59c:	d8 01       	movw	r26, r16
     59e:	14 96       	adiw	r26, 0x04	; 4
     5a0:	9c 93       	st	X, r25
     5a2:	8e 93       	st	-X, r24
     5a4:	13 97       	sbiw	r26, 0x03	; 3
	CommStat->SonarReceiveTime = sonar_get_sonar_time();
     5a6:	0e 94 c6 08 	call	0x118c	; 0x118c <sonar_get_sonar_time>
     5aa:	f8 01       	movw	r30, r16
     5ac:	96 83       	std	Z+6, r25	; 0x06
     5ae:	85 83       	std	Z+5, r24	; 0x05
	CommStat->Distance = sonar_get_ping_time(); 
     5b0:	0e 94 c0 08 	call	0x1180	; 0x1180 <sonar_get_ping_time>
     5b4:	d8 01       	movw	r26, r16
     5b6:	18 96       	adiw	r26, 0x08	; 8
     5b8:	9c 93       	st	X, r25
     5ba:	8e 93       	st	-X, r24
     5bc:	17 97       	sbiw	r26, 0x07	; 7

	#if 1
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "R: %u (%u) [%u, %u]\n\r", sonar_get_distance(), (int)CommStat->Distance, sonar_get_ping_time(), sonar_get_sonar_time() );
     5be:	0e 94 b4 08 	call	0x1168	; 0x1168 <sonar_get_distance>
     5c2:	6c 01       	movw	r12, r24
     5c4:	f8 01       	movw	r30, r16
     5c6:	a7 80       	ldd	r10, Z+7	; 0x07
     5c8:	b0 84       	ldd	r11, Z+8	; 0x08
     5ca:	0e 94 c0 08 	call	0x1180	; 0x1180 <sonar_get_ping_time>
     5ce:	7c 01       	movw	r14, r24
     5d0:	0e 94 c6 08 	call	0x118c	; 0x118c <sonar_get_sonar_time>
     5d4:	2d b7       	in	r18, 0x3d	; 61
     5d6:	3e b7       	in	r19, 0x3e	; 62
     5d8:	2e 50       	subi	r18, 0x0E	; 14
     5da:	30 40       	sbci	r19, 0x00	; 0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	3e bf       	out	0x3e, r19	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	2d bf       	out	0x3d, r18	; 61
     5e6:	ed b7       	in	r30, 0x3d	; 61
     5e8:	fe b7       	in	r31, 0x3e	; 62
     5ea:	31 96       	adiw	r30, 0x01	; 1
     5ec:	0c ed       	ldi	r16, 0xDC	; 220
     5ee:	16 e1       	ldi	r17, 0x16	; 22
     5f0:	ad b7       	in	r26, 0x3d	; 61
     5f2:	be b7       	in	r27, 0x3e	; 62
     5f4:	12 96       	adiw	r26, 0x02	; 2
     5f6:	1c 93       	st	X, r17
     5f8:	0e 93       	st	-X, r16
     5fa:	11 97       	sbiw	r26, 0x01	; 1
     5fc:	21 e5       	ldi	r18, 0x51	; 81
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	33 83       	std	Z+3, r19	; 0x03
     602:	22 83       	std	Z+2, r18	; 0x02
     604:	29 e4       	ldi	r18, 0x49	; 73
     606:	32 e0       	ldi	r19, 0x02	; 2
     608:	35 83       	std	Z+5, r19	; 0x05
     60a:	24 83       	std	Z+4, r18	; 0x04
     60c:	d7 82       	std	Z+7, r13	; 0x07
     60e:	c6 82       	std	Z+6, r12	; 0x06
     610:	b1 86       	std	Z+9, r11	; 0x09
     612:	a0 86       	std	Z+8, r10	; 0x08
     614:	f3 86       	std	Z+11, r15	; 0x0b
     616:	e2 86       	std	Z+10, r14	; 0x0a
     618:	95 87       	std	Z+13, r25	; 0x0d
     61a:	84 87       	std	Z+12, r24	; 0x0c
     61c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <snprintf>
	uart_putstr(ASS_UART_BUFF);
     620:	ed b7       	in	r30, 0x3d	; 61
     622:	fe b7       	in	r31, 0x3e	; 62
     624:	3e 96       	adiw	r30, 0x0e	; 14
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	fe bf       	out	0x3e, r31	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	ed bf       	out	0x3d, r30	; 61
     630:	c8 01       	movw	r24, r16
     632:	0e 94 56 10 	call	0x20ac	; 0x20ac <uart_putstr>
	#endif
}
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	df 90       	pop	r13
     640:	cf 90       	pop	r12
     642:	bf 90       	pop	r11
     644:	af 90       	pop	r10
     646:	08 95       	ret

00000648 <CommunicationReceivedSonarResponse>:
{
	#if PROFILECODE && PROFILE_ULTRASOUND
	EnableProfileSample4();
	#endif

	if( 0 != sonar_echo_received() )
     648:	0e 94 ac 08 	call	0x1158	; 0x1158 <sonar_echo_received>
     64c:	88 23       	and	r24, r24
     64e:	19 f0       	breq	.+6      	; 0x656 <CommunicationReceivedSonarResponse+0xe>
		#if PROFILECODE && PROFILE_ULTRASOUND
		DisableProfileSample4();
		EnableProfileSample5();
		#endif

		SONARReceivedFlag = 1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 5b 17 	sts	0x175B, r24

	#if PROFILECODE && PROFILE_ULTRASOUND
	DisableProfileSample4();
	#endif

	return SONARReceivedFlag;
     656:	80 91 5b 17 	lds	r24, 0x175B
}
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	08 95       	ret

0000065e <CommuncationReceivedPING>:

	return 1;
}

int CommuncationReceivedPING()
{
     65e:	1f 93       	push	r17
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	a0 97       	sbiw	r28, 0x20	; 32
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample2();
	#endif

	int Received = PINGReceivedFlag;
     674:	10 91 67 17 	lds	r17, 0x1767
	if( 0 != PINGReceivedFlag )
     678:	80 91 67 17 	lds	r24, 0x1767
     67c:	88 23       	and	r24, r24
     67e:	a9 f0       	breq	.+42     	; 0x6aa <CommuncationReceivedPING+0x4c>
	{
		#if PROFILECODE && PROFILE_AVR
		EnableProfileSample2();
		#endif

		cli();
     680:	f8 94       	cli

		#if PROFILECODE && PROFILE_AVR 
		DisableProfileSample2();
		#endif

		PINGReceivedFlag = 0;
     682:	10 92 67 17 	sts	0x1767, r1
		SONARReceivedFlag = 0;
     686:	10 92 5b 17 	sts	0x175B, r1
	
		#if PROFILECODE && PROFILE_WIRELESS 
		EnableProfileSample3();
		#endif	
		radiopacket_t ReceivePacket;
		RADIO_RX_STATUS status = Radio_Receive( &ReceivePacket );
     68a:	ce 01       	movw	r24, r28
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	0e 94 07 06 	call	0xc0e	; 0xc0e <Radio_Receive>
		#if PROFILECODE && PROFILE_AVR
		EnableProfileSample3();
		#endif

		// enable interrupts
		sei();
     692:	78 94       	sei
		#if PROFILECODE && PROFILE_ULTRASOUND
		EnableProfileSample3();
		#endif
		// Set the current time
		// sonar_reset_trigger_time();
		sonar_trigger();
     694:	0e 94 a6 08 	call	0x114c	; 0x114c <sonar_trigger>
     698:	80 e9       	ldi	r24, 0x90	; 144
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	28 ec       	ldi	r18, 0xC8	; 200
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <CommuncationReceivedPING+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6a8:	d9 f7       	brne	.-10     	; 0x6a0 <CommuncationReceivedPING+0x42>
	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample2();
	#endif

	return Received;
}
     6aa:	81 2f       	mov	r24, r17
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	a0 96       	adiw	r28, 0x20	; 32
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	1f 91       	pop	r17
     6c0:	08 95       	ret

000006c2 <CommunicationSendTriggerMessage>:

	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample6();
	#endif

	PINGReceivedFlag = 0;
     6c2:	10 92 67 17 	sts	0x1767, r1
	SONARReceivedFlag = 0;
     6c6:	10 92 5b 17 	sts	0x175B, r1

	// disable interrupts during setup

	packet.type = COMMAND;
     6ca:	10 92 3b 17 	sts	0x173B, r1
	packet.payload.command.command = Trigger;
     6ce:	10 92 43 17 	sts	0x1743, r1
	packet.payload.command.sender_address[0] = station_addr[0];
     6d2:	80 91 2c 02 	lds	r24, 0x022C
     6d6:	80 93 3e 17 	sts	0x173E, r24
	packet.payload.command.sender_address[1] = station_addr[1];
     6da:	80 91 2d 02 	lds	r24, 0x022D
     6de:	80 93 3f 17 	sts	0x173F, r24
	packet.payload.command.sender_address[2] = station_addr[2];
     6e2:	80 91 2e 02 	lds	r24, 0x022E
     6e6:	80 93 40 17 	sts	0x1740, r24
	packet.payload.command.sender_address[3] = station_addr[3];
     6ea:	80 91 2f 02 	lds	r24, 0x022F
     6ee:	80 93 41 17 	sts	0x1741, r24
	packet.payload.command.sender_address[4] = station_addr[4];
     6f2:	80 91 30 02 	lds	r24, 0x0230
     6f6:	80 93 42 17 	sts	0x1742, r24

	Radio_Set_Tx_Addr( (uint8_t*)remote_addr );
     6fa:	81 e3       	ldi	r24, 0x31	; 49
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Radio_Set_Tx_Addr>
	// uint8_t result = Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
	Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
     702:	8b e3       	ldi	r24, 0x3B	; 59
     704:	97 e1       	ldi	r25, 0x17	; 23
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Radio_Transmit>

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     70c:	10 92 a5 03 	sts	0x03A5, r1
     710:	10 92 a4 03 	sts	0x03A4, r1
	ResetMessageClock();

	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample6();
	#endif
}
     714:	08 95       	ret

00000716 <InitializeCommunication>:

	return message_clock;
}

void InitializeCommunication(  uint8_t sa[5], uint8_t ra[5] )
{
     716:	1f 93       	push	r17
     718:	dc 01       	movw	r26, r24
     71a:	fb 01       	movw	r30, r22
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample1();
	#endif

	TimeoutCounter = 0;
     71c:	10 92 69 17 	sts	0x1769, r1
     720:	10 92 68 17 	sts	0x1768, r1

	WorkingStruct.TriggerSent = 0;
     724:	10 92 5c 17 	sts	0x175C, r1
	WorkingStruct.PingResponseReceived = 0;
     728:	10 92 5d 17 	sts	0x175D, r1
	WorkingStruct.SonarReceived = 0;
     72c:	10 92 5e 17 	sts	0x175E, r1

	WorkingStruct.PingReceiveTime = 0;
     730:	10 92 60 17 	sts	0x1760, r1
     734:	10 92 5f 17 	sts	0x175F, r1
	WorkingStruct.SonarReceiveTime = 0;
     738:	10 92 62 17 	sts	0x1762, r1
     73c:	10 92 61 17 	sts	0x1761, r1

	WorkingStruct.Percent = 0;
     740:	10 92 66 17 	sts	0x1766, r1
     744:	10 92 65 17 	sts	0x1765, r1

	// #if PROFILECODE && PROFILE_WIRELESS 
	// EnableProfileSample2();
	// #endif

	remote_addr[0] = ra[0];
     748:	80 81       	ld	r24, Z
     74a:	80 93 31 02 	sts	0x0231, r24
	remote_addr[1] = ra[1];
     74e:	81 81       	ldd	r24, Z+1	; 0x01
     750:	80 93 32 02 	sts	0x0232, r24
	remote_addr[2] = ra[2];
     754:	82 81       	ldd	r24, Z+2	; 0x02
     756:	80 93 33 02 	sts	0x0233, r24
	remote_addr[3] = ra[3];
     75a:	83 81       	ldd	r24, Z+3	; 0x03
     75c:	80 93 34 02 	sts	0x0234, r24
	remote_addr[4] = ra[4];
     760:	84 81       	ldd	r24, Z+4	; 0x04
     762:	80 93 35 02 	sts	0x0235, r24

	station_addr[0] = sa[0];
     766:	8c 91       	ld	r24, X
     768:	80 93 2c 02 	sts	0x022C, r24
	station_addr[1] = sa[1];
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	8c 91       	ld	r24, X
     770:	11 97       	sbiw	r26, 0x01	; 1
     772:	80 93 2d 02 	sts	0x022D, r24
	station_addr[2] = sa[2];
     776:	12 96       	adiw	r26, 0x02	; 2
     778:	8c 91       	ld	r24, X
     77a:	12 97       	sbiw	r26, 0x02	; 2
     77c:	80 93 2e 02 	sts	0x022E, r24
	station_addr[3] = sa[3];
     780:	13 96       	adiw	r26, 0x03	; 3
     782:	8c 91       	ld	r24, X
     784:	13 97       	sbiw	r26, 0x03	; 3
     786:	80 93 2f 02 	sts	0x022F, r24
	station_addr[4] = sa[4];
     78a:	14 96       	adiw	r26, 0x04	; 4
     78c:	8c 91       	ld	r24, X
     78e:	80 93 30 02 	sts	0x0230, r24

	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample2();
	// #endif	

	int sreg = SREG;
     792:	1f b7       	in	r17, 0x3f	; 63
	cli();
     794:	f8 94       	cli

	// #if PROFILECODE && PROFILE_WIRELESS 
	// EnableProfileSample3();
	// #endif

	Radio_Init();
     796:	0e 94 80 06 	call	0xd00	; 0xd00 <Radio_Init>
	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample3();
	// EnableProfileSample4();
	// #endif

	Radio_Configure_Rx( RADIO_PIPE_0, (uint8_t*)station_addr, ENABLE );
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	6c e2       	ldi	r22, 0x2C	; 44
     79e:	72 e0       	ldi	r23, 0x02	; 2
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <Radio_Configure_Rx>
	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample4();
	// EnableProfileSample5();
	// #endif

	Radio_Configure( RADIO_2MBPS, RADIO_HIGHEST_POWER );
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	63 e0       	ldi	r22, 0x03	; 3
     7aa:	0e 94 be 06 	call	0xd7c	; 0xd7c <Radio_Configure>

	#if PROFILECODE && PROFILE_ULTRASOUND
	EnableProfileSample2();
	#endif

	sonar_init();
     7ae:	0e 94 8c 08 	call	0x1118	; 0x1118 <sonar_init>
	#if PROFILECODE && PROFILE_ULTRASOUND
	DisableProfileSample2();
	#endif
	
	// enable interrupts
	SREG = sreg;
     7b2:	1f bf       	out	0x3f, r17	; 63
	// _delay_ms(500);

	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample1();
	// #endif
}
     7b4:	1f 91       	pop	r17
     7b6:	08 95       	ret

000007b8 <ServoStartSweep>:
	#endif
}

void ServoStartSweep()
{
	SweepPercent = 0;
     7b8:	10 92 6b 17 	sts	0x176B, r1
     7bc:	10 92 6a 17 	sts	0x176A, r1
}
     7c0:	08 95       	ret

000007c2 <ServoUpdateSweepPosition>:

int ServoUpdateSweepPosition( CommunicationStatStruct *CommStat )
{
     7c2:	fc 01       	movw	r30, r24
	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample2();
	#endif

	if( (SweepPercent + SWEEPINCREMENTAMOUNT) < 1000 )
     7c4:	80 91 6a 17 	lds	r24, 0x176A
     7c8:	90 91 6b 17 	lds	r25, 0x176B
     7cc:	84 58       	subi	r24, 0x84	; 132
     7ce:	93 40       	sbci	r25, 0x03	; 3
     7d0:	1c f0       	brlt	.+6      	; 0x7d8 <ServoUpdateSweepPosition+0x16>
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	12 c0       	rjmp	.+36     	; 0x7fc <ServoUpdateSweepPosition+0x3a>
	{
		SweepPercent = SweepPercent + SWEEPINCREMENTAMOUNT;
     7d8:	80 91 6a 17 	lds	r24, 0x176A
     7dc:	90 91 6b 17 	lds	r25, 0x176B
     7e0:	8c 59       	subi	r24, 0x9C	; 156
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	90 93 6b 17 	sts	0x176B, r25
     7e8:	80 93 6a 17 	sts	0x176A, r24
		CommStat->Percent = SweepPercent;
     7ec:	80 91 6a 17 	lds	r24, 0x176A
     7f0:	90 91 6b 17 	lds	r25, 0x176B
     7f4:	92 87       	std	Z+10, r25	; 0x0a
     7f6:	81 87       	std	Z+9, r24	; 0x09
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample2();
	#endif

	return 1;
}
     7fc:	c9 01       	movw	r24, r18
     7fe:	08 95       	ret

00000800 <ServoSetDirection>:

void ServoSetDirection( ServoControlStruct *ServoController, CommunicationStatStruct *CommStat )
{
     800:	fb 01       	movw	r30, r22

	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample3();
	#endif

	SetServoValue( ServoController, CommStat->Percent );
     802:	61 85       	ldd	r22, Z+9	; 0x09
     804:	72 85       	ldd	r23, Z+10	; 0x0a
     806:	0e 94 fd 04 	call	0x9fa	; 0x9fa <SetServoValue>

	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample3();
	#endif
}
     80a:	08 95       	ret

0000080c <InitializeServoController>:
volatile int SweepPercent;

#define OUTPUTDIRECTION 0

void InitializeServoController( ServoControlStruct *ServoController )
{
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	8c 01       	movw	r16, r24
	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample1();
	#endif
	SweepPercent = 0;
     812:	10 92 6b 17 	sts	0x176B, r1
     816:	10 92 6a 17 	sts	0x176A, r1

	SetServoPeriod( ServoController, 20000 );
     81a:	60 e2       	ldi	r22, 0x20	; 32
     81c:	7e e4       	ldi	r23, 0x4E	; 78
     81e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <SetServoPeriod>
	SetServoRange( ServoController, 1000, 2000 );
     822:	c8 01       	movw	r24, r16
     824:	68 ee       	ldi	r22, 0xE8	; 232
     826:	73 e0       	ldi	r23, 0x03	; 3
     828:	40 ed       	ldi	r20, 0xD0	; 208
     82a:	57 e0       	ldi	r21, 0x07	; 7
     82c:	0e 94 5f 05 	call	0xabe	; 0xabe <SetServoRange>
	SetServoValue( ServoController, 0 );
     830:	c8 01       	movw	r24, r16
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	0e 94 fd 04 	call	0x9fa	; 0x9fa <SetServoValue>

	ServoInitialize( ServoController );
     83a:	c8 01       	movw	r24, r16
     83c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <ServoInitialize>

	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample1();
	#endif
}
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <StatisticsInitialize>:
static volatile CommunicationStatStruct ShortestPath;

void StatisticsInitialize()
{
	// Set the distance to FAR AWAY
	ShortestPath.Distance = 0x8FFF;
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	9f e8       	ldi	r25, 0x8F	; 143
     84a:	90 93 ae 03 	sts	0x03AE, r25
     84e:	80 93 ad 03 	sts	0x03AD, r24

	// Set the default angle to the mid-range
	ShortestPath.Percent = 500;
     852:	84 ef       	ldi	r24, 0xF4	; 244
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	90 93 b0 03 	sts	0x03B0, r25
     85a:	80 93 af 03 	sts	0x03AF, r24
}
     85e:	08 95       	ret

00000860 <StatisticsResetSample>:

void StatisticsResetSample( CommunicationStatStruct *CommStat )
{
     860:	fc 01       	movw	r30, r24
	CommStat->TriggerSent = 0;
     862:	10 82       	st	Z, r1
	CommStat->PingResponseReceived = 0;
     864:	11 82       	std	Z+1, r1	; 0x01
	CommStat->SonarReceived = 0;
     866:	12 82       	std	Z+2, r1	; 0x02

	CommStat->PingReceiveTime = 0;
     868:	14 82       	std	Z+4, r1	; 0x04
     86a:	13 82       	std	Z+3, r1	; 0x03
	CommStat->SonarReceiveTime = 0;
     86c:	16 82       	std	Z+6, r1	; 0x06
     86e:	15 82       	std	Z+5, r1	; 0x05
	CommStat->Distance = 0x8FFF;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	9f e8       	ldi	r25, 0x8F	; 143
     874:	90 87       	std	Z+8, r25	; 0x08
     876:	87 83       	std	Z+7, r24	; 0x07

	CommStat->Percent = 500;
     878:	84 ef       	ldi	r24, 0xF4	; 244
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	92 87       	std	Z+10, r25	; 0x0a
     87e:	81 87       	std	Z+9, r24	; 0x09
}
     880:	08 95       	ret

00000882 <StatisticsCalculateDirectionAndDistance>:
		ShortestPath.Percent = CommStat->Percent;
	}
}

void StatisticsCalculateDirectionAndDistance( CommunicationStatStruct *CommStat )
{
     882:	fc 01       	movw	r30, r24
	CommStat->Distance = ShortestPath.Distance;
     884:	80 91 ad 03 	lds	r24, 0x03AD
     888:	90 91 ae 03 	lds	r25, 0x03AE
     88c:	90 87       	std	Z+8, r25	; 0x08
     88e:	87 83       	std	Z+7, r24	; 0x07
	CommStat->Percent = ShortestPath.Percent;
     890:	80 91 af 03 	lds	r24, 0x03AF
     894:	90 91 b0 03 	lds	r25, 0x03B0
     898:	92 87       	std	Z+10, r25	; 0x0a
     89a:	81 87       	std	Z+9, r24	; 0x09
}
     89c:	08 95       	ret

0000089e <StatisticsAddNewSample>:

	CommStat->Percent = 500;
}

void StatisticsAddNewSample( CommunicationStatStruct *CommStat )
{
     89e:	ef 92       	push	r14
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	ec 01       	movw	r28, r24
	#if 1
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "Here: %u %u\n\r", (unsigned int)CommStat->Distance, (unsigned int)ShortestPath.Distance );
     8ac:	20 91 ad 03 	lds	r18, 0x03AD
     8b0:	30 91 ae 03 	lds	r19, 0x03AE
     8b4:	8d b7       	in	r24, 0x3d	; 61
     8b6:	9e b7       	in	r25, 0x3e	; 62
     8b8:	0a 97       	sbiw	r24, 0x0a	; 10
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	9e bf       	out	0x3e, r25	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	8d bf       	out	0x3d, r24	; 61
     8c4:	ed b7       	in	r30, 0x3d	; 61
     8c6:	fe b7       	in	r31, 0x3e	; 62
     8c8:	31 96       	adiw	r30, 0x01	; 1
     8ca:	0c ed       	ldi	r16, 0xDC	; 220
     8cc:	16 e1       	ldi	r17, 0x16	; 22
     8ce:	ad b7       	in	r26, 0x3d	; 61
     8d0:	be b7       	in	r27, 0x3e	; 62
     8d2:	12 96       	adiw	r26, 0x02	; 2
     8d4:	1c 93       	st	X, r17
     8d6:	0e 93       	st	-X, r16
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	81 e5       	ldi	r24, 0x51	; 81
     8dc:	e8 2e       	mov	r14, r24
     8de:	f1 2c       	mov	r15, r1
     8e0:	f3 82       	std	Z+3, r15	; 0x03
     8e2:	e2 82       	std	Z+2, r14	; 0x02
     8e4:	8f e5       	ldi	r24, 0x5F	; 95
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	95 83       	std	Z+5, r25	; 0x05
     8ea:	84 83       	std	Z+4, r24	; 0x04
     8ec:	8f 81       	ldd	r24, Y+7	; 0x07
     8ee:	98 85       	ldd	r25, Y+8	; 0x08
     8f0:	97 83       	std	Z+7, r25	; 0x07
     8f2:	86 83       	std	Z+6, r24	; 0x06
     8f4:	31 87       	std	Z+9, r19	; 0x09
     8f6:	20 87       	std	Z+8, r18	; 0x08
     8f8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <snprintf>
	uart_putstr( ASS_UART_BUFF );
     8fc:	8d b7       	in	r24, 0x3d	; 61
     8fe:	9e b7       	in	r25, 0x3e	; 62
     900:	0a 96       	adiw	r24, 0x0a	; 10
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	9e bf       	out	0x3e, r25	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	8d bf       	out	0x3d, r24	; 61
     90c:	c8 01       	movw	r24, r16
     90e:	0e 94 56 10 	call	0x20ac	; 0x20ac <uart_putstr>
	#endif

	// Check if this result is closer
	if( (unsigned int)CommStat->Distance < (unsigned int)ShortestPath.Distance )
     912:	6f 81       	ldd	r22, Y+7	; 0x07
     914:	78 85       	ldd	r23, Y+8	; 0x08
     916:	80 91 ad 03 	lds	r24, 0x03AD
     91a:	90 91 ae 03 	lds	r25, 0x03AE
     91e:	68 17       	cp	r22, r24
     920:	79 07       	cpc	r23, r25
     922:	08 f0       	brcs	.+2      	; 0x926 <StatisticsAddNewSample+0x88>
     924:	40 c0       	rjmp	.+128    	; 0x9a6 <StatisticsAddNewSample+0x108>
	{	
		snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "SU: %u, %u, %u, %u\n\r", (int)CommStat->Distance, (int)CommStat->Percent, (unsigned int)ShortestPath.Distance, (int)ShortestPath.Percent );
     926:	20 91 ad 03 	lds	r18, 0x03AD
     92a:	30 91 ae 03 	lds	r19, 0x03AE
     92e:	40 91 af 03 	lds	r20, 0x03AF
     932:	50 91 b0 03 	lds	r21, 0x03B0
     936:	ad b7       	in	r26, 0x3d	; 61
     938:	be b7       	in	r27, 0x3e	; 62
     93a:	1e 97       	sbiw	r26, 0x0e	; 14
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	be bf       	out	0x3e, r27	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	ad bf       	out	0x3d, r26	; 61
     946:	ed b7       	in	r30, 0x3d	; 61
     948:	fe b7       	in	r31, 0x3e	; 62
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	12 96       	adiw	r26, 0x02	; 2
     94e:	1c 93       	st	X, r17
     950:	0e 93       	st	-X, r16
     952:	11 97       	sbiw	r26, 0x01	; 1
     954:	f3 82       	std	Z+3, r15	; 0x03
     956:	e2 82       	std	Z+2, r14	; 0x02
     958:	8d e6       	ldi	r24, 0x6D	; 109
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	95 83       	std	Z+5, r25	; 0x05
     95e:	84 83       	std	Z+4, r24	; 0x04
     960:	77 83       	std	Z+7, r23	; 0x07
     962:	66 83       	std	Z+6, r22	; 0x06
     964:	89 85       	ldd	r24, Y+9	; 0x09
     966:	9a 85       	ldd	r25, Y+10	; 0x0a
     968:	91 87       	std	Z+9, r25	; 0x09
     96a:	80 87       	std	Z+8, r24	; 0x08
     96c:	33 87       	std	Z+11, r19	; 0x0b
     96e:	22 87       	std	Z+10, r18	; 0x0a
     970:	55 87       	std	Z+13, r21	; 0x0d
     972:	44 87       	std	Z+12, r20	; 0x0c
     974:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <snprintf>
		uart_putstr( ASS_UART_BUFF );
     978:	8d b7       	in	r24, 0x3d	; 61
     97a:	9e b7       	in	r25, 0x3e	; 62
     97c:	0e 96       	adiw	r24, 0x0e	; 14
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	9e bf       	out	0x3e, r25	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	8d bf       	out	0x3d, r24	; 61
     988:	c8 01       	movw	r24, r16
     98a:	0e 94 56 10 	call	0x20ac	; 0x20ac <uart_putstr>

		// If it is closer, set this 
		// as the current distance
		ShortestPath.Distance = CommStat->Distance;
     98e:	8f 81       	ldd	r24, Y+7	; 0x07
     990:	98 85       	ldd	r25, Y+8	; 0x08
     992:	90 93 ae 03 	sts	0x03AE, r25
     996:	80 93 ad 03 	sts	0x03AD, r24
		ShortestPath.Percent = CommStat->Percent;
     99a:	89 85       	ldd	r24, Y+9	; 0x09
     99c:	9a 85       	ldd	r25, Y+10	; 0x0a
     99e:	90 93 b0 03 	sts	0x03B0, r25
     9a2:	80 93 af 03 	sts	0x03AF, r24
	}
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <ServoInitialize>:
#include <util\delay.h>

#define F_CPU 8000000UL

void ServoInitialize( ServoControlStruct *SCS )
{
     9b4:	dc 01       	movw	r26, r24
	int sreg = SREG;
     9b6:	2f b7       	in	r18, 0x3f	; 63
	cli();
     9b8:	f8 94       	cli

	ICR1 = SCS->PWMPeriod; // period of output PWM signal
	OCR1B = SCS->PWMHighTime;
	*/

	DDRL |= 0b00010000; // set pin L.4 for output (OC4B)
     9ba:	ea e0       	ldi	r30, 0x0A	; 10
     9bc:	f1 e0       	ldi	r31, 0x01	; 1
     9be:	80 81       	ld	r24, Z
     9c0:	80 61       	ori	r24, 0x10	; 16
     9c2:	80 83       	st	Z, r24
	// TCCR1B:  ICNC1  | ICES1  | ------ | WGM13  | WGM12 | CS12  | CS11  | CS10

	// WGM11:WGM10 = 10: with WGM13-WGM12 to select timer mode 1110
	// Fast PWM, timer 1 runs from 0 to ICR1
	// COM1A1:COM1A0 = 10: clear OC1A when compare match, set OC5A when 0
	TCCR5A = 0b00100010; // compare match occurs timer = OCR5B
     9c4:	82 e2       	ldi	r24, 0x22	; 34
     9c6:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0b00011010; // WGM13:WGM12=11; CS12:CS0=001: internal clock 8MHz, 1/8 prescaler
     9ca:	8a e1       	ldi	r24, 0x1A	; 26
     9cc:	80 93 21 01 	sts	0x0121, r24

	ICR5 = SCS->PWMPeriod; // period of output PWM signal
     9d0:	8d 91       	ld	r24, X+
     9d2:	9c 91       	ld	r25, X
     9d4:	11 97       	sbiw	r26, 0x01	; 1
     9d6:	90 93 27 01 	sts	0x0127, r25
     9da:	80 93 26 01 	sts	0x0126, r24
	OCR5B = SCS->PWMHighTime;
     9de:	14 96       	adiw	r26, 0x04	; 4
     9e0:	8d 91       	ld	r24, X+
     9e2:	9c 91       	ld	r25, X
     9e4:	15 97       	sbiw	r26, 0x05	; 5
     9e6:	90 93 2b 01 	sts	0x012B, r25
     9ea:	80 93 2a 01 	sts	0x012A, r24

	// Since  the range is clamped to -90..90 degrees, 
	// and with a 10ms delay requirement per degree = 1800
	// _delay_ms( 1800 );

	SREG = sreg;
     9ee:	2f bf       	out	0x3f, r18	; 63
}
     9f0:	08 95       	ret

000009f2 <SetServoPeriod>:

void SetServoPeriod( ServoControlStruct *SCS, int MicrosecondPeriod )
{
     9f2:	fc 01       	movw	r30, r24
	SCS->PWMPeriod = MicrosecondPeriod;
     9f4:	71 83       	std	Z+1, r23	; 0x01
     9f6:	60 83       	st	Z, r22
}
     9f8:	08 95       	ret

000009fa <SetServoValue>:

void SetServoValue( ServoControlStruct *SCS, int TenthPercent )
{
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	6c 01       	movw	r12, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	23 e0       	ldi	r18, 0x03	; 3
     a10:	68 3e       	cpi	r22, 0xE8	; 232
     a12:	72 07       	cpc	r23, r18
     a14:	14 f0       	brlt	.+4      	; 0xa1a <SetServoValue+0x20>
     a16:	87 ee       	ldi	r24, 0xE7	; 231
     a18:	93 e0       	ldi	r25, 0x03	; 3
     a1a:	ec 01       	movw	r28, r24
     a1c:	97 ff       	sbrs	r25, 7
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <SetServoValue+0x2a>
     a20:	c0 e0       	ldi	r28, 0x00	; 0
     a22:	d0 e0       	ldi	r29, 0x00	; 0
	}

	int OldValue = SCS->Value;

	// Set the percentage value
	SCS->Value = TenthPercent;
     a24:	f6 01       	movw	r30, r12
     a26:	d7 83       	std	Z+7, r29	; 0x07
     a28:	c6 83       	std	Z+6, r28	; 0x06
	// Interpolate between the low and the high value
	SCS->PWMHighTime = SCS->LowThreshold + (int)(SCS->DeltaThreshold * ((float)SCS->Value / 1000.0f));
     a2a:	64 85       	ldd	r22, Z+12	; 0x0c
     a2c:	75 85       	ldd	r23, Z+13	; 0x0d
     a2e:	88 27       	eor	r24, r24
     a30:	77 fd       	sbrc	r23, 7
     a32:	80 95       	com	r24
     a34:	98 2f       	mov	r25, r24
     a36:	0e 94 76 14 	call	0x28ec	; 0x28ec <__floatsisf>
     a3a:	7b 01       	movw	r14, r22
     a3c:	8c 01       	movw	r16, r24
     a3e:	be 01       	movw	r22, r28
     a40:	88 27       	eor	r24, r24
     a42:	77 fd       	sbrc	r23, 7
     a44:	80 95       	com	r24
     a46:	98 2f       	mov	r25, r24
     a48:	0e 94 76 14 	call	0x28ec	; 0x28ec <__floatsisf>
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	4a e7       	ldi	r20, 0x7A	; 122
     a52:	54 e4       	ldi	r21, 0x44	; 68
     a54:	0e 94 9a 13 	call	0x2734	; 0x2734 <__divsf3>
     a58:	9b 01       	movw	r18, r22
     a5a:	ac 01       	movw	r20, r24
     a5c:	c8 01       	movw	r24, r16
     a5e:	b7 01       	movw	r22, r14
     a60:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
     a64:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fixsfsi>
     a68:	f6 01       	movw	r30, r12
     a6a:	20 85       	ldd	r18, Z+8	; 0x08
     a6c:	31 85       	ldd	r19, Z+9	; 0x09
     a6e:	62 0f       	add	r22, r18
     a70:	73 1f       	adc	r23, r19
     a72:	75 83       	std	Z+5, r23	; 0x05
     a74:	64 83       	std	Z+4, r22	; 0x04

	int sreg = SREG;
     a76:	2f b7       	in	r18, 0x3f	; 63
	cli();
     a78:	f8 94       	cli

	// OCR1B = SCS->PWMHighTime; // set high time of output PWM signal
	OCR5B = SCS->PWMHighTime; // set high time of output PWM signal
     a7a:	70 93 2b 01 	sts	0x012B, r23
     a7e:	60 93 2a 01 	sts	0x012A, r22
	
	SREG = sreg;
     a82:	2f bf       	out	0x3f, r18	; 63
	// Convert the difference from percent to angle (degrees)
	// then multiply it by the 10ms delay/degree
	// int DelayTime = ((PosDifference * 90) /10) * 100;

	// _delay_ms( DelayTime );
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	df 90       	pop	r13
     a92:	cf 90       	pop	r12
     a94:	08 95       	ret

00000a96 <AddServoValueDelta>:

void AddServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     a96:	fc 01       	movw	r30, r24
     a98:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value + TenthPercent;

	SetServoValue( SCS, NewValue );
     a9a:	66 81       	ldd	r22, Z+6	; 0x06
     a9c:	77 81       	ldd	r23, Z+7	; 0x07
     a9e:	68 0f       	add	r22, r24
     aa0:	79 1f       	adc	r23, r25
     aa2:	cf 01       	movw	r24, r30
     aa4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <SetServoValue>
}
     aa8:	08 95       	ret

00000aaa <SubtractServoValueDelta>:

void SubtractServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     aaa:	fc 01       	movw	r30, r24
     aac:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value - TenthPercent;

	SetServoValue( SCS, NewValue );
     aae:	66 81       	ldd	r22, Z+6	; 0x06
     ab0:	77 81       	ldd	r23, Z+7	; 0x07
     ab2:	68 1b       	sub	r22, r24
     ab4:	79 0b       	sbc	r23, r25
     ab6:	cf 01       	movw	r24, r30
     ab8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <SetServoValue>
}
     abc:	08 95       	ret

00000abe <SetServoRange>:

void SetServoRange( ServoControlStruct *SCS, int Low, int High )
{
     abe:	fc 01       	movw	r30, r24
     ac0:	9a 01       	movw	r18, r20
	SCS->LowThreshold = Low;
     ac2:	71 87       	std	Z+9, r23	; 0x09
     ac4:	60 87       	std	Z+8, r22	; 0x08
	SCS->HighThreshold = High;
     ac6:	53 87       	std	Z+11, r21	; 0x0b
     ac8:	42 87       	std	Z+10, r20	; 0x0a
	SCS->DeltaThreshold = High-Low;
     aca:	ca 01       	movw	r24, r20
     acc:	86 1b       	sub	r24, r22
     ace:	97 0b       	sbc	r25, r23
     ad0:	95 87       	std	Z+13, r25	; 0x0d
     ad2:	84 87       	std	Z+12, r24	; 0x0c

	SCS->LowAngle = -SCS->LowThreshold * 9 / 1000;
     ad4:	87 ef       	ldi	r24, 0xF7	; 247
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	ac 01       	movw	r20, r24
     ada:	64 9f       	mul	r22, r20
     adc:	c0 01       	movw	r24, r0
     ade:	65 9f       	mul	r22, r21
     ae0:	90 0d       	add	r25, r0
     ae2:	74 9f       	mul	r23, r20
     ae4:	90 0d       	add	r25, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	68 ee       	ldi	r22, 0xE8	; 232
     aea:	73 e0       	ldi	r23, 0x03	; 3
     aec:	0e 94 cb 19 	call	0x3396	; 0x3396 <__divmodhi4>
     af0:	77 87       	std	Z+15, r23	; 0x0f
     af2:	66 87       	std	Z+14, r22	; 0x0e
	SCS->HighAngle = SCS->HighThreshold * 9 / 1000;
     af4:	c9 01       	movw	r24, r18
     af6:	43 e0       	ldi	r20, 0x03	; 3
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	4a 95       	dec	r20
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <SetServoRange+0x3a>
     b00:	82 0f       	add	r24, r18
     b02:	93 1f       	adc	r25, r19
     b04:	68 ee       	ldi	r22, 0xE8	; 232
     b06:	73 e0       	ldi	r23, 0x03	; 3
     b08:	0e 94 cb 19 	call	0x3396	; 0x3396 <__divmodhi4>
     b0c:	71 8b       	std	Z+17, r23	; 0x11
     b0e:	60 8b       	std	Z+16, r22	; 0x10
}
     b10:	08 95       	ret

00000b12 <Radio_Drop_Rate>:
}

// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
     b12:	80 91 92 02 	lds	r24, 0x0292
     b16:	90 91 93 02 	lds	r25, 0x0293
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <Radio_Drop_Rate+0x14>
	uint8_t weight = 0;

	while (wh != 0) {
		if ((wh & 1) != 0) weight++;
     b1e:	80 fd       	sbrc	r24, 0
     b20:	2f 5f       	subi	r18, 0xFF	; 255
		wh >>= 1;
     b22:	96 95       	lsr	r25
     b24:	87 95       	ror	r24
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
	uint8_t weight = 0;

	while (wh != 0) {
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	d1 f7       	brne	.-12     	; 0xb1e <Radio_Drop_Rate+0xc>
		if ((wh & 1) != 0) weight++;
		wh >>= 1;
	}

	wh = (16 - weight) * 100;
     b2a:	80 e1       	ldi	r24, 0x10	; 16
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	82 1b       	sub	r24, r18
     b30:	91 09       	sbc	r25, r1
     b32:	24 e6       	ldi	r18, 0x64	; 100
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	ac 01       	movw	r20, r24
     b38:	42 9f       	mul	r20, r18
     b3a:	c0 01       	movw	r24, r0
     b3c:	43 9f       	mul	r20, r19
     b3e:	90 0d       	add	r25, r0
     b40:	52 9f       	mul	r21, r18
     b42:	90 0d       	add	r25, r0
     b44:	11 24       	eor	r1, r1
     b46:	24 e0       	ldi	r18, 0x04	; 4
     b48:	96 95       	lsr	r25
     b4a:	87 95       	ror	r24
     b4c:	2a 95       	dec	r18
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <Radio_Drop_Rate+0x36>
	wh /= 16;
	return wh;
}
     b50:	08 95       	ret

00000b52 <_get_status>:
extern void radio_rxhandler(uint8_t pipenumber);

uint8_t _get_status()
{
        uint8_t status = 0;
        RADIO_CSN_LOW();
     b52:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(NOP);
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	0e 94 86 08 	call	0x110c	; 0x110c <SPI_Write_Byte>

        RADIO_CSN_HIGH();
     b5a:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     b5c:	08 95       	ret

00000b5e <_set_register>:

uint8_t _set_register(radio_register_t reg, uint8_t* value, uint8_t len)
{
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	8b 01       	movw	r16, r22
     b68:	e4 2e       	mov	r14, r20
        uint8_t status;
        RADIO_CSN_LOW();
     b6a:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     b6c:	8f 71       	andi	r24, 0x1F	; 31
     b6e:	80 62       	ori	r24, 0x20	; 32
     b70:	0e 94 86 08 	call	0x110c	; 0x110c <SPI_Write_Byte>
     b74:	f8 2e       	mov	r15, r24
        SPI_Write_Block(value, len);
     b76:	c8 01       	movw	r24, r16
     b78:	6e 2d       	mov	r22, r14
     b7a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <SPI_Write_Block>

        RADIO_CSN_HIGH();
     b7e:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     b80:	8f 2d       	mov	r24, r15
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	08 95       	ret

00000b8c <Radio_Set_Tx_Addr>:
	_set_register(EN_RXADDR, &value, 1);
}

// default transmitter address is 0xe7e7e7e7e7.
void Radio_Set_Tx_Addr(uint8_t* address)
{
     b8c:	fc 01       	movw	r30, r24
	tx_address[0] = address[0];
     b8e:	80 81       	ld	r24, Z
     b90:	80 93 88 02 	sts	0x0288, r24
	tx_address[1] = address[1];
     b94:	81 81       	ldd	r24, Z+1	; 0x01
     b96:	80 93 89 02 	sts	0x0289, r24
	tx_address[2] = address[2];
     b9a:	82 81       	ldd	r24, Z+2	; 0x02
     b9c:	80 93 8a 02 	sts	0x028A, r24
	tx_address[3] = address[3];
     ba0:	83 81       	ldd	r24, Z+3	; 0x03
     ba2:	80 93 8b 02 	sts	0x028B, r24
	tx_address[4] = address[4];
     ba6:	84 81       	ldd	r24, Z+4	; 0x04
     ba8:	80 93 8c 02 	sts	0x028C, r24
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
     bac:	80 e1       	ldi	r24, 0x10	; 16
     bae:	bf 01       	movw	r22, r30
     bb0:	45 e0       	ldi	r20, 0x05	; 5
     bb2:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>
}
     bb6:	08 95       	ret

00000bb8 <_reset_pipe0_address>:
	}
}

void _reset_pipe0_address()
{
        if (rx_pipe_widths[RADIO_PIPE_0] != 0)
     bb8:	80 91 82 02 	lds	r24, 0x0282
     bbc:	88 23       	and	r24, r24
     bbe:	31 f0       	breq	.+12     	; 0xbcc <_reset_pipe0_address+0x14>
        {
                // reset the pipe 0 address if pipe 0 is enabled.
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	6d e8       	ldi	r22, 0x8D	; 141
     bc4:	72 e0       	ldi	r23, 0x02	; 2
     bc6:	45 e0       	ldi	r20, 0x05	; 5
     bc8:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>
     bcc:	08 95       	ret

00000bce <send_instruction>:

        return status;
}

void send_instruction(uint8_t instruction, uint8_t* data, uint8_t* buffer, uint8_t len)
{
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	7b 01       	movw	r14, r22
     bda:	ea 01       	movw	r28, r20
     bdc:	12 2f       	mov	r17, r18
    RADIO_CSN_LOW();
     bde:	2d 98       	cbi	0x05, 5	; 5

    // send the instruction
    SPI_Write_Byte(instruction);
     be0:	0e 94 86 08 	call	0x110c	; 0x110c <SPI_Write_Byte>

    // pass in args
    if (len > 0)
     be4:	11 23       	and	r17, r17
     be6:	61 f0       	breq	.+24     	; 0xc00 <send_instruction+0x32>
    {
    	if (buffer == NULL)     //
     be8:	20 97       	sbiw	r28, 0x00	; 0
     bea:	29 f4       	brne	.+10     	; 0xbf6 <send_instruction+0x28>
    		SPI_Write_Block(data, len);
     bec:	c7 01       	movw	r24, r14
     bee:	61 2f       	mov	r22, r17
     bf0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <SPI_Write_Block>
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <send_instruction+0x32>
    	else
    		SPI_ReadWrite_Block(data, buffer, len);
     bf6:	c7 01       	movw	r24, r14
     bf8:	be 01       	movw	r22, r28
     bfa:	41 2f       	mov	r20, r17
     bfc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <SPI_ReadWrite_Block>
    }

    // resynch SPI
    RADIO_CSN_HIGH();
     c00:	2d 9a       	sbi	0x05, 5	; 5
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <Radio_Receive>:

    return RADIO_TX_SUCCESS;
}

RADIO_RX_STATUS Radio_Receive(radiopacket_t* buffer)
{
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	18 2f       	mov	r17, r24
     c14:	09 2f       	mov	r16, r25
	uint8_t status;
	uint8_t pipe_number;
	uint8_t doMove = 1;
	RADIO_RX_STATUS result;

	transmit_lock = 0;
     c16:	10 92 6c 17 	sts	0x176C, r1

	RADIO_CE_LOW();
     c1a:	2c 98       	cbi	0x05, 4	; 5

	status = _get_status();
     c1c:	0e 94 a9 05 	call	0xb52	; 0xb52 <_get_status>
    pipe_number =  (status & 0xE) >> 1;
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	8e 70       	andi	r24, 0x0E	; 14
     c24:	90 70       	andi	r25, 0x00	; 0
     c26:	95 95       	asr	r25
     c28:	87 95       	ror	r24
    if (pipe_number == RADIO_PIPE_EMPTY) {
    	result = RADIO_RX_FIFO_EMPTY;
    	doMove = 0;
    }

    if (rx_pipe_widths[pipe_number] > len) {
     c2a:	28 2f       	mov	r18, r24
     c2c:	fc 01       	movw	r30, r24
     c2e:	ee 57       	subi	r30, 0x7E	; 126
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
     c32:	80 81       	ld	r24, Z
     c34:	81 32       	cpi	r24, 0x21	; 33
     c36:	10 f0       	brcs	.+4      	; 0xc3c <Radio_Receive+0x2e>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	18 c0       	rjmp	.+48     	; 0xc6c <Radio_Receive+0x5e>
    	// the buffer isn't big enough, so don't copy the data.
    	result = RADIO_RX_INVALID_ARGS;
    	doMove = 0;
    }

    if (doMove) {
     c3c:	27 30       	cpi	r18, 0x07	; 7
     c3e:	11 f4       	brne	.+4      	; 0xc44 <Radio_Receive+0x36>
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	14 c0       	rjmp	.+40     	; 0xc6c <Radio_Receive+0x5e>
    	// Move the data payload into the local
    	send_instruction(R_RX_PAYLOAD, (uint8_t*)buffer, (uint8_t*)buffer, rx_pipe_widths[pipe_number]);
     c44:	20 81       	ld	r18, Z
     c46:	81 e6       	ldi	r24, 0x61	; 97
     c48:	61 2f       	mov	r22, r17
     c4a:	70 2f       	mov	r23, r16
     c4c:	41 2f       	mov	r20, r17
     c4e:	50 2f       	mov	r21, r16
     c50:	0e 94 e7 05 	call	0xbce	; 0xbce <send_instruction>

    	status = _get_status();
     c54:	0e 94 a9 05 	call	0xb52	; 0xb52 <_get_status>
    	pipe_number =  (status & 0xE) >> 1;

    	if (pipe_number != RADIO_PIPE_EMPTY)
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	8e 70       	andi	r24, 0x0E	; 14
     c5c:	90 70       	andi	r25, 0x00	; 0
     c5e:	95 95       	asr	r25
     c60:	87 95       	ror	r24
     c62:	87 30       	cpi	r24, 0x07	; 7
     c64:	11 f4       	brne	.+4      	; 0xc6a <Radio_Receive+0x5c>
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <Radio_Receive+0x5e>
     c6a:	83 e0       	ldi	r24, 0x03	; 3
    		result = RADIO_RX_MORE_PACKETS;
    	else
    		result = RADIO_RX_SUCCESS;
    }

    RADIO_CE_HIGH();
     c6c:	2c 9a       	sbi	0x05, 4	; 5
    transmit_lock = 0;
     c6e:	10 92 6c 17 	sts	0x176C, r1

    return result;
}
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <_config>:
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
        }
}

void _config()
{
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	0f 92       	push	r0
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;

	SPI_Init();
     c86:	0e 94 59 08 	call	0x10b2	; 0x10b2 <SPI_Init>

	// set address width to 5 bytes.
	value = ADDRESS_LENGTH - 2;                     // 0b11 for 5 bytes, 0b10 for 4 bytes, 0b01 for 3 bytes
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	89 83       	std	Y+1, r24	; 0x01
	_set_register(SETUP_AW, &value, 1);
     c8e:	8e 01       	movw	r16, r28
     c90:	0f 5f       	subi	r16, 0xFF	; 255
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	b8 01       	movw	r22, r16
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

	// set Enhanced Shockburst retry to every 586 us, up to 5 times.  If packet collisions are a problem even with AA enabled,
	// then consider changing the retry delay to be different on the different stations so that they do not keep colliding on each retry.
	value = 0x15;
     c9c:	85 e1       	ldi	r24, 0x15	; 21
     c9e:	89 83       	std	Y+1, r24	; 0x01
	//value = 0x10;
	_set_register(SETUP_RETR, &value, 1);
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	b8 01       	movw	r22, r16
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

	// Set to use 2.4 GHz channel 110.
	value = CHANNEL;
     caa:	80 e7       	ldi	r24, 0x70	; 112
     cac:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_CH, &value, 1);
     cae:	85 e0       	ldi	r24, 0x05	; 5
     cb0:	b8 01       	movw	r22, r16
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

	// Set radio to 2 Mbps and high power.  Leave LNA_HCURR at its default.
	value = _BV(RF_DR) | _BV(LNA_HCURR);
     cb8:	89 e0       	ldi	r24, 0x09	; 9
     cba:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_SETUP, &value, 1);
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	b8 01       	movw	r22, r16
     cc0:	41 e0       	ldi	r20, 0x01	; 1
     cc2:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

	// Enable 2-byte CRC and power up in receive mode.
	value = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     cc6:	8f e0       	ldi	r24, 0x0F	; 15
     cc8:	89 83       	std	Y+1, r24	; 0x01
	_set_register(CONFIG, &value, 1);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	b8 01       	movw	r22, r16
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

	send_instruction(FLUSH_TX, NULL, NULL, 0);
     cd4:	81 ee       	ldi	r24, 0xE1	; 225
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	0e 94 e7 05 	call	0xbce	; 0xbce <send_instruction>
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     ce4:	82 ee       	ldi	r24, 0xE2	; 226
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	0e 94 e7 05 	call	0xbce	; 0xbce <send_instruction>
}
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <Radio_Init>:

void Radio_Init()
{
        transmit_lock = 0;
     d00:	10 92 6c 17 	sts	0x176C, r1

        // disable radio during config
        RADIO_CE_LOW();
     d04:	2c 98       	cbi	0x05, 4	; 5

        // set CE and CSN
        RADIO_DDR |= _BV(RADIO_CE);
     d06:	24 9a       	sbi	0x04, 4	; 4
        RADIO_DDR |= _BV(RADIO_CSN);
     d08:	25 9a       	sbi	0x04, 5	; 4

        // Enable radio interrupt.
		// INT0 This interrupt is triggered when data are received and when a transmission completes.
        DDRE &= ~_BV(PORTD0);
     d0a:	68 98       	cbi	0x0d, 0	; 13
        EICRB |= _BV(ISC01);
     d0c:	ea e6       	ldi	r30, 0x6A	; 106
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	82 60       	ori	r24, 0x02	; 2
     d14:	80 83       	st	Z, r24
        EICRB &= ~_BV(ISC00);
     d16:	80 81       	ld	r24, Z
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	80 83       	st	Z, r24
        EIMSK |= _BV(INT0);
     d1c:	e8 9a       	sbi	0x1d, 0	; 29

        // Configure the radio registers that are not application-dependent.
        _config();
     d1e:	0e 94 3c 06 	call	0xc78	; 0xc78 <_config>
     d22:	84 ef       	ldi	r24, 0xF4	; 244
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <Radio_Init+0x26>

        // Wait for the radio to power up.
        _delay_ms(2);

        // enable radio as a receiver
        RADIO_CE_HIGH();
     d2a:	2c 9a       	sbi	0x05, 4	; 5
}
     d2c:	08 95       	ret

00000d2e <_get_register>:

        return status;
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	58 2f       	mov	r21, r24
     d38:	f6 2e       	mov	r15, r22
     d3a:	e7 2e       	mov	r14, r23
     d3c:	04 2f       	mov	r16, r20
     d3e:	86 2f       	mov	r24, r22
     d40:	97 2f       	mov	r25, r23
     d42:	9c 01       	movw	r18, r24
     d44:	f9 01       	movw	r30, r18
     d46:	80 e0       	ldi	r24, 0x00	; 0
        uint8_t status, i;
        for (i = 0; i < len; i++)
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
     d48:	9f ef       	ldi	r25, 0xFF	; 255
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <_get_register+0x22>
     d4c:	91 93       	st	Z+, r25
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
        uint8_t status, i;
        for (i = 0; i < len; i++)
     d4e:	8f 5f       	subi	r24, 0xFF	; 255
     d50:	80 17       	cp	r24, r16
     d52:	e0 f3       	brcs	.-8      	; 0xd4c <_get_register+0x1e>
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
        }
        RADIO_CSN_LOW();
     d54:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     d56:	85 2f       	mov	r24, r21
     d58:	8f 71       	andi	r24, 0x1F	; 31
     d5a:	0e 94 86 08 	call	0x110c	; 0x110c <SPI_Write_Byte>
     d5e:	18 2f       	mov	r17, r24
        SPI_ReadWrite_Block(NULL, buffer, len);
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	6f 2d       	mov	r22, r15
     d66:	7e 2d       	mov	r23, r14
     d68:	40 2f       	mov	r20, r16
     d6a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <SPI_ReadWrite_Block>

        RADIO_CSN_HIGH();
     d6e:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     d70:	81 2f       	mov	r24, r17
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	ff 90       	pop	r15
     d78:	ef 90       	pop	r14
     d7a:	08 95       	ret

00000d7c <Radio_Configure>:
	tx_address[4] = address[4];
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
}

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
{
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	08 2f       	mov	r16, r24
     d8c:	16 2f       	mov	r17, r22
	uint8_t value;

	if (power < RADIO_LOWEST_POWER || power > RADIO_HIGHEST_POWER
     d8e:	64 30       	cpi	r22, 0x04	; 4
     d90:	d8 f4       	brcc	.+54     	; 0xdc8 <Radio_Configure+0x4c>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	c8 f4       	brcc	.+50     	; 0xdc8 <Radio_Configure+0x4c>
			|| dr < RADIO_1MBPS || dr > RADIO_2MBPS)
		return;

	// set the data rate and power bits in the RF_SETUP register
	_get_register(RF_SETUP, &value, 1);
     d96:	86 e0       	ldi	r24, 0x06	; 6
     d98:	be 01       	movw	r22, r28
     d9a:	6f 5f       	subi	r22, 0xFF	; 255
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	41 e0       	ldi	r20, 0x01	; 1
     da0:	0e 94 97 06 	call	0xd2e	; 0xd2e <_get_register>

	value |= 3 << RF_PWR;	// set the power bits so that the & will mask the power value in properly.
	value &= power << RF_PWR;	// mask the power value into the RF status byte.
     da4:	61 2f       	mov	r22, r17
     da6:	66 0f       	add	r22, r22
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	86 60       	ori	r24, 0x06	; 6
     dac:	68 23       	and	r22, r24

	if (dr)
     dae:	00 23       	and	r16, r16
     db0:	11 f0       	breq	.+4      	; 0xdb6 <Radio_Configure+0x3a>
		value |= _BV(RF_DR);
     db2:	68 60       	ori	r22, 0x08	; 8
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <Radio_Configure+0x3c>
	else
		value &= ~_BV(RF_DR);
     db6:	67 7f       	andi	r22, 0xF7	; 247
     db8:	69 83       	std	Y+1, r22	; 0x01

	_set_register(RF_SETUP, &value, 1);
     dba:	86 e0       	ldi	r24, 0x06	; 6
     dbc:	be 01       	movw	r22, r28
     dbe:	6f 5f       	subi	r22, 0xFF	; 255
     dc0:	7f 4f       	sbci	r23, 0xFF	; 255
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>
}
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <Radio_Configure_Rx>:
// default address for pipe 2 is 0xc2c2c2c2c3 (disabled)
// default address for pipe 3 is 0xc2c2c2c2c4 (disabled)
// default address for pipe 4 is 0xc2c2c2c2c5 (disabled)
// default address for pipe 5 is 0xc2c2c2c2c6 (disabled)
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, uint8_t enable)
{
     dd4:	af 92       	push	r10
     dd6:	bf 92       	push	r11
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	08 2f       	mov	r16, r24
     dee:	fb 01       	movw	r30, r22
     df0:	c4 2e       	mov	r12, r20
	uint8_t value;
	uint8_t use_aa = 1;
	uint8_t payload_width = 32;
	if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;
     df2:	86 30       	cpi	r24, 0x06	; 6
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <Radio_Configure_Rx+0x24>
     df6:	63 c0       	rjmp	.+198    	; 0xebe <Radio_Configure_Rx+0xea>

	// store the pipe 0 address so that it can be overwritten when transmitting with auto-ack enabled.
	if (pipe == RADIO_PIPE_0)
     df8:	88 23       	and	r24, r24
     dfa:	81 f4       	brne	.+32     	; 0xe1c <Radio_Configure_Rx+0x48>
	{
		rx_pipe0_address[0] = address[0];
     dfc:	80 81       	ld	r24, Z
     dfe:	80 93 8d 02 	sts	0x028D, r24
		rx_pipe0_address[1] = address[1];
     e02:	81 81       	ldd	r24, Z+1	; 0x01
     e04:	80 93 8e 02 	sts	0x028E, r24
		rx_pipe0_address[2] = address[2];
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	80 93 8f 02 	sts	0x028F, r24
		rx_pipe0_address[3] = address[3];
     e0e:	83 81       	ldd	r24, Z+3	; 0x03
     e10:	80 93 90 02 	sts	0x0290, r24
		rx_pipe0_address[4] = address[4];
     e14:	84 81       	ldd	r24, Z+4	; 0x04
     e16:	80 93 91 02 	sts	0x0291, r24
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <Radio_Configure_Rx+0x4c>
	}

	// Set the address.  We set this stuff even if the pipe is being disabled, because for example the transmitter
	// needs pipe 0 to have the same address as the Tx address for auto-ack to work, even if pipe 0 is disabled.
	_set_register(RX_ADDR_P0 + pipe, address, pipe > RADIO_PIPE_1 ? 1 : ADDRESS_LENGTH);
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	10 f4       	brcc	.+4      	; 0xe24 <Radio_Configure_Rx+0x50>
     e20:	45 e0       	ldi	r20, 0x05	; 5
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <Radio_Configure_Rx+0x52>
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	80 2f       	mov	r24, r16
     e28:	86 5f       	subi	r24, 0xF6	; 246
     e2a:	bf 01       	movw	r22, r30
     e2c:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

	// Set auto-ack.
	_get_register(EN_AA, &value, 1);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	5e 01       	movw	r10, r28
     e34:	08 94       	sec
     e36:	a1 1c       	adc	r10, r1
     e38:	b1 1c       	adc	r11, r1
     e3a:	b5 01       	movw	r22, r10
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 97 06 	call	0xd2e	; 0xd2e <_get_register>
	if (use_aa)
		value |= _BV(pipe);
     e42:	e0 2e       	mov	r14, r16
     e44:	ff 24       	eor	r15, r15
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	00 2e       	mov	r0, r16
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <Radio_Configure_Rx+0x7e>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <Radio_Configure_Rx+0x7a>
     e56:	d8 2e       	mov	r13, r24
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	8d 29       	or	r24, r13
     e5c:	89 83       	std	Y+1, r24	; 0x01
	else
		value &= ~_BV(pipe);

	_set_register(EN_AA, &value, 1);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	b5 01       	movw	r22, r10
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

	// Set the pipe's payload width.  If the pipe is being disabled, then the payload width is set to 0.
	value = enable ? payload_width : 0;
     e68:	cc 20       	and	r12, r12
     e6a:	11 f4       	brne	.+4      	; 0xe70 <Radio_Configure_Rx+0x9c>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <Radio_Configure_Rx+0x9e>
     e70:	80 e2       	ldi	r24, 0x20	; 32
     e72:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RX_PW_P0 + pipe, &value, 1);
     e74:	80 2f       	mov	r24, r16
     e76:	8f 5e       	subi	r24, 0xEF	; 239
     e78:	be 01       	movw	r22, r28
     e7a:	6f 5f       	subi	r22, 0xFF	; 255
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>
	rx_pipe_widths[pipe] = value;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	22 e8       	ldi	r18, 0x82	; 130
     e88:	32 e0       	ldi	r19, 0x02	; 2
     e8a:	e2 0e       	add	r14, r18
     e8c:	f3 1e       	adc	r15, r19
     e8e:	f7 01       	movw	r30, r14
     e90:	80 83       	st	Z, r24

	// Enable or disable the pipe.
	_get_register(EN_RXADDR, &value, 1);
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	be 01       	movw	r22, r28
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	0e 94 97 06 	call	0xd2e	; 0xd2e <_get_register>
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
	if (enable)
     ea2:	cc 20       	and	r12, r12
     ea4:	11 f0       	breq	.+4      	; 0xeaa <Radio_Configure_Rx+0xd6>
		value |= _BV(pipe);
     ea6:	8d 29       	or	r24, r13
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <Radio_Configure_Rx+0xda>
	else
		value &= ~_BV(pipe);
     eaa:	d0 94       	com	r13
     eac:	8d 21       	and	r24, r13
     eae:	89 83       	std	Y+1, r24	; 0x01
	_set_register(EN_RXADDR, &value, 1);
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>
}
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	08 95       	ret

00000ed4 <_set_tx_mode>:
		_delay_us(65);
	}
}

void _set_tx_mode()
{
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	8e 01       	movw	r16, r28
     ee6:	0f 5f       	subi	r16, 0xFF	; 255
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	b8 01       	movw	r22, r16
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	0e 94 97 06 	call	0xd2e	; 0xd2e <_get_register>
	if ((config & _BV(PRIM_RX)) != 0)
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	80 ff       	sbrs	r24, 0
     ef6:	0d c0       	rjmp	.+26     	; 0xf12 <_set_tx_mode+0x3e>
	{
		config &= ~_BV(PRIM_RX);
     ef8:	8e 7f       	andi	r24, 0xFE	; 254
     efa:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	b8 01       	movw	r22, r16
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f06:	85 e1       	ldi	r24, 0x15	; 21
     f08:	98 2f       	mov	r25, r24
     f0a:	9a 95       	dec	r25
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <_set_tx_mode+0x36>
		// You can delete this if you're sending large packets (I'm thinking > 25 bytes, but I'm not sure) because it
		// sending the bytes over SPI can take this long.
		_delay_us(65);
		_delay_us(65);
	}
}
     f0e:	8a 95       	dec	r24
     f10:	f1 f7       	brne	.-4      	; 0xf0e <_set_tx_mode+0x3a>
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	08 95       	ret

00000f1e <Radio_Transmit>:

	_set_register(RF_SETUP, &value, 1);
}

uint8_t Radio_Transmit(radiopacket_t* payload, RADIO_TX_WAIT wait)
{
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	8c 01       	movw	r16, r24
     f26:	f6 2e       	mov	r15, r22
	uint8_t len = 32;

	// indicate that the driver is transmitting.
    transmit_lock = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 6c 17 	sts	0x176C, r24

    // disable the radio while writing to the Tx FIFO.
    RADIO_CE_LOW();
     f2e:	2c 98       	cbi	0x05, 4	; 5

	_set_tx_mode();
     f30:	0e 94 6a 07 	call	0xed4	; 0xed4 <_set_tx_mode>

    // for auto-ack to work, the pipe0 address must be set to the Tx address while the radio is transmitting.
    // The register will be set back to the original pipe 0 address when the TX_DS or MAX_RT interrupt is asserted.
    _set_register(RX_ADDR_P0, (uint8_t*)tx_address, ADDRESS_LENGTH);
     f34:	8a e0       	ldi	r24, 0x0A	; 10
     f36:	68 e8       	ldi	r22, 0x88	; 136
     f38:	72 e0       	ldi	r23, 0x02	; 2
     f3a:	45 e0       	ldi	r20, 0x05	; 5
     f3c:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

    // enable SPI
    RADIO_CSN_LOW();
     f40:	2d 98       	cbi	0x05, 5	; 5
    // send the "write transmit payload" instruction.
    SPI_Write_Byte(W_TX_PAYLOAD);
     f42:	80 ea       	ldi	r24, 0xA0	; 160
     f44:	0e 94 86 08 	call	0x110c	; 0x110c <SPI_Write_Byte>
    // write the payload to the Tx FIFO
    SPI_Write_Block((uint8_t*)payload,len);
     f48:	c8 01       	movw	r24, r16
     f4a:	60 e2       	ldi	r22, 0x20	; 32
     f4c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <SPI_Write_Block>
    // disable SPI
    RADIO_CSN_HIGH();
     f50:	2d 9a       	sbi	0x05, 5	; 5

    // start the transmission.
    RADIO_CE_HIGH();
     f52:	2c 9a       	sbi	0x05, 4	; 5

    if (wait == RADIO_WAIT_FOR_TX)
     f54:	ff 20       	and	r15, r15
     f56:	11 f0       	breq	.+4      	; 0xf5c <Radio_Transmit+0x3e>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <Radio_Transmit+0x4a>
    {
        while (transmit_lock);
     f5c:	80 91 6c 17 	lds	r24, 0x176C
     f60:	88 23       	and	r24, r24
     f62:	e1 f7       	brne	.-8      	; 0xf5c <Radio_Transmit+0x3e>
        return tx_last_status;
     f64:	80 91 94 02 	lds	r24, 0x0294
    }

    return RADIO_TX_SUCCESS;
}
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	08 95       	ret

00000f70 <_set_rx_mode>:
    // resynch SPI
    RADIO_CSN_HIGH();
}

void _set_rx_mode()
{
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	8e 01       	movw	r16, r28
     f82:	0f 5f       	subi	r16, 0xFF	; 255
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	b8 01       	movw	r22, r16
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 97 06 	call	0xd2e	; 0xd2e <_get_register>
	if ((config & _BV(PRIM_RX)) == 0)
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	80 fd       	sbrc	r24, 0
     f92:	0d c0       	rjmp	.+26     	; 0xfae <_set_rx_mode+0x3e>
	{
		config |= _BV(PRIM_RX);
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	b8 01       	movw	r22, r16
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>
     fa2:	85 e1       	ldi	r24, 0x15	; 21
     fa4:	98 2f       	mov	r25, r24
     fa6:	9a 95       	dec	r25
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <_set_rx_mode+0x36>
		// the radio takes 130 us to power up the receiver.
		_delay_us(65);
		_delay_us(65);
	}
}
     faa:	8a 95       	dec	r24
     fac:	f1 f7       	brne	.-4      	; 0xfaa <_set_rx_mode+0x3a>
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	08 95       	ret

00000fba <__vector_1>:
	return wh;
}

// Interrupt handler
ISR(INT0_vect)
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	0b b6       	in	r0, 0x3b	; 59
     fc4:	0f 92       	push	r0
     fc6:	11 24       	eor	r1, r1
     fc8:	2f 93       	push	r18
     fca:	3f 93       	push	r19
     fcc:	4f 93       	push	r20
     fce:	5f 93       	push	r21
     fd0:	6f 93       	push	r22
     fd2:	7f 93       	push	r23
     fd4:	8f 93       	push	r24
     fd6:	9f 93       	push	r25
     fd8:	af 93       	push	r26
     fda:	bf 93       	push	r27
     fdc:	ef 93       	push	r30
     fde:	ff 93       	push	r31
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
     fea:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
     fec:	0e 94 a9 05 	call	0xb52	; 0xb52 <_get_status>
     ff0:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	86 ff       	sbrs	r24, 6
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <__vector_1+0x4a>
        pipe_number =  (status & 0xE) >> 1;
        radio_rxhandler(pipe_number);
     ff8:	8e 70       	andi	r24, 0x0E	; 14
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	0e 94 3f 02 	call	0x47e	; 0x47e <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	85 ff       	sbrs	r24, 5
    1008:	1d c0       	rjmp	.+58     	; 0x1044 <__vector_1+0x8a>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    100a:	10 92 6c 17 	sts	0x176C, r1
        _reset_pipe0_address();
    100e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_reset_pipe0_address>
        _set_rx_mode();
    1012:	0e 94 b8 07 	call	0xf70	; 0xf70 <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    1016:	80 91 92 02 	lds	r24, 0x0292
    101a:	90 91 93 02 	lds	r25, 0x0293
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	90 93 93 02 	sts	0x0293, r25
    1026:	80 93 92 02 	sts	0x0292, r24
        tx_history |= 1;
    102a:	80 91 92 02 	lds	r24, 0x0292
    102e:	90 91 93 02 	lds	r25, 0x0293
    1032:	81 60       	ori	r24, 0x01	; 1
    1034:	90 93 93 02 	sts	0x0293, r25
    1038:	80 93 92 02 	sts	0x0292, r24
        tx_last_status = RADIO_TX_SUCCESS;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 94 02 	sts	0x0294, r24
    1042:	17 c0       	rjmp	.+46     	; 0x1072 <__vector_1+0xb8>
    } else if (status & _BV(MAX_RT)) {
    1044:	84 ff       	sbrs	r24, 4
    1046:	15 c0       	rjmp	.+42     	; 0x1072 <__vector_1+0xb8>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1048:	81 ee       	ldi	r24, 0xE1	; 225
    104a:	0e 94 86 08 	call	0x110c	; 0x110c <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    104e:	10 92 6c 17 	sts	0x176C, r1
        _reset_pipe0_address();
    1052:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_reset_pipe0_address>
        _set_rx_mode();
    1056:	0e 94 b8 07 	call	0xf70	; 0xf70 <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    105a:	80 91 92 02 	lds	r24, 0x0292
    105e:	90 91 93 02 	lds	r25, 0x0293
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	90 93 93 02 	sts	0x0293, r25
    106a:	80 93 92 02 	sts	0x0292, r24
        tx_last_status = RADIO_TX_MAX_RT;
    106e:	10 92 94 02 	sts	0x0294, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1072:	80 e7       	ldi	r24, 0x70	; 112
    1074:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1076:	87 e0       	ldi	r24, 0x07	; 7
    1078:	be 01       	movw	r22, r28
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	0e 94 af 05 	call	0xb5e	; 0xb5e <_set_register>

    RADIO_CE_HIGH();
    1084:	2c 9a       	sbi	0x05, 4	; 5
}
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0b be       	out	0x3b, r0	; 59
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <SPI_Init>:
#define SPI_WAIT()              while (!(SPSR & _BV(SPIF)));

void SPI_Init()
{
	// set MOSI, SCK, and SS output, MISO input
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | ~(_BV(SPI_MISO));
    10b2:	84 b1       	in	r24, 0x04	; 4
    10b4:	87 6f       	ori	r24, 0xF7	; 247
    10b6:	84 b9       	out	0x04, r24	; 4

	SPI_PORT |= _BV(SPI_SS);
    10b8:	28 9a       	sbi	0x05, 0	; 5

	SPCR |= _BV(SPE) | _BV(MSTR);
    10ba:	8c b5       	in	r24, 0x2c	; 44
    10bc:	80 65       	ori	r24, 0x50	; 80
    10be:	8c bd       	out	0x2c, r24	; 44
}
    10c0:	08 95       	ret

000010c2 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	db 01       	movw	r26, r22
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	0c c0       	rjmp	.+24     	; 0x10e8 <SPI_ReadWrite_Block+0x26>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    10d0:	fe 01       	movw	r30, r28
    10d2:	e2 0f       	add	r30, r18
    10d4:	f3 1f       	adc	r31, r19
    10d6:	80 81       	ld	r24, Z
    10d8:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    10da:	0d b4       	in	r0, 0x2d	; 45
    10dc:	07 fe       	sbrs	r0, 7
    10de:	fd cf       	rjmp	.-6      	; 0x10da <SPI_ReadWrite_Block+0x18>
          buffer[i] = SPDR;
    10e0:	8e b5       	in	r24, 0x2e	; 46
    10e2:	8d 93       	st	X+, r24
    10e4:	2f 5f       	subi	r18, 0xFF	; 255
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    10e8:	24 17       	cp	r18, r20
    10ea:	90 f3       	brcs	.-28     	; 0x10d0 <SPI_ReadWrite_Block+0xe>
          SPDR = data[i];
          SPI_WAIT();
          buffer[i] = SPDR;
    }
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <SPI_Write_Block>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    10f2:	fc 01       	movw	r30, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <SPI_Write_Block+0x14>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    10f8:	80 81       	ld	r24, Z
    10fa:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    10fc:	0d b4       	in	r0, 0x2d	; 45
    10fe:	07 fe       	sbrs	r0, 7
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <SPI_Write_Block+0xa>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    1102:	9f 5f       	subi	r25, 0xFF	; 255
    1104:	31 96       	adiw	r30, 0x01	; 1
    1106:	96 17       	cp	r25, r22
    1108:	b8 f3       	brcs	.-18     	; 0x10f8 <SPI_Write_Block+0x6>
          SPDR = data[i];
          SPI_WAIT();
    }
}
    110a:	08 95       	ret

0000110c <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    110c:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    110e:	0d b4       	in	r0, 0x2d	; 45
    1110:	07 fe       	sbrs	r0, 7
    1112:	fd cf       	rjmp	.-6      	; 0x110e <SPI_Write_Byte+0x2>
    return SPDR;
    1114:	8e b5       	in	r24, 0x2e	; 46
}
    1116:	08 95       	ret

00001118 <sonar_init>:
uint16_t _get_TCNT3();

void sonar_init()
{
	// set PE6 for output
	DDRE |= _BV(PORTE6);
    1118:	6e 9a       	sbi	0x0d, 6	; 13

	// set timer3 to run 1/8 of the microprocessor's clock frequency
	TCCR3B &= ~_BV(CS30);
    111a:	e1 e9       	ldi	r30, 0x91	; 145
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8e 7f       	andi	r24, 0xFE	; 254
    1122:	80 83       	st	Z, r24
	TCCR3B |= _BV(CS31);
    1124:	80 81       	ld	r24, Z
    1126:	82 60       	ori	r24, 0x02	; 2
    1128:	80 83       	st	Z, r24
	TCCR3B &= ~_BV(CS32);
    112a:	80 81       	ld	r24, Z
    112c:	8b 7f       	andi	r24, 0xFB	; 251
    112e:	80 83       	st	Z, r24

	// enable noise canceler for input capture
	TCCR3B |= _BV(ICNC3);
    1130:	80 81       	ld	r24, Z
    1132:	80 68       	ori	r24, 0x80	; 128
    1134:	80 83       	st	Z, r24

	// set input capture on rising edge
	TCCR3B |= _BV(ICES3);
    1136:	80 81       	ld	r24, Z
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	80 83       	st	Z, r24

	// clear input capture flag
	TIFR3 |= _BV(ICF3);
    113c:	c5 9a       	sbi	0x18, 5	; 24

	// enable input capture interrupt
	TIMSK3 |= _BV(ICIE3);
    113e:	e1 e7       	ldi	r30, 0x71	; 113
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 62       	ori	r24, 0x20	; 32
    1146:	80 83       	st	Z, r24

	sei();
    1148:	78 94       	sei
}
    114a:	08 95       	ret

0000114c <sonar_trigger>:

void sonar_trigger()
{
	// trigger a 10 us pulse
	PORTE |= _BV(PE6);
    114c:	76 9a       	sbi	0x0e, 6	; 14
    114e:	8a e1       	ldi	r24, 0x1A	; 26
    1150:	8a 95       	dec	r24
    1152:	f1 f7       	brne	.-4      	; 0x1150 <sonar_trigger+0x4>
	_delay_us(10);
	PORTE &= ~_BV(PE6);
    1154:	76 98       	cbi	0x0e, 6	; 14
}
    1156:	08 95       	ret

00001158 <sonar_echo_received>:

uint8_t sonar_echo_received()
{
	char sreg = SREG;
    1158:	9f b7       	in	r25, 0x3f	; 63
	cli();
    115a:	f8 94       	cli
	uint8_t temp = received;
    115c:	80 91 b3 03 	lds	r24, 0x03B3
	received = 0;
    1160:	10 92 b3 03 	sts	0x03B3, r1
	SREG = sreg;
    1164:	9f bf       	out	0x3f, r25	; 63
	return temp;
}
    1166:	08 95       	ret

00001168 <sonar_get_distance>:

uint16_t sonar_get_distance()
{
	return trigger_time - echo_time;
    1168:	20 91 b4 03 	lds	r18, 0x03B4
    116c:	30 91 b5 03 	lds	r19, 0x03B5
    1170:	80 91 b1 03 	lds	r24, 0x03B1
    1174:	90 91 b2 03 	lds	r25, 0x03B2
    1178:	28 1b       	sub	r18, r24
    117a:	39 0b       	sbc	r19, r25
}
    117c:	c9 01       	movw	r24, r18
    117e:	08 95       	ret

00001180 <sonar_get_ping_time>:

uint16_t sonar_get_ping_time()
{
	return trigger_time;
    1180:	20 91 b4 03 	lds	r18, 0x03B4
    1184:	30 91 b5 03 	lds	r19, 0x03B5
}
    1188:	c9 01       	movw	r24, r18
    118a:	08 95       	ret

0000118c <sonar_get_sonar_time>:

uint16_t sonar_get_sonar_time()
{
	return echo_time;
    118c:	20 91 b1 03 	lds	r18, 0x03B1
    1190:	30 91 b2 03 	lds	r19, 0x03B2
}
    1194:	c9 01       	movw	r24, r18
    1196:	08 95       	ret

00001198 <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	8f 93       	push	r24
    11a4:	9f 93       	push	r25
	if (TCCR3B & _BV(ICES3)) { // a rising edge is captured
    11a6:	80 91 91 00 	lds	r24, 0x0091
    11aa:	86 ff       	sbrs	r24, 6
    11ac:	10 c0       	rjmp	.+32     	; 0x11ce <__vector_31+0x36>

		echo_time = ICR3;
    11ae:	80 91 96 00 	lds	r24, 0x0096
    11b2:	90 91 97 00 	lds	r25, 0x0097
    11b6:	90 93 b2 03 	sts	0x03B2, r25
    11ba:	80 93 b1 03 	sts	0x03B1, r24

		TCNT3 = 0;
    11be:	10 92 95 00 	sts	0x0095, r1
    11c2:	10 92 94 00 	sts	0x0094, r1

		// set input capture on falling edge
		TCCR3B &= ~_BV(ICES3);
    11c6:	80 91 91 00 	lds	r24, 0x0091
    11ca:	8f 7b       	andi	r24, 0xBF	; 191
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <__vector_31+0x52>

		// clear input capture flag
		TIFR3 |= _BV(ICF3);

	} else { // a falling edge is captured
		received = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 b3 03 	sts	0x03B3, r24
		trigger_time = ICR3;
    11d4:	80 91 96 00 	lds	r24, 0x0096
    11d8:	90 91 97 00 	lds	r25, 0x0097
    11dc:	90 93 b5 03 	sts	0x03B5, r25
    11e0:	80 93 b4 03 	sts	0x03B4, r24
		// echo_time = trigger_time;

		// set input capture on rising edge
		TCCR3B |= _BV(ICES3);
    11e4:	80 91 91 00 	lds	r24, 0x0091
    11e8:	80 64       	ori	r24, 0x40	; 64
    11ea:	80 93 91 00 	sts	0x0091, r24

		// clear input capture flag
		TIFR3 |= _BV(ICF3);
    11ee:	c5 9a       	sbi	0x18, 5	; 24
	}
}
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	0f 90       	pop	r0
    11fa:	1f 90       	pop	r1
    11fc:	18 95       	reti

000011fe <idle>:
 */
/**
 *  @brief The idle task does nothing but busy loop.
 */
static void idle (void)
{
    11fe:	ff cf       	rjmp	.-2      	; 0x11fe <idle>

00001200 <exit_kernel>:
{
	/*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
     SAVE_CTX();
    1200:	ff 93       	push	r31
    1202:	fc b7       	in	r31, 0x3c	; 60
    1204:	ff 93       	push	r31
    1206:	ff b7       	in	r31, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	ff 93       	push	r31
    120c:	ef 93       	push	r30
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	bf 93       	push	r27
    1214:	af 93       	push	r26
    1216:	9f 93       	push	r25
    1218:	8f 93       	push	r24
    121a:	7f 93       	push	r23
    121c:	6f 93       	push	r22
    121e:	5f 93       	push	r21
    1220:	4f 93       	push	r20
    1222:	3f 93       	push	r19
    1224:	2f 93       	push	r18
    1226:	1f 93       	push	r17
    1228:	0f 93       	push	r16
    122a:	ff 92       	push	r15
    122c:	ef 92       	push	r14
    122e:	df 92       	push	r13
    1230:	cf 92       	push	r12
    1232:	bf 92       	push	r11
    1234:	af 92       	push	r10
    1236:	9f 92       	push	r9
    1238:	8f 92       	push	r8
    123a:	7f 92       	push	r7
    123c:	6f 92       	push	r6
    123e:	5f 92       	push	r5
    1240:	4f 92       	push	r4
    1242:	3f 92       	push	r3
    1244:	2f 92       	push	r2
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    kernel_sp = SP;
    124a:	8d b7       	in	r24, 0x3d	; 61
    124c:	9e b7       	in	r25, 0x3e	; 62
    124e:	90 93 be 03 	sts	0x03BE, r25
    1252:	80 93 bd 03 	sts	0x03BD, r24

    /*
     * Now restore the task's context, SP first.
     */
    SP = (uint16_t)(cur_task->sp);
    1256:	e0 91 b6 03 	lds	r30, 0x03B6
    125a:	f0 91 b7 03 	lds	r31, 0x03B7
    125e:	e0 50       	subi	r30, 0x00	; 0
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	9e bf       	out	0x3e, r25	; 62
    1268:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	2f 90       	pop	r2
    1270:	3f 90       	pop	r3
    1272:	4f 90       	pop	r4
    1274:	5f 90       	pop	r5
    1276:	6f 90       	pop	r6
    1278:	7f 90       	pop	r7
    127a:	8f 90       	pop	r8
    127c:	9f 90       	pop	r9
    127e:	af 90       	pop	r10
    1280:	bf 90       	pop	r11
    1282:	cf 90       	pop	r12
    1284:	df 90       	pop	r13
    1286:	ef 90       	pop	r14
    1288:	ff 90       	pop	r15
    128a:	0f 91       	pop	r16
    128c:	1f 91       	pop	r17
    128e:	2f 91       	pop	r18
    1290:	3f 91       	pop	r19
    1292:	4f 91       	pop	r20
    1294:	5f 91       	pop	r21
    1296:	6f 91       	pop	r22
    1298:	7f 91       	pop	r23
    129a:	8f 91       	pop	r24
    129c:	9f 91       	pop	r25
    129e:	af 91       	pop	r26
    12a0:	bf 91       	pop	r27
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	ef 91       	pop	r30
    12a8:	ff 91       	pop	r31
    12aa:	ff bf       	out	0x3f, r31	; 63
    12ac:	ff 91       	pop	r31
    12ae:	fc bf       	out	0x3c, r31	; 60
    12b0:	ff 91       	pop	r31
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */

	asm volatile ("ret\n"::);
    12b2:	08 95       	ret

000012b4 <enter_kernel>:
{
	/*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
    SAVE_CTX();
    12b4:	ff 93       	push	r31
    12b6:	fc b7       	in	r31, 0x3c	; 60
    12b8:	ff 93       	push	r31
    12ba:	ff b7       	in	r31, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	ff 93       	push	r31
    12c0:	ef 93       	push	r30
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	bf 93       	push	r27
    12c8:	af 93       	push	r26
    12ca:	9f 93       	push	r25
    12cc:	8f 93       	push	r24
    12ce:	7f 93       	push	r23
    12d0:	6f 93       	push	r22
    12d2:	5f 93       	push	r21
    12d4:	4f 93       	push	r20
    12d6:	3f 93       	push	r19
    12d8:	2f 93       	push	r18
    12da:	1f 93       	push	r17
    12dc:	0f 93       	push	r16
    12de:	ff 92       	push	r15
    12e0:	ef 92       	push	r14
    12e2:	df 92       	push	r13
    12e4:	cf 92       	push	r12
    12e6:	bf 92       	push	r11
    12e8:	af 92       	push	r10
    12ea:	9f 92       	push	r9
    12ec:	8f 92       	push	r8
    12ee:	7f 92       	push	r7
    12f0:	6f 92       	push	r6
    12f2:	5f 92       	push	r5
    12f4:	4f 92       	push	r4
    12f6:	3f 92       	push	r3
    12f8:	2f 92       	push	r2
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    cur_task->sp = (uint8_t*)SP;
    12fe:	e0 91 b6 03 	lds	r30, 0x03B6
    1302:	f0 91 b7 03 	lds	r31, 0x03B7
    1306:	8d b7       	in	r24, 0x3d	; 61
    1308:	9e b7       	in	r25, 0x3e	; 62
    130a:	e0 50       	subi	r30, 0x00	; 0
    130c:	fe 4f       	sbci	r31, 0xFE	; 254
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24

    /*
     * Now restore the kernel's context, SP first.
     */
    SP = kernel_sp;
    1312:	80 91 bd 03 	lds	r24, 0x03BD
    1316:	90 91 be 03 	lds	r25, 0x03BE
    131a:	9e bf       	out	0x3e, r25	; 62
    131c:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    131e:	0f 90       	pop	r0
    1320:	1f 90       	pop	r1
    1322:	2f 90       	pop	r2
    1324:	3f 90       	pop	r3
    1326:	4f 90       	pop	r4
    1328:	5f 90       	pop	r5
    132a:	6f 90       	pop	r6
    132c:	7f 90       	pop	r7
    132e:	8f 90       	pop	r8
    1330:	9f 90       	pop	r9
    1332:	af 90       	pop	r10
    1334:	bf 90       	pop	r11
    1336:	cf 90       	pop	r12
    1338:	df 90       	pop	r13
    133a:	ef 90       	pop	r14
    133c:	ff 90       	pop	r15
    133e:	0f 91       	pop	r16
    1340:	1f 91       	pop	r17
    1342:	2f 91       	pop	r18
    1344:	3f 91       	pop	r19
    1346:	4f 91       	pop	r20
    1348:	5f 91       	pop	r21
    134a:	6f 91       	pop	r22
    134c:	7f 91       	pop	r23
    134e:	8f 91       	pop	r24
    1350:	9f 91       	pop	r25
    1352:	af 91       	pop	r26
    1354:	bf 91       	pop	r27
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	ef 91       	pop	r30
    135c:	ff 91       	pop	r31
    135e:	ff bf       	out	0x3f, r31	; 63
    1360:	ff 91       	pop	r31
    1362:	fc bf       	out	0x3c, r31	; 60
    1364:	ff 91       	pop	r31
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */

	asm volatile ("ret\n"::);
    1366:	08 95       	ret

00001368 <__vector_17>:
     * of SREG. We know it should have interrupts enabled because this
     * ISR was able to execute, but it has interrupts disabled because
     * it was stored while this ISR was executing. So we set the bit (I = bit 7)
     * in the stored value.
     */
    SAVE_CTX_TOP();
    1368:	ff 93       	push	r31
    136a:	fc b7       	in	r31, 0x3c	; 60
    136c:	ff 93       	push	r31
    136e:	ff b7       	in	r31, 0x3f	; 63
    1370:	f8 94       	cli
   
    STACK_SREG_SET_I_BIT();
    1372:	f0 68       	ori	r31, 0x80	; 128

    SAVE_CTX_BOTTOM();
    1374:	ff 93       	push	r31
    1376:	ef 93       	push	r30
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	bf 93       	push	r27
    137e:	af 93       	push	r26
    1380:	9f 93       	push	r25
    1382:	8f 93       	push	r24
    1384:	7f 93       	push	r23
    1386:	6f 93       	push	r22
    1388:	5f 93       	push	r21
    138a:	4f 93       	push	r20
    138c:	3f 93       	push	r19
    138e:	2f 93       	push	r18
    1390:	1f 93       	push	r17
    1392:	0f 93       	push	r16
    1394:	ff 92       	push	r15
    1396:	ef 92       	push	r14
    1398:	df 92       	push	r13
    139a:	cf 92       	push	r12
    139c:	bf 92       	push	r11
    139e:	af 92       	push	r10
    13a0:	9f 92       	push	r9
    13a2:	8f 92       	push	r8
    13a4:	7f 92       	push	r7
    13a6:	6f 92       	push	r6
    13a8:	5f 92       	push	r5
    13aa:	4f 92       	push	r4
    13ac:	3f 92       	push	r3
    13ae:	2f 92       	push	r2
    13b0:	1f 92       	push	r1
    13b2:	0f 92       	push	r0

    cur_task->sp = (uint8_t*)SP;
    13b4:	e0 91 b6 03 	lds	r30, 0x03B6
    13b8:	f0 91 b7 03 	lds	r31, 0x03B7
    13bc:	8d b7       	in	r24, 0x3d	; 61
    13be:	9e b7       	in	r25, 0x3e	; 62
    13c0:	e0 50       	subi	r30, 0x00	; 0
    13c2:	fe 4f       	sbci	r31, 0xFE	; 254
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
    /*
     * Now that we already saved a copy of the stack pointer
     * for every context including the kernel, we can move to
     * the kernel stack and use it. We will restore it again later.
     */
    SP = kernel_sp;
    13c8:	80 91 bd 03 	lds	r24, 0x03BD
    13cc:	90 91 be 03 	lds	r25, 0x03BE
    13d0:	9e bf       	out	0x3e, r25	; 62
    13d2:	8d bf       	out	0x3d, r24	; 61

    /*
     * Inform the kernel that this task was interrupted.
     */
    kernel_request = TIMER_EXPIRED;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 10 16 	sts	0x1610, r24

    /*
     * Prepare for next tick interrupt.
     */
    OCR1A += TICK_CYCLES;
    13da:	e8 e8       	ldi	r30, 0x88	; 136
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	80 5c       	subi	r24, 0xC0	; 192
    13e4:	93 46       	sbci	r25, 0x63	; 99
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24

    /*
     * Restore the kernel context. (The stack pointer is restored again.)
     */
    SP = kernel_sp;
    13ea:	80 91 bd 03 	lds	r24, 0x03BD
    13ee:	90 91 be 03 	lds	r25, 0x03BE
    13f2:	9e bf       	out	0x3e, r25	; 62
    13f4:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	2f 90       	pop	r2
    13fc:	3f 90       	pop	r3
    13fe:	4f 90       	pop	r4
    1400:	5f 90       	pop	r5
    1402:	6f 90       	pop	r6
    1404:	7f 90       	pop	r7
    1406:	8f 90       	pop	r8
    1408:	9f 90       	pop	r9
    140a:	af 90       	pop	r10
    140c:	bf 90       	pop	r11
    140e:	cf 90       	pop	r12
    1410:	df 90       	pop	r13
    1412:	ef 90       	pop	r14
    1414:	ff 90       	pop	r15
    1416:	0f 91       	pop	r16
    1418:	1f 91       	pop	r17
    141a:	2f 91       	pop	r18
    141c:	3f 91       	pop	r19
    141e:	4f 91       	pop	r20
    1420:	5f 91       	pop	r21
    1422:	6f 91       	pop	r22
    1424:	7f 91       	pop	r23
    1426:	8f 91       	pop	r24
    1428:	9f 91       	pop	r25
    142a:	af 91       	pop	r26
    142c:	bf 91       	pop	r27
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	ef 91       	pop	r30
    1434:	ff 91       	pop	r31
    1436:	ff bf       	out	0x3f, r31	; 63
    1438:	ff 91       	pop	r31
    143a:	fc bf       	out	0x3c, r31	; 60
    143c:	ff 91       	pop	r31
     * Explilictly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
    143e:	08 95       	ret

00001440 <OS_Abort>:
}

/** @brief Abort the execution of this RTOS due to an unrecoverable erorr.
 */
void OS_Abort(void)
{
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    uint8_t i, j;
    uint8_t flashes, mask;

    Disable_Interrupt();
    1446:	f8 94       	cli

    /* Initialize port for output */
    DDRG = LED_RED_MASK | LED_GREEN_MASK;
    1448:	80 ef       	ldi	r24, 0xF0	; 240
    144a:	83 bb       	out	0x13, r24	; 19

    if(error_msg < ERR_RUN_1_USER_CALLED_OS_ABORT)
    144c:	80 91 95 02 	lds	r24, 0x0295
    1450:	86 30       	cpi	r24, 0x06	; 6
    1452:	28 f4       	brcc	.+10     	; 0x145e <OS_Abort+0x1e>
    {
        flashes = error_msg + 1;
    1454:	60 91 95 02 	lds	r22, 0x0295
    1458:	6f 5f       	subi	r22, 0xFF	; 255
    145a:	70 e6       	ldi	r23, 0x60	; 96
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <OS_Abort+0x26>
        mask = LED_GREEN_MASK;
    }
    else
    {
        flashes = error_msg + 1 - ERR_RUN_1_USER_CALLED_OS_ABORT;
    145e:	60 91 95 02 	lds	r22, 0x0295
    1462:	65 50       	subi	r22, 0x05	; 5
    1464:	70 e9       	ldi	r23, 0x90	; 144
    }


    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);
    1466:	e0 ef       	ldi	r30, 0xF0	; 240
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1468:	20 e5       	ldi	r18, 0x50	; 80
    146a:	33 ec       	ldi	r19, 0xC3	; 195
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    }


    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);
    1470:	e4 bb       	out	0x14, r30	; 20
    1472:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1474:	da 01       	movw	r26, r20
    1476:	c9 01       	movw	r24, r18
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <OS_Abort+0x38>

    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);

        for(i = 0; i < 100; ++i)
    147c:	ff 5f       	subi	r31, 0xFF	; 255
    147e:	f4 36       	cpi	r31, 0x64	; 100
    1480:	c9 f7       	brne	.-14     	; 0x1474 <OS_Abort+0x34>
        {
               _delay_25ms();
        }

        PORTG = (uint8_t) 0;
    1482:	14 ba       	out	0x14, r1	; 20
    1484:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1486:	da 01       	movw	r26, r20
    1488:	c9 01       	movw	r24, r18
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <OS_Abort+0x4a>
               _delay_25ms();
        }

        PORTG = (uint8_t) 0;

        for(i = 0; i < 40; ++i)
    148e:	ff 5f       	subi	r31, 0xFF	; 255
    1490:	f8 32       	cpi	r31, 0x28	; 40
    1492:	c9 f7       	brne	.-14     	; 0x1486 <OS_Abort+0x46>
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	13 c0       	rjmp	.+38     	; 0x14be <OS_Abort+0x7e>
        }

 
        for(j = 0; j < flashes; ++j)
        {
            PORTG = mask;
    1498:	74 bb       	out	0x14, r23	; 20
    149a:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    149c:	da 01       	movw	r26, r20
    149e:	c9 01       	movw	r24, r18
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <OS_Abort+0x60>
 
        for(j = 0; j < flashes; ++j)
        {
            PORTG = mask;

            for(i = 0; i < 10; ++i)
    14a4:	ff 5f       	subi	r31, 0xFF	; 255
    14a6:	fa 30       	cpi	r31, 0x0A	; 10
    14a8:	c9 f7       	brne	.-14     	; 0x149c <OS_Abort+0x5c>
            {
                _delay_25ms();
            }

            PORTG = (uint8_t) 0;
    14aa:	14 ba       	out	0x14, r1	; 20
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    14ae:	da 01       	movw	r26, r20
    14b0:	c9 01       	movw	r24, r18
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	f1 f7       	brne	.-4      	; 0x14b2 <OS_Abort+0x72>
                _delay_25ms();
            }

            PORTG = (uint8_t) 0;

            for(i = 0; i < 10; ++i)
    14b6:	ff 5f       	subi	r31, 0xFF	; 255
    14b8:	fa 30       	cpi	r31, 0x0A	; 10
    14ba:	c9 f7       	brne	.-14     	; 0x14ae <OS_Abort+0x6e>
        {
               _delay_25ms();
        }

 
        for(j = 0; j < flashes; ++j)
    14bc:	1f 5f       	subi	r17, 0xFF	; 255
    14be:	16 17       	cp	r17, r22
    14c0:	58 f3       	brcs	.-42     	; 0x1498 <OS_Abort+0x58>
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    14c4:	da 01       	movw	r26, r20
    14c6:	c9 01       	movw	r24, r18
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <OS_Abort+0x88>
            {
                _delay_25ms();
            }
        }

        for(i = 0; i < 20; ++i)
    14cc:	ff 5f       	subi	r31, 0xFF	; 255
    14ce:	f4 31       	cpi	r31, 0x14	; 20
    14d0:	c9 f7       	brne	.-14     	; 0x14c4 <OS_Abort+0x84>
    14d2:	ce cf       	rjmp	.-100    	; 0x1470 <OS_Abort+0x30>

000014d4 <kernel_create_task>:
 * it has called "enter_kernel()"; so that when we switch to it later, we
 * can just restore its execution context on its stack.
 * @sa enter_kernel 
 */
static int kernel_create_task()
{
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;
    

    if (dead_pool_queue.head == NULL)
    14d8:	c0 91 1b 16 	lds	r28, 0x161B
    14dc:	d0 91 1c 16 	lds	r29, 0x161C
    14e0:	20 97       	sbiw	r28, 0x00	; 0
    14e2:	19 f4       	brne	.+6      	; 0x14ea <kernel_create_task+0x16>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	cf c0       	rjmp	.+414    	; 0x1688 <kernel_create_task+0x1b4>
    {
        /* Too many tasks! */
        return 0;
    }

    if(kernel_request_create_args.level == PERIODIC &&
    14ea:	80 91 15 16 	lds	r24, 0x1615
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	69 f4       	brne	.+26     	; 0x150c <kernel_create_task+0x38>
    14f2:	80 91 16 16 	lds	r24, 0x1616
    14f6:	88 23       	and	r24, r24
    14f8:	21 f0       	breq	.+8      	; 0x1502 <kernel_create_task+0x2e>
    14fa:	80 91 16 16 	lds	r24, 0x1616
    14fe:	89 30       	cpi	r24, 0x09	; 9
    1500:	28 f0       	brcs	.+10     	; 0x150c <kernel_create_task+0x38>
        (kernel_request_create_args.name == IDLE ||
         kernel_request_create_args.name > MAXNAME))
    {
        /* PERIODIC name is out of range [1 .. MAXNAME] */
        error_msg = ERR_2_CREATE_NAME_OUT_OF_RANGE;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    1508:	0e 94 20 0a 	call	0x1440	; 0x1440 <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    150c:	80 91 15 16 	lds	r24, 0x1615
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	69 f4       	brne	.+26     	; 0x152e <kernel_create_task+0x5a>
    1514:	e0 91 16 16 	lds	r30, 0x1616
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	e7 5a       	subi	r30, 0xA7	; 167
    151c:	f9 4e       	sbci	r31, 0xE9	; 233
    151e:	80 81       	ld	r24, Z
    1520:	88 23       	and	r24, r24
    1522:	29 f4       	brne	.+10     	; 0x152e <kernel_create_task+0x5a>
        name_in_PPP[kernel_request_create_args.name] == 0)
    {
        error_msg = ERR_5_NAME_NOT_IN_PPP;
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    152a:	0e 94 20 0a 	call	0x1440	; 0x1440 <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    152e:	80 91 15 16 	lds	r24, 0x1615
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	81 f4       	brne	.+32     	; 0x1556 <kernel_create_task+0x82>
    1536:	e0 91 16 16 	lds	r30, 0x1616
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	e9 5b       	subi	r30, 0xB9	; 185
    1542:	f9 4e       	sbci	r31, 0xE9	; 233
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	89 2b       	or	r24, r25
    154a:	29 f0       	breq	.+10     	; 0x1556 <kernel_create_task+0x82>
    name_to_task_ptr[kernel_request_create_args.name] != NULL)
    {
        /* PERIODIC name already used */
        error_msg = ERR_4_PERIODIC_NAME_IN_USE;
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    1552:	0e 94 20 0a 	call	0x1440	; 0x1440 <OS_Abort>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
    1556:	80 91 15 16 	lds	r24, 0x1615
    155a:	88 23       	and	r24, r24
    155c:	19 f4       	brne	.+6      	; 0x1564 <kernel_create_task+0x90>
    155e:	c7 e0       	ldi	r28, 0x07	; 7
    1560:	d4 e1       	ldi	r29, 0x14	; 20
    1562:	0b c0       	rjmp	.+22     	; 0x157a <kernel_create_task+0xa6>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    1564:	fe 01       	movw	r30, r28
    1566:	e9 5f       	subi	r30, 0xF9	; 249
    1568:	fd 4f       	sbci	r31, 0xFD	; 253
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	90 93 1c 16 	sts	0x161C, r25
    1572:	80 93 1b 16 	sts	0x161B, r24
        task_ptr->next = NULL;
    1576:	11 82       	std	Z+1, r1	; 0x01
    1578:	10 82       	st	Z, r1
     *   register 31,
     *   the stored SREG, and
     *   the stored EIND (for 2560), and
	 *   registers 30 to 0.
     */
    uint8_t* stack_top = stack_bottom - STACKCONTEXTSIZE;
    157a:	fe 01       	movw	r30, r28
    157c:	e9 52       	subi	r30, 0x29	; 41
    157e:	fe 4f       	sbci	r31, 0xFE	; 254
    1580:	df 01       	movw	r26, r30
    1582:	80 e0       	ldi	r24, 0x00	; 0

	for( int i = 0; i < 31; i++ )
	{
		stack_top[i] = i;
    1584:	8d 93       	st	X+, r24
    1586:	8f 5f       	subi	r24, 0xFF	; 255
     *   the stored EIND (for 2560), and
	 *   registers 30 to 0.
     */
    uint8_t* stack_top = stack_bottom - STACKCONTEXTSIZE;

	for( int i = 0; i < 31; i++ )
    1588:	8f 31       	cpi	r24, 0x1F	; 31
    158a:	e1 f7       	brne	.-8      	; 0x1584 <kernel_create_task+0xb0>
	{
		stack_top[i] = i;
	}
	stack_top[31] = 0x55;
    158c:	85 e5       	ldi	r24, 0x55	; 85
    158e:	87 8f       	std	Z+31, r24	; 0x1f
	stack_top[32] = 0xEE;
    1590:	8e ee       	ldi	r24, 0xEE	; 238
    1592:	80 a3       	std	Z+32, r24	; 0x20
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
    1594:	12 82       	std	Z+2, r1	; 0x02
	// stack_bottom[-2] = (uint8_t) 0; /* r1 is the "zero" register. */
    /* stack_top[31] is r30. */
    stack_top[33] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
    1596:	80 e8       	ldi	r24, 0x80	; 128
    1598:	81 a3       	std	Z+33, r24	; 0x21
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
	#if USE_AVR2560_GREATER
    stack_top[KERNELARG_STACKOFFSET+0] = (uint8_t)(0);
    159a:	13 a2       	std	Z+35, r1	; 0x23
	stack_top[KERNELARG_STACKOFFSET+1] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
    159c:	80 91 11 16 	lds	r24, 0x1611
    15a0:	90 91 12 16 	lds	r25, 0x1612
    15a4:	94 a3       	std	Z+36, r25	; 0x24
    stack_top[KERNELARG_STACKOFFSET+2] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
    15a6:	80 91 11 16 	lds	r24, 0x1611
    15aa:	90 91 12 16 	lds	r25, 0x1612
    15ae:	85 a3       	std	Z+37, r24	; 0x25
    stack_top[KERNELARG_STACKOFFSET+3] = (uint8_t)(0);
    15b0:	16 a2       	std	Z+38, r1	; 0x26
	stack_top[KERNELARG_STACKOFFSET+4] = (uint8_t)((uint16_t)Task_Terminate >> 8);
    15b2:	8f ec       	ldi	r24, 0xCF	; 207
    15b4:	9f e0       	ldi	r25, 0x0F	; 15
    15b6:	97 a3       	std	Z+39, r25	; 0x27
    stack_top[KERNELARG_STACKOFFSET+5] = (uint8_t)(uint16_t)Task_Terminate;
    15b8:	c1 50       	subi	r28, 0x01	; 1
    15ba:	de 4f       	sbci	r29, 0xFE	; 254
    15bc:	89 93       	st	Y+, r24

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
    15be:	f9 83       	std	Y+1, r31	; 0x01
    15c0:	e8 83       	st	Y, r30

    p->state = READY;
    15c2:	23 96       	adiw	r28, 0x03	; 3
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	89 93       	st	Y+, r24
    p->arg = kernel_request_create_args.arg;
    15c8:	80 91 13 16 	lds	r24, 0x1613
    15cc:	90 91 14 16 	lds	r25, 0x1614
    15d0:	89 93       	st	Y+, r24
    15d2:	99 93       	st	Y+, r25
    p->level = kernel_request_create_args.level;
    15d4:	80 91 15 16 	lds	r24, 0x1615
    15d8:	88 83       	st	Y, r24
    p->name = kernel_request_create_args.name;
    15da:	80 91 16 16 	lds	r24, 0x1616
    15de:	24 97       	sbiw	r28, 0x04	; 4
    15e0:	88 83       	st	Y, r24
    15e2:	c2 50       	subi	r28, 0x02	; 2
    15e4:	d2 40       	sbci	r29, 0x02	; 2

	switch(kernel_request_create_args.level)
    15e6:	80 91 15 16 	lds	r24, 0x1615
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	31 f0       	breq	.+12     	; 0x15fa <kernel_create_task+0x126>
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	71 f0       	breq	.+28     	; 0x160e <kernel_create_task+0x13a>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <kernel_create_task+0x124>
    15f6:	46 c0       	rjmp	.+140    	; 0x1684 <kernel_create_task+0x1b0>
    15f8:	28 c0       	rjmp	.+80     	; 0x164a <kernel_create_task+0x176>
	{
	case PERIODIC:
		/* Put this newly created PPP task into the PPP lookup array */
        name_to_task_ptr[kernel_request_create_args.name] = p;
    15fa:	e0 91 16 16 	lds	r30, 0x1616
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	e9 5b       	subi	r30, 0xB9	; 185
    1606:	f9 4e       	sbci	r31, 0xE9	; 233
    1608:	d1 83       	std	Z+1, r29	; 0x01
    160a:	c0 83       	st	Z, r28
    160c:	3b c0       	rjmp	.+118    	; 0x1684 <kernel_create_task+0x1b0>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    160e:	c9 5f       	subi	r28, 0xF9	; 249
    1610:	dd 4f       	sbci	r29, 0xFD	; 253
    1612:	19 82       	std	Y+1, r1	; 0x01
    1614:	18 82       	st	Y, r1
    1616:	c7 50       	subi	r28, 0x07	; 7
    1618:	d2 40       	sbci	r29, 0x02	; 2

    if(queue_ptr->head == NULL)
    161a:	80 91 23 16 	lds	r24, 0x1623
    161e:	90 91 24 16 	lds	r25, 0x1624
    1622:	89 2b       	or	r24, r25
    1624:	29 f4       	brne	.+10     	; 0x1630 <kernel_create_task+0x15c>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1626:	d0 93 24 16 	sts	0x1624, r29
    162a:	c0 93 23 16 	sts	0x1623, r28
    162e:	08 c0       	rjmp	.+16     	; 0x1640 <kernel_create_task+0x16c>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1630:	e0 91 25 16 	lds	r30, 0x1625
    1634:	f0 91 26 16 	lds	r31, 0x1626
    1638:	e9 5f       	subi	r30, 0xF9	; 249
    163a:	fd 4f       	sbci	r31, 0xFD	; 253
    163c:	d1 83       	std	Z+1, r29	; 0x01
    163e:	c0 83       	st	Z, r28
        queue_ptr->tail = task_to_add;
    1640:	d0 93 26 16 	sts	0x1626, r29
    1644:	c0 93 25 16 	sts	0x1625, r28
    1648:	1d c0       	rjmp	.+58     	; 0x1684 <kernel_create_task+0x1b0>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    164a:	c9 5f       	subi	r28, 0xF9	; 249
    164c:	dd 4f       	sbci	r29, 0xFD	; 253
    164e:	19 82       	std	Y+1, r1	; 0x01
    1650:	18 82       	st	Y, r1
    1652:	c7 50       	subi	r28, 0x07	; 7
    1654:	d2 40       	sbci	r29, 0x02	; 2

    if(queue_ptr->head == NULL)
    1656:	80 91 1f 16 	lds	r24, 0x161F
    165a:	90 91 20 16 	lds	r25, 0x1620
    165e:	89 2b       	or	r24, r25
    1660:	29 f4       	brne	.+10     	; 0x166c <kernel_create_task+0x198>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1662:	d0 93 20 16 	sts	0x1620, r29
    1666:	c0 93 1f 16 	sts	0x161F, r28
    166a:	08 c0       	rjmp	.+16     	; 0x167c <kernel_create_task+0x1a8>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    166c:	e0 91 21 16 	lds	r30, 0x1621
    1670:	f0 91 22 16 	lds	r31, 0x1622
    1674:	e9 5f       	subi	r30, 0xF9	; 249
    1676:	fd 4f       	sbci	r31, 0xFD	; 253
    1678:	d1 83       	std	Z+1, r29	; 0x01
    167a:	c0 83       	st	Z, r28
        queue_ptr->tail = task_to_add;
    167c:	d0 93 22 16 	sts	0x1622, r29
    1680:	c0 93 21 16 	sts	0x1621, r28
    1684:	21 e0       	ldi	r18, 0x01	; 1
    1686:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
    

    return 1;
}
    1688:	c9 01       	movw	r24, r18
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <kernel_event_signal>:
 *
 * Handles signals and broadcasts, with or without yielding.
 * May cause current task to be suspended.
 */
static void kernel_event_signal(uint8_t is_broadcast, uint8_t and_next)
{
    1690:	2f 92       	push	r2
    1692:	3f 92       	push	r3
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <kernel_event_signal+0x26>
    16b6:	0f 92       	push	r0
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    16c0:	80 91 19 16 	lds	r24, 0x1619
    16c4:	98 2f       	mov	r25, r24
    16c6:	91 50       	subi	r25, 0x01	; 1

    if(handle >= num_events_created)
    16c8:	80 91 bc 03 	lds	r24, 0x03BC
    16cc:	98 17       	cp	r25, r24
    16ce:	30 f0       	brcs	.+12     	; 0x16dc <kernel_event_signal+0x4c>
    {
        /* Error code. */
        error_msg = ERR_RUN_4_SIGNAL_ON_BAD_EVENT;
    16d0:	89 e0       	ldi	r24, 0x09	; 9
    16d2:	80 93 95 02 	sts	0x0295, r24
        OS_Abort();
    16d6:	0e 94 20 0a 	call	0x1440	; 0x1440 <OS_Abort>
    16da:	ff c0       	rjmp	.+510    	; 0x18da <kernel_event_signal+0x24a>
    16dc:	61 11       	cpse	r22, r1
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	b6 2e       	mov	r11, r22
        }

        while(event_queue[handle].head != NULL)
        {
            /* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
    16e2:	69 2f       	mov	r22, r25
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	66 0f       	add	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	69 5d       	subi	r22, 0xD9	; 217
    16f0:	79 4e       	sbci	r23, 0xE9	; 233
            default:
                break;
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
    16f2:	20 91 b6 03 	lds	r18, 0x03B6
    16f6:	30 91 b7 03 	lds	r19, 0x03B7
    16fa:	3b 83       	std	Y+3, r19	; 0x03
    16fc:	2a 83       	std	Y+2, r18	; 0x02
    16fe:	80 90 96 02 	lds	r8, 0x0296
    1702:	90 90 97 02 	lds	r9, 0x0297
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    1706:	20 90 1e 02 	lds	r2, 0x021E
    170a:	30 90 1f 02 	lds	r3, 0x021F
    170e:	a0 90 b9 03 	lds	r10, 0x03B9
    1712:	c0 90 ba 03 	lds	r12, 0x03BA
    1716:	d0 90 bb 03 	lds	r13, 0x03BB
    171a:	20 91 21 16 	lds	r18, 0x1621
    171e:	30 91 22 16 	lds	r19, 0x1622
    1722:	00 91 1f 16 	lds	r16, 0x161F
    1726:	10 91 20 16 	lds	r17, 0x1620
    172a:	40 91 25 16 	lds	r20, 0x1625
    172e:	50 91 26 16 	lds	r21, 0x1626
    1732:	e0 90 23 16 	lds	r14, 0x1623
    1736:	f0 90 24 16 	lds	r15, 0x1624
        if(and_next)
        {
            make_ready = 1;
        }

        while(event_queue[handle].head != NULL)
    173a:	2b 01       	movw	r4, r22
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
    173c:	96 e0       	ldi	r25, 0x06	; 6
    173e:	69 2e       	mov	r6, r25
    1740:	92 e0       	ldi	r25, 0x02	; 2
    1742:	79 2e       	mov	r7, r25
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	9b 81       	ldd	r25, Y+3	; 0x03
    1748:	68 0e       	add	r6, r24
    174a:	79 1e       	adc	r7, r25
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    174c:	e0 e2       	ldi	r30, 0x20	; 32
    174e:	f2 e0       	ldi	r31, 0x02	; 2
    1750:	ce 0e       	add	r12, r30
    1752:	df 1e       	adc	r13, r31
    1754:	73 c0       	rjmp	.+230    	; 0x183c <kernel_event_signal+0x1ac>
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr)
{
    task_descriptor_t* task_ptr = queue_ptr->head;
    1756:	fb 01       	movw	r30, r22
    1758:	a0 81       	ld	r26, Z
    175a:	b1 81       	ldd	r27, Z+1	; 0x01

    if(queue_ptr->head != NULL)
    175c:	10 97       	sbiw	r26, 0x00	; 0
    175e:	79 f0       	breq	.+30     	; 0x177e <kernel_event_signal+0xee>
    {
        queue_ptr->head = queue_ptr->head->next;
    1760:	cd 01       	movw	r24, r26
    1762:	89 5f       	subi	r24, 0xF9	; 249
    1764:	9d 4f       	sbci	r25, 0xFD	; 253
    1766:	9d 83       	std	Y+5, r25	; 0x05
    1768:	8c 83       	std	Y+4, r24	; 0x04
    176a:	fc 01       	movw	r30, r24
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	fb 01       	movw	r30, r22
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	80 83       	st	Z, r24
        task_ptr->next = NULL;
    1776:	ec 81       	ldd	r30, Y+4	; 0x04
    1778:	fd 81       	ldd	r31, Y+5	; 0x05
    177a:	11 82       	std	Z+1, r1	; 0x01
    177c:	10 82       	st	Z, r1

        while(event_queue[handle].head != NULL)
        {
            /* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
            task_ptr->state = READY;
    177e:	ad 5f       	subi	r26, 0xFD	; 253
    1780:	bd 4f       	sbci	r27, 0xFD	; 253
    1782:	f2 e0       	ldi	r31, 0x02	; 2
    1784:	fc 93       	st	X, r31

            switch(task_ptr->level)
    1786:	13 96       	adiw	r26, 0x03	; 3
    1788:	8c 91       	ld	r24, X
    178a:	a6 50       	subi	r26, 0x06	; 6
    178c:	b2 40       	sbci	r27, 0x02	; 2
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	b1 f0       	breq	.+44     	; 0x17be <kernel_event_signal+0x12e>
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	39 f5       	brne	.+78     	; 0x17e4 <kernel_event_signal+0x154>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1796:	a9 5f       	subi	r26, 0xF9	; 249
    1798:	bd 4f       	sbci	r27, 0xFD	; 253
    179a:	11 96       	adiw	r26, 0x01	; 1
    179c:	1c 92       	st	X, r1
    179e:	1e 92       	st	-X, r1
    17a0:	a7 50       	subi	r26, 0x07	; 7
    17a2:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    17a4:	e1 14       	cp	r14, r1
    17a6:	f1 04       	cpc	r15, r1
    17a8:	19 f4       	brne	.+6      	; 0x17b0 <kernel_event_signal+0x120>
    17aa:	ad 01       	movw	r20, r26
    17ac:	7d 01       	movw	r14, r26
    17ae:	1a c0       	rjmp	.+52     	; 0x17e4 <kernel_event_signal+0x154>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    17b0:	49 5f       	subi	r20, 0xF9	; 249
    17b2:	5d 4f       	sbci	r21, 0xFD	; 253
    17b4:	fa 01       	movw	r30, r20
    17b6:	b1 83       	std	Z+1, r27	; 0x01
    17b8:	a0 83       	st	Z, r26
    17ba:	ad 01       	movw	r20, r26
    17bc:	13 c0       	rjmp	.+38     	; 0x17e4 <kernel_event_signal+0x154>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    17be:	a9 5f       	subi	r26, 0xF9	; 249
    17c0:	bd 4f       	sbci	r27, 0xFD	; 253
    17c2:	11 96       	adiw	r26, 0x01	; 1
    17c4:	1c 92       	st	X, r1
    17c6:	1e 92       	st	-X, r1
    17c8:	a7 50       	subi	r26, 0x07	; 7
    17ca:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    17cc:	01 15       	cp	r16, r1
    17ce:	11 05       	cpc	r17, r1
    17d0:	19 f4       	brne	.+6      	; 0x17d8 <kernel_event_signal+0x148>
    17d2:	9d 01       	movw	r18, r26
    17d4:	8d 01       	movw	r16, r26
    17d6:	06 c0       	rjmp	.+12     	; 0x17e4 <kernel_event_signal+0x154>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    17d8:	29 5f       	subi	r18, 0xF9	; 249
    17da:	3d 4f       	sbci	r19, 0xFD	; 253
    17dc:	f9 01       	movw	r30, r18
    17de:	b1 83       	std	Z+1, r27	; 0x01
    17e0:	a0 83       	st	Z, r26
    17e2:	9d 01       	movw	r18, r26
            default:
                break;
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	88 15       	cp	r24, r8
    17ea:	99 05       	cpc	r25, r9
    17ec:	21 f1       	breq	.+72     	; 0x1836 <kernel_event_signal+0x1a6>
    17ee:	bb 20       	and	r11, r11
    17f0:	11 f5       	brne	.+68     	; 0x1836 <kernel_event_signal+0x1a6>
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
    17f2:	f3 01       	movw	r30, r6
    17f4:	90 81       	ld	r25, Z
    17f6:	93 30       	cpi	r25, 0x03	; 3
    17f8:	f1 f0       	breq	.+60     	; 0x1836 <kernel_event_signal+0x1a6>
    17fa:	aa 5f       	subi	r26, 0xFA	; 250
    17fc:	bd 4f       	sbci	r27, 0xFD	; 253
    17fe:	8c 91       	ld	r24, X
    1800:	a6 50       	subi	r26, 0x06	; 6
    1802:	b2 40       	sbci	r27, 0x02	; 2
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	a9 f0       	breq	.+42     	; 0x1832 <kernel_event_signal+0x1a2>
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    1808:	91 30       	cpi	r25, 0x01	; 1
    180a:	a9 f4       	brne	.+42     	; 0x1836 <kernel_event_signal+0x1a6>
    180c:	21 14       	cp	r2, r1
    180e:	31 04       	cpc	r3, r1
    1810:	91 f0       	breq	.+36     	; 0x1836 <kernel_event_signal+0x1a6>
    1812:	aa 20       	and	r10, r10
    1814:	81 f4       	brne	.+32     	; 0x1836 <kernel_event_signal+0x1a6>
    1816:	ba 2c       	mov	r11, r10
    1818:	f6 01       	movw	r30, r12
    181a:	80 81       	ld	r24, Z
    181c:	e8 2f       	mov	r30, r24
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	e9 5b       	subi	r30, 0xB9	; 185
    1826:	f9 4e       	sbci	r31, 0xE9	; 233
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	a8 17       	cp	r26, r24
    182e:	b9 07       	cpc	r27, r25
    1830:	11 f4       	brne	.+4      	; 0x1836 <kernel_event_signal+0x1a6>
    1832:	bb 24       	eor	r11, r11
    1834:	b3 94       	inc	r11
                {
                    make_ready = 1;
                }
            }

            if(!is_broadcast)
    1836:	f9 81       	ldd	r31, Y+1	; 0x01
    1838:	ff 23       	and	r31, r31
    183a:	31 f0       	breq	.+12     	; 0x1848 <kernel_event_signal+0x1b8>
        if(and_next)
        {
            make_ready = 1;
        }

        while(event_queue[handle].head != NULL)
    183c:	f2 01       	movw	r30, r4
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	89 2b       	or	r24, r25
    1844:	09 f0       	breq	.+2      	; 0x1848 <kernel_event_signal+0x1b8>
    1846:	87 cf       	rjmp	.-242    	; 0x1756 <kernel_event_signal+0xc6>
    1848:	30 93 22 16 	sts	0x1622, r19
    184c:	20 93 21 16 	sts	0x1621, r18
    1850:	10 93 20 16 	sts	0x1620, r17
    1854:	00 93 1f 16 	sts	0x161F, r16
    1858:	50 93 26 16 	sts	0x1626, r21
    185c:	40 93 25 16 	sts	0x1625, r20
    1860:	f0 92 24 16 	sts	0x1624, r15
    1864:	e0 92 23 16 	sts	0x1623, r14
            {
                break;
            }
        }

        if(make_ready && cur_task != idle_task)
    1868:	bb 20       	and	r11, r11
    186a:	b9 f1       	breq	.+110    	; 0x18da <kernel_event_signal+0x24a>
    186c:	2a 81       	ldd	r18, Y+2	; 0x02
    186e:	3b 81       	ldd	r19, Y+3	; 0x03
    1870:	28 15       	cp	r18, r8
    1872:	39 05       	cpc	r19, r9
    1874:	91 f1       	breq	.+100    	; 0x18da <kernel_event_signal+0x24a>
        {
            cur_task->state = READY;
    1876:	2d 5f       	subi	r18, 0xFD	; 253
    1878:	3d 4f       	sbci	r19, 0xFD	; 253
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	f9 01       	movw	r30, r18
    187e:	80 83       	st	Z, r24
            if(cur_task->level == RR)
    1880:	33 96       	adiw	r30, 0x03	; 3
    1882:	80 81       	ld	r24, Z
    1884:	e6 50       	subi	r30, 0x06	; 6
    1886:	f2 40       	sbci	r31, 0x02	; 2
    1888:	fb 83       	std	Y+3, r31	; 0x03
    188a:	ea 83       	std	Y+2, r30	; 0x02
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	29 f5       	brne	.+74     	; 0x18da <kernel_event_signal+0x24a>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1890:	e9 5f       	subi	r30, 0xF9	; 249
    1892:	fd 4f       	sbci	r31, 0xFD	; 253
    1894:	11 82       	std	Z+1, r1	; 0x01
    1896:	10 82       	st	Z, r1
    1898:	e7 50       	subi	r30, 0x07	; 7
    189a:	f2 40       	sbci	r31, 0x02	; 2
    189c:	fb 83       	std	Y+3, r31	; 0x03
    189e:	ea 83       	std	Y+2, r30	; 0x02

    if(queue_ptr->head == NULL)
    18a0:	80 91 1f 16 	lds	r24, 0x161F
    18a4:	90 91 20 16 	lds	r25, 0x1620
    18a8:	89 2b       	or	r24, r25
    18aa:	49 f4       	brne	.+18     	; 0x18be <kernel_event_signal+0x22e>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    18ac:	f0 93 20 16 	sts	0x1620, r31
    18b0:	e0 93 1f 16 	sts	0x161F, r30
        queue_ptr->tail = task_to_add;
    18b4:	f0 93 22 16 	sts	0x1622, r31
    18b8:	e0 93 21 16 	sts	0x1621, r30
    18bc:	0e c0       	rjmp	.+28     	; 0x18da <kernel_event_signal+0x24a>
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    18be:	e0 91 21 16 	lds	r30, 0x1621
    18c2:	f0 91 22 16 	lds	r31, 0x1622
    18c6:	e9 5f       	subi	r30, 0xF9	; 249
    18c8:	fd 4f       	sbci	r31, 0xFD	; 253
    18ca:	2a 81       	ldd	r18, Y+2	; 0x02
    18cc:	3b 81       	ldd	r19, Y+3	; 0x03
    18ce:	31 83       	std	Z+1, r19	; 0x01
    18d0:	20 83       	st	Z, r18
        queue_ptr->tail = task_to_add;
    18d2:	30 93 22 16 	sts	0x1622, r19
    18d6:	20 93 21 16 	sts	0x1621, r18
            {
                enqueue(&rr_queue, cur_task);
            }
        }
    }
}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	df 90       	pop	r13
    18f2:	cf 90       	pop	r12
    18f4:	bf 90       	pop	r11
    18f6:	af 90       	pop	r10
    18f8:	9f 90       	pop	r9
    18fa:	8f 90       	pop	r8
    18fc:	7f 90       	pop	r7
    18fe:	6f 90       	pop	r6
    1900:	5f 90       	pop	r5
    1902:	4f 90       	pop	r4
    1904:	3f 90       	pop	r3
    1906:	2f 90       	pop	r2
    1908:	08 95       	ret

0000190a <OS_Init>:
 * @brief Setup the RTOS and create main() as the first SYSTEM level task.
 *
 * Point of entry from the C runtime crt0.S.
 */
void OS_Init()
{
    190a:	4f 92       	push	r4
    190c:	5f 92       	push	r5
    190e:	6f 92       	push	r6
    1910:	7f 92       	push	r7
    1912:	8f 92       	push	r8
    1914:	9f 92       	push	r9
    1916:	af 92       	push	r10
    1918:	bf 92       	push	r11
    191a:	cf 92       	push	r12
    191c:	df 92       	push	r13
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    int i;

    /* Set up the clocks */
    CLOCK8MHZ();
    192a:	80 e8       	ldi	r24, 0x80	; 128
    192c:	80 93 61 00 	sts	0x0061, r24
    1930:	10 92 61 00 	sts	0x0061, r1

    TCCR1B &= ~(_BV(CS12) | _BV(CS11));
    1934:	80 91 81 00 	lds	r24, 0x0081
    1938:	89 7f       	andi	r24, 0xF9	; 249
    193a:	80 93 81 00 	sts	0x0081, r24
    TCCR1B |= (_BV(CS10));
    193e:	80 91 81 00 	lds	r24, 0x0081
    1942:	81 60       	ori	r24, 0x01	; 1
    1944:	80 93 81 00 	sts	0x0081, r24
static void check_PPP_names(void)
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    1948:	c0 90 1e 02 	lds	r12, 0x021E
    194c:	d0 90 1f 02 	lds	r13, 0x021F
    1950:	56 01       	movw	r10, r12
    1952:	aa 0c       	add	r10, r10
    1954:	bb 1c       	adc	r11, r11
    1956:	00 e0       	ldi	r16, 0x00	; 0
        name = PPP[i];

        /* name == IDLE or 0 < name <= MAXNAME */
        if(name <= MAXNAME)
        {
            name_in_PPP[name] = 1;
    1958:	11 e0       	ldi	r17, 0x01	; 1
    195a:	0f c0       	rjmp	.+30     	; 0x197a <OS_Init+0x70>
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    {
        name = PPP[i];
    195c:	e0 5e       	subi	r30, 0xE0	; 224
    195e:	fd 4f       	sbci	r31, 0xFD	; 253
    1960:	e0 81       	ld	r30, Z

        /* name == IDLE or 0 < name <= MAXNAME */
        if(name <= MAXNAME)
    1962:	e9 30       	cpi	r30, 0x09	; 9
    1964:	28 f4       	brcc	.+10     	; 0x1970 <OS_Init+0x66>
        {
            name_in_PPP[name] = 1;
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	e7 5a       	subi	r30, 0xA7	; 167
    196a:	f9 4e       	sbci	r31, 0xE9	; 233
    196c:	10 83       	st	Z, r17
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <OS_Init+0x6e>
        }
        else
        {
            error_msg = ERR_1_PPP_NAME_OUT_OF_RANGE;
    1970:	10 92 95 02 	sts	0x0295, r1
            OS_Abort();
    1974:	0e 94 20 0a 	call	0x1440	; 0x1440 <OS_Abort>
static void check_PPP_names(void)
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    1978:	0e 5f       	subi	r16, 0xFE	; 254
    197a:	e0 2f       	mov	r30, r16
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	ea 15       	cp	r30, r10
    1980:	fb 05       	cpc	r31, r11
    1982:	60 f3       	brcs	.-40     	; 0x195c <OS_Init+0x52>
    1984:	e2 ec       	ldi	r30, 0xC2	; 194
    1986:	f5 e0       	ldi	r31, 0x05	; 5
    1988:	a7 e4       	ldi	r26, 0x47	; 71
    198a:	b6 e1       	ldi	r27, 0x16	; 22
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    {
        task_desc[i].state = DEAD;
    198c:	10 82       	st	Z, r1
        name_to_task_ptr[i] = NULL;
    198e:	1d 92       	st	X+, r1
    1990:	1d 92       	st	X+, r1
        task_desc[i].next = &task_desc[i + 1];
    1992:	cf 01       	movw	r24, r30
    1994:	06 96       	adiw	r24, 0x06	; 6
    1996:	95 83       	std	Z+5, r25	; 0x05
    1998:	84 83       	std	Z+4, r24	; 0x04
    199a:	e7 5f       	subi	r30, 0xF7	; 247
    199c:	fd 4f       	sbci	r31, 0xFD	; 253
    /* 
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    199e:	84 e1       	ldi	r24, 0x14	; 20
    19a0:	e1 30       	cpi	r30, 0x01	; 1
    19a2:	f8 07       	cpc	r31, r24
    19a4:	99 f7       	brne	.-26     	; 0x198c <OS_Init+0x82>
    {
        task_desc[i].state = DEAD;
        name_to_task_ptr[i] = NULL;
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[MAXPROCESS - 1].next = NULL;
    19a6:	15 82       	std	Z+5, r1	; 0x05
    19a8:	14 82       	std	Z+4, r1	; 0x04
    dead_pool_queue.head = &task_desc[0];
    19aa:	0f eb       	ldi	r16, 0xBF	; 191
    19ac:	13 e0       	ldi	r17, 0x03	; 3
    19ae:	10 93 1c 16 	sts	0x161C, r17
    19b2:	00 93 1b 16 	sts	0x161B, r16
    dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
    19b6:	8e ef       	ldi	r24, 0xFE	; 254
    19b8:	91 e1       	ldi	r25, 0x11	; 17
    19ba:	90 93 1e 16 	sts	0x161E, r25
    19be:	80 93 1d 16 	sts	0x161D, r24

	/* Create idle "task" */
    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	98 e0       	ldi	r25, 0x08	; 8
    19c6:	90 93 12 16 	sts	0x1612, r25
    19ca:	80 93 11 16 	sts	0x1611, r24
    kernel_request_create_args.level = NULL;
    19ce:	10 92 15 16 	sts	0x1615, r1
    kernel_create_task();
    19d2:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <kernel_create_task>

    /* Create "main" task as SYSTEM level. */
    kernel_request_create_args.f = (voidfuncvoid_ptr)main;
    19d6:	8a e6       	ldi	r24, 0x6A	; 106
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	90 93 12 16 	sts	0x1612, r25
    19de:	80 93 11 16 	sts	0x1611, r24
    kernel_request_create_args.level = SYSTEM;
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	80 93 15 16 	sts	0x1615, r24
    kernel_create_task();
    19e8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <kernel_create_task>

    /* First time through. Select "main" task to run first. */
    cur_task = task_desc;
    19ec:	10 93 b7 03 	sts	0x03B7, r17
    19f0:	00 93 b6 03 	sts	0x03B6, r16
    cur_task->state = RUNNING;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	80 93 c2 05 	sts	0x05C2, r24
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr)
{
    task_descriptor_t* task_ptr = queue_ptr->head;
    19fa:	e0 91 23 16 	lds	r30, 0x1623
    19fe:	f0 91 24 16 	lds	r31, 0x1624

    if(queue_ptr->head != NULL)
    1a02:	30 97       	sbiw	r30, 0x00	; 0
    1a04:	51 f0       	breq	.+20     	; 0x1a1a <OS_Init+0x110>
    {
        queue_ptr->head = queue_ptr->head->next;
    1a06:	e9 5f       	subi	r30, 0xF9	; 249
    1a08:	fd 4f       	sbci	r31, 0xFD	; 253
    1a0a:	80 81       	ld	r24, Z
    1a0c:	91 81       	ldd	r25, Z+1	; 0x01
    1a0e:	90 93 24 16 	sts	0x1624, r25
    1a12:	80 93 23 16 	sts	0x1623, r24
        task_ptr->next = NULL;
    1a16:	11 82       	std	Z+1, r1	; 0x01
    1a18:	10 82       	st	Z, r1
    cur_task = task_desc;
    cur_task->state = RUNNING;
    dequeue(&system_queue);

    /* Initilize time slot */
    if(PT > 0)
    1a1a:	c1 14       	cp	r12, r1
    1a1c:	d1 04       	cpc	r13, r1
    1a1e:	21 f0       	breq	.+8      	; 0x1a28 <OS_Init+0x11e>
    {
        ticks_remaining = PPP[1];
    1a20:	80 91 21 02 	lds	r24, 0x0221
    1a24:	80 93 b8 03 	sts	0x03B8, r24
    }

    /* Set up Timer 1 Output Compare interrupt,the TICK clock. */
    TIMSK1 |= _BV(OCIE1A);
    1a28:	80 91 6f 00 	lds	r24, 0x006F
    1a2c:	82 60       	ori	r24, 0x02	; 2
    1a2e:	80 93 6f 00 	sts	0x006F, r24
    OCR1A = TCNT1 + 40000;
    1a32:	80 91 84 00 	lds	r24, 0x0084
    1a36:	90 91 85 00 	lds	r25, 0x0085
    1a3a:	80 5c       	subi	r24, 0xC0	; 192
    1a3c:	93 46       	sbci	r25, 0x63	; 99
    1a3e:	90 93 89 00 	sts	0x0089, r25
    1a42:	80 93 88 00 	sts	0x0088, r24
    /* Clear flag. */
    TIFR1 = _BV(OCF1A);
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	86 bb       	out	0x16, r24	; 22
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    1a4a:	e0 90 96 02 	lds	r14, 0x0296
    1a4e:	f0 90 97 02 	lds	r15, 0x0297
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }   

        cur_task->state = RUNNING;
    1a52:	11 e0       	ldi	r17, 0x01	; 1
        kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
        break;

    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
    1a54:	0d e0       	ldi	r16, 0x0D	; 13
    1a56:	80 2e       	mov	r8, r16
		OS_Abort();
	}
	else
    {
        /* Place this task in a queue. */
        cur_task->state = WAITING;
    1a58:	b3 e0       	ldi	r27, 0x03	; 3
    1a5a:	7b 2e       	mov	r7, r27
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
        OS_Abort();
    }
    else if(cur_task->level == PERIODIC)
	{
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
    1a5c:	ac e0       	ldi	r26, 0x0C	; 12
    1a5e:	6a 2e       	mov	r6, r26
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);

    if(handle >= num_events_created)
    {
        /* Error code. */
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
    1a60:	fa e0       	ldi	r31, 0x0A	; 10
    1a62:	5f 2e       	mov	r5, r31

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
    1a64:	e2 e0       	ldi	r30, 0x02	; 2
    1a66:	9e 2e       	mov	r9, r30
        {                
			/* If Periodic task still running then error */
            if(cur_task != NULL && cur_task->level == PERIODIC && slot_task_finished == 0)
            {
                /* error handling */
                error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
    1a68:	78 e0       	ldi	r23, 0x08	; 8
    1a6a:	47 2e       	mov	r4, r23
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    1a6c:	e0 91 b6 03 	lds	r30, 0x03B6
    1a70:	f0 91 b7 03 	lds	r31, 0x03B7
    1a74:	ed 5f       	subi	r30, 0xFD	; 253
    1a76:	fd 4f       	sbci	r31, 0xFD	; 253
    1a78:	80 81       	ld	r24, Z
    1a7a:	e3 50       	subi	r30, 0x03	; 3
    1a7c:	f2 40       	sbci	r31, 0x02	; 2
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <OS_Init+0x180>
    1a82:	ee 15       	cp	r30, r14
    1a84:	ff 05       	cpc	r31, r15
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <OS_Init+0x180>
    1a88:	50 c0       	rjmp	.+160    	; 0x1b2a <OS_Init+0x220>
    {
		if(system_queue.head != NULL)
    1a8a:	20 91 23 16 	lds	r18, 0x1623
    1a8e:	30 91 24 16 	lds	r19, 0x1624
    1a92:	21 15       	cp	r18, r1
    1a94:	31 05       	cpc	r19, r1
    1a96:	51 f0       	breq	.+20     	; 0x1aac <OS_Init+0x1a2>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    1a98:	f9 01       	movw	r30, r18
    1a9a:	e9 5f       	subi	r30, 0xF9	; 249
    1a9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	90 93 24 16 	sts	0x1624, r25
    1aa6:	80 93 23 16 	sts	0x1623, r24
    1aaa:	2d c0       	rjmp	.+90     	; 0x1b06 <OS_Init+0x1fc>
    {
		if(system_queue.head != NULL)
        {
			cur_task = dequeue(&system_queue);
        }
        else if(!slot_task_finished && PT > 0 && name_to_task_ptr[PPP[slot_name_index]] != NULL)
    1aac:	80 91 b9 03 	lds	r24, 0x03B9
    1ab0:	88 23       	and	r24, r24
    1ab2:	c9 f4       	brne	.+50     	; 0x1ae6 <OS_Init+0x1dc>
    1ab4:	c1 14       	cp	r12, r1
    1ab6:	d1 04       	cpc	r13, r1
    1ab8:	b1 f0       	breq	.+44     	; 0x1ae6 <OS_Init+0x1dc>
    1aba:	e0 91 ba 03 	lds	r30, 0x03BA
    1abe:	f0 91 bb 03 	lds	r31, 0x03BB
    1ac2:	e0 5e       	subi	r30, 0xE0	; 224
    1ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac6:	e0 81       	ld	r30, Z
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	ee 0f       	add	r30, r30
    1acc:	ff 1f       	adc	r31, r31
    1ace:	e9 5b       	subi	r30, 0xB9	; 185
    1ad0:	f9 4e       	sbci	r31, 0xE9	; 233
    1ad2:	01 90       	ld	r0, Z+
    1ad4:	f0 81       	ld	r31, Z
    1ad6:	e0 2d       	mov	r30, r0
    1ad8:	30 97       	sbiw	r30, 0x00	; 0
    1ada:	29 f0       	breq	.+10     	; 0x1ae6 <OS_Init+0x1dc>
        {
			/* Keep running the current PERIODIC task. */
            cur_task = name_to_task_ptr[PPP[slot_name_index]];
    1adc:	f0 93 b7 03 	sts	0x03B7, r31
    1ae0:	e0 93 b6 03 	sts	0x03B6, r30
    1ae4:	1b c0       	rjmp	.+54     	; 0x1b1c <OS_Init+0x212>
        }
        else if(rr_queue.head != NULL)
    1ae6:	20 91 1f 16 	lds	r18, 0x161F
    1aea:	30 91 20 16 	lds	r19, 0x1620
    1aee:	21 15       	cp	r18, r1
    1af0:	31 05       	cpc	r19, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <OS_Init+0x20a>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    1af4:	f9 01       	movw	r30, r18
    1af6:	e9 5f       	subi	r30, 0xF9	; 249
    1af8:	fd 4f       	sbci	r31, 0xFD	; 253
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	90 93 20 16 	sts	0x1620, r25
    1b02:	80 93 1f 16 	sts	0x161F, r24
        task_ptr->next = NULL;
    1b06:	11 82       	std	Z+1, r1	; 0x01
    1b08:	10 82       	st	Z, r1
			/* Keep running the current PERIODIC task. */
            cur_task = name_to_task_ptr[PPP[slot_name_index]];
        }
        else if(rr_queue.head != NULL)
        {
			cur_task = dequeue(&rr_queue);
    1b0a:	30 93 b7 03 	sts	0x03B7, r19
    1b0e:	20 93 b6 03 	sts	0x03B6, r18
    1b12:	04 c0       	rjmp	.+8      	; 0x1b1c <OS_Init+0x212>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    1b14:	f0 92 b7 03 	sts	0x03B7, r15
    1b18:	e0 92 b6 03 	sts	0x03B6, r14
        }   

        cur_task->state = RUNNING;
    1b1c:	e0 91 b6 03 	lds	r30, 0x03B6
    1b20:	f0 91 b7 03 	lds	r31, 0x03B7
    1b24:	ed 5f       	subi	r30, 0xFD	; 253
    1b26:	fd 4f       	sbci	r31, 0xFD	; 253
    1b28:	10 83       	st	Z, r17
{
    for(;;)
    {
        kernel_dispatch();

        exit_kernel();
    1b2a:	0e 94 00 09 	call	0x1200	; 0x1200 <exit_kernel>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waitng queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
    1b2e:	00 91 10 16 	lds	r16, 0x1610
    1b32:	05 30       	cpi	r16, 0x05	; 5
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <OS_Init+0x22e>
    1b36:	01 c2       	rjmp	.+1026   	; 0x1f3a <OS_Init+0x630>
    1b38:	06 30       	cpi	r16, 0x06	; 6
    1b3a:	98 f4       	brcc	.+38     	; 0x1b62 <OS_Init+0x258>
    1b3c:	02 30       	cpi	r16, 0x02	; 2
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <OS_Init+0x238>
    1b40:	92 c0       	rjmp	.+292    	; 0x1c66 <OS_Init+0x35c>
    1b42:	03 30       	cpi	r16, 0x03	; 3
    1b44:	38 f4       	brcc	.+14     	; 0x1b54 <OS_Init+0x24a>
    1b46:	00 23       	and	r16, r16
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <OS_Init+0x242>
    1b4a:	f7 c1       	rjmp	.+1006   	; 0x1f3a <OS_Init+0x630>
    1b4c:	01 30       	cpi	r16, 0x01	; 1
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <OS_Init+0x248>
    1b50:	f0 c1       	rjmp	.+992    	; 0x1f32 <OS_Init+0x628>
    1b52:	1d c0       	rjmp	.+58     	; 0x1b8e <OS_Init+0x284>
    1b54:	03 30       	cpi	r16, 0x03	; 3
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <OS_Init+0x250>
    1b58:	e7 c0       	rjmp	.+462    	; 0x1d28 <OS_Init+0x41e>
    1b5a:	04 30       	cpi	r16, 0x04	; 4
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <OS_Init+0x256>
    1b5e:	e9 c1       	rjmp	.+978    	; 0x1f32 <OS_Init+0x628>
    1b60:	1f c1       	rjmp	.+574    	; 0x1da0 <OS_Init+0x496>
    1b62:	08 30       	cpi	r16, 0x08	; 8
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <OS_Init+0x25e>
    1b66:	c3 c1       	rjmp	.+902    	; 0x1eee <OS_Init+0x5e4>
    1b68:	09 30       	cpi	r16, 0x09	; 9
    1b6a:	38 f4       	brcc	.+14     	; 0x1b7a <OS_Init+0x270>
    1b6c:	06 30       	cpi	r16, 0x06	; 6
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <OS_Init+0x268>
    1b70:	6c c1       	rjmp	.+728    	; 0x1e4a <OS_Init+0x540>
    1b72:	07 30       	cpi	r16, 0x07	; 7
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <OS_Init+0x26e>
    1b76:	dd c1       	rjmp	.+954    	; 0x1f32 <OS_Init+0x628>
    1b78:	7c c1       	rjmp	.+760    	; 0x1e72 <OS_Init+0x568>
    1b7a:	0a 30       	cpi	r16, 0x0A	; 10
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <OS_Init+0x276>
    1b7e:	bc c1       	rjmp	.+888    	; 0x1ef8 <OS_Init+0x5ee>
    1b80:	0a 30       	cpi	r16, 0x0A	; 10
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <OS_Init+0x27c>
    1b84:	b6 c1       	rjmp	.+876    	; 0x1ef2 <OS_Init+0x5e8>
    1b86:	0b 30       	cpi	r16, 0x0B	; 11
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <OS_Init+0x282>
    1b8a:	d3 c1       	rjmp	.+934    	; 0x1f32 <OS_Init+0x628>
    1b8c:	c2 c1       	rjmp	.+900    	; 0x1f12 <OS_Init+0x608>
 */
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */

    if(PT > 0)
    1b8e:	c1 14       	cp	r12, r1
    1b90:	d1 04       	cpc	r13, r1
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <OS_Init+0x28c>
    1b94:	46 c0       	rjmp	.+140    	; 0x1c22 <OS_Init+0x318>
    {
        --ticks_remaining;
    1b96:	80 91 b8 03 	lds	r24, 0x03B8
    1b9a:	81 50       	subi	r24, 0x01	; 1
    1b9c:	80 93 b8 03 	sts	0x03B8, r24

        if(ticks_remaining <= 0)
    1ba0:	80 91 b8 03 	lds	r24, 0x03B8
    1ba4:	18 16       	cp	r1, r24
    1ba6:	ec f1       	brlt	.+122    	; 0x1c22 <OS_Init+0x318>
        {                
			/* If Periodic task still running then error */
            if(cur_task != NULL && cur_task->level == PERIODIC && slot_task_finished == 0)
    1ba8:	e0 91 b6 03 	lds	r30, 0x03B6
    1bac:	f0 91 b7 03 	lds	r31, 0x03B7
    1bb0:	30 97       	sbiw	r30, 0x00	; 0
    1bb2:	69 f0       	breq	.+26     	; 0x1bce <OS_Init+0x2c4>
    1bb4:	ea 5f       	subi	r30, 0xFA	; 250
    1bb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb8:	80 81       	ld	r24, Z
    1bba:	82 30       	cpi	r24, 0x02	; 2
    1bbc:	41 f4       	brne	.+16     	; 0x1bce <OS_Init+0x2c4>
    1bbe:	80 91 b9 03 	lds	r24, 0x03B9
    1bc2:	88 23       	and	r24, r24
    1bc4:	21 f4       	brne	.+8      	; 0x1bce <OS_Init+0x2c4>
            {
                /* error handling */
                error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
    1bc6:	40 92 95 02 	sts	0x0295, r4
                OS_Abort();
    1bca:	0e 94 20 0a 	call	0x1440	; 0x1440 <OS_Abort>
            }

            slot_name_index += 2;
    1bce:	80 91 ba 03 	lds	r24, 0x03BA
    1bd2:	90 91 bb 03 	lds	r25, 0x03BB
    1bd6:	02 96       	adiw	r24, 0x02	; 2
    1bd8:	90 93 bb 03 	sts	0x03BB, r25
    1bdc:	80 93 ba 03 	sts	0x03BA, r24
            if(slot_name_index >= 2 * PT)
    1be0:	8a 15       	cp	r24, r10
    1be2:	9b 05       	cpc	r25, r11
    1be4:	20 f0       	brcs	.+8      	; 0x1bee <OS_Init+0x2e4>
            {
                slot_name_index = 0;
    1be6:	10 92 bb 03 	sts	0x03BB, r1
    1bea:	10 92 ba 03 	sts	0x03BA, r1
            }

            ticks_remaining = PPP[slot_name_index + 1];
    1bee:	e0 91 ba 03 	lds	r30, 0x03BA
    1bf2:	f0 91 bb 03 	lds	r31, 0x03BB
    1bf6:	e0 5e       	subi	r30, 0xE0	; 224
    1bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bfa:	81 81       	ldd	r24, Z+1	; 0x01
    1bfc:	80 93 b8 03 	sts	0x03B8, r24

            if(PPP[slot_name_index] == IDLE || name_to_task_ptr[PPP[slot_name_index]] == NULL)
    1c00:	e0 81       	ld	r30, Z
    1c02:	ee 23       	and	r30, r30
    1c04:	49 f0       	breq	.+18     	; 0x1c18 <OS_Init+0x30e>
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	ee 0f       	add	r30, r30
    1c0a:	ff 1f       	adc	r31, r31
    1c0c:	e9 5b       	subi	r30, 0xB9	; 185
    1c0e:	f9 4e       	sbci	r31, 0xE9	; 233
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	89 2b       	or	r24, r25
    1c16:	19 f4       	brne	.+6      	; 0x1c1e <OS_Init+0x314>
            {
				slot_task_finished = 1;
    1c18:	10 93 b9 03 	sts	0x03B9, r17
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <OS_Init+0x318>
            }
            else
            {
                slot_task_finished = 0;
    1c1e:	10 92 b9 03 	sts	0x03B9, r1

    case TIMER_EXPIRED:
		kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
    1c22:	a0 91 b6 03 	lds	r26, 0x03B6
    1c26:	b0 91 b7 03 	lds	r27, 0x03B7
    1c2a:	aa 5f       	subi	r26, 0xFA	; 250
    1c2c:	bd 4f       	sbci	r27, 0xFD	; 253
    1c2e:	8c 91       	ld	r24, X
    1c30:	a6 50       	subi	r26, 0x06	; 6
    1c32:	b2 40       	sbci	r27, 0x02	; 2
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <OS_Init+0x330>
    1c38:	80 c1       	rjmp	.+768    	; 0x1f3a <OS_Init+0x630>
    1c3a:	fd 01       	movw	r30, r26
    1c3c:	ed 5f       	subi	r30, 0xFD	; 253
    1c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1c40:	80 81       	ld	r24, Z
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <OS_Init+0x33e>
    1c46:	79 c1       	rjmp	.+754    	; 0x1f3a <OS_Init+0x630>
        {
            cur_task->state = READY;
    1c48:	90 82       	st	Z, r9
    1c4a:	5b c0       	rjmp	.+182    	; 0x1d02 <OS_Init+0x3f8>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1c4c:	e0 91 21 16 	lds	r30, 0x1621
    1c50:	f0 91 22 16 	lds	r31, 0x1622
    1c54:	e9 5f       	subi	r30, 0xF9	; 249
    1c56:	fd 4f       	sbci	r31, 0xFD	; 253
    1c58:	b1 83       	std	Z+1, r27	; 0x01
    1c5a:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1c5c:	b0 93 22 16 	sts	0x1622, r27
    1c60:	a0 93 21 16 	sts	0x1621, r26
    1c64:	6a c1       	rjmp	.+724    	; 0x1f3a <OS_Init+0x630>
            enqueue(&rr_queue, cur_task);
        }
        break;

    case TASK_CREATE:
		kernel_request_retval = kernel_create_task();
    1c66:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <kernel_create_task>
    1c6a:	90 93 18 16 	sts	0x1618, r25
    1c6e:	80 93 17 16 	sts	0x1617, r24

        /* Check if new task has higer priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
    1c72:	80 91 17 16 	lds	r24, 0x1617
    1c76:	90 91 18 16 	lds	r25, 0x1618
    1c7a:	89 2b       	or	r24, r25
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <OS_Init+0x376>
    1c7e:	5d c1       	rjmp	.+698    	; 0x1f3a <OS_Init+0x630>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
    1c80:	80 91 15 16 	lds	r24, 0x1615
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	71 f4       	brne	.+28     	; 0x1ca4 <OS_Init+0x39a>
    1c88:	e0 91 b6 03 	lds	r30, 0x03B6
    1c8c:	f0 91 b7 03 	lds	r31, 0x03B7
    1c90:	ea 5f       	subi	r30, 0xFA	; 250
    1c92:	fd 4f       	sbci	r31, 0xFD	; 253
    1c94:	80 81       	ld	r24, Z
    1c96:	e6 50       	subi	r30, 0x06	; 6
    1c98:	f2 40       	sbci	r31, 0x02	; 2
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	19 f0       	breq	.+6      	; 0x1ca4 <OS_Init+0x39a>
            {
                cur_task->state = READY;
    1c9e:	ed 5f       	subi	r30, 0xFD	; 253
    1ca0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ca2:	00 83       	st	Z, r16
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
    1ca4:	a0 91 b6 03 	lds	r26, 0x03B6
    1ca8:	b0 91 b7 03 	lds	r27, 0x03B7
    1cac:	aa 5f       	subi	r26, 0xFA	; 250
    1cae:	bd 4f       	sbci	r27, 0xFD	; 253
    1cb0:	8c 91       	ld	r24, X
    1cb2:	a6 50       	subi	r26, 0x06	; 6
    1cb4:	b2 40       	sbci	r27, 0x02	; 2
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	a1 f4       	brne	.+40     	; 0x1ce2 <OS_Init+0x3d8>
    1cba:	20 91 15 16 	lds	r18, 0x1615
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	81 f4       	brne	.+32     	; 0x1ce2 <OS_Init+0x3d8>
    1cc2:	80 91 16 16 	lds	r24, 0x1616
    1cc6:	e0 91 ba 03 	lds	r30, 0x03BA
    1cca:	f0 91 bb 03 	lds	r31, 0x03BB
    1cce:	e0 5e       	subi	r30, 0xE0	; 224
    1cd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd2:	90 81       	ld	r25, Z
    1cd4:	98 17       	cp	r25, r24
    1cd6:	29 f4       	brne	.+10     	; 0x1ce2 <OS_Init+0x3d8>
               kernel_request_create_args.level == PERIODIC &&
               PPP[slot_name_index] == kernel_request_create_args.name)
            {
                cur_task->state = READY;
    1cd8:	ad 5f       	subi	r26, 0xFD	; 253
    1cda:	bd 4f       	sbci	r27, 0xFD	; 253
    1cdc:	2c 93       	st	X, r18
    1cde:	a3 50       	subi	r26, 0x03	; 3
    1ce0:	b2 40       	sbci	r27, 0x02	; 2
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
    1ce2:	aa 5f       	subi	r26, 0xFA	; 250
    1ce4:	bd 4f       	sbci	r27, 0xFD	; 253
    1ce6:	8c 91       	ld	r24, X
    1ce8:	a6 50       	subi	r26, 0x06	; 6
    1cea:	b2 40       	sbci	r27, 0x02	; 2
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <OS_Init+0x3e8>
    1cf0:	24 c1       	rjmp	.+584    	; 0x1f3a <OS_Init+0x630>
    1cf2:	ad 5f       	subi	r26, 0xFD	; 253
    1cf4:	bd 4f       	sbci	r27, 0xFD	; 253
    1cf6:	8c 91       	ld	r24, X
    1cf8:	a3 50       	subi	r26, 0x03	; 3
    1cfa:	b2 40       	sbci	r27, 0x02	; 2
    1cfc:	82 30       	cpi	r24, 0x02	; 2
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <OS_Init+0x3f8>
    1d00:	1c c1       	rjmp	.+568    	; 0x1f3a <OS_Init+0x630>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1d02:	a9 5f       	subi	r26, 0xF9	; 249
    1d04:	bd 4f       	sbci	r27, 0xFD	; 253
    1d06:	11 96       	adiw	r26, 0x01	; 1
    1d08:	1c 92       	st	X, r1
    1d0a:	1e 92       	st	-X, r1
    1d0c:	a7 50       	subi	r26, 0x07	; 7
    1d0e:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1d10:	80 91 1f 16 	lds	r24, 0x161F
    1d14:	90 91 20 16 	lds	r25, 0x1620
    1d18:	89 2b       	or	r24, r25
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <OS_Init+0x414>
    1d1c:	97 cf       	rjmp	.-210    	; 0x1c4c <OS_Init+0x342>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1d1e:	b0 93 20 16 	sts	0x1620, r27
    1d22:	a0 93 1f 16 	sts	0x161F, r26
    1d26:	9a cf       	rjmp	.-204    	; 0x1c5c <OS_Init+0x352>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
    1d28:	a0 91 b6 03 	lds	r26, 0x03B6
    1d2c:	b0 91 b7 03 	lds	r27, 0x03B7
    1d30:	ae 15       	cp	r26, r14
    1d32:	bf 05       	cpc	r27, r15
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <OS_Init+0x42e>
    1d36:	01 c1       	rjmp	.+514    	; 0x1f3a <OS_Init+0x630>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
    1d38:	ad 5f       	subi	r26, 0xFD	; 253
    1d3a:	bd 4f       	sbci	r27, 0xFD	; 253
    1d3c:	1c 92       	st	X, r1
    if(cur_task->level == PERIODIC)
    1d3e:	13 96       	adiw	r26, 0x03	; 3
    1d40:	8c 91       	ld	r24, X
    1d42:	a6 50       	subi	r26, 0x06	; 6
    1d44:	b2 40       	sbci	r27, 0x02	; 2
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	61 f4       	brne	.+24     	; 0x1d62 <OS_Init+0x458>
    {
        name_to_task_ptr[cur_task->name] = NULL;
    1d4a:	ae 5f       	subi	r26, 0xFE	; 254
    1d4c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d4e:	ec 91       	ld	r30, X
    1d50:	a2 50       	subi	r26, 0x02	; 2
    1d52:	b2 40       	sbci	r27, 0x02	; 2
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	e9 5b       	subi	r30, 0xB9	; 185
    1d5c:	f9 4e       	sbci	r31, 0xE9	; 233
    1d5e:	11 82       	std	Z+1, r1	; 0x01
    1d60:	10 82       	st	Z, r1
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1d62:	a9 5f       	subi	r26, 0xF9	; 249
    1d64:	bd 4f       	sbci	r27, 0xFD	; 253
    1d66:	11 96       	adiw	r26, 0x01	; 1
    1d68:	1c 92       	st	X, r1
    1d6a:	1e 92       	st	-X, r1
    1d6c:	a7 50       	subi	r26, 0x07	; 7
    1d6e:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1d70:	80 91 1b 16 	lds	r24, 0x161B
    1d74:	90 91 1c 16 	lds	r25, 0x161C
    1d78:	89 2b       	or	r24, r25
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <OS_Init+0x47c>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1d7c:	b0 93 1c 16 	sts	0x161C, r27
    1d80:	a0 93 1b 16 	sts	0x161B, r26
    1d84:	08 c0       	rjmp	.+16     	; 0x1d96 <OS_Init+0x48c>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1d86:	e0 91 1d 16 	lds	r30, 0x161D
    1d8a:	f0 91 1e 16 	lds	r31, 0x161E
    1d8e:	e9 5f       	subi	r30, 0xF9	; 249
    1d90:	fd 4f       	sbci	r31, 0xFD	; 253
    1d92:	b1 83       	std	Z+1, r27	; 0x01
    1d94:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1d96:	b0 93 1e 16 	sts	0x161E, r27
    1d9a:	a0 93 1d 16 	sts	0x161D, r26
    1d9e:	cd c0       	rjmp	.+410    	; 0x1f3a <OS_Init+0x630>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
    1da0:	a0 91 b6 03 	lds	r26, 0x03B6
    1da4:	b0 91 b7 03 	lds	r27, 0x03B7
    1da8:	aa 5f       	subi	r26, 0xFA	; 250
    1daa:	bd 4f       	sbci	r27, 0xFD	; 253
    1dac:	8c 91       	ld	r24, X
    1dae:	a6 50       	subi	r26, 0x06	; 6
    1db0:	b2 40       	sbci	r27, 0x02	; 2
    1db2:	82 30       	cpi	r24, 0x02	; 2
    1db4:	29 f1       	breq	.+74     	; 0x1e00 <OS_Init+0x4f6>
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <OS_Init+0x4b8>
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <OS_Init+0x4b6>
    1dbe:	41 c0       	rjmp	.+130    	; 0x1e42 <OS_Init+0x538>
    1dc0:	22 c0       	rjmp	.+68     	; 0x1e06 <OS_Init+0x4fc>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1dc2:	a9 5f       	subi	r26, 0xF9	; 249
    1dc4:	bd 4f       	sbci	r27, 0xFD	; 253
    1dc6:	11 96       	adiw	r26, 0x01	; 1
    1dc8:	1c 92       	st	X, r1
    1dca:	1e 92       	st	-X, r1
    1dcc:	a7 50       	subi	r26, 0x07	; 7
    1dce:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1dd0:	80 91 23 16 	lds	r24, 0x1623
    1dd4:	90 91 24 16 	lds	r25, 0x1624
    1dd8:	89 2b       	or	r24, r25
    1dda:	29 f4       	brne	.+10     	; 0x1de6 <OS_Init+0x4dc>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1ddc:	b0 93 24 16 	sts	0x1624, r27
    1de0:	a0 93 23 16 	sts	0x1623, r26
    1de4:	08 c0       	rjmp	.+16     	; 0x1df6 <OS_Init+0x4ec>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1de6:	e0 91 25 16 	lds	r30, 0x1625
    1dea:	f0 91 26 16 	lds	r31, 0x1626
    1dee:	e9 5f       	subi	r30, 0xF9	; 249
    1df0:	fd 4f       	sbci	r31, 0xFD	; 253
    1df2:	b1 83       	std	Z+1, r27	; 0x01
    1df4:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1df6:	b0 93 26 16 	sts	0x1626, r27
    1dfa:	a0 93 25 16 	sts	0x1625, r26
    1dfe:	21 c0       	rjmp	.+66     	; 0x1e42 <OS_Init+0x538>
	    case SYSTEM:
	        enqueue(&system_queue, cur_task);
			break;

	    case PERIODIC:
			slot_task_finished = 1;
    1e00:	10 93 b9 03 	sts	0x03B9, r17
    1e04:	1e c0       	rjmp	.+60     	; 0x1e42 <OS_Init+0x538>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1e06:	a9 5f       	subi	r26, 0xF9	; 249
    1e08:	bd 4f       	sbci	r27, 0xFD	; 253
    1e0a:	11 96       	adiw	r26, 0x01	; 1
    1e0c:	1c 92       	st	X, r1
    1e0e:	1e 92       	st	-X, r1
    1e10:	a7 50       	subi	r26, 0x07	; 7
    1e12:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1e14:	80 91 1f 16 	lds	r24, 0x161F
    1e18:	90 91 20 16 	lds	r25, 0x1620
    1e1c:	89 2b       	or	r24, r25
    1e1e:	29 f4       	brne	.+10     	; 0x1e2a <OS_Init+0x520>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1e20:	b0 93 20 16 	sts	0x1620, r27
    1e24:	a0 93 1f 16 	sts	0x161F, r26
    1e28:	08 c0       	rjmp	.+16     	; 0x1e3a <OS_Init+0x530>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1e2a:	e0 91 21 16 	lds	r30, 0x1621
    1e2e:	f0 91 22 16 	lds	r31, 0x1622
    1e32:	e9 5f       	subi	r30, 0xF9	; 249
    1e34:	fd 4f       	sbci	r31, 0xFD	; 253
    1e36:	b1 83       	std	Z+1, r27	; 0x01
    1e38:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1e3a:	b0 93 22 16 	sts	0x1622, r27
    1e3e:	a0 93 21 16 	sts	0x1621, r26

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
    1e42:	ad 5f       	subi	r26, 0xFD	; 253
    1e44:	bd 4f       	sbci	r27, 0xFD	; 253
    1e46:	9c 92       	st	X, r9
    1e48:	78 c0       	rjmp	.+240    	; 0x1f3a <OS_Init+0x630>
        /* Should not happen. Handled in task itself. */
        break;

    case EVENT_INIT:
        kernel_request_event_ptr = NULL;
        if(num_events_created < MAXEVENT)
    1e4a:	20 91 bc 03 	lds	r18, 0x03BC
    1e4e:	28 30       	cpi	r18, 0x08	; 8
    1e50:	58 f4       	brcc	.+22     	; 0x1e68 <OS_Init+0x55e>
        {
            /* Pass a number back to the task, but pretend it is a pointer.
             * It is the index of the event_queue plus 1.
             * (0 is return value for failure.)
             */
            kernel_request_event_ptr = (EVENT *)(uint16_t)(num_events_created + 1);
    1e52:	82 2f       	mov	r24, r18
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	90 93 1a 16 	sts	0x161A, r25
    1e5c:	80 93 19 16 	sts	0x1619, r24
            /*
            event_queue[num_events_created].head = NULL;
            event_queue[num_events_created].tail = NULL;
            */
            ++num_events_created;
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	20 93 bc 03 	sts	0x03BC, r18
    1e66:	69 c0       	rjmp	.+210    	; 0x1f3a <OS_Init+0x630>
        }
        else
        {
            kernel_request_event_ptr = (EVENT *)(uint16_t)0;
    1e68:	10 92 1a 16 	sts	0x161A, r1
    1e6c:	10 92 19 16 	sts	0x1619, r1
    1e70:	64 c0       	rjmp	.+200    	; 0x1f3a <OS_Init+0x630>
        }
        break;

    case EVENT_WAIT:
        /* idle_task does not wait. */
		if(cur_task != idle_task)
    1e72:	a0 91 b6 03 	lds	r26, 0x03B6
    1e76:	b0 91 b7 03 	lds	r27, 0x03B7
    1e7a:	ae 15       	cp	r26, r14
    1e7c:	bf 05       	cpc	r27, r15
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <OS_Init+0x578>
    1e80:	5c c0       	rjmp	.+184    	; 0x1f3a <OS_Init+0x630>
 * @brief Kernel function to place current task in a waiting queue.
 */
static void kernel_event_wait(void)
{
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    1e82:	80 91 19 16 	lds	r24, 0x1619
    1e86:	98 2f       	mov	r25, r24
    1e88:	91 50       	subi	r25, 0x01	; 1

    if(handle >= num_events_created)
    1e8a:	80 91 bc 03 	lds	r24, 0x03BC
    1e8e:	98 17       	cp	r25, r24
    1e90:	18 f0       	brcs	.+6      	; 0x1e98 <OS_Init+0x58e>
    {
        /* Error code. */
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
    1e92:	50 92 95 02 	sts	0x0295, r5
    1e96:	4f c0       	rjmp	.+158    	; 0x1f36 <OS_Init+0x62c>
        OS_Abort();
    }
    else if(cur_task->level == PERIODIC)
    1e98:	aa 5f       	subi	r26, 0xFA	; 250
    1e9a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e9c:	8c 91       	ld	r24, X
    1e9e:	a6 50       	subi	r26, 0x06	; 6
    1ea0:	b2 40       	sbci	r27, 0x02	; 2
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <OS_Init+0x5a2>
	{
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
    1ea6:	60 92 95 02 	sts	0x0295, r6
    1eaa:	45 c0       	rjmp	.+138    	; 0x1f36 <OS_Init+0x62c>
		OS_Abort();
	}
	else
    {
        /* Place this task in a queue. */
        cur_task->state = WAITING;
    1eac:	ad 5f       	subi	r26, 0xFD	; 253
    1eae:	bd 4f       	sbci	r27, 0xFD	; 253
    1eb0:	7c 92       	st	X, r7
        enqueue(&event_queue[handle], cur_task);
    1eb2:	c9 2f       	mov	r28, r25
    1eb4:	d0 e0       	ldi	r29, 0x00	; 0
    1eb6:	cc 0f       	add	r28, r28
    1eb8:	dd 1f       	adc	r29, r29
    1eba:	cc 0f       	add	r28, r28
    1ebc:	dd 1f       	adc	r29, r29
    1ebe:	c9 5d       	subi	r28, 0xD9	; 217
    1ec0:	d9 4e       	sbci	r29, 0xE9	; 233
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1ec2:	14 96       	adiw	r26, 0x04	; 4
    1ec4:	11 96       	adiw	r26, 0x01	; 1
    1ec6:	1c 92       	st	X, r1
    1ec8:	1e 92       	st	-X, r1
    1eca:	a7 50       	subi	r26, 0x07	; 7
    1ecc:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1ece:	88 81       	ld	r24, Y
    1ed0:	99 81       	ldd	r25, Y+1	; 0x01
    1ed2:	89 2b       	or	r24, r25
    1ed4:	19 f4       	brne	.+6      	; 0x1edc <OS_Init+0x5d2>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1ed6:	b9 83       	std	Y+1, r27	; 0x01
    1ed8:	a8 83       	st	Y, r26
    1eda:	06 c0       	rjmp	.+12     	; 0x1ee8 <OS_Init+0x5de>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1edc:	ea 81       	ldd	r30, Y+2	; 0x02
    1ede:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee0:	e9 5f       	subi	r30, 0xF9	; 249
    1ee2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee4:	b1 83       	std	Z+1, r27	; 0x01
    1ee6:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1ee8:	bb 83       	std	Y+3, r27	; 0x03
    1eea:	aa 83       	std	Y+2, r26	; 0x02
    1eec:	26 c0       	rjmp	.+76     	; 0x1f3a <OS_Init+0x630>
        }

        break;

    case EVENT_SIGNAL:
        kernel_event_signal(0 /* not broadcast */, 0 /* not task_next */);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	01 c0       	rjmp	.+2      	; 0x1ef4 <OS_Init+0x5ea>
        break;

    case EVENT_BROADCAST:
        kernel_event_signal(1 /* is broadcast */, 0 /* not task_next */);
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	1a c0       	rjmp	.+52     	; 0x1f2c <OS_Init+0x622>
        break;

    case EVENT_SIGNAL_AND_NEXT:
        if(cur_task->level == PERIODIC)
    1ef8:	e0 91 b6 03 	lds	r30, 0x03B6
    1efc:	f0 91 b7 03 	lds	r31, 0x03B7
    1f00:	ea 5f       	subi	r30, 0xFA	; 250
    1f02:	fd 4f       	sbci	r31, 0xFD	; 253
    1f04:	80 81       	ld	r24, Z
    1f06:	82 30       	cpi	r24, 0x02	; 2
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <OS_Init+0x604>
        {
            slot_task_finished = 1;
    1f0a:	10 93 b9 03 	sts	0x03B9, r17
        }

        kernel_event_signal(0 /* not broadcast */, 1 /* is task_next */);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0c c0       	rjmp	.+24     	; 0x1f2a <OS_Init+0x620>

        break;

    case EVENT_BROADCAST_AND_NEXT:
        if(cur_task->level == PERIODIC)
    1f12:	e0 91 b6 03 	lds	r30, 0x03B6
    1f16:	f0 91 b7 03 	lds	r31, 0x03B7
    1f1a:	ea 5f       	subi	r30, 0xFA	; 250
    1f1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1e:	80 81       	ld	r24, Z
    1f20:	82 30       	cpi	r24, 0x02	; 2
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <OS_Init+0x61e>
        {
            slot_task_finished = 1;
    1f24:	10 93 b9 03 	sts	0x03B9, r17
        }

        kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	0e 94 48 0b 	call	0x1690	; 0x1690 <kernel_event_signal>
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <OS_Init+0x630>
        break;

    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
    1f32:	80 92 95 02 	sts	0x0295, r8
        OS_Abort();
    1f36:	0e 94 20 0a 	call	0x1440	; 0x1440 <OS_Abort>
        break;
    }

    kernel_request = NONE;
    1f3a:	10 92 10 16 	sts	0x1610, r1
    1f3e:	96 cd       	rjmp	.-1236   	; 0x1a6c <OS_Init+0x162>

00001f40 <Task_Create>:
 *  If the process is PERIODIC, then its @a name is a user-specified name
 *  to be used in the PPP[] array. Otherwise, @a name is ignored.
 * @sa @ref policy
 */
int Task_Create(void (*f)(void), int arg, unsigned int level, unsigned int name)
{
    1f40:	1f 93       	push	r17
    int retval;
    uint8_t sreg;

    sreg = SREG;
    1f42:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1f44:	f8 94       	cli

    kernel_request_create_args.f = (voidfuncvoid_ptr)f;
    1f46:	90 93 12 16 	sts	0x1612, r25
    1f4a:	80 93 11 16 	sts	0x1611, r24
    kernel_request_create_args.arg = arg;
    1f4e:	70 93 14 16 	sts	0x1614, r23
    1f52:	60 93 13 16 	sts	0x1613, r22
    kernel_request_create_args.level = (uint8_t)level;
    1f56:	40 93 15 16 	sts	0x1615, r20
    kernel_request_create_args.name = (uint8_t)name;
    1f5a:	20 93 16 16 	sts	0x1616, r18

    kernel_request = TASK_CREATE;
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	80 93 10 16 	sts	0x1610, r24
    enter_kernel();
    1f64:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    retval = kernel_request_retval;
    1f68:	20 91 17 16 	lds	r18, 0x1617
    1f6c:	30 91 18 16 	lds	r19, 0x1618
    SREG = sreg;
    1f70:	1f bf       	out	0x3f, r17	; 63

    return retval;
}
    1f72:	c9 01       	movw	r24, r18
    1f74:	1f 91       	pop	r17
    1f76:	08 95       	ret

00001f78 <Task_Next>:

/**
  * @brief The calling task gives up its share of the processor voluntarily.
  */
void Task_Next()
{
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	0f 92       	push	r0
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile sreg;

	sreg = SREG;
    1f82:	8f b7       	in	r24, 0x3f	; 63
    1f84:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    1f86:	f8 94       	cli

    kernel_request = TASK_NEXT;
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	80 93 10 16 	sts	0x1610, r24
    enter_kernel();
    1f8e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

	SREG = sreg;
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f bf       	out	0x3f, r24	; 63
}
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <Task_Terminate>:

/**
  * @brief The calling task terminates itself.
  */
void Task_Terminate()
{
    1f9e:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1fa0:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1fa2:	f8 94       	cli

    kernel_request = TASK_TERMINATE;
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	80 93 10 16 	sts	0x1610, r24
    enter_kernel();
    1faa:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    SREG = sreg;
    1fae:	1f bf       	out	0x3f, r17	; 63
}
    1fb0:	1f 91       	pop	r17
    1fb2:	08 95       	ret

00001fb4 <Task_GetArg>:
int Task_GetArg(void)
{
    int arg;
    uint8_t sreg;

    sreg = SREG;
    1fb4:	8f b7       	in	r24, 0x3f	; 63
    Disable_Interrupt();
    1fb6:	f8 94       	cli

    arg = cur_task->arg;

    SREG = sreg;
    1fb8:	8f bf       	out	0x3f, r24	; 63
    1fba:	e0 91 b6 03 	lds	r30, 0x03B6
    1fbe:	f0 91 b7 03 	lds	r31, 0x03B7
    1fc2:	ec 5f       	subi	r30, 0xFC	; 252
    1fc4:	fd 4f       	sbci	r31, 0xFD	; 253

    return arg;
}
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	08 95       	ret

00001fcc <Event_Init>:
 * @brief Initialize a new, non-NULL Event descriptor.
 *  
 * @return a non-NULL Event descriptor if successful; NULL otherwise.
 */
EVENT *Event_Init(void)
{
    1fcc:	1f 93       	push	r17
    EVENT* event_ptr;
    uint8_t sreg;

    sreg = SREG;
    1fce:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1fd0:	f8 94       	cli

    kernel_request = EVENT_INIT;
    1fd2:	86 e0       	ldi	r24, 0x06	; 6
    1fd4:	80 93 10 16 	sts	0x1610, r24
    enter_kernel();
    1fd8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    event_ptr = (EVENT *)kernel_request_event_ptr;

    SREG = sreg;
    1fdc:	1f bf       	out	0x3f, r17	; 63

    return event_ptr;
}
    1fde:	80 91 19 16 	lds	r24, 0x1619
    1fe2:	90 91 1a 16 	lds	r25, 0x161A
    1fe6:	1f 91       	pop	r17
    1fe8:	08 95       	ret

00001fea <Event_Wait>:
  * @brief Wait for the next occurrence of a signal on \a e. The calling process always blocks.
  * 
  * @param e  an Event descriptor
  */
void Event_Wait(EVENT *e)
{
    1fea:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    1fec:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    1fee:	f8 94       	cli

    kernel_request = EVENT_WAIT;
    1ff0:	27 e0       	ldi	r18, 0x07	; 7
    1ff2:	20 93 10 16 	sts	0x1610, r18
    kernel_request_event_ptr = e;
    1ff6:	90 93 1a 16 	sts	0x161A, r25
    1ffa:	80 93 19 16 	sts	0x1619, r24
    enter_kernel();
    1ffe:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    SREG = sreg;
    2002:	1f bf       	out	0x3f, r17	; 63
}
    2004:	1f 91       	pop	r17
    2006:	08 95       	ret

00002008 <Event_Signal>:
  *
  * @brief Resume a \b single waiting task on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Signal(EVENT *e)
{
    2008:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    200a:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    200c:	f8 94       	cli

    kernel_request = EVENT_SIGNAL;
    200e:	28 e0       	ldi	r18, 0x08	; 8
    2010:	20 93 10 16 	sts	0x1610, r18
    kernel_request_event_ptr = e;
    2014:	90 93 1a 16 	sts	0x161A, r25
    2018:	80 93 19 16 	sts	0x1619, r24
    enter_kernel();
    201c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    SREG = sreg;
    2020:	1f bf       	out	0x3f, r17	; 63
}
    2022:	1f 91       	pop	r17
    2024:	08 95       	ret

00002026 <Event_Broadcast>:
  *
  * @brief Resume \b ALL waiting tasks on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Broadcast(EVENT *e)
{
    2026:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    2028:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    202a:	f8 94       	cli

    kernel_request = EVENT_BROADCAST;
    202c:	29 e0       	ldi	r18, 0x09	; 9
    202e:	20 93 10 16 	sts	0x1610, r18
    kernel_request_event_ptr = e;
    2032:	90 93 1a 16 	sts	0x161A, r25
    2036:	80 93 19 16 	sts	0x1619, r24
    enter_kernel();
    203a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    SREG = sreg;
    203e:	1f bf       	out	0x3f, r17	; 63
}
    2040:	1f 91       	pop	r17
    2042:	08 95       	ret

00002044 <Signal_And_Next>:
  * an indivisible unit. So conceptually, the calling task resumes another
  * waiting task and gives up its share of the processor simultaneously.
  * \sa Event_Signal(), Task_Next()
  */
void  Signal_And_Next(EVENT *e)
{
    2044:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    2046:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    2048:	f8 94       	cli

    kernel_request = EVENT_SIGNAL_AND_NEXT;
    204a:	2a e0       	ldi	r18, 0x0A	; 10
    204c:	20 93 10 16 	sts	0x1610, r18
    kernel_request_event_ptr = e;
    2050:	90 93 1a 16 	sts	0x161A, r25
    2054:	80 93 19 16 	sts	0x1619, r24
    enter_kernel();
    2058:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    SREG = sreg;
    205c:	1f bf       	out	0x3f, r17	; 63
}
    205e:	1f 91       	pop	r17
    2060:	08 95       	ret

00002062 <Broadcast_And_Next>:
  *
  * This is equivalent to "Event_Broadcast( e ); Task_Next()" in concept.
  * \sa Event_Broadcast(), Task_Next()
  */
void  Broadcast_And_Next(EVENT *e)
{
    2062:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    2064:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    2066:	f8 94       	cli

    kernel_request = EVENT_BROADCAST_AND_NEXT;
    2068:	2b e0       	ldi	r18, 0x0B	; 11
    206a:	20 93 10 16 	sts	0x1610, r18
    kernel_request_event_ptr = e;
    206e:	90 93 1a 16 	sts	0x161A, r25
    2072:	80 93 19 16 	sts	0x1619, r24
    enter_kernel();
    2076:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <enter_kernel>

    SREG = sreg;
    207a:	1f bf       	out	0x3f, r17	; 63
}
    207c:	1f 91       	pop	r17
    207e:	08 95       	ret

00002080 <__vector_not_set>:
 * The default action is to reset,
 * but it could be changed to do something else.
 */   
void __vector_not_set (void) __attribute__ ((naked)) __attribute__ ((section (".text")));
void __vector_not_set (void)
{
    2080:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002084 <uart_putchar>:
*/
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
    2084:	98 2f       	mov	r25, r24
	cli();
    2086:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    2088:	80 91 c0 00 	lds	r24, 0x00C0
    208c:	85 ff       	sbrs	r24, 5
    208e:	fc cf       	rjmp	.-8      	; 0x2088 <uart_putchar+0x4>
	UDR0 = c;  // Putting data into the buffer, forces transmission
    2090:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    2094:	78 94       	sei
}
    2096:	08 95       	ret

00002098 <uart_getchar>:

char uart_getchar (int index)
{
    2098:	fc 01       	movw	r30, r24
	if (index < UART_BUFFER_SIZE) {
    209a:	84 36       	cpi	r24, 0x64	; 100
    209c:	91 05       	cpc	r25, r1
    209e:	14 f0       	brlt	.+4      	; 0x20a4 <uart_getchar+0xc>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	08 95       	ret
		return rx[index];
    20a4:	ec 59       	subi	r30, 0x9C	; 156
    20a6:	f9 4e       	sbci	r31, 0xE9	; 233
    20a8:	80 81       	ld	r24, Z
	}
	return 0;
}
    20aa:	08 95       	ret

000020ac <uart_putstr>:

void uart_putstr(char *s)
{
    20ac:	fc 01       	movw	r30, r24
    20ae:	09 c0       	rjmp	.+18     	; 0x20c2 <uart_putstr+0x16>
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
	cli();
    20b0:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    20b2:	80 91 c0 00 	lds	r24, 0x00C0
    20b6:	85 ff       	sbrs	r24, 5
    20b8:	fc cf       	rjmp	.-8      	; 0x20b2 <uart_putstr+0x6>
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    20ba:	31 96       	adiw	r30, 0x01	; 1

void uart_putchar (char c)
{
	cli();
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
	UDR0 = c;  // Putting data into the buffer, forces transmission
    20bc:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    20c0:	78 94       	sei
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    20c2:	90 81       	ld	r25, Z
    20c4:	99 23       	and	r25, r25
    20c6:	a1 f7       	brne	.-24     	; 0x20b0 <uart_putstr+0x4>
	
}
    20c8:	08 95       	ret

000020ca <uart_init>:

void uart_init(UART_BPS bitrate){
    20ca:	98 2f       	mov	r25, r24

	DDRB = 0xff;
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xff;
    20d0:	85 b9       	out	0x05, r24	; 5

	rxn = 0;
    20d2:	10 92 63 16 	sts	0x1663, r1
    20d6:	10 92 62 16 	sts	0x1662, r1
	uart_rx = 0;
    20da:	10 92 38 17 	sts	0x1738, r1

	/* Set baud rate */
	UBRR0H = 0;
    20de:	10 92 c5 00 	sts	0x00C5, r1
	switch (bitrate) {
    20e2:	99 23       	and	r25, r25
    20e4:	11 f4       	brne	.+4      	; 0x20ea <uart_init+0x20>
    case UART_38400:
	    UBRR0L = 12;
    20e6:	8c e0       	ldi	r24, 0x0C	; 12
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <uart_init+0x22>
		break;
    case UART_57600:
        UBRR0L = 6;
        break;
    default:
        UBRR0L = 6;
    20ea:	86 e0       	ldi	r24, 0x06	; 6
    20ec:	80 93 c4 00 	sts	0x00C4, r24
    }

	/* Enable receiver and transmitter */
	UCSR0B = _BV(RXEN0)|_BV(TXEN0) | _BV(RXCIE0);
    20f0:	88 e9       	ldi	r24, 0x98	; 152
    20f2:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(1<<UCSZ00) | _BV(UCSZ01);
    20f6:	8e e0       	ldi	r24, 0x0E	; 14
    20f8:	80 93 c2 00 	sts	0x00C2, r24
}
    20fc:	08 95       	ret

000020fe <uart_bytes_recv>:

uint8_t uart_bytes_recv(void)
{
	return rxn;
    20fe:	80 91 62 16 	lds	r24, 0x1662
    2102:	90 91 63 16 	lds	r25, 0x1663
}
    2106:	08 95       	ret

00002108 <uart_reset_recv>:

void uart_reset_recv(void)
{
	rxn = 0;
    2108:	10 92 63 16 	sts	0x1663, r1
    210c:	10 92 62 16 	sts	0x1662, r1
}
    2110:	08 95       	ret

00002112 <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
    2112:	1f 92       	push	r1
    2114:	0f 92       	push	r0
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	0f 92       	push	r0
    211a:	0b b6       	in	r0, 0x3b	; 59
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	2f 93       	push	r18
    2122:	3f 93       	push	r19
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
    2136:	80 91 c0 00 	lds	r24, 0x00C0
    213a:	87 ff       	sbrs	r24, 7
    213c:	fc cf       	rjmp	.-8      	; 0x2136 <__vector_25+0x24>

	//PORTB = ~_BV(PINB1);

	rx[rxn] = UDR0;
    213e:	e0 91 62 16 	lds	r30, 0x1662
    2142:	f0 91 63 16 	lds	r31, 0x1663
    2146:	80 91 c6 00 	lds	r24, 0x00C6
    214a:	ec 59       	subi	r30, 0x9C	; 156
    214c:	f9 4e       	sbci	r31, 0xE9	; 233
    214e:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
    2150:	80 91 62 16 	lds	r24, 0x1662
    2154:	90 91 63 16 	lds	r25, 0x1663
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	64 e6       	ldi	r22, 0x64	; 100
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	0e 94 cb 19 	call	0x3396	; 0x3396 <__divmodhi4>
    2162:	90 93 63 16 	sts	0x1663, r25
    2166:	80 93 62 16 	sts	0x1662, r24
	uart_rx = 1; // notify main of receipt of data.
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 93 38 17 	sts	0x1738, r24
	//PORTB = PORTB | _BV(PINB1);
}
    2170:	ff 91       	pop	r31
    2172:	ef 91       	pop	r30
    2174:	bf 91       	pop	r27
    2176:	af 91       	pop	r26
    2178:	9f 91       	pop	r25
    217a:	8f 91       	pop	r24
    217c:	7f 91       	pop	r23
    217e:	6f 91       	pop	r22
    2180:	5f 91       	pop	r21
    2182:	3f 91       	pop	r19
    2184:	2f 91       	pop	r18
    2186:	0f 90       	pop	r0
    2188:	0b be       	out	0x3b, r0	; 59
    218a:	0f 90       	pop	r0
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	0f 90       	pop	r0
    2190:	1f 90       	pop	r1
    2192:	18 95       	reti

00002194 <__fixunssfsi>:
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	7b 01       	movw	r14, r22
    219e:	8c 01       	movw	r16, r24
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	5f e4       	ldi	r21, 0x4F	; 79
    21a8:	0e 94 46 14 	call	0x288c	; 0x288c <__gesf2>
    21ac:	88 23       	and	r24, r24
    21ae:	8c f0       	brlt	.+34     	; 0x21d2 <__fixunssfsi+0x3e>
    21b0:	c8 01       	movw	r24, r16
    21b2:	b7 01       	movw	r22, r14
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	5f e4       	ldi	r21, 0x4F	; 79
    21bc:	0e 94 42 12 	call	0x2484	; 0x2484 <__subsf3>
    21c0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fixsfsi>
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24
    21c8:	20 50       	subi	r18, 0x00	; 0
    21ca:	30 40       	sbci	r19, 0x00	; 0
    21cc:	40 40       	sbci	r20, 0x00	; 0
    21ce:	50 48       	sbci	r21, 0x80	; 128
    21d0:	06 c0       	rjmp	.+12     	; 0x21de <__fixunssfsi+0x4a>
    21d2:	c8 01       	movw	r24, r16
    21d4:	b7 01       	movw	r22, r14
    21d6:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <__fixsfsi>
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	b9 01       	movw	r22, r18
    21e0:	ca 01       	movw	r24, r20
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	08 95       	ret

000021ec <_fpadd_parts>:
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	ec ef       	ldi	r30, 0xFC	; 252
    21f2:	f0 e1       	ldi	r31, 0x10	; 16
    21f4:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__prologue_saves__>
    21f8:	dc 01       	movw	r26, r24
    21fa:	2b 01       	movw	r4, r22
    21fc:	fa 01       	movw	r30, r20
    21fe:	9c 91       	ld	r25, X
    2200:	92 30       	cpi	r25, 0x02	; 2
    2202:	08 f4       	brcc	.+2      	; 0x2206 <_fpadd_parts+0x1a>
    2204:	39 c1       	rjmp	.+626    	; 0x2478 <_fpadd_parts+0x28c>
    2206:	eb 01       	movw	r28, r22
    2208:	88 81       	ld	r24, Y
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	08 f4       	brcc	.+2      	; 0x2210 <_fpadd_parts+0x24>
    220e:	33 c1       	rjmp	.+614    	; 0x2476 <_fpadd_parts+0x28a>
    2210:	94 30       	cpi	r25, 0x04	; 4
    2212:	69 f4       	brne	.+26     	; 0x222e <_fpadd_parts+0x42>
    2214:	84 30       	cpi	r24, 0x04	; 4
    2216:	09 f0       	breq	.+2      	; 0x221a <_fpadd_parts+0x2e>
    2218:	2f c1       	rjmp	.+606    	; 0x2478 <_fpadd_parts+0x28c>
    221a:	11 96       	adiw	r26, 0x01	; 1
    221c:	9c 91       	ld	r25, X
    221e:	11 97       	sbiw	r26, 0x01	; 1
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	98 17       	cp	r25, r24
    2224:	09 f4       	brne	.+2      	; 0x2228 <_fpadd_parts+0x3c>
    2226:	28 c1       	rjmp	.+592    	; 0x2478 <_fpadd_parts+0x28c>
    2228:	a8 e9       	ldi	r26, 0x98	; 152
    222a:	b2 e0       	ldi	r27, 0x02	; 2
    222c:	25 c1       	rjmp	.+586    	; 0x2478 <_fpadd_parts+0x28c>
    222e:	84 30       	cpi	r24, 0x04	; 4
    2230:	09 f4       	brne	.+2      	; 0x2234 <_fpadd_parts+0x48>
    2232:	21 c1       	rjmp	.+578    	; 0x2476 <_fpadd_parts+0x28a>
    2234:	82 30       	cpi	r24, 0x02	; 2
    2236:	a9 f4       	brne	.+42     	; 0x2262 <_fpadd_parts+0x76>
    2238:	92 30       	cpi	r25, 0x02	; 2
    223a:	09 f0       	breq	.+2      	; 0x223e <_fpadd_parts+0x52>
    223c:	1d c1       	rjmp	.+570    	; 0x2478 <_fpadd_parts+0x28c>
    223e:	9a 01       	movw	r18, r20
    2240:	ad 01       	movw	r20, r26
    2242:	88 e0       	ldi	r24, 0x08	; 8
    2244:	ea 01       	movw	r28, r20
    2246:	09 90       	ld	r0, Y+
    2248:	ae 01       	movw	r20, r28
    224a:	e9 01       	movw	r28, r18
    224c:	09 92       	st	Y+, r0
    224e:	9e 01       	movw	r18, r28
    2250:	81 50       	subi	r24, 0x01	; 1
    2252:	c1 f7       	brne	.-16     	; 0x2244 <_fpadd_parts+0x58>
    2254:	e2 01       	movw	r28, r4
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	11 96       	adiw	r26, 0x01	; 1
    225a:	9c 91       	ld	r25, X
    225c:	89 23       	and	r24, r25
    225e:	81 83       	std	Z+1, r24	; 0x01
    2260:	08 c1       	rjmp	.+528    	; 0x2472 <_fpadd_parts+0x286>
    2262:	92 30       	cpi	r25, 0x02	; 2
    2264:	09 f4       	brne	.+2      	; 0x2268 <_fpadd_parts+0x7c>
    2266:	07 c1       	rjmp	.+526    	; 0x2476 <_fpadd_parts+0x28a>
    2268:	12 96       	adiw	r26, 0x02	; 2
    226a:	2d 90       	ld	r2, X+
    226c:	3c 90       	ld	r3, X
    226e:	13 97       	sbiw	r26, 0x03	; 3
    2270:	eb 01       	movw	r28, r22
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	14 96       	adiw	r26, 0x04	; 4
    2278:	ad 90       	ld	r10, X+
    227a:	bd 90       	ld	r11, X+
    227c:	cd 90       	ld	r12, X+
    227e:	dc 90       	ld	r13, X
    2280:	17 97       	sbiw	r26, 0x07	; 7
    2282:	ec 80       	ldd	r14, Y+4	; 0x04
    2284:	fd 80       	ldd	r15, Y+5	; 0x05
    2286:	0e 81       	ldd	r16, Y+6	; 0x06
    2288:	1f 81       	ldd	r17, Y+7	; 0x07
    228a:	91 01       	movw	r18, r2
    228c:	28 1b       	sub	r18, r24
    228e:	39 0b       	sbc	r19, r25
    2290:	b9 01       	movw	r22, r18
    2292:	37 ff       	sbrs	r19, 7
    2294:	04 c0       	rjmp	.+8      	; 0x229e <_fpadd_parts+0xb2>
    2296:	66 27       	eor	r22, r22
    2298:	77 27       	eor	r23, r23
    229a:	62 1b       	sub	r22, r18
    229c:	73 0b       	sbc	r23, r19
    229e:	60 32       	cpi	r22, 0x20	; 32
    22a0:	71 05       	cpc	r23, r1
    22a2:	0c f0       	brlt	.+2      	; 0x22a6 <_fpadd_parts+0xba>
    22a4:	61 c0       	rjmp	.+194    	; 0x2368 <_fpadd_parts+0x17c>
    22a6:	12 16       	cp	r1, r18
    22a8:	13 06       	cpc	r1, r19
    22aa:	6c f5       	brge	.+90     	; 0x2306 <_fpadd_parts+0x11a>
    22ac:	37 01       	movw	r6, r14
    22ae:	48 01       	movw	r8, r16
    22b0:	06 2e       	mov	r0, r22
    22b2:	04 c0       	rjmp	.+8      	; 0x22bc <_fpadd_parts+0xd0>
    22b4:	96 94       	lsr	r9
    22b6:	87 94       	ror	r8
    22b8:	77 94       	ror	r7
    22ba:	67 94       	ror	r6
    22bc:	0a 94       	dec	r0
    22be:	d2 f7       	brpl	.-12     	; 0x22b4 <_fpadd_parts+0xc8>
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <_fpadd_parts+0xe6>
    22ca:	22 0f       	add	r18, r18
    22cc:	33 1f       	adc	r19, r19
    22ce:	44 1f       	adc	r20, r20
    22d0:	55 1f       	adc	r21, r21
    22d2:	6a 95       	dec	r22
    22d4:	d2 f7       	brpl	.-12     	; 0x22ca <_fpadd_parts+0xde>
    22d6:	21 50       	subi	r18, 0x01	; 1
    22d8:	30 40       	sbci	r19, 0x00	; 0
    22da:	40 40       	sbci	r20, 0x00	; 0
    22dc:	50 40       	sbci	r21, 0x00	; 0
    22de:	2e 21       	and	r18, r14
    22e0:	3f 21       	and	r19, r15
    22e2:	40 23       	and	r20, r16
    22e4:	51 23       	and	r21, r17
    22e6:	21 15       	cp	r18, r1
    22e8:	31 05       	cpc	r19, r1
    22ea:	41 05       	cpc	r20, r1
    22ec:	51 05       	cpc	r21, r1
    22ee:	21 f0       	breq	.+8      	; 0x22f8 <_fpadd_parts+0x10c>
    22f0:	21 e0       	ldi	r18, 0x01	; 1
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	79 01       	movw	r14, r18
    22fa:	8a 01       	movw	r16, r20
    22fc:	e6 28       	or	r14, r6
    22fe:	f7 28       	or	r15, r7
    2300:	08 29       	or	r16, r8
    2302:	19 29       	or	r17, r9
    2304:	3c c0       	rjmp	.+120    	; 0x237e <_fpadd_parts+0x192>
    2306:	23 2b       	or	r18, r19
    2308:	d1 f1       	breq	.+116    	; 0x237e <_fpadd_parts+0x192>
    230a:	26 0e       	add	r2, r22
    230c:	37 1e       	adc	r3, r23
    230e:	35 01       	movw	r6, r10
    2310:	46 01       	movw	r8, r12
    2312:	06 2e       	mov	r0, r22
    2314:	04 c0       	rjmp	.+8      	; 0x231e <_fpadd_parts+0x132>
    2316:	96 94       	lsr	r9
    2318:	87 94       	ror	r8
    231a:	77 94       	ror	r7
    231c:	67 94       	ror	r6
    231e:	0a 94       	dec	r0
    2320:	d2 f7       	brpl	.-12     	; 0x2316 <_fpadd_parts+0x12a>
    2322:	21 e0       	ldi	r18, 0x01	; 1
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	04 c0       	rjmp	.+8      	; 0x2334 <_fpadd_parts+0x148>
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	44 1f       	adc	r20, r20
    2332:	55 1f       	adc	r21, r21
    2334:	6a 95       	dec	r22
    2336:	d2 f7       	brpl	.-12     	; 0x232c <_fpadd_parts+0x140>
    2338:	21 50       	subi	r18, 0x01	; 1
    233a:	30 40       	sbci	r19, 0x00	; 0
    233c:	40 40       	sbci	r20, 0x00	; 0
    233e:	50 40       	sbci	r21, 0x00	; 0
    2340:	2a 21       	and	r18, r10
    2342:	3b 21       	and	r19, r11
    2344:	4c 21       	and	r20, r12
    2346:	5d 21       	and	r21, r13
    2348:	21 15       	cp	r18, r1
    234a:	31 05       	cpc	r19, r1
    234c:	41 05       	cpc	r20, r1
    234e:	51 05       	cpc	r21, r1
    2350:	21 f0       	breq	.+8      	; 0x235a <_fpadd_parts+0x16e>
    2352:	21 e0       	ldi	r18, 0x01	; 1
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	50 e0       	ldi	r21, 0x00	; 0
    235a:	59 01       	movw	r10, r18
    235c:	6a 01       	movw	r12, r20
    235e:	a6 28       	or	r10, r6
    2360:	b7 28       	or	r11, r7
    2362:	c8 28       	or	r12, r8
    2364:	d9 28       	or	r13, r9
    2366:	0b c0       	rjmp	.+22     	; 0x237e <_fpadd_parts+0x192>
    2368:	82 15       	cp	r24, r2
    236a:	93 05       	cpc	r25, r3
    236c:	2c f0       	brlt	.+10     	; 0x2378 <_fpadd_parts+0x18c>
    236e:	1c 01       	movw	r2, r24
    2370:	aa 24       	eor	r10, r10
    2372:	bb 24       	eor	r11, r11
    2374:	65 01       	movw	r12, r10
    2376:	03 c0       	rjmp	.+6      	; 0x237e <_fpadd_parts+0x192>
    2378:	ee 24       	eor	r14, r14
    237a:	ff 24       	eor	r15, r15
    237c:	87 01       	movw	r16, r14
    237e:	11 96       	adiw	r26, 0x01	; 1
    2380:	9c 91       	ld	r25, X
    2382:	d2 01       	movw	r26, r4
    2384:	11 96       	adiw	r26, 0x01	; 1
    2386:	8c 91       	ld	r24, X
    2388:	98 17       	cp	r25, r24
    238a:	09 f4       	brne	.+2      	; 0x238e <_fpadd_parts+0x1a2>
    238c:	45 c0       	rjmp	.+138    	; 0x2418 <_fpadd_parts+0x22c>
    238e:	99 23       	and	r25, r25
    2390:	39 f0       	breq	.+14     	; 0x23a0 <_fpadd_parts+0x1b4>
    2392:	a8 01       	movw	r20, r16
    2394:	97 01       	movw	r18, r14
    2396:	2a 19       	sub	r18, r10
    2398:	3b 09       	sbc	r19, r11
    239a:	4c 09       	sbc	r20, r12
    239c:	5d 09       	sbc	r21, r13
    239e:	06 c0       	rjmp	.+12     	; 0x23ac <_fpadd_parts+0x1c0>
    23a0:	a6 01       	movw	r20, r12
    23a2:	95 01       	movw	r18, r10
    23a4:	2e 19       	sub	r18, r14
    23a6:	3f 09       	sbc	r19, r15
    23a8:	40 0b       	sbc	r20, r16
    23aa:	51 0b       	sbc	r21, r17
    23ac:	57 fd       	sbrc	r21, 7
    23ae:	08 c0       	rjmp	.+16     	; 0x23c0 <_fpadd_parts+0x1d4>
    23b0:	11 82       	std	Z+1, r1	; 0x01
    23b2:	33 82       	std	Z+3, r3	; 0x03
    23b4:	22 82       	std	Z+2, r2	; 0x02
    23b6:	24 83       	std	Z+4, r18	; 0x04
    23b8:	35 83       	std	Z+5, r19	; 0x05
    23ba:	46 83       	std	Z+6, r20	; 0x06
    23bc:	57 83       	std	Z+7, r21	; 0x07
    23be:	1d c0       	rjmp	.+58     	; 0x23fa <_fpadd_parts+0x20e>
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	81 83       	std	Z+1, r24	; 0x01
    23c4:	33 82       	std	Z+3, r3	; 0x03
    23c6:	22 82       	std	Z+2, r2	; 0x02
    23c8:	88 27       	eor	r24, r24
    23ca:	99 27       	eor	r25, r25
    23cc:	dc 01       	movw	r26, r24
    23ce:	82 1b       	sub	r24, r18
    23d0:	93 0b       	sbc	r25, r19
    23d2:	a4 0b       	sbc	r26, r20
    23d4:	b5 0b       	sbc	r27, r21
    23d6:	84 83       	std	Z+4, r24	; 0x04
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	a6 83       	std	Z+6, r26	; 0x06
    23dc:	b7 83       	std	Z+7, r27	; 0x07
    23de:	0d c0       	rjmp	.+26     	; 0x23fa <_fpadd_parts+0x20e>
    23e0:	22 0f       	add	r18, r18
    23e2:	33 1f       	adc	r19, r19
    23e4:	44 1f       	adc	r20, r20
    23e6:	55 1f       	adc	r21, r21
    23e8:	24 83       	std	Z+4, r18	; 0x04
    23ea:	35 83       	std	Z+5, r19	; 0x05
    23ec:	46 83       	std	Z+6, r20	; 0x06
    23ee:	57 83       	std	Z+7, r21	; 0x07
    23f0:	82 81       	ldd	r24, Z+2	; 0x02
    23f2:	93 81       	ldd	r25, Z+3	; 0x03
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	93 83       	std	Z+3, r25	; 0x03
    23f8:	82 83       	std	Z+2, r24	; 0x02
    23fa:	24 81       	ldd	r18, Z+4	; 0x04
    23fc:	35 81       	ldd	r19, Z+5	; 0x05
    23fe:	46 81       	ldd	r20, Z+6	; 0x06
    2400:	57 81       	ldd	r21, Z+7	; 0x07
    2402:	da 01       	movw	r26, r20
    2404:	c9 01       	movw	r24, r18
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	a1 09       	sbc	r26, r1
    240a:	b1 09       	sbc	r27, r1
    240c:	8f 5f       	subi	r24, 0xFF	; 255
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	af 4f       	sbci	r26, 0xFF	; 255
    2412:	bf 43       	sbci	r27, 0x3F	; 63
    2414:	28 f3       	brcs	.-54     	; 0x23e0 <_fpadd_parts+0x1f4>
    2416:	0b c0       	rjmp	.+22     	; 0x242e <_fpadd_parts+0x242>
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	33 82       	std	Z+3, r3	; 0x03
    241c:	22 82       	std	Z+2, r2	; 0x02
    241e:	ea 0c       	add	r14, r10
    2420:	fb 1c       	adc	r15, r11
    2422:	0c 1d       	adc	r16, r12
    2424:	1d 1d       	adc	r17, r13
    2426:	e4 82       	std	Z+4, r14	; 0x04
    2428:	f5 82       	std	Z+5, r15	; 0x05
    242a:	06 83       	std	Z+6, r16	; 0x06
    242c:	17 83       	std	Z+7, r17	; 0x07
    242e:	83 e0       	ldi	r24, 0x03	; 3
    2430:	80 83       	st	Z, r24
    2432:	24 81       	ldd	r18, Z+4	; 0x04
    2434:	35 81       	ldd	r19, Z+5	; 0x05
    2436:	46 81       	ldd	r20, Z+6	; 0x06
    2438:	57 81       	ldd	r21, Z+7	; 0x07
    243a:	57 ff       	sbrs	r21, 7
    243c:	1a c0       	rjmp	.+52     	; 0x2472 <_fpadd_parts+0x286>
    243e:	c9 01       	movw	r24, r18
    2440:	aa 27       	eor	r26, r26
    2442:	97 fd       	sbrc	r25, 7
    2444:	a0 95       	com	r26
    2446:	ba 2f       	mov	r27, r26
    2448:	81 70       	andi	r24, 0x01	; 1
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	a0 70       	andi	r26, 0x00	; 0
    244e:	b0 70       	andi	r27, 0x00	; 0
    2450:	56 95       	lsr	r21
    2452:	47 95       	ror	r20
    2454:	37 95       	ror	r19
    2456:	27 95       	ror	r18
    2458:	82 2b       	or	r24, r18
    245a:	93 2b       	or	r25, r19
    245c:	a4 2b       	or	r26, r20
    245e:	b5 2b       	or	r27, r21
    2460:	84 83       	std	Z+4, r24	; 0x04
    2462:	95 83       	std	Z+5, r25	; 0x05
    2464:	a6 83       	std	Z+6, r26	; 0x06
    2466:	b7 83       	std	Z+7, r27	; 0x07
    2468:	82 81       	ldd	r24, Z+2	; 0x02
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	93 83       	std	Z+3, r25	; 0x03
    2470:	82 83       	std	Z+2, r24	; 0x02
    2472:	df 01       	movw	r26, r30
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <_fpadd_parts+0x28c>
    2476:	d2 01       	movw	r26, r4
    2478:	cd 01       	movw	r24, r26
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	e2 e1       	ldi	r30, 0x12	; 18
    2480:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__epilogue_restores__>

00002484 <__subsf3>:
    2484:	a0 e2       	ldi	r26, 0x20	; 32
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e8 e4       	ldi	r30, 0x48	; 72
    248a:	f2 e1       	ldi	r31, 0x12	; 18
    248c:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
    2490:	69 83       	std	Y+1, r22	; 0x01
    2492:	7a 83       	std	Y+2, r23	; 0x02
    2494:	8b 83       	std	Y+3, r24	; 0x03
    2496:	9c 83       	std	Y+4, r25	; 0x04
    2498:	2d 83       	std	Y+5, r18	; 0x05
    249a:	3e 83       	std	Y+6, r19	; 0x06
    249c:	4f 83       	std	Y+7, r20	; 0x07
    249e:	58 87       	std	Y+8, r21	; 0x08
    24a0:	e9 e0       	ldi	r30, 0x09	; 9
    24a2:	ee 2e       	mov	r14, r30
    24a4:	f1 2c       	mov	r15, r1
    24a6:	ec 0e       	add	r14, r28
    24a8:	fd 1e       	adc	r15, r29
    24aa:	ce 01       	movw	r24, r28
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	b7 01       	movw	r22, r14
    24b0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    24b4:	8e 01       	movw	r16, r28
    24b6:	0f 5e       	subi	r16, 0xEF	; 239
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	ce 01       	movw	r24, r28
    24bc:	05 96       	adiw	r24, 0x05	; 5
    24be:	b8 01       	movw	r22, r16
    24c0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    24c4:	8a 89       	ldd	r24, Y+18	; 0x12
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	89 27       	eor	r24, r25
    24ca:	8a 8b       	std	Y+18, r24	; 0x12
    24cc:	c7 01       	movw	r24, r14
    24ce:	b8 01       	movw	r22, r16
    24d0:	ae 01       	movw	r20, r28
    24d2:	47 5e       	subi	r20, 0xE7	; 231
    24d4:	5f 4f       	sbci	r21, 0xFF	; 255
    24d6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_fpadd_parts>
    24da:	0e 94 77 15 	call	0x2aee	; 0x2aee <__pack_f>
    24de:	a0 96       	adiw	r28, 0x20	; 32
    24e0:	e6 e0       	ldi	r30, 0x06	; 6
    24e2:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

000024e6 <__addsf3>:
    24e6:	a0 e2       	ldi	r26, 0x20	; 32
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e9 e7       	ldi	r30, 0x79	; 121
    24ec:	f2 e1       	ldi	r31, 0x12	; 18
    24ee:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
    24f2:	69 83       	std	Y+1, r22	; 0x01
    24f4:	7a 83       	std	Y+2, r23	; 0x02
    24f6:	8b 83       	std	Y+3, r24	; 0x03
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	2d 83       	std	Y+5, r18	; 0x05
    24fc:	3e 83       	std	Y+6, r19	; 0x06
    24fe:	4f 83       	std	Y+7, r20	; 0x07
    2500:	58 87       	std	Y+8, r21	; 0x08
    2502:	f9 e0       	ldi	r31, 0x09	; 9
    2504:	ef 2e       	mov	r14, r31
    2506:	f1 2c       	mov	r15, r1
    2508:	ec 0e       	add	r14, r28
    250a:	fd 1e       	adc	r15, r29
    250c:	ce 01       	movw	r24, r28
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	b7 01       	movw	r22, r14
    2512:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    2516:	8e 01       	movw	r16, r28
    2518:	0f 5e       	subi	r16, 0xEF	; 239
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	ce 01       	movw	r24, r28
    251e:	05 96       	adiw	r24, 0x05	; 5
    2520:	b8 01       	movw	r22, r16
    2522:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    2526:	c7 01       	movw	r24, r14
    2528:	b8 01       	movw	r22, r16
    252a:	ae 01       	movw	r20, r28
    252c:	47 5e       	subi	r20, 0xE7	; 231
    252e:	5f 4f       	sbci	r21, 0xFF	; 255
    2530:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_fpadd_parts>
    2534:	0e 94 77 15 	call	0x2aee	; 0x2aee <__pack_f>
    2538:	a0 96       	adiw	r28, 0x20	; 32
    253a:	e6 e0       	ldi	r30, 0x06	; 6
    253c:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

00002540 <__mulsf3>:
    2540:	a0 e2       	ldi	r26, 0x20	; 32
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e6 ea       	ldi	r30, 0xA6	; 166
    2546:	f2 e1       	ldi	r31, 0x12	; 18
    2548:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__prologue_saves__>
    254c:	69 83       	std	Y+1, r22	; 0x01
    254e:	7a 83       	std	Y+2, r23	; 0x02
    2550:	8b 83       	std	Y+3, r24	; 0x03
    2552:	9c 83       	std	Y+4, r25	; 0x04
    2554:	2d 83       	std	Y+5, r18	; 0x05
    2556:	3e 83       	std	Y+6, r19	; 0x06
    2558:	4f 83       	std	Y+7, r20	; 0x07
    255a:	58 87       	std	Y+8, r21	; 0x08
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	be 01       	movw	r22, r28
    2562:	67 5f       	subi	r22, 0xF7	; 247
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    256a:	ce 01       	movw	r24, r28
    256c:	05 96       	adiw	r24, 0x05	; 5
    256e:	be 01       	movw	r22, r28
    2570:	6f 5e       	subi	r22, 0xEF	; 239
    2572:	7f 4f       	sbci	r23, 0xFF	; 255
    2574:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    2578:	99 85       	ldd	r25, Y+9	; 0x09
    257a:	92 30       	cpi	r25, 0x02	; 2
    257c:	88 f0       	brcs	.+34     	; 0x25a0 <__mulsf3+0x60>
    257e:	89 89       	ldd	r24, Y+17	; 0x11
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	c8 f0       	brcs	.+50     	; 0x25b6 <__mulsf3+0x76>
    2584:	94 30       	cpi	r25, 0x04	; 4
    2586:	19 f4       	brne	.+6      	; 0x258e <__mulsf3+0x4e>
    2588:	82 30       	cpi	r24, 0x02	; 2
    258a:	51 f4       	brne	.+20     	; 0x25a0 <__mulsf3+0x60>
    258c:	04 c0       	rjmp	.+8      	; 0x2596 <__mulsf3+0x56>
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	29 f4       	brne	.+10     	; 0x259c <__mulsf3+0x5c>
    2592:	92 30       	cpi	r25, 0x02	; 2
    2594:	81 f4       	brne	.+32     	; 0x25b6 <__mulsf3+0x76>
    2596:	88 e9       	ldi	r24, 0x98	; 152
    2598:	92 e0       	ldi	r25, 0x02	; 2
    259a:	c6 c0       	rjmp	.+396    	; 0x2728 <__mulsf3+0x1e8>
    259c:	92 30       	cpi	r25, 0x02	; 2
    259e:	49 f4       	brne	.+18     	; 0x25b2 <__mulsf3+0x72>
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	8a 89       	ldd	r24, Y+18	; 0x12
    25a6:	98 13       	cpse	r25, r24
    25a8:	21 e0       	ldi	r18, 0x01	; 1
    25aa:	2a 87       	std	Y+10, r18	; 0x0a
    25ac:	ce 01       	movw	r24, r28
    25ae:	09 96       	adiw	r24, 0x09	; 9
    25b0:	bb c0       	rjmp	.+374    	; 0x2728 <__mulsf3+0x1e8>
    25b2:	82 30       	cpi	r24, 0x02	; 2
    25b4:	49 f4       	brne	.+18     	; 0x25c8 <__mulsf3+0x88>
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	8a 89       	ldd	r24, Y+18	; 0x12
    25bc:	98 13       	cpse	r25, r24
    25be:	21 e0       	ldi	r18, 0x01	; 1
    25c0:	2a 8b       	std	Y+18, r18	; 0x12
    25c2:	ce 01       	movw	r24, r28
    25c4:	41 96       	adiw	r24, 0x11	; 17
    25c6:	b0 c0       	rjmp	.+352    	; 0x2728 <__mulsf3+0x1e8>
    25c8:	2d 84       	ldd	r2, Y+13	; 0x0d
    25ca:	3e 84       	ldd	r3, Y+14	; 0x0e
    25cc:	4f 84       	ldd	r4, Y+15	; 0x0f
    25ce:	58 88       	ldd	r5, Y+16	; 0x10
    25d0:	6d 88       	ldd	r6, Y+21	; 0x15
    25d2:	7e 88       	ldd	r7, Y+22	; 0x16
    25d4:	8f 88       	ldd	r8, Y+23	; 0x17
    25d6:	98 8c       	ldd	r9, Y+24	; 0x18
    25d8:	ee 24       	eor	r14, r14
    25da:	ff 24       	eor	r15, r15
    25dc:	87 01       	movw	r16, r14
    25de:	aa 24       	eor	r10, r10
    25e0:	bb 24       	eor	r11, r11
    25e2:	65 01       	movw	r12, r10
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	50 e0       	ldi	r21, 0x00	; 0
    25e8:	60 e0       	ldi	r22, 0x00	; 0
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	e0 e0       	ldi	r30, 0x00	; 0
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	c1 01       	movw	r24, r2
    25f2:	81 70       	andi	r24, 0x01	; 1
    25f4:	90 70       	andi	r25, 0x00	; 0
    25f6:	89 2b       	or	r24, r25
    25f8:	e9 f0       	breq	.+58     	; 0x2634 <__mulsf3+0xf4>
    25fa:	e6 0c       	add	r14, r6
    25fc:	f7 1c       	adc	r15, r7
    25fe:	08 1d       	adc	r16, r8
    2600:	19 1d       	adc	r17, r9
    2602:	9a 01       	movw	r18, r20
    2604:	ab 01       	movw	r20, r22
    2606:	2a 0d       	add	r18, r10
    2608:	3b 1d       	adc	r19, r11
    260a:	4c 1d       	adc	r20, r12
    260c:	5d 1d       	adc	r21, r13
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a0 e0       	ldi	r26, 0x00	; 0
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e6 14       	cp	r14, r6
    2618:	f7 04       	cpc	r15, r7
    261a:	08 05       	cpc	r16, r8
    261c:	19 05       	cpc	r17, r9
    261e:	20 f4       	brcc	.+8      	; 0x2628 <__mulsf3+0xe8>
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	ba 01       	movw	r22, r20
    262a:	a9 01       	movw	r20, r18
    262c:	48 0f       	add	r20, r24
    262e:	59 1f       	adc	r21, r25
    2630:	6a 1f       	adc	r22, r26
    2632:	7b 1f       	adc	r23, r27
    2634:	aa 0c       	add	r10, r10
    2636:	bb 1c       	adc	r11, r11
    2638:	cc 1c       	adc	r12, r12
    263a:	dd 1c       	adc	r13, r13
    263c:	97 fe       	sbrs	r9, 7
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <__mulsf3+0x110>
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e0       	ldi	r26, 0x00	; 0
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	a8 2a       	or	r10, r24
    264a:	b9 2a       	or	r11, r25
    264c:	ca 2a       	or	r12, r26
    264e:	db 2a       	or	r13, r27
    2650:	31 96       	adiw	r30, 0x01	; 1
    2652:	e0 32       	cpi	r30, 0x20	; 32
    2654:	f1 05       	cpc	r31, r1
    2656:	49 f0       	breq	.+18     	; 0x266a <__mulsf3+0x12a>
    2658:	66 0c       	add	r6, r6
    265a:	77 1c       	adc	r7, r7
    265c:	88 1c       	adc	r8, r8
    265e:	99 1c       	adc	r9, r9
    2660:	56 94       	lsr	r5
    2662:	47 94       	ror	r4
    2664:	37 94       	ror	r3
    2666:	27 94       	ror	r2
    2668:	c3 cf       	rjmp	.-122    	; 0x25f0 <__mulsf3+0xb0>
    266a:	fa 85       	ldd	r31, Y+10	; 0x0a
    266c:	ea 89       	ldd	r30, Y+18	; 0x12
    266e:	2b 89       	ldd	r18, Y+19	; 0x13
    2670:	3c 89       	ldd	r19, Y+20	; 0x14
    2672:	8b 85       	ldd	r24, Y+11	; 0x0b
    2674:	9c 85       	ldd	r25, Y+12	; 0x0c
    2676:	28 0f       	add	r18, r24
    2678:	39 1f       	adc	r19, r25
    267a:	2e 5f       	subi	r18, 0xFE	; 254
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	17 c0       	rjmp	.+46     	; 0x26ae <__mulsf3+0x16e>
    2680:	ca 01       	movw	r24, r20
    2682:	81 70       	andi	r24, 0x01	; 1
    2684:	90 70       	andi	r25, 0x00	; 0
    2686:	89 2b       	or	r24, r25
    2688:	61 f0       	breq	.+24     	; 0x26a2 <__mulsf3+0x162>
    268a:	16 95       	lsr	r17
    268c:	07 95       	ror	r16
    268e:	f7 94       	ror	r15
    2690:	e7 94       	ror	r14
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e8       	ldi	r27, 0x80	; 128
    269a:	e8 2a       	or	r14, r24
    269c:	f9 2a       	or	r15, r25
    269e:	0a 2b       	or	r16, r26
    26a0:	1b 2b       	or	r17, r27
    26a2:	76 95       	lsr	r23
    26a4:	67 95       	ror	r22
    26a6:	57 95       	ror	r21
    26a8:	47 95       	ror	r20
    26aa:	2f 5f       	subi	r18, 0xFF	; 255
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    26ae:	77 fd       	sbrc	r23, 7
    26b0:	e7 cf       	rjmp	.-50     	; 0x2680 <__mulsf3+0x140>
    26b2:	0c c0       	rjmp	.+24     	; 0x26cc <__mulsf3+0x18c>
    26b4:	44 0f       	add	r20, r20
    26b6:	55 1f       	adc	r21, r21
    26b8:	66 1f       	adc	r22, r22
    26ba:	77 1f       	adc	r23, r23
    26bc:	17 fd       	sbrc	r17, 7
    26be:	41 60       	ori	r20, 0x01	; 1
    26c0:	ee 0c       	add	r14, r14
    26c2:	ff 1c       	adc	r15, r15
    26c4:	00 1f       	adc	r16, r16
    26c6:	11 1f       	adc	r17, r17
    26c8:	21 50       	subi	r18, 0x01	; 1
    26ca:	30 40       	sbci	r19, 0x00	; 0
    26cc:	40 30       	cpi	r20, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	59 07       	cpc	r21, r25
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	69 07       	cpc	r22, r25
    26d6:	90 e4       	ldi	r25, 0x40	; 64
    26d8:	79 07       	cpc	r23, r25
    26da:	60 f3       	brcs	.-40     	; 0x26b4 <__mulsf3+0x174>
    26dc:	2b 8f       	std	Y+27, r18	; 0x1b
    26de:	3c 8f       	std	Y+28, r19	; 0x1c
    26e0:	db 01       	movw	r26, r22
    26e2:	ca 01       	movw	r24, r20
    26e4:	8f 77       	andi	r24, 0x7F	; 127
    26e6:	90 70       	andi	r25, 0x00	; 0
    26e8:	a0 70       	andi	r26, 0x00	; 0
    26ea:	b0 70       	andi	r27, 0x00	; 0
    26ec:	80 34       	cpi	r24, 0x40	; 64
    26ee:	91 05       	cpc	r25, r1
    26f0:	a1 05       	cpc	r26, r1
    26f2:	b1 05       	cpc	r27, r1
    26f4:	61 f4       	brne	.+24     	; 0x270e <__mulsf3+0x1ce>
    26f6:	47 fd       	sbrc	r20, 7
    26f8:	0a c0       	rjmp	.+20     	; 0x270e <__mulsf3+0x1ce>
    26fa:	e1 14       	cp	r14, r1
    26fc:	f1 04       	cpc	r15, r1
    26fe:	01 05       	cpc	r16, r1
    2700:	11 05       	cpc	r17, r1
    2702:	29 f0       	breq	.+10     	; 0x270e <__mulsf3+0x1ce>
    2704:	40 5c       	subi	r20, 0xC0	; 192
    2706:	5f 4f       	sbci	r21, 0xFF	; 255
    2708:	6f 4f       	sbci	r22, 0xFF	; 255
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	40 78       	andi	r20, 0x80	; 128
    270e:	1a 8e       	std	Y+26, r1	; 0x1a
    2710:	fe 17       	cp	r31, r30
    2712:	11 f0       	breq	.+4      	; 0x2718 <__mulsf3+0x1d8>
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	8a 8f       	std	Y+26, r24	; 0x1a
    2718:	4d 8f       	std	Y+29, r20	; 0x1d
    271a:	5e 8f       	std	Y+30, r21	; 0x1e
    271c:	6f 8f       	std	Y+31, r22	; 0x1f
    271e:	78 a3       	std	Y+32, r23	; 0x20
    2720:	83 e0       	ldi	r24, 0x03	; 3
    2722:	89 8f       	std	Y+25, r24	; 0x19
    2724:	ce 01       	movw	r24, r28
    2726:	49 96       	adiw	r24, 0x19	; 25
    2728:	0e 94 77 15 	call	0x2aee	; 0x2aee <__pack_f>
    272c:	a0 96       	adiw	r28, 0x20	; 32
    272e:	e2 e1       	ldi	r30, 0x12	; 18
    2730:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__epilogue_restores__>

00002734 <__divsf3>:
    2734:	a8 e1       	ldi	r26, 0x18	; 24
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e0 ea       	ldi	r30, 0xA0	; 160
    273a:	f3 e1       	ldi	r31, 0x13	; 19
    273c:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__prologue_saves__+0x10>
    2740:	69 83       	std	Y+1, r22	; 0x01
    2742:	7a 83       	std	Y+2, r23	; 0x02
    2744:	8b 83       	std	Y+3, r24	; 0x03
    2746:	9c 83       	std	Y+4, r25	; 0x04
    2748:	2d 83       	std	Y+5, r18	; 0x05
    274a:	3e 83       	std	Y+6, r19	; 0x06
    274c:	4f 83       	std	Y+7, r20	; 0x07
    274e:	58 87       	std	Y+8, r21	; 0x08
    2750:	b9 e0       	ldi	r27, 0x09	; 9
    2752:	eb 2e       	mov	r14, r27
    2754:	f1 2c       	mov	r15, r1
    2756:	ec 0e       	add	r14, r28
    2758:	fd 1e       	adc	r15, r29
    275a:	ce 01       	movw	r24, r28
    275c:	01 96       	adiw	r24, 0x01	; 1
    275e:	b7 01       	movw	r22, r14
    2760:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    2764:	8e 01       	movw	r16, r28
    2766:	0f 5e       	subi	r16, 0xEF	; 239
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	ce 01       	movw	r24, r28
    276c:	05 96       	adiw	r24, 0x05	; 5
    276e:	b8 01       	movw	r22, r16
    2770:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    2774:	29 85       	ldd	r18, Y+9	; 0x09
    2776:	22 30       	cpi	r18, 0x02	; 2
    2778:	08 f4       	brcc	.+2      	; 0x277c <__divsf3+0x48>
    277a:	7e c0       	rjmp	.+252    	; 0x2878 <__divsf3+0x144>
    277c:	39 89       	ldd	r19, Y+17	; 0x11
    277e:	32 30       	cpi	r19, 0x02	; 2
    2780:	10 f4       	brcc	.+4      	; 0x2786 <__divsf3+0x52>
    2782:	b8 01       	movw	r22, r16
    2784:	7c c0       	rjmp	.+248    	; 0x287e <__divsf3+0x14a>
    2786:	8a 85       	ldd	r24, Y+10	; 0x0a
    2788:	9a 89       	ldd	r25, Y+18	; 0x12
    278a:	89 27       	eor	r24, r25
    278c:	8a 87       	std	Y+10, r24	; 0x0a
    278e:	24 30       	cpi	r18, 0x04	; 4
    2790:	11 f0       	breq	.+4      	; 0x2796 <__divsf3+0x62>
    2792:	22 30       	cpi	r18, 0x02	; 2
    2794:	31 f4       	brne	.+12     	; 0x27a2 <__divsf3+0x6e>
    2796:	23 17       	cp	r18, r19
    2798:	09 f0       	breq	.+2      	; 0x279c <__divsf3+0x68>
    279a:	6e c0       	rjmp	.+220    	; 0x2878 <__divsf3+0x144>
    279c:	68 e9       	ldi	r22, 0x98	; 152
    279e:	72 e0       	ldi	r23, 0x02	; 2
    27a0:	6e c0       	rjmp	.+220    	; 0x287e <__divsf3+0x14a>
    27a2:	34 30       	cpi	r19, 0x04	; 4
    27a4:	39 f4       	brne	.+14     	; 0x27b4 <__divsf3+0x80>
    27a6:	1d 86       	std	Y+13, r1	; 0x0d
    27a8:	1e 86       	std	Y+14, r1	; 0x0e
    27aa:	1f 86       	std	Y+15, r1	; 0x0f
    27ac:	18 8a       	std	Y+16, r1	; 0x10
    27ae:	1c 86       	std	Y+12, r1	; 0x0c
    27b0:	1b 86       	std	Y+11, r1	; 0x0b
    27b2:	04 c0       	rjmp	.+8      	; 0x27bc <__divsf3+0x88>
    27b4:	32 30       	cpi	r19, 0x02	; 2
    27b6:	21 f4       	brne	.+8      	; 0x27c0 <__divsf3+0x8c>
    27b8:	84 e0       	ldi	r24, 0x04	; 4
    27ba:	89 87       	std	Y+9, r24	; 0x09
    27bc:	b7 01       	movw	r22, r14
    27be:	5f c0       	rjmp	.+190    	; 0x287e <__divsf3+0x14a>
    27c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    27c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    27c4:	8b 89       	ldd	r24, Y+19	; 0x13
    27c6:	9c 89       	ldd	r25, Y+20	; 0x14
    27c8:	28 1b       	sub	r18, r24
    27ca:	39 0b       	sbc	r19, r25
    27cc:	3c 87       	std	Y+12, r19	; 0x0c
    27ce:	2b 87       	std	Y+11, r18	; 0x0b
    27d0:	ed 84       	ldd	r14, Y+13	; 0x0d
    27d2:	fe 84       	ldd	r15, Y+14	; 0x0e
    27d4:	0f 85       	ldd	r16, Y+15	; 0x0f
    27d6:	18 89       	ldd	r17, Y+16	; 0x10
    27d8:	ad 88       	ldd	r10, Y+21	; 0x15
    27da:	be 88       	ldd	r11, Y+22	; 0x16
    27dc:	cf 88       	ldd	r12, Y+23	; 0x17
    27de:	d8 8c       	ldd	r13, Y+24	; 0x18
    27e0:	ea 14       	cp	r14, r10
    27e2:	fb 04       	cpc	r15, r11
    27e4:	0c 05       	cpc	r16, r12
    27e6:	1d 05       	cpc	r17, r13
    27e8:	40 f4       	brcc	.+16     	; 0x27fa <__divsf3+0xc6>
    27ea:	ee 0c       	add	r14, r14
    27ec:	ff 1c       	adc	r15, r15
    27ee:	00 1f       	adc	r16, r16
    27f0:	11 1f       	adc	r17, r17
    27f2:	21 50       	subi	r18, 0x01	; 1
    27f4:	30 40       	sbci	r19, 0x00	; 0
    27f6:	3c 87       	std	Y+12, r19	; 0x0c
    27f8:	2b 87       	std	Y+11, r18	; 0x0b
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	a0 e0       	ldi	r26, 0x00	; 0
    2808:	b0 e4       	ldi	r27, 0x40	; 64
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	70 e0       	ldi	r23, 0x00	; 0
    280e:	ea 14       	cp	r14, r10
    2810:	fb 04       	cpc	r15, r11
    2812:	0c 05       	cpc	r16, r12
    2814:	1d 05       	cpc	r17, r13
    2816:	40 f0       	brcs	.+16     	; 0x2828 <__divsf3+0xf4>
    2818:	28 2b       	or	r18, r24
    281a:	39 2b       	or	r19, r25
    281c:	4a 2b       	or	r20, r26
    281e:	5b 2b       	or	r21, r27
    2820:	ea 18       	sub	r14, r10
    2822:	fb 08       	sbc	r15, r11
    2824:	0c 09       	sbc	r16, r12
    2826:	1d 09       	sbc	r17, r13
    2828:	b6 95       	lsr	r27
    282a:	a7 95       	ror	r26
    282c:	97 95       	ror	r25
    282e:	87 95       	ror	r24
    2830:	ee 0c       	add	r14, r14
    2832:	ff 1c       	adc	r15, r15
    2834:	00 1f       	adc	r16, r16
    2836:	11 1f       	adc	r17, r17
    2838:	6f 5f       	subi	r22, 0xFF	; 255
    283a:	7f 4f       	sbci	r23, 0xFF	; 255
    283c:	6f 31       	cpi	r22, 0x1F	; 31
    283e:	71 05       	cpc	r23, r1
    2840:	31 f7       	brne	.-52     	; 0x280e <__divsf3+0xda>
    2842:	da 01       	movw	r26, r20
    2844:	c9 01       	movw	r24, r18
    2846:	8f 77       	andi	r24, 0x7F	; 127
    2848:	90 70       	andi	r25, 0x00	; 0
    284a:	a0 70       	andi	r26, 0x00	; 0
    284c:	b0 70       	andi	r27, 0x00	; 0
    284e:	80 34       	cpi	r24, 0x40	; 64
    2850:	91 05       	cpc	r25, r1
    2852:	a1 05       	cpc	r26, r1
    2854:	b1 05       	cpc	r27, r1
    2856:	61 f4       	brne	.+24     	; 0x2870 <__divsf3+0x13c>
    2858:	27 fd       	sbrc	r18, 7
    285a:	0a c0       	rjmp	.+20     	; 0x2870 <__divsf3+0x13c>
    285c:	e1 14       	cp	r14, r1
    285e:	f1 04       	cpc	r15, r1
    2860:	01 05       	cpc	r16, r1
    2862:	11 05       	cpc	r17, r1
    2864:	29 f0       	breq	.+10     	; 0x2870 <__divsf3+0x13c>
    2866:	20 5c       	subi	r18, 0xC0	; 192
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	4f 4f       	sbci	r20, 0xFF	; 255
    286c:	5f 4f       	sbci	r21, 0xFF	; 255
    286e:	20 78       	andi	r18, 0x80	; 128
    2870:	2d 87       	std	Y+13, r18	; 0x0d
    2872:	3e 87       	std	Y+14, r19	; 0x0e
    2874:	4f 87       	std	Y+15, r20	; 0x0f
    2876:	58 8b       	std	Y+16, r21	; 0x10
    2878:	be 01       	movw	r22, r28
    287a:	67 5f       	subi	r22, 0xF7	; 247
    287c:	7f 4f       	sbci	r23, 0xFF	; 255
    287e:	cb 01       	movw	r24, r22
    2880:	0e 94 77 15 	call	0x2aee	; 0x2aee <__pack_f>
    2884:	68 96       	adiw	r28, 0x18	; 24
    2886:	ea e0       	ldi	r30, 0x0A	; 10
    2888:	0c 94 16 1a 	jmp	0x342c	; 0x342c <__epilogue_restores__+0x10>

0000288c <__gesf2>:
    288c:	a8 e1       	ldi	r26, 0x18	; 24
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	ec e4       	ldi	r30, 0x4C	; 76
    2892:	f4 e1       	ldi	r31, 0x14	; 20
    2894:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__prologue_saves__+0x18>
    2898:	69 83       	std	Y+1, r22	; 0x01
    289a:	7a 83       	std	Y+2, r23	; 0x02
    289c:	8b 83       	std	Y+3, r24	; 0x03
    289e:	9c 83       	std	Y+4, r25	; 0x04
    28a0:	2d 83       	std	Y+5, r18	; 0x05
    28a2:	3e 83       	std	Y+6, r19	; 0x06
    28a4:	4f 83       	std	Y+7, r20	; 0x07
    28a6:	58 87       	std	Y+8, r21	; 0x08
    28a8:	89 e0       	ldi	r24, 0x09	; 9
    28aa:	e8 2e       	mov	r14, r24
    28ac:	f1 2c       	mov	r15, r1
    28ae:	ec 0e       	add	r14, r28
    28b0:	fd 1e       	adc	r15, r29
    28b2:	ce 01       	movw	r24, r28
    28b4:	01 96       	adiw	r24, 0x01	; 1
    28b6:	b7 01       	movw	r22, r14
    28b8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    28bc:	8e 01       	movw	r16, r28
    28be:	0f 5e       	subi	r16, 0xEF	; 239
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	ce 01       	movw	r24, r28
    28c4:	05 96       	adiw	r24, 0x05	; 5
    28c6:	b8 01       	movw	r22, r16
    28c8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	82 30       	cpi	r24, 0x02	; 2
    28d0:	40 f0       	brcs	.+16     	; 0x28e2 <__gesf2+0x56>
    28d2:	89 89       	ldd	r24, Y+17	; 0x11
    28d4:	82 30       	cpi	r24, 0x02	; 2
    28d6:	28 f0       	brcs	.+10     	; 0x28e2 <__gesf2+0x56>
    28d8:	c7 01       	movw	r24, r14
    28da:	b8 01       	movw	r22, r16
    28dc:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__fpcmp_parts_f>
    28e0:	01 c0       	rjmp	.+2      	; 0x28e4 <__gesf2+0x58>
    28e2:	8f ef       	ldi	r24, 0xFF	; 255
    28e4:	68 96       	adiw	r28, 0x18	; 24
    28e6:	e6 e0       	ldi	r30, 0x06	; 6
    28e8:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__epilogue_restores__+0x18>

000028ec <__floatsisf>:
    28ec:	a8 e0       	ldi	r26, 0x08	; 8
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ec e7       	ldi	r30, 0x7C	; 124
    28f2:	f4 e1       	ldi	r31, 0x14	; 20
    28f4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__prologue_saves__+0x12>
    28f8:	9b 01       	movw	r18, r22
    28fa:	ac 01       	movw	r20, r24
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	da 01       	movw	r26, r20
    2902:	c9 01       	movw	r24, r18
    2904:	88 27       	eor	r24, r24
    2906:	b7 fd       	sbrc	r27, 7
    2908:	83 95       	inc	r24
    290a:	99 27       	eor	r25, r25
    290c:	aa 27       	eor	r26, r26
    290e:	bb 27       	eor	r27, r27
    2910:	b8 2e       	mov	r11, r24
    2912:	21 15       	cp	r18, r1
    2914:	31 05       	cpc	r19, r1
    2916:	41 05       	cpc	r20, r1
    2918:	51 05       	cpc	r21, r1
    291a:	19 f4       	brne	.+6      	; 0x2922 <__floatsisf+0x36>
    291c:	82 e0       	ldi	r24, 0x02	; 2
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	3a c0       	rjmp	.+116    	; 0x2996 <__floatsisf+0xaa>
    2922:	88 23       	and	r24, r24
    2924:	a9 f0       	breq	.+42     	; 0x2950 <__floatsisf+0x64>
    2926:	20 30       	cpi	r18, 0x00	; 0
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	38 07       	cpc	r19, r24
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	48 07       	cpc	r20, r24
    2930:	80 e8       	ldi	r24, 0x80	; 128
    2932:	58 07       	cpc	r21, r24
    2934:	29 f4       	brne	.+10     	; 0x2940 <__floatsisf+0x54>
    2936:	60 e0       	ldi	r22, 0x00	; 0
    2938:	70 e0       	ldi	r23, 0x00	; 0
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	9f ec       	ldi	r25, 0xCF	; 207
    293e:	30 c0       	rjmp	.+96     	; 0x29a0 <__floatsisf+0xb4>
    2940:	ee 24       	eor	r14, r14
    2942:	ff 24       	eor	r15, r15
    2944:	87 01       	movw	r16, r14
    2946:	e2 1a       	sub	r14, r18
    2948:	f3 0a       	sbc	r15, r19
    294a:	04 0b       	sbc	r16, r20
    294c:	15 0b       	sbc	r17, r21
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <__floatsisf+0x68>
    2950:	79 01       	movw	r14, r18
    2952:	8a 01       	movw	r16, r20
    2954:	8e e1       	ldi	r24, 0x1E	; 30
    2956:	c8 2e       	mov	r12, r24
    2958:	d1 2c       	mov	r13, r1
    295a:	dc 82       	std	Y+4, r13	; 0x04
    295c:	cb 82       	std	Y+3, r12	; 0x03
    295e:	ed 82       	std	Y+5, r14	; 0x05
    2960:	fe 82       	std	Y+6, r15	; 0x06
    2962:	0f 83       	std	Y+7, r16	; 0x07
    2964:	18 87       	std	Y+8, r17	; 0x08
    2966:	c8 01       	movw	r24, r16
    2968:	b7 01       	movw	r22, r14
    296a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__clzsi2>
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	18 16       	cp	r1, r24
    2972:	19 06       	cpc	r1, r25
    2974:	84 f4       	brge	.+32     	; 0x2996 <__floatsisf+0xaa>
    2976:	08 2e       	mov	r0, r24
    2978:	04 c0       	rjmp	.+8      	; 0x2982 <__floatsisf+0x96>
    297a:	ee 0c       	add	r14, r14
    297c:	ff 1c       	adc	r15, r15
    297e:	00 1f       	adc	r16, r16
    2980:	11 1f       	adc	r17, r17
    2982:	0a 94       	dec	r0
    2984:	d2 f7       	brpl	.-12     	; 0x297a <__floatsisf+0x8e>
    2986:	ed 82       	std	Y+5, r14	; 0x05
    2988:	fe 82       	std	Y+6, r15	; 0x06
    298a:	0f 83       	std	Y+7, r16	; 0x07
    298c:	18 87       	std	Y+8, r17	; 0x08
    298e:	c8 1a       	sub	r12, r24
    2990:	d9 0a       	sbc	r13, r25
    2992:	dc 82       	std	Y+4, r13	; 0x04
    2994:	cb 82       	std	Y+3, r12	; 0x03
    2996:	ba 82       	std	Y+2, r11	; 0x02
    2998:	ce 01       	movw	r24, r28
    299a:	01 96       	adiw	r24, 0x01	; 1
    299c:	0e 94 77 15 	call	0x2aee	; 0x2aee <__pack_f>
    29a0:	28 96       	adiw	r28, 0x08	; 8
    29a2:	e9 e0       	ldi	r30, 0x09	; 9
    29a4:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__epilogue_restores__+0x12>

000029a8 <__fixsfsi>:
    29a8:	ac e0       	ldi	r26, 0x0C	; 12
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ea ed       	ldi	r30, 0xDA	; 218
    29ae:	f4 e1       	ldi	r31, 0x14	; 20
    29b0:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__prologue_saves__+0x20>
    29b4:	69 83       	std	Y+1, r22	; 0x01
    29b6:	7a 83       	std	Y+2, r23	; 0x02
    29b8:	8b 83       	std	Y+3, r24	; 0x03
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	ce 01       	movw	r24, r28
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	be 01       	movw	r22, r28
    29c2:	6b 5f       	subi	r22, 0xFB	; 251
    29c4:	7f 4f       	sbci	r23, 0xFF	; 255
    29c6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__unpack_f>
    29ca:	8d 81       	ldd	r24, Y+5	; 0x05
    29cc:	82 30       	cpi	r24, 0x02	; 2
    29ce:	61 f1       	breq	.+88     	; 0x2a28 <__fixsfsi+0x80>
    29d0:	82 30       	cpi	r24, 0x02	; 2
    29d2:	50 f1       	brcs	.+84     	; 0x2a28 <__fixsfsi+0x80>
    29d4:	84 30       	cpi	r24, 0x04	; 4
    29d6:	21 f4       	brne	.+8      	; 0x29e0 <__fixsfsi+0x38>
    29d8:	8e 81       	ldd	r24, Y+6	; 0x06
    29da:	88 23       	and	r24, r24
    29dc:	51 f1       	breq	.+84     	; 0x2a32 <__fixsfsi+0x8a>
    29de:	2e c0       	rjmp	.+92     	; 0x2a3c <__fixsfsi+0x94>
    29e0:	2f 81       	ldd	r18, Y+7	; 0x07
    29e2:	38 85       	ldd	r19, Y+8	; 0x08
    29e4:	37 fd       	sbrc	r19, 7
    29e6:	20 c0       	rjmp	.+64     	; 0x2a28 <__fixsfsi+0x80>
    29e8:	6e 81       	ldd	r22, Y+6	; 0x06
    29ea:	2f 31       	cpi	r18, 0x1F	; 31
    29ec:	31 05       	cpc	r19, r1
    29ee:	1c f0       	brlt	.+6      	; 0x29f6 <__fixsfsi+0x4e>
    29f0:	66 23       	and	r22, r22
    29f2:	f9 f0       	breq	.+62     	; 0x2a32 <__fixsfsi+0x8a>
    29f4:	23 c0       	rjmp	.+70     	; 0x2a3c <__fixsfsi+0x94>
    29f6:	8e e1       	ldi	r24, 0x1E	; 30
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	82 1b       	sub	r24, r18
    29fc:	93 0b       	sbc	r25, r19
    29fe:	29 85       	ldd	r18, Y+9	; 0x09
    2a00:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a02:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a04:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__fixsfsi+0x68>
    2a08:	56 95       	lsr	r21
    2a0a:	47 95       	ror	r20
    2a0c:	37 95       	ror	r19
    2a0e:	27 95       	ror	r18
    2a10:	8a 95       	dec	r24
    2a12:	d2 f7       	brpl	.-12     	; 0x2a08 <__fixsfsi+0x60>
    2a14:	66 23       	and	r22, r22
    2a16:	b1 f0       	breq	.+44     	; 0x2a44 <__fixsfsi+0x9c>
    2a18:	50 95       	com	r21
    2a1a:	40 95       	com	r20
    2a1c:	30 95       	com	r19
    2a1e:	21 95       	neg	r18
    2a20:	3f 4f       	sbci	r19, 0xFF	; 255
    2a22:	4f 4f       	sbci	r20, 0xFF	; 255
    2a24:	5f 4f       	sbci	r21, 0xFF	; 255
    2a26:	0e c0       	rjmp	.+28     	; 0x2a44 <__fixsfsi+0x9c>
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	09 c0       	rjmp	.+18     	; 0x2a44 <__fixsfsi+0x9c>
    2a32:	2f ef       	ldi	r18, 0xFF	; 255
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f ef       	ldi	r20, 0xFF	; 255
    2a38:	5f e7       	ldi	r21, 0x7F	; 127
    2a3a:	04 c0       	rjmp	.+8      	; 0x2a44 <__fixsfsi+0x9c>
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	50 e8       	ldi	r21, 0x80	; 128
    2a44:	b9 01       	movw	r22, r18
    2a46:	ca 01       	movw	r24, r20
    2a48:	2c 96       	adiw	r28, 0x0c	; 12
    2a4a:	e2 e0       	ldi	r30, 0x02	; 2
    2a4c:	0c 94 1e 1a 	jmp	0x343c	; 0x343c <__epilogue_restores__+0x20>

00002a50 <__clzsi2>:
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	7b 01       	movw	r14, r22
    2a5a:	8c 01       	movw	r16, r24
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	e8 16       	cp	r14, r24
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	f8 06       	cpc	r15, r24
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	08 07       	cpc	r16, r24
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	18 07       	cpc	r17, r24
    2a6c:	88 f4       	brcc	.+34     	; 0x2a90 <__clzsi2+0x40>
    2a6e:	8f ef       	ldi	r24, 0xFF	; 255
    2a70:	e8 16       	cp	r14, r24
    2a72:	f1 04       	cpc	r15, r1
    2a74:	01 05       	cpc	r16, r1
    2a76:	11 05       	cpc	r17, r1
    2a78:	31 f0       	breq	.+12     	; 0x2a86 <__clzsi2+0x36>
    2a7a:	28 f0       	brcs	.+10     	; 0x2a86 <__clzsi2+0x36>
    2a7c:	88 e0       	ldi	r24, 0x08	; 8
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	a0 e0       	ldi	r26, 0x00	; 0
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	17 c0       	rjmp	.+46     	; 0x2ab4 <__clzsi2+0x64>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e0       	ldi	r26, 0x00	; 0
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	12 c0       	rjmp	.+36     	; 0x2ab4 <__clzsi2+0x64>
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	e8 16       	cp	r14, r24
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	f8 06       	cpc	r15, r24
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	08 07       	cpc	r16, r24
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	18 07       	cpc	r17, r24
    2aa0:	28 f0       	brcs	.+10     	; 0x2aac <__clzsi2+0x5c>
    2aa2:	88 e1       	ldi	r24, 0x18	; 24
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	a0 e0       	ldi	r26, 0x00	; 0
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	04 c0       	rjmp	.+8      	; 0x2ab4 <__clzsi2+0x64>
    2aac:	80 e1       	ldi	r24, 0x10	; 16
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 e0       	ldi	r26, 0x00	; 0
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	20 e2       	ldi	r18, 0x20	; 32
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	50 e0       	ldi	r21, 0x00	; 0
    2abc:	28 1b       	sub	r18, r24
    2abe:	39 0b       	sbc	r19, r25
    2ac0:	4a 0b       	sbc	r20, r26
    2ac2:	5b 0b       	sbc	r21, r27
    2ac4:	04 c0       	rjmp	.+8      	; 0x2ace <__clzsi2+0x7e>
    2ac6:	16 95       	lsr	r17
    2ac8:	07 95       	ror	r16
    2aca:	f7 94       	ror	r15
    2acc:	e7 94       	ror	r14
    2ace:	8a 95       	dec	r24
    2ad0:	d2 f7       	brpl	.-12     	; 0x2ac6 <__clzsi2+0x76>
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	e0 56       	subi	r30, 0x60	; 96
    2ad6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ad8:	80 81       	ld	r24, Z
    2ada:	28 1b       	sub	r18, r24
    2adc:	31 09       	sbc	r19, r1
    2ade:	41 09       	sbc	r20, r1
    2ae0:	51 09       	sbc	r21, r1
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	08 95       	ret

00002aee <__pack_f>:
    2aee:	df 92       	push	r13
    2af0:	ef 92       	push	r14
    2af2:	ff 92       	push	r15
    2af4:	0f 93       	push	r16
    2af6:	1f 93       	push	r17
    2af8:	fc 01       	movw	r30, r24
    2afa:	e4 80       	ldd	r14, Z+4	; 0x04
    2afc:	f5 80       	ldd	r15, Z+5	; 0x05
    2afe:	06 81       	ldd	r16, Z+6	; 0x06
    2b00:	17 81       	ldd	r17, Z+7	; 0x07
    2b02:	d1 80       	ldd	r13, Z+1	; 0x01
    2b04:	80 81       	ld	r24, Z
    2b06:	82 30       	cpi	r24, 0x02	; 2
    2b08:	48 f4       	brcc	.+18     	; 0x2b1c <__pack_f+0x2e>
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	a0 e1       	ldi	r26, 0x10	; 16
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e8 2a       	or	r14, r24
    2b14:	f9 2a       	or	r15, r25
    2b16:	0a 2b       	or	r16, r26
    2b18:	1b 2b       	or	r17, r27
    2b1a:	a5 c0       	rjmp	.+330    	; 0x2c66 <__pack_f+0x178>
    2b1c:	84 30       	cpi	r24, 0x04	; 4
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <__pack_f+0x34>
    2b20:	9f c0       	rjmp	.+318    	; 0x2c60 <__pack_f+0x172>
    2b22:	82 30       	cpi	r24, 0x02	; 2
    2b24:	21 f4       	brne	.+8      	; 0x2b2e <__pack_f+0x40>
    2b26:	ee 24       	eor	r14, r14
    2b28:	ff 24       	eor	r15, r15
    2b2a:	87 01       	movw	r16, r14
    2b2c:	05 c0       	rjmp	.+10     	; 0x2b38 <__pack_f+0x4a>
    2b2e:	e1 14       	cp	r14, r1
    2b30:	f1 04       	cpc	r15, r1
    2b32:	01 05       	cpc	r16, r1
    2b34:	11 05       	cpc	r17, r1
    2b36:	19 f4       	brne	.+6      	; 0x2b3e <__pack_f+0x50>
    2b38:	e0 e0       	ldi	r30, 0x00	; 0
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	96 c0       	rjmp	.+300    	; 0x2c6a <__pack_f+0x17c>
    2b3e:	62 81       	ldd	r22, Z+2	; 0x02
    2b40:	73 81       	ldd	r23, Z+3	; 0x03
    2b42:	9f ef       	ldi	r25, 0xFF	; 255
    2b44:	62 38       	cpi	r22, 0x82	; 130
    2b46:	79 07       	cpc	r23, r25
    2b48:	0c f0       	brlt	.+2      	; 0x2b4c <__pack_f+0x5e>
    2b4a:	5b c0       	rjmp	.+182    	; 0x2c02 <__pack_f+0x114>
    2b4c:	22 e8       	ldi	r18, 0x82	; 130
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	26 1b       	sub	r18, r22
    2b52:	37 0b       	sbc	r19, r23
    2b54:	2a 31       	cpi	r18, 0x1A	; 26
    2b56:	31 05       	cpc	r19, r1
    2b58:	2c f0       	brlt	.+10     	; 0x2b64 <__pack_f+0x76>
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	2a c0       	rjmp	.+84     	; 0x2bb8 <__pack_f+0xca>
    2b64:	b8 01       	movw	r22, r16
    2b66:	a7 01       	movw	r20, r14
    2b68:	02 2e       	mov	r0, r18
    2b6a:	04 c0       	rjmp	.+8      	; 0x2b74 <__pack_f+0x86>
    2b6c:	76 95       	lsr	r23
    2b6e:	67 95       	ror	r22
    2b70:	57 95       	ror	r21
    2b72:	47 95       	ror	r20
    2b74:	0a 94       	dec	r0
    2b76:	d2 f7       	brpl	.-12     	; 0x2b6c <__pack_f+0x7e>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	04 c0       	rjmp	.+8      	; 0x2b8a <__pack_f+0x9c>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	aa 1f       	adc	r26, r26
    2b88:	bb 1f       	adc	r27, r27
    2b8a:	2a 95       	dec	r18
    2b8c:	d2 f7       	brpl	.-12     	; 0x2b82 <__pack_f+0x94>
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	a1 09       	sbc	r26, r1
    2b92:	b1 09       	sbc	r27, r1
    2b94:	8e 21       	and	r24, r14
    2b96:	9f 21       	and	r25, r15
    2b98:	a0 23       	and	r26, r16
    2b9a:	b1 23       	and	r27, r17
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	a1 05       	cpc	r26, r1
    2ba0:	b1 05       	cpc	r27, r1
    2ba2:	21 f0       	breq	.+8      	; 0x2bac <__pack_f+0xbe>
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e0       	ldi	r26, 0x00	; 0
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	9a 01       	movw	r18, r20
    2bae:	ab 01       	movw	r20, r22
    2bb0:	28 2b       	or	r18, r24
    2bb2:	39 2b       	or	r19, r25
    2bb4:	4a 2b       	or	r20, r26
    2bb6:	5b 2b       	or	r21, r27
    2bb8:	da 01       	movw	r26, r20
    2bba:	c9 01       	movw	r24, r18
    2bbc:	8f 77       	andi	r24, 0x7F	; 127
    2bbe:	90 70       	andi	r25, 0x00	; 0
    2bc0:	a0 70       	andi	r26, 0x00	; 0
    2bc2:	b0 70       	andi	r27, 0x00	; 0
    2bc4:	80 34       	cpi	r24, 0x40	; 64
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	a1 05       	cpc	r26, r1
    2bca:	b1 05       	cpc	r27, r1
    2bcc:	39 f4       	brne	.+14     	; 0x2bdc <__pack_f+0xee>
    2bce:	27 ff       	sbrs	r18, 7
    2bd0:	09 c0       	rjmp	.+18     	; 0x2be4 <__pack_f+0xf6>
    2bd2:	20 5c       	subi	r18, 0xC0	; 192
    2bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd6:	4f 4f       	sbci	r20, 0xFF	; 255
    2bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bda:	04 c0       	rjmp	.+8      	; 0x2be4 <__pack_f+0xf6>
    2bdc:	21 5c       	subi	r18, 0xC1	; 193
    2bde:	3f 4f       	sbci	r19, 0xFF	; 255
    2be0:	4f 4f       	sbci	r20, 0xFF	; 255
    2be2:	5f 4f       	sbci	r21, 0xFF	; 255
    2be4:	e0 e0       	ldi	r30, 0x00	; 0
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	20 30       	cpi	r18, 0x00	; 0
    2bea:	a0 e0       	ldi	r26, 0x00	; 0
    2bec:	3a 07       	cpc	r19, r26
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	4a 07       	cpc	r20, r26
    2bf2:	a0 e4       	ldi	r26, 0x40	; 64
    2bf4:	5a 07       	cpc	r21, r26
    2bf6:	10 f0       	brcs	.+4      	; 0x2bfc <__pack_f+0x10e>
    2bf8:	e1 e0       	ldi	r30, 0x01	; 1
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	79 01       	movw	r14, r18
    2bfe:	8a 01       	movw	r16, r20
    2c00:	27 c0       	rjmp	.+78     	; 0x2c50 <__pack_f+0x162>
    2c02:	60 38       	cpi	r22, 0x80	; 128
    2c04:	71 05       	cpc	r23, r1
    2c06:	64 f5       	brge	.+88     	; 0x2c60 <__pack_f+0x172>
    2c08:	fb 01       	movw	r30, r22
    2c0a:	e1 58       	subi	r30, 0x81	; 129
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	d8 01       	movw	r26, r16
    2c10:	c7 01       	movw	r24, r14
    2c12:	8f 77       	andi	r24, 0x7F	; 127
    2c14:	90 70       	andi	r25, 0x00	; 0
    2c16:	a0 70       	andi	r26, 0x00	; 0
    2c18:	b0 70       	andi	r27, 0x00	; 0
    2c1a:	80 34       	cpi	r24, 0x40	; 64
    2c1c:	91 05       	cpc	r25, r1
    2c1e:	a1 05       	cpc	r26, r1
    2c20:	b1 05       	cpc	r27, r1
    2c22:	39 f4       	brne	.+14     	; 0x2c32 <__pack_f+0x144>
    2c24:	e7 fe       	sbrs	r14, 7
    2c26:	0d c0       	rjmp	.+26     	; 0x2c42 <__pack_f+0x154>
    2c28:	80 e4       	ldi	r24, 0x40	; 64
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	04 c0       	rjmp	.+8      	; 0x2c3a <__pack_f+0x14c>
    2c32:	8f e3       	ldi	r24, 0x3F	; 63
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	a0 e0       	ldi	r26, 0x00	; 0
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e8 0e       	add	r14, r24
    2c3c:	f9 1e       	adc	r15, r25
    2c3e:	0a 1f       	adc	r16, r26
    2c40:	1b 1f       	adc	r17, r27
    2c42:	17 ff       	sbrs	r17, 7
    2c44:	05 c0       	rjmp	.+10     	; 0x2c50 <__pack_f+0x162>
    2c46:	16 95       	lsr	r17
    2c48:	07 95       	ror	r16
    2c4a:	f7 94       	ror	r15
    2c4c:	e7 94       	ror	r14
    2c4e:	31 96       	adiw	r30, 0x01	; 1
    2c50:	87 e0       	ldi	r24, 0x07	; 7
    2c52:	16 95       	lsr	r17
    2c54:	07 95       	ror	r16
    2c56:	f7 94       	ror	r15
    2c58:	e7 94       	ror	r14
    2c5a:	8a 95       	dec	r24
    2c5c:	d1 f7       	brne	.-12     	; 0x2c52 <__pack_f+0x164>
    2c5e:	05 c0       	rjmp	.+10     	; 0x2c6a <__pack_f+0x17c>
    2c60:	ee 24       	eor	r14, r14
    2c62:	ff 24       	eor	r15, r15
    2c64:	87 01       	movw	r16, r14
    2c66:	ef ef       	ldi	r30, 0xFF	; 255
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	6e 2f       	mov	r22, r30
    2c6c:	67 95       	ror	r22
    2c6e:	66 27       	eor	r22, r22
    2c70:	67 95       	ror	r22
    2c72:	90 2f       	mov	r25, r16
    2c74:	9f 77       	andi	r25, 0x7F	; 127
    2c76:	d7 94       	ror	r13
    2c78:	dd 24       	eor	r13, r13
    2c7a:	d7 94       	ror	r13
    2c7c:	8e 2f       	mov	r24, r30
    2c7e:	86 95       	lsr	r24
    2c80:	49 2f       	mov	r20, r25
    2c82:	46 2b       	or	r20, r22
    2c84:	58 2f       	mov	r21, r24
    2c86:	5d 29       	or	r21, r13
    2c88:	b7 01       	movw	r22, r14
    2c8a:	ca 01       	movw	r24, r20
    2c8c:	1f 91       	pop	r17
    2c8e:	0f 91       	pop	r16
    2c90:	ff 90       	pop	r15
    2c92:	ef 90       	pop	r14
    2c94:	df 90       	pop	r13
    2c96:	08 95       	ret

00002c98 <__unpack_f>:
    2c98:	fc 01       	movw	r30, r24
    2c9a:	db 01       	movw	r26, r22
    2c9c:	40 81       	ld	r20, Z
    2c9e:	51 81       	ldd	r21, Z+1	; 0x01
    2ca0:	22 81       	ldd	r18, Z+2	; 0x02
    2ca2:	62 2f       	mov	r22, r18
    2ca4:	6f 77       	andi	r22, 0x7F	; 127
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	22 1f       	adc	r18, r18
    2caa:	22 27       	eor	r18, r18
    2cac:	22 1f       	adc	r18, r18
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	89 2f       	mov	r24, r25
    2cb2:	88 0f       	add	r24, r24
    2cb4:	82 2b       	or	r24, r18
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	99 1f       	adc	r25, r25
    2cbc:	99 27       	eor	r25, r25
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	11 96       	adiw	r26, 0x01	; 1
    2cc2:	9c 93       	st	X, r25
    2cc4:	11 97       	sbiw	r26, 0x01	; 1
    2cc6:	21 15       	cp	r18, r1
    2cc8:	31 05       	cpc	r19, r1
    2cca:	a9 f5       	brne	.+106    	; 0x2d36 <__unpack_f+0x9e>
    2ccc:	41 15       	cp	r20, r1
    2cce:	51 05       	cpc	r21, r1
    2cd0:	61 05       	cpc	r22, r1
    2cd2:	71 05       	cpc	r23, r1
    2cd4:	11 f4       	brne	.+4      	; 0x2cda <__unpack_f+0x42>
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	37 c0       	rjmp	.+110    	; 0x2d48 <__unpack_f+0xb0>
    2cda:	82 e8       	ldi	r24, 0x82	; 130
    2cdc:	9f ef       	ldi	r25, 0xFF	; 255
    2cde:	13 96       	adiw	r26, 0x03	; 3
    2ce0:	9c 93       	st	X, r25
    2ce2:	8e 93       	st	-X, r24
    2ce4:	12 97       	sbiw	r26, 0x02	; 2
    2ce6:	9a 01       	movw	r18, r20
    2ce8:	ab 01       	movw	r20, r22
    2cea:	67 e0       	ldi	r22, 0x07	; 7
    2cec:	22 0f       	add	r18, r18
    2cee:	33 1f       	adc	r19, r19
    2cf0:	44 1f       	adc	r20, r20
    2cf2:	55 1f       	adc	r21, r21
    2cf4:	6a 95       	dec	r22
    2cf6:	d1 f7       	brne	.-12     	; 0x2cec <__unpack_f+0x54>
    2cf8:	83 e0       	ldi	r24, 0x03	; 3
    2cfa:	8c 93       	st	X, r24
    2cfc:	0d c0       	rjmp	.+26     	; 0x2d18 <__unpack_f+0x80>
    2cfe:	22 0f       	add	r18, r18
    2d00:	33 1f       	adc	r19, r19
    2d02:	44 1f       	adc	r20, r20
    2d04:	55 1f       	adc	r21, r21
    2d06:	12 96       	adiw	r26, 0x02	; 2
    2d08:	8d 91       	ld	r24, X+
    2d0a:	9c 91       	ld	r25, X
    2d0c:	13 97       	sbiw	r26, 0x03	; 3
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	13 96       	adiw	r26, 0x03	; 3
    2d12:	9c 93       	st	X, r25
    2d14:	8e 93       	st	-X, r24
    2d16:	12 97       	sbiw	r26, 0x02	; 2
    2d18:	20 30       	cpi	r18, 0x00	; 0
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	38 07       	cpc	r19, r24
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	48 07       	cpc	r20, r24
    2d22:	80 e4       	ldi	r24, 0x40	; 64
    2d24:	58 07       	cpc	r21, r24
    2d26:	58 f3       	brcs	.-42     	; 0x2cfe <__unpack_f+0x66>
    2d28:	14 96       	adiw	r26, 0x04	; 4
    2d2a:	2d 93       	st	X+, r18
    2d2c:	3d 93       	st	X+, r19
    2d2e:	4d 93       	st	X+, r20
    2d30:	5c 93       	st	X, r21
    2d32:	17 97       	sbiw	r26, 0x07	; 7
    2d34:	08 95       	ret
    2d36:	2f 3f       	cpi	r18, 0xFF	; 255
    2d38:	31 05       	cpc	r19, r1
    2d3a:	79 f4       	brne	.+30     	; 0x2d5a <__unpack_f+0xc2>
    2d3c:	41 15       	cp	r20, r1
    2d3e:	51 05       	cpc	r21, r1
    2d40:	61 05       	cpc	r22, r1
    2d42:	71 05       	cpc	r23, r1
    2d44:	19 f4       	brne	.+6      	; 0x2d4c <__unpack_f+0xb4>
    2d46:	84 e0       	ldi	r24, 0x04	; 4
    2d48:	8c 93       	st	X, r24
    2d4a:	08 95       	ret
    2d4c:	64 ff       	sbrs	r22, 4
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <__unpack_f+0xbe>
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	8c 93       	st	X, r24
    2d54:	12 c0       	rjmp	.+36     	; 0x2d7a <__unpack_f+0xe2>
    2d56:	1c 92       	st	X, r1
    2d58:	10 c0       	rjmp	.+32     	; 0x2d7a <__unpack_f+0xe2>
    2d5a:	2f 57       	subi	r18, 0x7F	; 127
    2d5c:	30 40       	sbci	r19, 0x00	; 0
    2d5e:	13 96       	adiw	r26, 0x03	; 3
    2d60:	3c 93       	st	X, r19
    2d62:	2e 93       	st	-X, r18
    2d64:	12 97       	sbiw	r26, 0x02	; 2
    2d66:	83 e0       	ldi	r24, 0x03	; 3
    2d68:	8c 93       	st	X, r24
    2d6a:	87 e0       	ldi	r24, 0x07	; 7
    2d6c:	44 0f       	add	r20, r20
    2d6e:	55 1f       	adc	r21, r21
    2d70:	66 1f       	adc	r22, r22
    2d72:	77 1f       	adc	r23, r23
    2d74:	8a 95       	dec	r24
    2d76:	d1 f7       	brne	.-12     	; 0x2d6c <__unpack_f+0xd4>
    2d78:	70 64       	ori	r23, 0x40	; 64
    2d7a:	14 96       	adiw	r26, 0x04	; 4
    2d7c:	4d 93       	st	X+, r20
    2d7e:	5d 93       	st	X+, r21
    2d80:	6d 93       	st	X+, r22
    2d82:	7c 93       	st	X, r23
    2d84:	17 97       	sbiw	r26, 0x07	; 7
    2d86:	08 95       	ret

00002d88 <__fpcmp_parts_f>:
    2d88:	1f 93       	push	r17
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	9c 91       	ld	r25, X
    2d90:	92 30       	cpi	r25, 0x02	; 2
    2d92:	08 f4       	brcc	.+2      	; 0x2d96 <__fpcmp_parts_f+0xe>
    2d94:	47 c0       	rjmp	.+142    	; 0x2e24 <__fpcmp_parts_f+0x9c>
    2d96:	80 81       	ld	r24, Z
    2d98:	82 30       	cpi	r24, 0x02	; 2
    2d9a:	08 f4       	brcc	.+2      	; 0x2d9e <__fpcmp_parts_f+0x16>
    2d9c:	43 c0       	rjmp	.+134    	; 0x2e24 <__fpcmp_parts_f+0x9c>
    2d9e:	94 30       	cpi	r25, 0x04	; 4
    2da0:	51 f4       	brne	.+20     	; 0x2db6 <__fpcmp_parts_f+0x2e>
    2da2:	11 96       	adiw	r26, 0x01	; 1
    2da4:	1c 91       	ld	r17, X
    2da6:	84 30       	cpi	r24, 0x04	; 4
    2da8:	99 f5       	brne	.+102    	; 0x2e10 <__fpcmp_parts_f+0x88>
    2daa:	81 81       	ldd	r24, Z+1	; 0x01
    2dac:	68 2f       	mov	r22, r24
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	61 1b       	sub	r22, r17
    2db2:	71 09       	sbc	r23, r1
    2db4:	3f c0       	rjmp	.+126    	; 0x2e34 <__fpcmp_parts_f+0xac>
    2db6:	84 30       	cpi	r24, 0x04	; 4
    2db8:	21 f0       	breq	.+8      	; 0x2dc2 <__fpcmp_parts_f+0x3a>
    2dba:	92 30       	cpi	r25, 0x02	; 2
    2dbc:	31 f4       	brne	.+12     	; 0x2dca <__fpcmp_parts_f+0x42>
    2dbe:	82 30       	cpi	r24, 0x02	; 2
    2dc0:	b9 f1       	breq	.+110    	; 0x2e30 <__fpcmp_parts_f+0xa8>
    2dc2:	81 81       	ldd	r24, Z+1	; 0x01
    2dc4:	88 23       	and	r24, r24
    2dc6:	89 f1       	breq	.+98     	; 0x2e2a <__fpcmp_parts_f+0xa2>
    2dc8:	2d c0       	rjmp	.+90     	; 0x2e24 <__fpcmp_parts_f+0x9c>
    2dca:	11 96       	adiw	r26, 0x01	; 1
    2dcc:	1c 91       	ld	r17, X
    2dce:	11 97       	sbiw	r26, 0x01	; 1
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	f1 f0       	breq	.+60     	; 0x2e10 <__fpcmp_parts_f+0x88>
    2dd4:	81 81       	ldd	r24, Z+1	; 0x01
    2dd6:	18 17       	cp	r17, r24
    2dd8:	d9 f4       	brne	.+54     	; 0x2e10 <__fpcmp_parts_f+0x88>
    2dda:	12 96       	adiw	r26, 0x02	; 2
    2ddc:	2d 91       	ld	r18, X+
    2dde:	3c 91       	ld	r19, X
    2de0:	13 97       	sbiw	r26, 0x03	; 3
    2de2:	82 81       	ldd	r24, Z+2	; 0x02
    2de4:	93 81       	ldd	r25, Z+3	; 0x03
    2de6:	82 17       	cp	r24, r18
    2de8:	93 07       	cpc	r25, r19
    2dea:	94 f0       	brlt	.+36     	; 0x2e10 <__fpcmp_parts_f+0x88>
    2dec:	28 17       	cp	r18, r24
    2dee:	39 07       	cpc	r19, r25
    2df0:	bc f0       	brlt	.+46     	; 0x2e20 <__fpcmp_parts_f+0x98>
    2df2:	14 96       	adiw	r26, 0x04	; 4
    2df4:	8d 91       	ld	r24, X+
    2df6:	9d 91       	ld	r25, X+
    2df8:	0d 90       	ld	r0, X+
    2dfa:	bc 91       	ld	r27, X
    2dfc:	a0 2d       	mov	r26, r0
    2dfe:	24 81       	ldd	r18, Z+4	; 0x04
    2e00:	35 81       	ldd	r19, Z+5	; 0x05
    2e02:	46 81       	ldd	r20, Z+6	; 0x06
    2e04:	57 81       	ldd	r21, Z+7	; 0x07
    2e06:	28 17       	cp	r18, r24
    2e08:	39 07       	cpc	r19, r25
    2e0a:	4a 07       	cpc	r20, r26
    2e0c:	5b 07       	cpc	r21, r27
    2e0e:	18 f4       	brcc	.+6      	; 0x2e16 <__fpcmp_parts_f+0x8e>
    2e10:	11 23       	and	r17, r17
    2e12:	41 f0       	breq	.+16     	; 0x2e24 <__fpcmp_parts_f+0x9c>
    2e14:	0a c0       	rjmp	.+20     	; 0x2e2a <__fpcmp_parts_f+0xa2>
    2e16:	82 17       	cp	r24, r18
    2e18:	93 07       	cpc	r25, r19
    2e1a:	a4 07       	cpc	r26, r20
    2e1c:	b5 07       	cpc	r27, r21
    2e1e:	40 f4       	brcc	.+16     	; 0x2e30 <__fpcmp_parts_f+0xa8>
    2e20:	11 23       	and	r17, r17
    2e22:	19 f0       	breq	.+6      	; 0x2e2a <__fpcmp_parts_f+0xa2>
    2e24:	61 e0       	ldi	r22, 0x01	; 1
    2e26:	70 e0       	ldi	r23, 0x00	; 0
    2e28:	05 c0       	rjmp	.+10     	; 0x2e34 <__fpcmp_parts_f+0xac>
    2e2a:	6f ef       	ldi	r22, 0xFF	; 255
    2e2c:	7f ef       	ldi	r23, 0xFF	; 255
    2e2e:	02 c0       	rjmp	.+4      	; 0x2e34 <__fpcmp_parts_f+0xac>
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	cb 01       	movw	r24, r22
    2e36:	1f 91       	pop	r17
    2e38:	08 95       	ret

00002e3a <snprintf>:
    2e3a:	ae e0       	ldi	r26, 0x0E	; 14
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e3 e2       	ldi	r30, 0x23	; 35
    2e40:	f7 e1       	ldi	r31, 0x17	; 23
    2e42:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__+0x1c>
    2e46:	0e 89       	ldd	r16, Y+22	; 0x16
    2e48:	1f 89       	ldd	r17, Y+23	; 0x17
    2e4a:	88 8d       	ldd	r24, Y+24	; 0x18
    2e4c:	99 8d       	ldd	r25, Y+25	; 0x19
    2e4e:	97 ff       	sbrs	r25, 7
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <snprintf+0x1c>
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e8       	ldi	r25, 0x80	; 128
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	1a 83       	std	Y+2, r17	; 0x02
    2e5e:	09 83       	std	Y+1, r16	; 0x01
    2e60:	86 e0       	ldi	r24, 0x06	; 6
    2e62:	8c 83       	std	Y+4, r24	; 0x04
    2e64:	9e 01       	movw	r18, r28
    2e66:	24 5e       	subi	r18, 0xE4	; 228
    2e68:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2e70:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2e72:	a9 01       	movw	r20, r18
    2e74:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <vfprintf>
    2e78:	4d 81       	ldd	r20, Y+5	; 0x05
    2e7a:	5e 81       	ldd	r21, Y+6	; 0x06
    2e7c:	57 fd       	sbrc	r21, 7
    2e7e:	0a c0       	rjmp	.+20     	; 0x2e94 <snprintf+0x5a>
    2e80:	2f 81       	ldd	r18, Y+7	; 0x07
    2e82:	38 85       	ldd	r19, Y+8	; 0x08
    2e84:	42 17       	cp	r20, r18
    2e86:	53 07       	cpc	r21, r19
    2e88:	0c f4       	brge	.+2      	; 0x2e8c <snprintf+0x52>
    2e8a:	9a 01       	movw	r18, r20
    2e8c:	02 0f       	add	r16, r18
    2e8e:	13 1f       	adc	r17, r19
    2e90:	f8 01       	movw	r30, r16
    2e92:	10 82       	st	Z, r1
    2e94:	2e 96       	adiw	r28, 0x0e	; 14
    2e96:	e4 e0       	ldi	r30, 0x04	; 4
    2e98:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__+0x1c>

00002e9c <vfprintf>:
    2e9c:	ab e0       	ldi	r26, 0x0B	; 11
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e4 e5       	ldi	r30, 0x54	; 84
    2ea2:	f7 e1       	ldi	r31, 0x17	; 23
    2ea4:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__prologue_saves__>
    2ea8:	3c 01       	movw	r6, r24
    2eaa:	2b 01       	movw	r4, r22
    2eac:	5a 01       	movw	r10, r20
    2eae:	fc 01       	movw	r30, r24
    2eb0:	17 82       	std	Z+7, r1	; 0x07
    2eb2:	16 82       	std	Z+6, r1	; 0x06
    2eb4:	83 81       	ldd	r24, Z+3	; 0x03
    2eb6:	81 fd       	sbrc	r24, 1
    2eb8:	03 c0       	rjmp	.+6      	; 0x2ec0 <vfprintf+0x24>
    2eba:	6f ef       	ldi	r22, 0xFF	; 255
    2ebc:	7f ef       	ldi	r23, 0xFF	; 255
    2ebe:	c6 c1       	rjmp	.+908    	; 0x324c <vfprintf+0x3b0>
    2ec0:	9a e0       	ldi	r25, 0x0A	; 10
    2ec2:	89 2e       	mov	r8, r25
    2ec4:	1e 01       	movw	r2, r28
    2ec6:	08 94       	sec
    2ec8:	21 1c       	adc	r2, r1
    2eca:	31 1c       	adc	r3, r1
    2ecc:	f3 01       	movw	r30, r6
    2ece:	23 81       	ldd	r18, Z+3	; 0x03
    2ed0:	f2 01       	movw	r30, r4
    2ed2:	23 fd       	sbrc	r18, 3
    2ed4:	85 91       	lpm	r24, Z+
    2ed6:	23 ff       	sbrs	r18, 3
    2ed8:	81 91       	ld	r24, Z+
    2eda:	2f 01       	movw	r4, r30
    2edc:	88 23       	and	r24, r24
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <vfprintf+0x46>
    2ee0:	b2 c1       	rjmp	.+868    	; 0x3246 <vfprintf+0x3aa>
    2ee2:	85 32       	cpi	r24, 0x25	; 37
    2ee4:	39 f4       	brne	.+14     	; 0x2ef4 <vfprintf+0x58>
    2ee6:	23 fd       	sbrc	r18, 3
    2ee8:	85 91       	lpm	r24, Z+
    2eea:	23 ff       	sbrs	r18, 3
    2eec:	81 91       	ld	r24, Z+
    2eee:	2f 01       	movw	r4, r30
    2ef0:	85 32       	cpi	r24, 0x25	; 37
    2ef2:	29 f4       	brne	.+10     	; 0x2efe <vfprintf+0x62>
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	b3 01       	movw	r22, r6
    2ef8:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    2efc:	e7 cf       	rjmp	.-50     	; 0x2ecc <vfprintf+0x30>
    2efe:	98 2f       	mov	r25, r24
    2f00:	ff 24       	eor	r15, r15
    2f02:	ee 24       	eor	r14, r14
    2f04:	99 24       	eor	r9, r9
    2f06:	ff e1       	ldi	r31, 0x1F	; 31
    2f08:	ff 15       	cp	r31, r15
    2f0a:	d0 f0       	brcs	.+52     	; 0x2f40 <vfprintf+0xa4>
    2f0c:	9b 32       	cpi	r25, 0x2B	; 43
    2f0e:	69 f0       	breq	.+26     	; 0x2f2a <vfprintf+0x8e>
    2f10:	9c 32       	cpi	r25, 0x2C	; 44
    2f12:	28 f4       	brcc	.+10     	; 0x2f1e <vfprintf+0x82>
    2f14:	90 32       	cpi	r25, 0x20	; 32
    2f16:	59 f0       	breq	.+22     	; 0x2f2e <vfprintf+0x92>
    2f18:	93 32       	cpi	r25, 0x23	; 35
    2f1a:	91 f4       	brne	.+36     	; 0x2f40 <vfprintf+0xa4>
    2f1c:	0e c0       	rjmp	.+28     	; 0x2f3a <vfprintf+0x9e>
    2f1e:	9d 32       	cpi	r25, 0x2D	; 45
    2f20:	49 f0       	breq	.+18     	; 0x2f34 <vfprintf+0x98>
    2f22:	90 33       	cpi	r25, 0x30	; 48
    2f24:	69 f4       	brne	.+26     	; 0x2f40 <vfprintf+0xa4>
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	24 c0       	rjmp	.+72     	; 0x2f72 <vfprintf+0xd6>
    2f2a:	52 e0       	ldi	r21, 0x02	; 2
    2f2c:	f5 2a       	or	r15, r21
    2f2e:	84 e0       	ldi	r24, 0x04	; 4
    2f30:	f8 2a       	or	r15, r24
    2f32:	28 c0       	rjmp	.+80     	; 0x2f84 <vfprintf+0xe8>
    2f34:	98 e0       	ldi	r25, 0x08	; 8
    2f36:	f9 2a       	or	r15, r25
    2f38:	25 c0       	rjmp	.+74     	; 0x2f84 <vfprintf+0xe8>
    2f3a:	e0 e1       	ldi	r30, 0x10	; 16
    2f3c:	fe 2a       	or	r15, r30
    2f3e:	22 c0       	rjmp	.+68     	; 0x2f84 <vfprintf+0xe8>
    2f40:	f7 fc       	sbrc	r15, 7
    2f42:	29 c0       	rjmp	.+82     	; 0x2f96 <vfprintf+0xfa>
    2f44:	89 2f       	mov	r24, r25
    2f46:	80 53       	subi	r24, 0x30	; 48
    2f48:	8a 30       	cpi	r24, 0x0A	; 10
    2f4a:	70 f4       	brcc	.+28     	; 0x2f68 <vfprintf+0xcc>
    2f4c:	f6 fe       	sbrs	r15, 6
    2f4e:	05 c0       	rjmp	.+10     	; 0x2f5a <vfprintf+0xbe>
    2f50:	98 9c       	mul	r9, r8
    2f52:	90 2c       	mov	r9, r0
    2f54:	11 24       	eor	r1, r1
    2f56:	98 0e       	add	r9, r24
    2f58:	15 c0       	rjmp	.+42     	; 0x2f84 <vfprintf+0xe8>
    2f5a:	e8 9c       	mul	r14, r8
    2f5c:	e0 2c       	mov	r14, r0
    2f5e:	11 24       	eor	r1, r1
    2f60:	e8 0e       	add	r14, r24
    2f62:	f0 e2       	ldi	r31, 0x20	; 32
    2f64:	ff 2a       	or	r15, r31
    2f66:	0e c0       	rjmp	.+28     	; 0x2f84 <vfprintf+0xe8>
    2f68:	9e 32       	cpi	r25, 0x2E	; 46
    2f6a:	29 f4       	brne	.+10     	; 0x2f76 <vfprintf+0xda>
    2f6c:	f6 fc       	sbrc	r15, 6
    2f6e:	6b c1       	rjmp	.+726    	; 0x3246 <vfprintf+0x3aa>
    2f70:	40 e4       	ldi	r20, 0x40	; 64
    2f72:	f4 2a       	or	r15, r20
    2f74:	07 c0       	rjmp	.+14     	; 0x2f84 <vfprintf+0xe8>
    2f76:	9c 36       	cpi	r25, 0x6C	; 108
    2f78:	19 f4       	brne	.+6      	; 0x2f80 <vfprintf+0xe4>
    2f7a:	50 e8       	ldi	r21, 0x80	; 128
    2f7c:	f5 2a       	or	r15, r21
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <vfprintf+0xe8>
    2f80:	98 36       	cpi	r25, 0x68	; 104
    2f82:	49 f4       	brne	.+18     	; 0x2f96 <vfprintf+0xfa>
    2f84:	f2 01       	movw	r30, r4
    2f86:	23 fd       	sbrc	r18, 3
    2f88:	95 91       	lpm	r25, Z+
    2f8a:	23 ff       	sbrs	r18, 3
    2f8c:	91 91       	ld	r25, Z+
    2f8e:	2f 01       	movw	r4, r30
    2f90:	99 23       	and	r25, r25
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <vfprintf+0xfa>
    2f94:	b8 cf       	rjmp	.-144    	; 0x2f06 <vfprintf+0x6a>
    2f96:	89 2f       	mov	r24, r25
    2f98:	85 54       	subi	r24, 0x45	; 69
    2f9a:	83 30       	cpi	r24, 0x03	; 3
    2f9c:	18 f0       	brcs	.+6      	; 0x2fa4 <vfprintf+0x108>
    2f9e:	80 52       	subi	r24, 0x20	; 32
    2fa0:	83 30       	cpi	r24, 0x03	; 3
    2fa2:	38 f4       	brcc	.+14     	; 0x2fb2 <vfprintf+0x116>
    2fa4:	44 e0       	ldi	r20, 0x04	; 4
    2fa6:	50 e0       	ldi	r21, 0x00	; 0
    2fa8:	a4 0e       	add	r10, r20
    2faa:	b5 1e       	adc	r11, r21
    2fac:	5f e3       	ldi	r21, 0x3F	; 63
    2fae:	59 83       	std	Y+1, r21	; 0x01
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <vfprintf+0x134>
    2fb2:	93 36       	cpi	r25, 0x63	; 99
    2fb4:	31 f0       	breq	.+12     	; 0x2fc2 <vfprintf+0x126>
    2fb6:	93 37       	cpi	r25, 0x73	; 115
    2fb8:	79 f0       	breq	.+30     	; 0x2fd8 <vfprintf+0x13c>
    2fba:	93 35       	cpi	r25, 0x53	; 83
    2fbc:	09 f0       	breq	.+2      	; 0x2fc0 <vfprintf+0x124>
    2fbe:	56 c0       	rjmp	.+172    	; 0x306c <vfprintf+0x1d0>
    2fc0:	20 c0       	rjmp	.+64     	; 0x3002 <vfprintf+0x166>
    2fc2:	f5 01       	movw	r30, r10
    2fc4:	80 81       	ld	r24, Z
    2fc6:	89 83       	std	Y+1, r24	; 0x01
    2fc8:	42 e0       	ldi	r20, 0x02	; 2
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	a4 0e       	add	r10, r20
    2fce:	b5 1e       	adc	r11, r21
    2fd0:	61 01       	movw	r12, r2
    2fd2:	01 e0       	ldi	r16, 0x01	; 1
    2fd4:	10 e0       	ldi	r17, 0x00	; 0
    2fd6:	12 c0       	rjmp	.+36     	; 0x2ffc <vfprintf+0x160>
    2fd8:	f5 01       	movw	r30, r10
    2fda:	c0 80       	ld	r12, Z
    2fdc:	d1 80       	ldd	r13, Z+1	; 0x01
    2fde:	f6 fc       	sbrc	r15, 6
    2fe0:	03 c0       	rjmp	.+6      	; 0x2fe8 <vfprintf+0x14c>
    2fe2:	6f ef       	ldi	r22, 0xFF	; 255
    2fe4:	7f ef       	ldi	r23, 0xFF	; 255
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <vfprintf+0x150>
    2fe8:	69 2d       	mov	r22, r9
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	42 e0       	ldi	r20, 0x02	; 2
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	a4 0e       	add	r10, r20
    2ff2:	b5 1e       	adc	r11, r21
    2ff4:	c6 01       	movw	r24, r12
    2ff6:	0e 94 36 19 	call	0x326c	; 0x326c <strnlen>
    2ffa:	8c 01       	movw	r16, r24
    2ffc:	5f e7       	ldi	r21, 0x7F	; 127
    2ffe:	f5 22       	and	r15, r21
    3000:	14 c0       	rjmp	.+40     	; 0x302a <vfprintf+0x18e>
    3002:	f5 01       	movw	r30, r10
    3004:	c0 80       	ld	r12, Z
    3006:	d1 80       	ldd	r13, Z+1	; 0x01
    3008:	f6 fc       	sbrc	r15, 6
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <vfprintf+0x176>
    300c:	6f ef       	ldi	r22, 0xFF	; 255
    300e:	7f ef       	ldi	r23, 0xFF	; 255
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <vfprintf+0x17a>
    3012:	69 2d       	mov	r22, r9
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	42 e0       	ldi	r20, 0x02	; 2
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	a4 0e       	add	r10, r20
    301c:	b5 1e       	adc	r11, r21
    301e:	c6 01       	movw	r24, r12
    3020:	0e 94 2b 19 	call	0x3256	; 0x3256 <strnlen_P>
    3024:	8c 01       	movw	r16, r24
    3026:	50 e8       	ldi	r21, 0x80	; 128
    3028:	f5 2a       	or	r15, r21
    302a:	f3 fe       	sbrs	r15, 3
    302c:	07 c0       	rjmp	.+14     	; 0x303c <vfprintf+0x1a0>
    302e:	1a c0       	rjmp	.+52     	; 0x3064 <vfprintf+0x1c8>
    3030:	80 e2       	ldi	r24, 0x20	; 32
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	b3 01       	movw	r22, r6
    3036:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    303a:	ea 94       	dec	r14
    303c:	8e 2d       	mov	r24, r14
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	08 17       	cp	r16, r24
    3042:	19 07       	cpc	r17, r25
    3044:	a8 f3       	brcs	.-22     	; 0x3030 <vfprintf+0x194>
    3046:	0e c0       	rjmp	.+28     	; 0x3064 <vfprintf+0x1c8>
    3048:	f6 01       	movw	r30, r12
    304a:	f7 fc       	sbrc	r15, 7
    304c:	85 91       	lpm	r24, Z+
    304e:	f7 fe       	sbrs	r15, 7
    3050:	81 91       	ld	r24, Z+
    3052:	6f 01       	movw	r12, r30
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	b3 01       	movw	r22, r6
    3058:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    305c:	e1 10       	cpse	r14, r1
    305e:	ea 94       	dec	r14
    3060:	01 50       	subi	r16, 0x01	; 1
    3062:	10 40       	sbci	r17, 0x00	; 0
    3064:	01 15       	cp	r16, r1
    3066:	11 05       	cpc	r17, r1
    3068:	79 f7       	brne	.-34     	; 0x3048 <vfprintf+0x1ac>
    306a:	ea c0       	rjmp	.+468    	; 0x3240 <vfprintf+0x3a4>
    306c:	94 36       	cpi	r25, 0x64	; 100
    306e:	11 f0       	breq	.+4      	; 0x3074 <vfprintf+0x1d8>
    3070:	99 36       	cpi	r25, 0x69	; 105
    3072:	69 f5       	brne	.+90     	; 0x30ce <vfprintf+0x232>
    3074:	f7 fe       	sbrs	r15, 7
    3076:	08 c0       	rjmp	.+16     	; 0x3088 <vfprintf+0x1ec>
    3078:	f5 01       	movw	r30, r10
    307a:	20 81       	ld	r18, Z
    307c:	31 81       	ldd	r19, Z+1	; 0x01
    307e:	42 81       	ldd	r20, Z+2	; 0x02
    3080:	53 81       	ldd	r21, Z+3	; 0x03
    3082:	84 e0       	ldi	r24, 0x04	; 4
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	0a c0       	rjmp	.+20     	; 0x309c <vfprintf+0x200>
    3088:	f5 01       	movw	r30, r10
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	9c 01       	movw	r18, r24
    3090:	44 27       	eor	r20, r20
    3092:	37 fd       	sbrc	r19, 7
    3094:	40 95       	com	r20
    3096:	54 2f       	mov	r21, r20
    3098:	82 e0       	ldi	r24, 0x02	; 2
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a8 0e       	add	r10, r24
    309e:	b9 1e       	adc	r11, r25
    30a0:	9f e6       	ldi	r25, 0x6F	; 111
    30a2:	f9 22       	and	r15, r25
    30a4:	57 ff       	sbrs	r21, 7
    30a6:	09 c0       	rjmp	.+18     	; 0x30ba <vfprintf+0x21e>
    30a8:	50 95       	com	r21
    30aa:	40 95       	com	r20
    30ac:	30 95       	com	r19
    30ae:	21 95       	neg	r18
    30b0:	3f 4f       	sbci	r19, 0xFF	; 255
    30b2:	4f 4f       	sbci	r20, 0xFF	; 255
    30b4:	5f 4f       	sbci	r21, 0xFF	; 255
    30b6:	e0 e8       	ldi	r30, 0x80	; 128
    30b8:	fe 2a       	or	r15, r30
    30ba:	ca 01       	movw	r24, r20
    30bc:	b9 01       	movw	r22, r18
    30be:	a1 01       	movw	r20, r2
    30c0:	2a e0       	ldi	r18, 0x0A	; 10
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	0e 94 6d 19 	call	0x32da	; 0x32da <__ultoa_invert>
    30c8:	d8 2e       	mov	r13, r24
    30ca:	d2 18       	sub	r13, r2
    30cc:	40 c0       	rjmp	.+128    	; 0x314e <vfprintf+0x2b2>
    30ce:	95 37       	cpi	r25, 0x75	; 117
    30d0:	29 f4       	brne	.+10     	; 0x30dc <vfprintf+0x240>
    30d2:	1f 2d       	mov	r17, r15
    30d4:	1f 7e       	andi	r17, 0xEF	; 239
    30d6:	2a e0       	ldi	r18, 0x0A	; 10
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	1d c0       	rjmp	.+58     	; 0x3116 <vfprintf+0x27a>
    30dc:	1f 2d       	mov	r17, r15
    30de:	19 7f       	andi	r17, 0xF9	; 249
    30e0:	9f 36       	cpi	r25, 0x6F	; 111
    30e2:	61 f0       	breq	.+24     	; 0x30fc <vfprintf+0x260>
    30e4:	90 37       	cpi	r25, 0x70	; 112
    30e6:	20 f4       	brcc	.+8      	; 0x30f0 <vfprintf+0x254>
    30e8:	98 35       	cpi	r25, 0x58	; 88
    30ea:	09 f0       	breq	.+2      	; 0x30ee <vfprintf+0x252>
    30ec:	ac c0       	rjmp	.+344    	; 0x3246 <vfprintf+0x3aa>
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <vfprintf+0x272>
    30f0:	90 37       	cpi	r25, 0x70	; 112
    30f2:	39 f0       	breq	.+14     	; 0x3102 <vfprintf+0x266>
    30f4:	98 37       	cpi	r25, 0x78	; 120
    30f6:	09 f0       	breq	.+2      	; 0x30fa <vfprintf+0x25e>
    30f8:	a6 c0       	rjmp	.+332    	; 0x3246 <vfprintf+0x3aa>
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <vfprintf+0x268>
    30fc:	28 e0       	ldi	r18, 0x08	; 8
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	0a c0       	rjmp	.+20     	; 0x3116 <vfprintf+0x27a>
    3102:	10 61       	ori	r17, 0x10	; 16
    3104:	14 fd       	sbrc	r17, 4
    3106:	14 60       	ori	r17, 0x04	; 4
    3108:	20 e1       	ldi	r18, 0x10	; 16
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	04 c0       	rjmp	.+8      	; 0x3116 <vfprintf+0x27a>
    310e:	14 fd       	sbrc	r17, 4
    3110:	16 60       	ori	r17, 0x06	; 6
    3112:	20 e1       	ldi	r18, 0x10	; 16
    3114:	32 e0       	ldi	r19, 0x02	; 2
    3116:	17 ff       	sbrs	r17, 7
    3118:	08 c0       	rjmp	.+16     	; 0x312a <vfprintf+0x28e>
    311a:	f5 01       	movw	r30, r10
    311c:	60 81       	ld	r22, Z
    311e:	71 81       	ldd	r23, Z+1	; 0x01
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	44 e0       	ldi	r20, 0x04	; 4
    3126:	50 e0       	ldi	r21, 0x00	; 0
    3128:	08 c0       	rjmp	.+16     	; 0x313a <vfprintf+0x29e>
    312a:	f5 01       	movw	r30, r10
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	bc 01       	movw	r22, r24
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	42 e0       	ldi	r20, 0x02	; 2
    3138:	50 e0       	ldi	r21, 0x00	; 0
    313a:	a4 0e       	add	r10, r20
    313c:	b5 1e       	adc	r11, r21
    313e:	a1 01       	movw	r20, r2
    3140:	0e 94 6d 19 	call	0x32da	; 0x32da <__ultoa_invert>
    3144:	d8 2e       	mov	r13, r24
    3146:	d2 18       	sub	r13, r2
    3148:	8f e7       	ldi	r24, 0x7F	; 127
    314a:	f8 2e       	mov	r15, r24
    314c:	f1 22       	and	r15, r17
    314e:	f6 fe       	sbrs	r15, 6
    3150:	0b c0       	rjmp	.+22     	; 0x3168 <vfprintf+0x2cc>
    3152:	5e ef       	ldi	r21, 0xFE	; 254
    3154:	f5 22       	and	r15, r21
    3156:	d9 14       	cp	r13, r9
    3158:	38 f4       	brcc	.+14     	; 0x3168 <vfprintf+0x2cc>
    315a:	f4 fe       	sbrs	r15, 4
    315c:	07 c0       	rjmp	.+14     	; 0x316c <vfprintf+0x2d0>
    315e:	f2 fc       	sbrc	r15, 2
    3160:	05 c0       	rjmp	.+10     	; 0x316c <vfprintf+0x2d0>
    3162:	8f ee       	ldi	r24, 0xEF	; 239
    3164:	f8 22       	and	r15, r24
    3166:	02 c0       	rjmp	.+4      	; 0x316c <vfprintf+0x2d0>
    3168:	1d 2d       	mov	r17, r13
    316a:	01 c0       	rjmp	.+2      	; 0x316e <vfprintf+0x2d2>
    316c:	19 2d       	mov	r17, r9
    316e:	f4 fe       	sbrs	r15, 4
    3170:	0d c0       	rjmp	.+26     	; 0x318c <vfprintf+0x2f0>
    3172:	fe 01       	movw	r30, r28
    3174:	ed 0d       	add	r30, r13
    3176:	f1 1d       	adc	r31, r1
    3178:	80 81       	ld	r24, Z
    317a:	80 33       	cpi	r24, 0x30	; 48
    317c:	19 f4       	brne	.+6      	; 0x3184 <vfprintf+0x2e8>
    317e:	99 ee       	ldi	r25, 0xE9	; 233
    3180:	f9 22       	and	r15, r25
    3182:	08 c0       	rjmp	.+16     	; 0x3194 <vfprintf+0x2f8>
    3184:	1f 5f       	subi	r17, 0xFF	; 255
    3186:	f2 fe       	sbrs	r15, 2
    3188:	05 c0       	rjmp	.+10     	; 0x3194 <vfprintf+0x2f8>
    318a:	03 c0       	rjmp	.+6      	; 0x3192 <vfprintf+0x2f6>
    318c:	8f 2d       	mov	r24, r15
    318e:	86 78       	andi	r24, 0x86	; 134
    3190:	09 f0       	breq	.+2      	; 0x3194 <vfprintf+0x2f8>
    3192:	1f 5f       	subi	r17, 0xFF	; 255
    3194:	0f 2d       	mov	r16, r15
    3196:	f3 fc       	sbrc	r15, 3
    3198:	14 c0       	rjmp	.+40     	; 0x31c2 <vfprintf+0x326>
    319a:	f0 fe       	sbrs	r15, 0
    319c:	0f c0       	rjmp	.+30     	; 0x31bc <vfprintf+0x320>
    319e:	1e 15       	cp	r17, r14
    31a0:	10 f0       	brcs	.+4      	; 0x31a6 <vfprintf+0x30a>
    31a2:	9d 2c       	mov	r9, r13
    31a4:	0b c0       	rjmp	.+22     	; 0x31bc <vfprintf+0x320>
    31a6:	9d 2c       	mov	r9, r13
    31a8:	9e 0c       	add	r9, r14
    31aa:	91 1a       	sub	r9, r17
    31ac:	1e 2d       	mov	r17, r14
    31ae:	06 c0       	rjmp	.+12     	; 0x31bc <vfprintf+0x320>
    31b0:	80 e2       	ldi	r24, 0x20	; 32
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	b3 01       	movw	r22, r6
    31b6:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    31ba:	1f 5f       	subi	r17, 0xFF	; 255
    31bc:	1e 15       	cp	r17, r14
    31be:	c0 f3       	brcs	.-16     	; 0x31b0 <vfprintf+0x314>
    31c0:	04 c0       	rjmp	.+8      	; 0x31ca <vfprintf+0x32e>
    31c2:	1e 15       	cp	r17, r14
    31c4:	10 f4       	brcc	.+4      	; 0x31ca <vfprintf+0x32e>
    31c6:	e1 1a       	sub	r14, r17
    31c8:	01 c0       	rjmp	.+2      	; 0x31cc <vfprintf+0x330>
    31ca:	ee 24       	eor	r14, r14
    31cc:	04 ff       	sbrs	r16, 4
    31ce:	0f c0       	rjmp	.+30     	; 0x31ee <vfprintf+0x352>
    31d0:	80 e3       	ldi	r24, 0x30	; 48
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	b3 01       	movw	r22, r6
    31d6:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    31da:	02 ff       	sbrs	r16, 2
    31dc:	1d c0       	rjmp	.+58     	; 0x3218 <vfprintf+0x37c>
    31de:	01 fd       	sbrc	r16, 1
    31e0:	03 c0       	rjmp	.+6      	; 0x31e8 <vfprintf+0x34c>
    31e2:	88 e7       	ldi	r24, 0x78	; 120
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e c0       	rjmp	.+28     	; 0x3204 <vfprintf+0x368>
    31e8:	88 e5       	ldi	r24, 0x58	; 88
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0b c0       	rjmp	.+22     	; 0x3204 <vfprintf+0x368>
    31ee:	80 2f       	mov	r24, r16
    31f0:	86 78       	andi	r24, 0x86	; 134
    31f2:	91 f0       	breq	.+36     	; 0x3218 <vfprintf+0x37c>
    31f4:	01 ff       	sbrs	r16, 1
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <vfprintf+0x360>
    31f8:	8b e2       	ldi	r24, 0x2B	; 43
    31fa:	01 c0       	rjmp	.+2      	; 0x31fe <vfprintf+0x362>
    31fc:	80 e2       	ldi	r24, 0x20	; 32
    31fe:	f7 fc       	sbrc	r15, 7
    3200:	8d e2       	ldi	r24, 0x2D	; 45
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	b3 01       	movw	r22, r6
    3206:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    320a:	06 c0       	rjmp	.+12     	; 0x3218 <vfprintf+0x37c>
    320c:	80 e3       	ldi	r24, 0x30	; 48
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	b3 01       	movw	r22, r6
    3212:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    3216:	9a 94       	dec	r9
    3218:	d9 14       	cp	r13, r9
    321a:	c0 f3       	brcs	.-16     	; 0x320c <vfprintf+0x370>
    321c:	da 94       	dec	r13
    321e:	f1 01       	movw	r30, r2
    3220:	ed 0d       	add	r30, r13
    3222:	f1 1d       	adc	r31, r1
    3224:	80 81       	ld	r24, Z
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	b3 01       	movw	r22, r6
    322a:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    322e:	dd 20       	and	r13, r13
    3230:	a9 f7       	brne	.-22     	; 0x321c <vfprintf+0x380>
    3232:	06 c0       	rjmp	.+12     	; 0x3240 <vfprintf+0x3a4>
    3234:	80 e2       	ldi	r24, 0x20	; 32
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	b3 01       	movw	r22, r6
    323a:	0e 94 41 19 	call	0x3282	; 0x3282 <fputc>
    323e:	ea 94       	dec	r14
    3240:	ee 20       	and	r14, r14
    3242:	c1 f7       	brne	.-16     	; 0x3234 <vfprintf+0x398>
    3244:	43 ce       	rjmp	.-890    	; 0x2ecc <vfprintf+0x30>
    3246:	f3 01       	movw	r30, r6
    3248:	66 81       	ldd	r22, Z+6	; 0x06
    324a:	77 81       	ldd	r23, Z+7	; 0x07
    324c:	cb 01       	movw	r24, r22
    324e:	2b 96       	adiw	r28, 0x0b	; 11
    3250:	e2 e1       	ldi	r30, 0x12	; 18
    3252:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <__epilogue_restores__>

00003256 <strnlen_P>:
    3256:	fc 01       	movw	r30, r24
    3258:	05 90       	lpm	r0, Z+
    325a:	61 50       	subi	r22, 0x01	; 1
    325c:	70 40       	sbci	r23, 0x00	; 0
    325e:	01 10       	cpse	r0, r1
    3260:	d8 f7       	brcc	.-10     	; 0x3258 <strnlen_P+0x2>
    3262:	80 95       	com	r24
    3264:	90 95       	com	r25
    3266:	8e 0f       	add	r24, r30
    3268:	9f 1f       	adc	r25, r31
    326a:	08 95       	ret

0000326c <strnlen>:
    326c:	fc 01       	movw	r30, r24
    326e:	61 50       	subi	r22, 0x01	; 1
    3270:	70 40       	sbci	r23, 0x00	; 0
    3272:	01 90       	ld	r0, Z+
    3274:	01 10       	cpse	r0, r1
    3276:	d8 f7       	brcc	.-10     	; 0x326e <strnlen+0x2>
    3278:	80 95       	com	r24
    327a:	90 95       	com	r25
    327c:	8e 0f       	add	r24, r30
    327e:	9f 1f       	adc	r25, r31
    3280:	08 95       	ret

00003282 <fputc>:
    3282:	0f 93       	push	r16
    3284:	1f 93       	push	r17
    3286:	cf 93       	push	r28
    3288:	df 93       	push	r29
    328a:	8c 01       	movw	r16, r24
    328c:	eb 01       	movw	r28, r22
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	81 ff       	sbrs	r24, 1
    3292:	1b c0       	rjmp	.+54     	; 0x32ca <fputc+0x48>
    3294:	82 ff       	sbrs	r24, 2
    3296:	0d c0       	rjmp	.+26     	; 0x32b2 <fputc+0x30>
    3298:	2e 81       	ldd	r18, Y+6	; 0x06
    329a:	3f 81       	ldd	r19, Y+7	; 0x07
    329c:	8c 81       	ldd	r24, Y+4	; 0x04
    329e:	9d 81       	ldd	r25, Y+5	; 0x05
    32a0:	28 17       	cp	r18, r24
    32a2:	39 07       	cpc	r19, r25
    32a4:	64 f4       	brge	.+24     	; 0x32be <fputc+0x3c>
    32a6:	e8 81       	ld	r30, Y
    32a8:	f9 81       	ldd	r31, Y+1	; 0x01
    32aa:	01 93       	st	Z+, r16
    32ac:	f9 83       	std	Y+1, r31	; 0x01
    32ae:	e8 83       	st	Y, r30
    32b0:	06 c0       	rjmp	.+12     	; 0x32be <fputc+0x3c>
    32b2:	e8 85       	ldd	r30, Y+8	; 0x08
    32b4:	f9 85       	ldd	r31, Y+9	; 0x09
    32b6:	80 2f       	mov	r24, r16
    32b8:	19 95       	eicall
    32ba:	89 2b       	or	r24, r25
    32bc:	31 f4       	brne	.+12     	; 0x32ca <fputc+0x48>
    32be:	8e 81       	ldd	r24, Y+6	; 0x06
    32c0:	9f 81       	ldd	r25, Y+7	; 0x07
    32c2:	01 96       	adiw	r24, 0x01	; 1
    32c4:	9f 83       	std	Y+7, r25	; 0x07
    32c6:	8e 83       	std	Y+6, r24	; 0x06
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <fputc+0x4c>
    32ca:	0f ef       	ldi	r16, 0xFF	; 255
    32cc:	1f ef       	ldi	r17, 0xFF	; 255
    32ce:	c8 01       	movw	r24, r16
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	08 95       	ret

000032da <__ultoa_invert>:
    32da:	fa 01       	movw	r30, r20
    32dc:	aa 27       	eor	r26, r26
    32de:	28 30       	cpi	r18, 0x08	; 8
    32e0:	51 f1       	breq	.+84     	; 0x3336 <__ultoa_invert+0x5c>
    32e2:	20 31       	cpi	r18, 0x10	; 16
    32e4:	81 f1       	breq	.+96     	; 0x3346 <__ultoa_invert+0x6c>
    32e6:	e8 94       	clt
    32e8:	6f 93       	push	r22
    32ea:	6e 7f       	andi	r22, 0xFE	; 254
    32ec:	6e 5f       	subi	r22, 0xFE	; 254
    32ee:	7f 4f       	sbci	r23, 0xFF	; 255
    32f0:	8f 4f       	sbci	r24, 0xFF	; 255
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	af 4f       	sbci	r26, 0xFF	; 255
    32f6:	b1 e0       	ldi	r27, 0x01	; 1
    32f8:	3e d0       	rcall	.+124    	; 0x3376 <__ultoa_invert+0x9c>
    32fa:	b4 e0       	ldi	r27, 0x04	; 4
    32fc:	3c d0       	rcall	.+120    	; 0x3376 <__ultoa_invert+0x9c>
    32fe:	67 0f       	add	r22, r23
    3300:	78 1f       	adc	r23, r24
    3302:	89 1f       	adc	r24, r25
    3304:	9a 1f       	adc	r25, r26
    3306:	a1 1d       	adc	r26, r1
    3308:	68 0f       	add	r22, r24
    330a:	79 1f       	adc	r23, r25
    330c:	8a 1f       	adc	r24, r26
    330e:	91 1d       	adc	r25, r1
    3310:	a1 1d       	adc	r26, r1
    3312:	6a 0f       	add	r22, r26
    3314:	71 1d       	adc	r23, r1
    3316:	81 1d       	adc	r24, r1
    3318:	91 1d       	adc	r25, r1
    331a:	a1 1d       	adc	r26, r1
    331c:	20 d0       	rcall	.+64     	; 0x335e <__ultoa_invert+0x84>
    331e:	09 f4       	brne	.+2      	; 0x3322 <__ultoa_invert+0x48>
    3320:	68 94       	set
    3322:	3f 91       	pop	r19
    3324:	2a e0       	ldi	r18, 0x0A	; 10
    3326:	26 9f       	mul	r18, r22
    3328:	11 24       	eor	r1, r1
    332a:	30 19       	sub	r19, r0
    332c:	30 5d       	subi	r19, 0xD0	; 208
    332e:	31 93       	st	Z+, r19
    3330:	de f6       	brtc	.-74     	; 0x32e8 <__ultoa_invert+0xe>
    3332:	cf 01       	movw	r24, r30
    3334:	08 95       	ret
    3336:	46 2f       	mov	r20, r22
    3338:	47 70       	andi	r20, 0x07	; 7
    333a:	40 5d       	subi	r20, 0xD0	; 208
    333c:	41 93       	st	Z+, r20
    333e:	b3 e0       	ldi	r27, 0x03	; 3
    3340:	0f d0       	rcall	.+30     	; 0x3360 <__ultoa_invert+0x86>
    3342:	c9 f7       	brne	.-14     	; 0x3336 <__ultoa_invert+0x5c>
    3344:	f6 cf       	rjmp	.-20     	; 0x3332 <__ultoa_invert+0x58>
    3346:	46 2f       	mov	r20, r22
    3348:	4f 70       	andi	r20, 0x0F	; 15
    334a:	40 5d       	subi	r20, 0xD0	; 208
    334c:	4a 33       	cpi	r20, 0x3A	; 58
    334e:	18 f0       	brcs	.+6      	; 0x3356 <__ultoa_invert+0x7c>
    3350:	49 5d       	subi	r20, 0xD9	; 217
    3352:	31 fd       	sbrc	r19, 1
    3354:	40 52       	subi	r20, 0x20	; 32
    3356:	41 93       	st	Z+, r20
    3358:	02 d0       	rcall	.+4      	; 0x335e <__ultoa_invert+0x84>
    335a:	a9 f7       	brne	.-22     	; 0x3346 <__ultoa_invert+0x6c>
    335c:	ea cf       	rjmp	.-44     	; 0x3332 <__ultoa_invert+0x58>
    335e:	b4 e0       	ldi	r27, 0x04	; 4
    3360:	a6 95       	lsr	r26
    3362:	97 95       	ror	r25
    3364:	87 95       	ror	r24
    3366:	77 95       	ror	r23
    3368:	67 95       	ror	r22
    336a:	ba 95       	dec	r27
    336c:	c9 f7       	brne	.-14     	; 0x3360 <__ultoa_invert+0x86>
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	61 05       	cpc	r22, r1
    3372:	71 05       	cpc	r23, r1
    3374:	08 95       	ret
    3376:	9b 01       	movw	r18, r22
    3378:	ac 01       	movw	r20, r24
    337a:	0a 2e       	mov	r0, r26
    337c:	06 94       	lsr	r0
    337e:	57 95       	ror	r21
    3380:	47 95       	ror	r20
    3382:	37 95       	ror	r19
    3384:	27 95       	ror	r18
    3386:	ba 95       	dec	r27
    3388:	c9 f7       	brne	.-14     	; 0x337c <__ultoa_invert+0xa2>
    338a:	62 0f       	add	r22, r18
    338c:	73 1f       	adc	r23, r19
    338e:	84 1f       	adc	r24, r20
    3390:	95 1f       	adc	r25, r21
    3392:	a0 1d       	adc	r26, r0
    3394:	08 95       	ret

00003396 <__divmodhi4>:
    3396:	97 fb       	bst	r25, 7
    3398:	09 2e       	mov	r0, r25
    339a:	07 26       	eor	r0, r23
    339c:	0a d0       	rcall	.+20     	; 0x33b2 <__divmodhi4_neg1>
    339e:	77 fd       	sbrc	r23, 7
    33a0:	04 d0       	rcall	.+8      	; 0x33aa <__divmodhi4_neg2>
    33a2:	0c d0       	rcall	.+24     	; 0x33bc <__udivmodhi4>
    33a4:	06 d0       	rcall	.+12     	; 0x33b2 <__divmodhi4_neg1>
    33a6:	00 20       	and	r0, r0
    33a8:	1a f4       	brpl	.+6      	; 0x33b0 <__divmodhi4_exit>

000033aa <__divmodhi4_neg2>:
    33aa:	70 95       	com	r23
    33ac:	61 95       	neg	r22
    33ae:	7f 4f       	sbci	r23, 0xFF	; 255

000033b0 <__divmodhi4_exit>:
    33b0:	08 95       	ret

000033b2 <__divmodhi4_neg1>:
    33b2:	f6 f7       	brtc	.-4      	; 0x33b0 <__divmodhi4_exit>
    33b4:	90 95       	com	r25
    33b6:	81 95       	neg	r24
    33b8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ba:	08 95       	ret

000033bc <__udivmodhi4>:
    33bc:	aa 1b       	sub	r26, r26
    33be:	bb 1b       	sub	r27, r27
    33c0:	51 e1       	ldi	r21, 0x11	; 17
    33c2:	07 c0       	rjmp	.+14     	; 0x33d2 <__udivmodhi4_ep>

000033c4 <__udivmodhi4_loop>:
    33c4:	aa 1f       	adc	r26, r26
    33c6:	bb 1f       	adc	r27, r27
    33c8:	a6 17       	cp	r26, r22
    33ca:	b7 07       	cpc	r27, r23
    33cc:	10 f0       	brcs	.+4      	; 0x33d2 <__udivmodhi4_ep>
    33ce:	a6 1b       	sub	r26, r22
    33d0:	b7 0b       	sbc	r27, r23

000033d2 <__udivmodhi4_ep>:
    33d2:	88 1f       	adc	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	5a 95       	dec	r21
    33d8:	a9 f7       	brne	.-22     	; 0x33c4 <__udivmodhi4_loop>
    33da:	80 95       	com	r24
    33dc:	90 95       	com	r25
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	08 95       	ret

000033e4 <__prologue_saves__>:
    33e4:	2f 92       	push	r2
    33e6:	3f 92       	push	r3
    33e8:	4f 92       	push	r4
    33ea:	5f 92       	push	r5
    33ec:	6f 92       	push	r6
    33ee:	7f 92       	push	r7
    33f0:	8f 92       	push	r8
    33f2:	9f 92       	push	r9
    33f4:	af 92       	push	r10
    33f6:	bf 92       	push	r11
    33f8:	cf 92       	push	r12
    33fa:	df 92       	push	r13
    33fc:	ef 92       	push	r14
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	ca 1b       	sub	r28, r26
    340e:	db 0b       	sbc	r29, r27
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	19 94       	eijmp

0000341c <__epilogue_restores__>:
    341c:	2a 88       	ldd	r2, Y+18	; 0x12
    341e:	39 88       	ldd	r3, Y+17	; 0x11
    3420:	48 88       	ldd	r4, Y+16	; 0x10
    3422:	5f 84       	ldd	r5, Y+15	; 0x0f
    3424:	6e 84       	ldd	r6, Y+14	; 0x0e
    3426:	7d 84       	ldd	r7, Y+13	; 0x0d
    3428:	8c 84       	ldd	r8, Y+12	; 0x0c
    342a:	9b 84       	ldd	r9, Y+11	; 0x0b
    342c:	aa 84       	ldd	r10, Y+10	; 0x0a
    342e:	b9 84       	ldd	r11, Y+9	; 0x09
    3430:	c8 84       	ldd	r12, Y+8	; 0x08
    3432:	df 80       	ldd	r13, Y+7	; 0x07
    3434:	ee 80       	ldd	r14, Y+6	; 0x06
    3436:	fd 80       	ldd	r15, Y+5	; 0x05
    3438:	0c 81       	ldd	r16, Y+4	; 0x04
    343a:	1b 81       	ldd	r17, Y+3	; 0x03
    343c:	aa 81       	ldd	r26, Y+2	; 0x02
    343e:	b9 81       	ldd	r27, Y+1	; 0x01
    3440:	ce 0f       	add	r28, r30
    3442:	d1 1d       	adc	r29, r1
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	ed 01       	movw	r28, r26
    3450:	08 95       	ret
