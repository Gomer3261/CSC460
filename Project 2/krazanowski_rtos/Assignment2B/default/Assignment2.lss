
Assignment2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800200  00003520  000035b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000013df  00800394  00800394  00003748  2**0
                  ALLOC
  3 .debug_aranges 00000188  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ad2  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000356d  00000000  00000000  000043a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010ba  00000000  00000000  0000790f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002703  00000000  00000000  000089c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000680  00000000  00000000  0000b0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000160f  00000000  00000000  0000b74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ed8  00000000  00000000  0000cd5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  0000dc33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 * Any interrupt ISR definition in the C code will
 * overwrite these default definitions.
 */
void __vectors (void) __attribute__ ((naked)) __attribute__ ((section (".vectors")));
void __vectors (void)
{
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <init2>
    asm("jmp        __init\n"::);

    vector("__vector_1");
       4:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_1>
    vector("__vector_2");
       8:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_3");
       c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_4");
      10:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_5");
      14:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_6");
      18:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_7");
      1c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_8");
      20:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_9");
      24:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_10");
      28:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_11");
      2c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_12");
      30:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_13");
      34:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_14");
      38:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_15");
      3c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_16");
      40:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_17");
      44:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_17>
    vector("__vector_18");
      48:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_19");
      4c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_20");
      50:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_21");
      54:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_22");
      58:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_23");
      5c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_24");
      60:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_25");
      64:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__vector_25>
    vector("__vector_26");
      68:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_27");
      6c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_28");
      70:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_29");
      74:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_30");
      78:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_31");
      7c:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__vector_31>
    vector("__vector_32");
      80:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_33");
      84:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_34");
      88:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_35");
      8c:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_36");
      90:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>
    vector("__vector_37");
      94:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_not_set>

00000098 <init2>:
}
      98:	11 24       	eor	r1, r1
void init2 (void) __attribute__ ((naked)) __attribute__ ((section (".init2")));
void init2 (void)
{
    asm("clr   " zero_reg "\n\t"::);

    SREG = 0;
      9a:	1f be       	out	0x3f, r1	; 63
    SP = RAMEND;
      9c:	8f ef       	ldi	r24, 0xFF	; 255
      9e:	91 e2       	ldi	r25, 0x21	; 33
      a0:	9e bf       	out	0x3e, r25	; 62
      a2:	8d bf       	out	0x3d, r24	; 61

000000a4 <__do_copy_data>:
}
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b2 e0       	ldi	r27, 0x02	; 2
      aa:	e0 e2       	ldi	r30, 0x20	; 32
      ac:	f5 e3       	ldi	r31, 0x35	; 53
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a4 39       	cpi	r26, 0x94	; 148
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	17 e1       	ldi	r17, 0x17	; 23
      c0:	a4 e9       	ldi	r26, 0x94	; 148
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a3 37       	cpi	r26, 0x73	; 115
      ca:	b1 07       	cpc	r27, r17
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>

000000ce <init9>:
 * The last of the init functions.
 * Usually this would be the jump to "main()"
 */
void init9 (void) __attribute__ ((naked)) __attribute__ ((section (".init9")));
void init9 (void)
{
      ce:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <OS_Init>
      d2:	ff cf       	rjmp	.-2      	; 0xd2 <init9+0x4>

000000d4 <main>:
		Task_Next();
	}
}

int main(void)
{
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
	clock8MHz();
      d8:	e1 e6       	ldi	r30, 0x61	; 97
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 e8       	ldi	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
      e0:	10 82       	st	Z, r1

	#if PROFILECODE
	InitializeLogicAnalyzerProfiler();
      e2:	87 b1       	in	r24, 0x07	; 7
      e4:	8f ef       	ldi	r24, 0xFF	; 255
      e6:	87 b9       	out	0x07, r24	; 7
	#endif

    // Set up the UART
	uart_init(UART_38400);
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 cc 10 	call	0x2198	; 0x2198 <uart_init>
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "HELLO WORLD: starts echoing\n\r");
      ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x1c>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <main+0x1e>
      f2:	ed b7       	in	r30, 0x3d	; 61
      f4:	fe b7       	in	r31, 0x3e	; 62
      f6:	31 96       	adiw	r30, 0x01	; 1
      f8:	0a ed       	ldi	r16, 0xDA	; 218
      fa:	16 e1       	ldi	r17, 0x16	; 22
      fc:	ad b7       	in	r26, 0x3d	; 61
      fe:	be b7       	in	r27, 0x3e	; 62
     100:	12 96       	adiw	r26, 0x02	; 2
     102:	1c 93       	st	X, r17
     104:	0e 93       	st	-X, r16
     106:	11 97       	sbiw	r26, 0x01	; 1
     108:	81 e5       	ldi	r24, 0x51	; 81
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	93 83       	std	Z+3, r25	; 0x03
     10e:	82 83       	std	Z+2, r24	; 0x02
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	92 e0       	ldi	r25, 0x02	; 2
     114:	95 83       	std	Z+5, r25	; 0x05
     116:	84 83       	std	Z+4, r24	; 0x04
     118:	0e 94 84 17 	call	0x2f08	; 0x2f08 <snprintf>
	uart_putstr(ASS_UART_BUFF);
     11c:	8d b7       	in	r24, 0x3d	; 61
     11e:	9e b7       	in	r25, 0x3e	; 62
     120:	06 96       	adiw	r24, 0x06	; 6
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	f8 94       	cli
     126:	9e bf       	out	0x3e, r25	; 62
     128:	0f be       	out	0x3f, r0	; 63
     12a:	8d bf       	out	0x3d, r24	; 61
     12c:	c8 01       	movw	r24, r16
     12e:	0e 94 bd 10 	call	0x217a	; 0x217a <uart_putstr>

	state_complete_event = Event_Init();
     132:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     136:	90 93 c5 16 	sts	0x16C5, r25
     13a:	80 93 c4 16 	sts	0x16C4, r24
	task_init_event = Event_Init();
     13e:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     142:	90 93 c1 16 	sts	0x16C1, r25
     146:	80 93 c0 16 	sts	0x16C0, r24
    task_sweep_event = Event_Init();
     14a:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     14e:	90 93 37 17 	sts	0x1737, r25
     152:	80 93 36 17 	sts	0x1736, r24
	task_request_event = Event_Init();
     156:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     15a:	90 93 40 17 	sts	0x1740, r25
     15e:	80 93 3f 17 	sts	0x173F, r24
	task_ping_event = Event_Init();
     162:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     166:	90 93 c3 16 	sts	0x16C3, r25
     16a:	80 93 c2 16 	sts	0x16C2, r24
	task_sonar_event = Event_Init();
     16e:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     172:	90 93 bf 16 	sts	0x16BF, r25
     176:	80 93 be 16 	sts	0x16BE, r24
	task_statistics_event = Event_Init();
     17a:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     17e:	90 93 3b 17 	sts	0x173B, r25
     182:	80 93 3a 17 	sts	0x173A, r24
	task_report_event = Event_Init();
     186:	0e 94 4d 10 	call	0x209a	; 0x209a <Event_Init>
     18a:	90 93 d9 16 	sts	0x16D9, r25
     18e:	80 93 d8 16 	sts	0x16D8, r24

	// 0 == undefined
	CurrentActiveState = LOCALIZATIONSTATE_Initialization;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	90 93 39 17 	sts	0x1739, r25
     19a:	80 93 38 17 	sts	0x1738, r24
	  
	Task_Create( Ass2_StateMachine, 100, RR, 0); 
     19e:	84 e2       	ldi	r24, 0x24	; 36
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	64 e6       	ldi	r22, 0x64	; 100
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	41 e0       	ldi	r20, 0x01	; 1
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
	Task_Create( Ass2_Task_Initialization, LOCALIZATIONSTATE_Initialization, SYSTEM, LOCALIZATIONSTATE_Initialization); 
     1b2:	80 e5       	ldi	r24, 0x50	; 80
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	43 e0       	ldi	r20, 0x03	; 3
     1bc:	50 e0       	ldi	r21, 0x00	; 0
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
	Task_Create( Ass2_Task_UpdateSweep, LOCALIZATIONSTATE_UpdateSweep, RR, LOCALIZATIONSTATE_UpdateSweep); 
     1c6:	8d e2       	ldi	r24, 0x2D	; 45
     1c8:	92 e0       	ldi	r25, 0x02	; 2
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	41 e0       	ldi	r20, 0x01	; 1
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	22 e0       	ldi	r18, 0x02	; 2
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
	Task_Create( Ass2_Task_SendRequest, LOCALIZATIONSTATE_SendRequest, RR, LOCALIZATIONSTATE_SendRequest);
     1da:	8a e0       	ldi	r24, 0x0A	; 10
     1dc:	92 e0       	ldi	r25, 0x02	; 2
     1de:	63 e0       	ldi	r22, 0x03	; 3
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	23 e0       	ldi	r18, 0x03	; 3
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
	Task_Create( Ass2_Task_GetPINGResponse, LOCALIZATIONSTATE_GetPINGResponse, RR, LOCALIZATIONSTATE_GetPINGResponse);
     1ee:	87 ee       	ldi	r24, 0xE7	; 231
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	64 e0       	ldi	r22, 0x04	; 4
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	24 e0       	ldi	r18, 0x04	; 4
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
	Task_Create( Ass2_Task_GetSonarResponse, LOCALIZATIONSTATE_GetSonarResponse, RR, LOCALIZATIONSTATE_GetSonarResponse);
     202:	84 ec       	ldi	r24, 0xC4	; 196
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	65 e0       	ldi	r22, 0x05	; 5
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	25 e0       	ldi	r18, 0x05	; 5
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
	Task_Create( Ass2_Task_UpdateStatistics, LOCALIZATIONSTATE_UpdateStatistics, RR, LOCALIZATIONSTATE_UpdateStatistics);
     216:	81 ea       	ldi	r24, 0xA1	; 161
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	66 e0       	ldi	r22, 0x06	; 6
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	26 e0       	ldi	r18, 0x06	; 6
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
	Task_Create( Ass2_Task_CalculateAndReport, LOCALIZATIONSTATE_CalcaulateResults, SYSTEM, LOCALIZATIONSTATE_CalcaulateResults); 
     22a:	86 e8       	ldi	r24, 0x86	; 134
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	67 e0       	ldi	r22, 0x07	; 7
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	43 e0       	ldi	r20, 0x03	; 3
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	27 e0       	ldi	r18, 0x07	; 7
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	0e 94 07 10 	call	0x200e	; 0x200e <Task_Create>
}
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	08 95       	ret

00000248 <Ass2_StateMachine>:
		#endif	
	}
}

void Ass2_StateMachine()
{
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     254:	09 e1       	ldi	r16, 0x19	; 25
     256:	10 e0       	ldi	r17, 0x00	; 0
	// of this assignment (2).
	const int TICKSCALAR = 5;

	for(;;)
	{
		switch( CurrentActiveState )
     258:	80 e5       	ldi	r24, 0x50	; 80
     25a:	e8 2e       	mov	r14, r24
     25c:	83 ec       	ldi	r24, 0xC3	; 195
     25e:	f8 2e       	mov	r15, r24
     260:	c4 ed       	ldi	r28, 0xD4	; 212
     262:	d0 e3       	ldi	r29, 0x30	; 48
     264:	80 91 38 17 	lds	r24, 0x1738
     268:	90 91 39 17 	lds	r25, 0x1739
     26c:	83 30       	cpi	r24, 0x03	; 3
     26e:	91 05       	cpc	r25, r1
     270:	29 f1       	breq	.+74     	; 0x2bc <Ass2_StateMachine+0x74>
     272:	84 30       	cpi	r24, 0x04	; 4
     274:	91 05       	cpc	r25, r1
     276:	3c f4       	brge	.+14     	; 0x286 <Ass2_StateMachine+0x3e>
     278:	81 30       	cpi	r24, 0x01	; 1
     27a:	91 05       	cpc	r25, r1
     27c:	71 f0       	breq	.+28     	; 0x29a <Ass2_StateMachine+0x52>
     27e:	02 97       	sbiw	r24, 0x02	; 2
     280:	09 f0       	breq	.+2      	; 0x284 <Ass2_StateMachine+0x3c>
     282:	41 c0       	rjmp	.+130    	; 0x306 <Ass2_StateMachine+0xbe>
     284:	0f c0       	rjmp	.+30     	; 0x2a4 <Ass2_StateMachine+0x5c>
     286:	85 30       	cpi	r24, 0x05	; 5
     288:	91 05       	cpc	r25, r1
     28a:	61 f1       	breq	.+88     	; 0x2e4 <Ass2_StateMachine+0x9c>
     28c:	85 30       	cpi	r24, 0x05	; 5
     28e:	91 05       	cpc	r25, r1
     290:	0c f1       	brlt	.+66     	; 0x2d4 <Ass2_StateMachine+0x8c>
     292:	06 97       	sbiw	r24, 0x06	; 6
     294:	09 f0       	breq	.+2      	; 0x298 <Ass2_StateMachine+0x50>
     296:	37 c0       	rjmp	.+110    	; 0x306 <Ass2_StateMachine+0xbe>
     298:	2d c0       	rjmp	.+90     	; 0x2f4 <Ass2_StateMachine+0xac>
		{
			case LOCALIZATIONSTATE_Initialization:
				Event_Signal( task_init_event );
     29a:	80 91 c0 16 	lds	r24, 0x16C0
     29e:	90 91 c1 16 	lds	r25, 0x16C1
     2a2:	2f c0       	rjmp	.+94     	; 0x302 <Ass2_StateMachine+0xba>
				break;
     2a4:	80 e1       	ldi	r24, 0x10	; 16
     2a6:	97 e2       	ldi	r25, 0x27	; 39
     2a8:	f8 01       	movw	r30, r16
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <Ass2_StateMachine+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b0:	d9 f7       	brne	.-10     	; 0x2a8 <Ass2_StateMachine+0x60>
			case LOCALIZATIONSTATE_UpdateSweep:
				// Delay required to allow initialization to 
				// settle before everything continues
				_delay_ms( 200 * TICKSCALAR );	
				Event_Signal( task_sweep_event );
     2b2:	80 91 36 17 	lds	r24, 0x1736
     2b6:	90 91 37 17 	lds	r25, 0x1737
     2ba:	23 c0       	rjmp	.+70     	; 0x302 <Ass2_StateMachine+0xba>
				break;
     2bc:	88 e5       	ldi	r24, 0x58	; 88
     2be:	9b e1       	ldi	r25, 0x1B	; 27
     2c0:	f8 01       	movw	r30, r16
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <Ass2_StateMachine+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <Ass2_StateMachine+0x78>
			case LOCALIZATIONSTATE_SendRequest:
				// Delay required to allow servo to finish 
				// moving.  I gave 140ms delay in other implementations.
				_delay_ms( 140*TICKSCALAR );
				Event_Signal( task_request_event );
     2ca:	80 91 3f 17 	lds	r24, 0x173F
     2ce:	90 91 40 17 	lds	r25, 0x1740
     2d2:	17 c0       	rjmp	.+46     	; 0x302 <Ass2_StateMachine+0xba>
     2d4:	ce 01       	movw	r24, r28
     2d6:	01 97       	sbiw	r24, 0x01	; 1
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <Ass2_StateMachine+0x8e>
				break;
			case LOCALIZATIONSTATE_GetPINGResponse:
				// Radio response delay
				_delay_ms( 10*TICKSCALAR );
				Event_Signal( task_ping_event );
     2da:	80 91 c2 16 	lds	r24, 0x16C2
     2de:	90 91 c3 16 	lds	r25, 0x16C3
     2e2:	0f c0       	rjmp	.+30     	; 0x302 <Ass2_StateMachine+0xba>
     2e4:	c7 01       	movw	r24, r14
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <Ass2_StateMachine+0x9e>
				break;
			case LOCALIZATIONSTATE_GetSonarResponse:
				// The sonar transceiver claims a 36ms max timeout
				// for a sonic ping response.  
				_delay_ms( 40*TICKSCALAR );
				Event_Signal( task_sonar_event );
     2ea:	80 91 be 16 	lds	r24, 0x16BE
     2ee:	90 91 bf 16 	lds	r25, 0x16BF
     2f2:	07 c0       	rjmp	.+14     	; 0x302 <Ass2_StateMachine+0xba>
     2f4:	ce 01       	movw	r24, r28
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <Ass2_StateMachine+0xae>
				break;
			case LOCALIZATIONSTATE_UpdateStatistics:
				// Just to keep it consistent with other implementations.  
				_delay_ms( 10*TICKSCALAR );
				Event_Signal( task_statistics_event );
     2fa:	80 91 3a 17 	lds	r24, 0x173A
     2fe:	90 91 3b 17 	lds	r25, 0x173B
     302:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Event_Signal>
				break;

		};

		// Yield till the active state is done
		Task_Next();
     306:	0e 94 23 10 	call	0x2046	; 0x2046 <Task_Next>
     30a:	ac cf       	rjmp	.-168    	; 0x264 <Ass2_StateMachine+0x1c>

0000030c <Ass2_Task_CalculateAndReport>:
		CurrentActiveState = LOCALIZATIONSTATE_UpdateSweep;
	}
}

void Ass2_Task_CalculateAndReport()
{
     30c:	df 93       	push	r29
     30e:	cf 93       	push	r28
     310:	0f 92       	push	r0
     312:	0f 92       	push	r0
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
    {
		// Hand control back to the state machine
		// Event_Signal(state_complete_event);

		// Wait till this state is signal'd
		Event_Wait(task_report_event);
     318:	80 91 d8 16 	lds	r24, 0x16D8
     31c:	90 91 d9 16 	lds	r25, 0x16D9
     320:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Event_Wait>

		#if PROFILECODE && PROFILE_STATES
		Profile7();
     324:	46 9a       	sbi	0x08, 6	; 8
     326:	1a 82       	std	Y+2, r1	; 0x02
     328:	19 82       	std	Y+1, r1	; 0x01
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	9a 83       	std	Y+2, r25	; 0x02
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	9a 81       	ldd	r25, Y+2	; 0x02
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	9a 83       	std	Y+2, r25	; 0x02
     33c:	89 83       	std	Y+1, r24	; 0x01
     33e:	46 98       	cbi	0x08, 6	; 8
     340:	eb cf       	rjmp	.-42     	; 0x318 <Ass2_Task_CalculateAndReport+0xc>

00000342 <Ass2_Task_UpdateStatistics>:
		}
	}
}

void Ass2_Task_UpdateStatistics()
{
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	0f 92       	push	r0
     34c:	0f 92       	push	r0
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
		#if PROFILECODE && PROFILE_STATES
		Profile6();
		#endif
	
		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_UpdateSweep;
     352:	02 e0       	ldi	r16, 0x02	; 2
     354:	10 e0       	ldi	r17, 0x00	; 0
    {
		// Hand control back to the state machine
		// Event_Signal(state_complete_event);

		// Wait till this state is signal'd
		Event_Wait(task_statistics_event);
     356:	80 91 3a 17 	lds	r24, 0x173A
     35a:	90 91 3b 17 	lds	r25, 0x173B
     35e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Event_Wait>

		#if PROFILECODE && PROFILE_STATES
		Profile6();
     362:	45 9a       	sbi	0x08, 5	; 8
     364:	1a 82       	std	Y+2, r1	; 0x02
     366:	19 82       	std	Y+1, r1	; 0x01
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	9a 81       	ldd	r25, Y+2	; 0x02
     36c:	01 96       	adiw	r24, 0x01	; 1
     36e:	9a 83       	std	Y+2, r25	; 0x02
     370:	89 83       	std	Y+1, r24	; 0x01
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	9a 83       	std	Y+2, r25	; 0x02
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	45 98       	cbi	0x08, 5	; 8
		#endif
	
		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_UpdateSweep;
     37e:	10 93 39 17 	sts	0x1739, r17
     382:	00 93 38 17 	sts	0x1738, r16
     386:	e7 cf       	rjmp	.-50     	; 0x356 <Ass2_Task_UpdateStatistics+0x14>

00000388 <Ass2_Task_GetSonarResponse>:
		}
	}
}

void Ass2_Task_GetSonarResponse()
{
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	0f 92       	push	r0
     392:	0f 92       	push	r0
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
		#if PROFILECODE && PROFILE_STATES
		Profile5();
		#endif

		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_UpdateStatistics;
     398:	06 e0       	ldi	r16, 0x06	; 6
     39a:	10 e0       	ldi	r17, 0x00	; 0
    {
		// Hand control back to the state machine
		// Event_Signal(state_complete_event);

		// Wait till this state is signal'd
		Event_Wait(task_sonar_event);
     39c:	80 91 be 16 	lds	r24, 0x16BE
     3a0:	90 91 bf 16 	lds	r25, 0x16BF
     3a4:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Event_Wait>

		#if PROFILECODE && PROFILE_STATES
		Profile5();
     3a8:	44 9a       	sbi	0x08, 4	; 8
     3aa:	1a 82       	std	Y+2, r1	; 0x02
     3ac:	19 82       	std	Y+1, r1	; 0x01
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	9a 81       	ldd	r25, Y+2	; 0x02
     3b2:	01 96       	adiw	r24, 0x01	; 1
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	01 96       	adiw	r24, 0x01	; 1
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	44 98       	cbi	0x08, 4	; 8
		#endif

		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_UpdateStatistics;
     3c4:	10 93 39 17 	sts	0x1739, r17
     3c8:	00 93 38 17 	sts	0x1738, r16
     3cc:	e7 cf       	rjmp	.-50     	; 0x39c <Ass2_Task_GetSonarResponse+0x14>

000003ce <Ass2_Task_GetPINGResponse>:
		CurrentActiveState = LOCALIZATIONSTATE_GetPINGResponse;
	}
}

void Ass2_Task_GetPINGResponse()
{
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	0f 92       	push	r0
     3d8:	0f 92       	push	r0
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
		#if PROFILECODE && PROFILE_STATES
		Profile4();
		#endif	

		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_GetSonarResponse;
     3de:	05 e0       	ldi	r16, 0x05	; 5
     3e0:	10 e0       	ldi	r17, 0x00	; 0
    {
		// Hand control back to the state machine
		// Event_Signal(state_complete_event);

		// Wait till this state is signal'd
		Event_Wait(task_ping_event);
     3e2:	80 91 c2 16 	lds	r24, 0x16C2
     3e6:	90 91 c3 16 	lds	r25, 0x16C3
     3ea:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Event_Wait>

		#if PROFILECODE && PROFILE_STATES
		Profile4();
     3ee:	43 9a       	sbi	0x08, 3	; 8
     3f0:	1a 82       	std	Y+2, r1	; 0x02
     3f2:	19 82       	std	Y+1, r1	; 0x01
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	9a 81       	ldd	r25, Y+2	; 0x02
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	9a 83       	std	Y+2, r25	; 0x02
     406:	89 83       	std	Y+1, r24	; 0x01
     408:	43 98       	cbi	0x08, 3	; 8
		#endif	

		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_GetSonarResponse;
     40a:	10 93 39 17 	sts	0x1739, r17
     40e:	00 93 38 17 	sts	0x1738, r16
     412:	e7 cf       	rjmp	.-50     	; 0x3e2 <Ass2_Task_GetPINGResponse+0x14>

00000414 <Ass2_Task_SendRequest>:
		}
	}
}

void Ass2_Task_SendRequest()
{
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	0f 92       	push	r0
     41e:	0f 92       	push	r0
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
		#if PROFILECODE && PROFILE_STATES
		Profile3();
		#endif
	
		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_GetPINGResponse;
     424:	04 e0       	ldi	r16, 0x04	; 4
     426:	10 e0       	ldi	r17, 0x00	; 0
    {
		// Hand control back to the state machine
		// Event_Signal(state_complete_event);

		// Wait till this state is signal'd
		Event_Wait(task_request_event);
     428:	80 91 3f 17 	lds	r24, 0x173F
     42c:	90 91 40 17 	lds	r25, 0x1740
     430:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Event_Wait>

		#if PROFILECODE && PROFILE_STATES
		Profile3();
     434:	42 9a       	sbi	0x08, 2	; 8
     436:	1a 82       	std	Y+2, r1	; 0x02
     438:	19 82       	std	Y+1, r1	; 0x01
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	9a 83       	std	Y+2, r25	; 0x02
     442:	89 83       	std	Y+1, r24	; 0x01
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	9a 83       	std	Y+2, r25	; 0x02
     44c:	89 83       	std	Y+1, r24	; 0x01
     44e:	42 98       	cbi	0x08, 2	; 8
		#endif
	
		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_GetPINGResponse;
     450:	10 93 39 17 	sts	0x1739, r17
     454:	00 93 38 17 	sts	0x1738, r16
     458:	e7 cf       	rjmp	.-50     	; 0x428 <Ass2_Task_SendRequest+0x14>

0000045a <Ass2_Task_UpdateSweep>:
		CurrentActiveState = LOCALIZATIONSTATE_UpdateSweep;
	}
}

void Ass2_Task_UpdateSweep()
{
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	0f 92       	push	r0
     464:	0f 92       	push	r0
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
		#if PROFILECODE && PROFILE_STATES
		Profile2();
		#endif
	
		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_SendRequest;
     46a:	03 e0       	ldi	r16, 0x03	; 3
     46c:	10 e0       	ldi	r17, 0x00	; 0
    {
		// Hand control back to the state machine
		// Event_Signal(state_complete_event);

		// Wait till this state is signal'd
		Event_Wait(task_sweep_event);
     46e:	80 91 36 17 	lds	r24, 0x1736
     472:	90 91 37 17 	lds	r25, 0x1737
     476:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Event_Wait>

		#if PROFILECODE && PROFILE_STATES
		Profile2();
     47a:	41 9a       	sbi	0x08, 1	; 8
     47c:	1a 82       	std	Y+2, r1	; 0x02
     47e:	19 82       	std	Y+1, r1	; 0x01
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	9a 83       	std	Y+2, r25	; 0x02
     488:	89 83       	std	Y+1, r24	; 0x01
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	9a 81       	ldd	r25, Y+2	; 0x02
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	9a 83       	std	Y+2, r25	; 0x02
     492:	89 83       	std	Y+1, r24	; 0x01
     494:	41 98       	cbi	0x08, 1	; 8
		#endif
	
		#if SIMPLESTATES
		CurrentActiveState = LOCALIZATIONSTATE_SendRequest;
     496:	10 93 39 17 	sts	0x1739, r17
     49a:	00 93 38 17 	sts	0x1738, r16
     49e:	e7 cf       	rjmp	.-50     	; 0x46e <Ass2_Task_UpdateSweep+0x14>

000004a0 <Ass2_Task_Initialization>:
EVENT* task_statistics_event;
EVENT* task_report_event;


void Ass2_Task_Initialization()
{
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
		#if PROFILECODE && PROFILE_STATES
		DisableProfileSample1();
		#endif

		// Request to move to the sweep state
		CurrentActiveState = LOCALIZATIONSTATE_UpdateSweep;
     4a6:	c2 e0       	ldi	r28, 0x02	; 2
     4a8:	d0 e0       	ldi	r29, 0x00	; 0
    {
		// Hand control back to the state machine
		// Event_Signal(state_complete_event);

		// Wait till this state is signal'd
		Event_Wait(task_init_event);
     4aa:	80 91 c0 16 	lds	r24, 0x16C0
     4ae:	90 91 c1 16 	lds	r25, 0x16C1
     4b2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <Event_Wait>

		#if PROFILECODE && PROFILE_STATES
		EnableProfileSample1();
     4b6:	40 9a       	sbi	0x08, 0	; 8
		#endif

		int sreg = SREG;
     4b8:	1f b7       	in	r17, 0x3f	; 63
		cli();
     4ba:	f8 94       	cli
		InitializeServoController( &SonarDirectionServo );
		InitializeCommunication( station_addr, remote_addr );
		StatisticsInitialize();
		#endif

		ServoStartSweep();
     4bc:	0e 94 43 04 	call	0x886	; 0x886 <ServoStartSweep>
		SweepComplete = 0;
     4c0:	10 92 99 03 	sts	0x0399, r1
     4c4:	10 92 98 03 	sts	0x0398, r1
	
		SREG = sreg;
     4c8:	1f bf       	out	0x3f, r17	; 63

		#if PROFILECODE && PROFILE_STATES
		DisableProfileSample1();
     4ca:	40 98       	cbi	0x08, 0	; 8
		#endif

		// Request to move to the sweep state
		CurrentActiveState = LOCALIZATIONSTATE_UpdateSweep;
     4cc:	d0 93 39 17 	sts	0x1739, r29
     4d0:	c0 93 38 17 	sts	0x1738, r28
     4d4:	ea cf       	rjmp	.-44     	; 0x4aa <Ass2_Task_Initialization+0xa>

000004d6 <ResetMessageClock>:

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     4d6:	10 92 9b 03 	sts	0x039B, r1
     4da:	10 92 9a 03 	sts	0x039A, r1

	// Reset the hardware clock
}
     4de:	08 95       	ret

000004e0 <GetMessageClock>:

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     4e0:	20 91 9a 03 	lds	r18, 0x039A
     4e4:	30 91 9b 03 	lds	r19, 0x039B
}
     4e8:	c9 01       	movw	r24, r18
     4ea:	08 95       	ret

000004ec <CommunicationPINGTimeout>:
{
	#if PROFILECODE && PROFILE_AVR 
	DisableProfileSample1();  // Needs to be disabled in the call
	#endif

	if( 0 == PINGReceivedFlag )
     4ec:	80 91 6d 17 	lds	r24, 0x176D
     4f0:	88 23       	and	r24, r24
     4f2:	19 f0       	breq	.+6      	; 0x4fa <CommunicationPINGTimeout+0xe>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <CommunicationPINGTimeout+0x24>

uint16_t GetMessageClock()
{
	// Get the hardware clock

	return message_clock;
     4fa:	80 91 9a 03 	lds	r24, 0x039A
     4fe:	90 91 9b 03 	lds	r25, 0x039B
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	81 52       	subi	r24, 0x21	; 33
     508:	9e 44       	sbci	r25, 0x4E	; 78
     50a:	10 f0       	brcs	.+4      	; 0x510 <CommunicationPINGTimeout+0x24>
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	30 e0       	ldi	r19, 0x00	; 0
			return 1;
		}
	}
	  
	return 0;  /// Currently wait indefinately, todo: add a timeout
}
     510:	c9 01       	movw	r24, r18
     512:	08 95       	ret

00000514 <CommunicationPingResetRetryCount>:

void CommunicationPingResetRetryCount()
{
	TimeoutCounter = 0;
     514:	10 92 6f 17 	sts	0x176F, r1
     518:	10 92 6e 17 	sts	0x176E, r1
}
     51c:	08 95       	ret

0000051e <CommunicationPingUpdateRetryCount>:

#define PINGRETRYCOUNT 0

int CommunicationPingUpdateRetryCount()
{
	if( TimeoutCounter<=PINGRETRYCOUNT )
     51e:	80 91 6e 17 	lds	r24, 0x176E
     522:	90 91 6f 17 	lds	r25, 0x176F
     526:	18 16       	cp	r1, r24
     528:	19 06       	cpc	r1, r25
     52a:	1c f4       	brge	.+6      	; 0x532 <CommunicationPingUpdateRetryCount+0x14>
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	0b c0       	rjmp	.+22     	; 0x548 <CommunicationPingUpdateRetryCount+0x2a>
	{
		TimeoutCounter++;
     532:	80 91 6e 17 	lds	r24, 0x176E
     536:	90 91 6f 17 	lds	r25, 0x176F
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	90 93 6f 17 	sts	0x176F, r25
     540:	80 93 6e 17 	sts	0x176E, r24
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
		return 0;
	}

	return 1;
}
     548:	c9 01       	movw	r24, r18
     54a:	08 95       	ret

0000054c <radio_rxhandler>:
{
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample8();
	#endif

	PINGReceivedFlag = 1;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	80 93 6d 17 	sts	0x176D, r24
	SONARReceivedFlag = 0;
     552:	10 92 61 17 	sts	0x1761, r1

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     556:	10 92 9b 03 	sts	0x039B, r1
     55a:	10 92 9a 03 	sts	0x039A, r1
	ResetMessageClock();

	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample8();
	#endif
}
     55e:	08 95       	ret

00000560 <CommunicationReportDistance>:
	uart_putstr(ASS_UART_BUFF);
	#endif
}

void CommunicationReportDistance( CommunicationStatStruct *CommStat )
{
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	0f 92       	push	r0
     572:	0f 92       	push	r0
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
	Profile8();
     578:	47 9a       	sbi	0x08, 7	; 8
     57a:	1a 82       	std	Y+2, r1	; 0x02
     57c:	19 82       	std	Y+1, r1	; 0x01
     57e:	29 81       	ldd	r18, Y+1	; 0x01
     580:	3a 81       	ldd	r19, Y+2	; 0x02
     582:	2f 5f       	subi	r18, 0xFF	; 255
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	3a 83       	std	Y+2, r19	; 0x02
     588:	29 83       	std	Y+1, r18	; 0x01
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	3a 81       	ldd	r19, Y+2	; 0x02
     58e:	2f 5f       	subi	r18, 0xFF	; 255
     590:	3f 4f       	sbci	r19, 0xFF	; 255
     592:	3a 83       	std	Y+2, r19	; 0x02
     594:	29 83       	std	Y+1, r18	; 0x01
     596:	47 98       	cbi	0x08, 7	; 8

	float ActualDistance = (340.0 * CommStat->Distance/1000.0)/10.0 - 0.8192;
     598:	fc 01       	movw	r30, r24
     59a:	e7 80       	ldd	r14, Z+7	; 0x07
     59c:	f0 84       	ldd	r15, Z+8	; 0x08
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "distance %u (%u)\n\r", (unsigned int)ActualDistance, (unsigned int)CommStat->Distance);
     59e:	8d b7       	in	r24, 0x3d	; 61
     5a0:	9e b7       	in	r25, 0x3e	; 62
     5a2:	0a 97       	sbiw	r24, 0x0a	; 10
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	9e bf       	out	0x3e, r25	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	8d bf       	out	0x3d, r24	; 61
     5ae:	0d b7       	in	r16, 0x3d	; 61
     5b0:	1e b7       	in	r17, 0x3e	; 62
     5b2:	0f 5f       	subi	r16, 0xFF	; 255
     5b4:	1f 4f       	sbci	r17, 0xFF	; 255
     5b6:	8a ed       	ldi	r24, 0xDA	; 218
     5b8:	c8 2e       	mov	r12, r24
     5ba:	86 e1       	ldi	r24, 0x16	; 22
     5bc:	d8 2e       	mov	r13, r24
     5be:	ed b7       	in	r30, 0x3d	; 61
     5c0:	fe b7       	in	r31, 0x3e	; 62
     5c2:	d2 82       	std	Z+2, r13	; 0x02
     5c4:	c1 82       	std	Z+1, r12	; 0x01
     5c6:	81 e5       	ldi	r24, 0x51	; 81
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	f8 01       	movw	r30, r16
     5cc:	93 83       	std	Z+3, r25	; 0x03
     5ce:	82 83       	std	Z+2, r24	; 0x02
     5d0:	8a e2       	ldi	r24, 0x2A	; 42
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	95 83       	std	Z+5, r25	; 0x05
     5d6:	84 83       	std	Z+4, r24	; 0x04
     5d8:	b7 01       	movw	r22, r14
     5da:	88 27       	eor	r24, r24
     5dc:	77 fd       	sbrc	r23, 7
     5de:	80 95       	com	r24
     5e0:	98 2f       	mov	r25, r24
     5e2:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__floatsisf>
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	4a ea       	ldi	r20, 0xAA	; 170
     5ec:	53 e4       	ldi	r21, 0x43	; 67
     5ee:	0e 94 07 13 	call	0x260e	; 0x260e <__mulsf3>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	4a e7       	ldi	r20, 0x7A	; 122
     5f8:	54 e4       	ldi	r21, 0x44	; 68
     5fa:	0e 94 01 14 	call	0x2802	; 0x2802 <__divsf3>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e2       	ldi	r20, 0x20	; 32
     604:	51 e4       	ldi	r21, 0x41	; 65
     606:	0e 94 01 14 	call	0x2802	; 0x2802 <__divsf3>
     60a:	27 e1       	ldi	r18, 0x17	; 23
     60c:	37 eb       	ldi	r19, 0xB7	; 183
     60e:	41 e5       	ldi	r20, 0x51	; 81
     610:	5f e3       	ldi	r21, 0x3F	; 63
     612:	0e 94 a9 12 	call	0x2552	; 0x2552 <__subsf3>
     616:	0e 94 31 11 	call	0x2262	; 0x2262 <__fixunssfsi>
     61a:	f8 01       	movw	r30, r16
     61c:	77 83       	std	Z+7, r23	; 0x07
     61e:	66 83       	std	Z+6, r22	; 0x06
     620:	f1 86       	std	Z+9, r15	; 0x09
     622:	e0 86       	std	Z+8, r14	; 0x08
     624:	0e 94 84 17 	call	0x2f08	; 0x2f08 <snprintf>
	uart_putstr(ASS_UART_BUFF);
     628:	8d b7       	in	r24, 0x3d	; 61
     62a:	9e b7       	in	r25, 0x3e	; 62
     62c:	0a 96       	adiw	r24, 0x0a	; 10
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	9e bf       	out	0x3e, r25	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	8d bf       	out	0x3d, r24	; 61
     638:	c6 01       	movw	r24, r12
     63a:	0e 94 bd 10 	call	0x217a	; 0x217a <uart_putstr>
}
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	df 90       	pop	r13
     650:	cf 90       	pop	r12
     652:	08 95       	ret

00000654 <CommunicationGetResponseStatistics>:

	return SONARReceivedFlag;
}

void CommunicationGetResponseStatistics( CommunicationStatStruct *CommStat )
{ 
     654:	af 92       	push	r10
     656:	bf 92       	push	r11
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	8c 01       	movw	r16, r24
	
	CommStat->PingReceiveTime = sonar_get_ping_time();
     666:	0e 94 27 09 	call	0x124e	; 0x124e <sonar_get_ping_time>
     66a:	d8 01       	movw	r26, r16
     66c:	14 96       	adiw	r26, 0x04	; 4
     66e:	9c 93       	st	X, r25
     670:	8e 93       	st	-X, r24
     672:	13 97       	sbiw	r26, 0x03	; 3
	CommStat->SonarReceiveTime = sonar_get_sonar_time();
     674:	0e 94 2d 09 	call	0x125a	; 0x125a <sonar_get_sonar_time>
     678:	f8 01       	movw	r30, r16
     67a:	96 83       	std	Z+6, r25	; 0x06
     67c:	85 83       	std	Z+5, r24	; 0x05
	CommStat->Distance = sonar_get_ping_time(); 
     67e:	0e 94 27 09 	call	0x124e	; 0x124e <sonar_get_ping_time>
     682:	d8 01       	movw	r26, r16
     684:	18 96       	adiw	r26, 0x08	; 8
     686:	9c 93       	st	X, r25
     688:	8e 93       	st	-X, r24
     68a:	17 97       	sbiw	r26, 0x07	; 7

	#if 1
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "R: %u (%u) [%u, %u]\n\r", sonar_get_distance(), (int)CommStat->Distance, sonar_get_ping_time(), sonar_get_sonar_time() );
     68c:	0e 94 1b 09 	call	0x1236	; 0x1236 <sonar_get_distance>
     690:	6c 01       	movw	r12, r24
     692:	f8 01       	movw	r30, r16
     694:	a7 80       	ldd	r10, Z+7	; 0x07
     696:	b0 84       	ldd	r11, Z+8	; 0x08
     698:	0e 94 27 09 	call	0x124e	; 0x124e <sonar_get_ping_time>
     69c:	7c 01       	movw	r14, r24
     69e:	0e 94 2d 09 	call	0x125a	; 0x125a <sonar_get_sonar_time>
     6a2:	2d b7       	in	r18, 0x3d	; 61
     6a4:	3e b7       	in	r19, 0x3e	; 62
     6a6:	2e 50       	subi	r18, 0x0E	; 14
     6a8:	30 40       	sbci	r19, 0x00	; 0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	3e bf       	out	0x3e, r19	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	2d bf       	out	0x3d, r18	; 61
     6b4:	ed b7       	in	r30, 0x3d	; 61
     6b6:	fe b7       	in	r31, 0x3e	; 62
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	0a ed       	ldi	r16, 0xDA	; 218
     6bc:	16 e1       	ldi	r17, 0x16	; 22
     6be:	ad b7       	in	r26, 0x3d	; 61
     6c0:	be b7       	in	r27, 0x3e	; 62
     6c2:	12 96       	adiw	r26, 0x02	; 2
     6c4:	1c 93       	st	X, r17
     6c6:	0e 93       	st	-X, r16
     6c8:	11 97       	sbiw	r26, 0x01	; 1
     6ca:	21 e5       	ldi	r18, 0x51	; 81
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	33 83       	std	Z+3, r19	; 0x03
     6d0:	22 83       	std	Z+2, r18	; 0x02
     6d2:	2d e3       	ldi	r18, 0x3D	; 61
     6d4:	32 e0       	ldi	r19, 0x02	; 2
     6d6:	35 83       	std	Z+5, r19	; 0x05
     6d8:	24 83       	std	Z+4, r18	; 0x04
     6da:	d7 82       	std	Z+7, r13	; 0x07
     6dc:	c6 82       	std	Z+6, r12	; 0x06
     6de:	b1 86       	std	Z+9, r11	; 0x09
     6e0:	a0 86       	std	Z+8, r10	; 0x08
     6e2:	f3 86       	std	Z+11, r15	; 0x0b
     6e4:	e2 86       	std	Z+10, r14	; 0x0a
     6e6:	95 87       	std	Z+13, r25	; 0x0d
     6e8:	84 87       	std	Z+12, r24	; 0x0c
     6ea:	0e 94 84 17 	call	0x2f08	; 0x2f08 <snprintf>
	uart_putstr(ASS_UART_BUFF);
     6ee:	ed b7       	in	r30, 0x3d	; 61
     6f0:	fe b7       	in	r31, 0x3e	; 62
     6f2:	3e 96       	adiw	r30, 0x0e	; 14
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	fe bf       	out	0x3e, r31	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	ed bf       	out	0x3d, r30	; 61
     6fe:	c8 01       	movw	r24, r16
     700:	0e 94 bd 10 	call	0x217a	; 0x217a <uart_putstr>
	#endif
}
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	ff 90       	pop	r15
     70a:	ef 90       	pop	r14
     70c:	df 90       	pop	r13
     70e:	cf 90       	pop	r12
     710:	bf 90       	pop	r11
     712:	af 90       	pop	r10
     714:	08 95       	ret

00000716 <CommunicationReceivedSonarResponse>:
{
	#if PROFILECODE && PROFILE_ULTRASOUND
	EnableProfileSample4();
	#endif

	if( 0 != sonar_echo_received() )
     716:	0e 94 13 09 	call	0x1226	; 0x1226 <sonar_echo_received>
     71a:	88 23       	and	r24, r24
     71c:	19 f0       	breq	.+6      	; 0x724 <CommunicationReceivedSonarResponse+0xe>
		#if PROFILECODE && PROFILE_ULTRASOUND
		DisableProfileSample4();
		EnableProfileSample5();
		#endif

		SONARReceivedFlag = 1;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 61 17 	sts	0x1761, r24

	#if PROFILECODE && PROFILE_ULTRASOUND
	DisableProfileSample4();
	#endif

	return SONARReceivedFlag;
     724:	80 91 61 17 	lds	r24, 0x1761
}
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	08 95       	ret

0000072c <CommuncationReceivedPING>:

	return 1;
}

int CommuncationReceivedPING()
{
     72c:	1f 93       	push	r17
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	a0 97       	sbiw	r28, 0x20	; 32
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample2();
	#endif

	int Received = PINGReceivedFlag;
     742:	10 91 6d 17 	lds	r17, 0x176D
	if( 0 != PINGReceivedFlag )
     746:	80 91 6d 17 	lds	r24, 0x176D
     74a:	88 23       	and	r24, r24
     74c:	a9 f0       	breq	.+42     	; 0x778 <CommuncationReceivedPING+0x4c>
	{
		#if PROFILECODE && PROFILE_AVR
		EnableProfileSample2();
		#endif

		cli();
     74e:	f8 94       	cli

		#if PROFILECODE && PROFILE_AVR 
		DisableProfileSample2();
		#endif

		PINGReceivedFlag = 0;
     750:	10 92 6d 17 	sts	0x176D, r1
		SONARReceivedFlag = 0;
     754:	10 92 61 17 	sts	0x1761, r1
	
		#if PROFILECODE && PROFILE_WIRELESS 
		EnableProfileSample3();
		#endif	
		radiopacket_t ReceivePacket;
		RADIO_RX_STATUS status = Radio_Receive( &ReceivePacket );
     758:	ce 01       	movw	r24, r28
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Radio_Receive>
		#if PROFILECODE && PROFILE_AVR
		EnableProfileSample3();
		#endif

		// enable interrupts
		sei();
     760:	78 94       	sei
		#if PROFILECODE && PROFILE_ULTRASOUND
		EnableProfileSample3();
		#endif
		// Set the current time
		// sonar_reset_trigger_time();
		sonar_trigger();
     762:	0e 94 0d 09 	call	0x121a	; 0x121a <sonar_trigger>
     766:	80 e9       	ldi	r24, 0x90	; 144
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	28 ec       	ldi	r18, 0xC8	; 200
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	f9 01       	movw	r30, r18
     770:	31 97       	sbiw	r30, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <CommuncationReceivedPING+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     774:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     776:	d9 f7       	brne	.-10     	; 0x76e <CommuncationReceivedPING+0x42>
	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample2();
	#endif

	return Received;
}
     778:	81 2f       	mov	r24, r17
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	a0 96       	adiw	r28, 0x20	; 32
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	1f 91       	pop	r17
     78e:	08 95       	ret

00000790 <CommunicationSendTriggerMessage>:

	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample6();
	#endif

	PINGReceivedFlag = 0;
     790:	10 92 6d 17 	sts	0x176D, r1
	SONARReceivedFlag = 0;
     794:	10 92 61 17 	sts	0x1761, r1

	// disable interrupts during setup

	packet.type = COMMAND;
     798:	10 92 41 17 	sts	0x1741, r1
	packet.payload.command.command = Trigger;
     79c:	10 92 49 17 	sts	0x1749, r1
	packet.payload.command.sender_address[0] = station_addr[0];
     7a0:	80 91 20 02 	lds	r24, 0x0220
     7a4:	80 93 44 17 	sts	0x1744, r24
	packet.payload.command.sender_address[1] = station_addr[1];
     7a8:	80 91 21 02 	lds	r24, 0x0221
     7ac:	80 93 45 17 	sts	0x1745, r24
	packet.payload.command.sender_address[2] = station_addr[2];
     7b0:	80 91 22 02 	lds	r24, 0x0222
     7b4:	80 93 46 17 	sts	0x1746, r24
	packet.payload.command.sender_address[3] = station_addr[3];
     7b8:	80 91 23 02 	lds	r24, 0x0223
     7bc:	80 93 47 17 	sts	0x1747, r24
	packet.payload.command.sender_address[4] = station_addr[4];
     7c0:	80 91 24 02 	lds	r24, 0x0224
     7c4:	80 93 48 17 	sts	0x1748, r24

	Radio_Set_Tx_Addr( (uint8_t*)remote_addr );
     7c8:	85 e2       	ldi	r24, 0x25	; 37
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	0e 94 2d 06 	call	0xc5a	; 0xc5a <Radio_Set_Tx_Addr>
	// uint8_t result = Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
	Radio_Transmit( (radiopacket_t*)(&packet), RADIO_WAIT_FOR_TX);
     7d0:	81 e4       	ldi	r24, 0x41	; 65
     7d2:	97 e1       	ldi	r25, 0x17	; 23
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	0e 94 f6 07 	call	0xfec	; 0xfec <Radio_Transmit>

static volatile uint16_t message_clock = 0;

void ResetMessageClock()
{
	message_clock = 0;
     7da:	10 92 9b 03 	sts	0x039B, r1
     7de:	10 92 9a 03 	sts	0x039A, r1
	ResetMessageClock();

	#if PROFILECODE && PROFILE_WIRELESS 
	DisableProfileSample6();
	#endif
}
     7e2:	08 95       	ret

000007e4 <InitializeCommunication>:

	return message_clock;
}

void InitializeCommunication(  uint8_t sa[5], uint8_t ra[5] )
{
     7e4:	1f 93       	push	r17
     7e6:	dc 01       	movw	r26, r24
     7e8:	fb 01       	movw	r30, r22
	#if PROFILECODE && PROFILE_WIRELESS 
	EnableProfileSample1();
	#endif

	TimeoutCounter = 0;
     7ea:	10 92 6f 17 	sts	0x176F, r1
     7ee:	10 92 6e 17 	sts	0x176E, r1

	WorkingStruct.TriggerSent = 0;
     7f2:	10 92 62 17 	sts	0x1762, r1
	WorkingStruct.PingResponseReceived = 0;
     7f6:	10 92 63 17 	sts	0x1763, r1
	WorkingStruct.SonarReceived = 0;
     7fa:	10 92 64 17 	sts	0x1764, r1

	WorkingStruct.PingReceiveTime = 0;
     7fe:	10 92 66 17 	sts	0x1766, r1
     802:	10 92 65 17 	sts	0x1765, r1
	WorkingStruct.SonarReceiveTime = 0;
     806:	10 92 68 17 	sts	0x1768, r1
     80a:	10 92 67 17 	sts	0x1767, r1

	WorkingStruct.Percent = 0;
     80e:	10 92 6c 17 	sts	0x176C, r1
     812:	10 92 6b 17 	sts	0x176B, r1

	// #if PROFILECODE && PROFILE_WIRELESS 
	// EnableProfileSample2();
	// #endif

	remote_addr[0] = ra[0];
     816:	80 81       	ld	r24, Z
     818:	80 93 25 02 	sts	0x0225, r24
	remote_addr[1] = ra[1];
     81c:	81 81       	ldd	r24, Z+1	; 0x01
     81e:	80 93 26 02 	sts	0x0226, r24
	remote_addr[2] = ra[2];
     822:	82 81       	ldd	r24, Z+2	; 0x02
     824:	80 93 27 02 	sts	0x0227, r24
	remote_addr[3] = ra[3];
     828:	83 81       	ldd	r24, Z+3	; 0x03
     82a:	80 93 28 02 	sts	0x0228, r24
	remote_addr[4] = ra[4];
     82e:	84 81       	ldd	r24, Z+4	; 0x04
     830:	80 93 29 02 	sts	0x0229, r24

	station_addr[0] = sa[0];
     834:	8c 91       	ld	r24, X
     836:	80 93 20 02 	sts	0x0220, r24
	station_addr[1] = sa[1];
     83a:	11 96       	adiw	r26, 0x01	; 1
     83c:	8c 91       	ld	r24, X
     83e:	11 97       	sbiw	r26, 0x01	; 1
     840:	80 93 21 02 	sts	0x0221, r24
	station_addr[2] = sa[2];
     844:	12 96       	adiw	r26, 0x02	; 2
     846:	8c 91       	ld	r24, X
     848:	12 97       	sbiw	r26, 0x02	; 2
     84a:	80 93 22 02 	sts	0x0222, r24
	station_addr[3] = sa[3];
     84e:	13 96       	adiw	r26, 0x03	; 3
     850:	8c 91       	ld	r24, X
     852:	13 97       	sbiw	r26, 0x03	; 3
     854:	80 93 23 02 	sts	0x0223, r24
	station_addr[4] = sa[4];
     858:	14 96       	adiw	r26, 0x04	; 4
     85a:	8c 91       	ld	r24, X
     85c:	80 93 24 02 	sts	0x0224, r24

	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample2();
	// #endif	

	int sreg = SREG;
     860:	1f b7       	in	r17, 0x3f	; 63
	cli();
     862:	f8 94       	cli

	// #if PROFILECODE && PROFILE_WIRELESS 
	// EnableProfileSample3();
	// #endif

	Radio_Init();
     864:	0e 94 e7 06 	call	0xdce	; 0xdce <Radio_Init>
	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample3();
	// EnableProfileSample4();
	// #endif

	Radio_Configure_Rx( RADIO_PIPE_0, (uint8_t*)station_addr, ENABLE );
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	60 e2       	ldi	r22, 0x20	; 32
     86c:	72 e0       	ldi	r23, 0x02	; 2
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	0e 94 51 07 	call	0xea2	; 0xea2 <Radio_Configure_Rx>
	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample4();
	// EnableProfileSample5();
	// #endif

	Radio_Configure( RADIO_2MBPS, RADIO_HIGHEST_POWER );
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	63 e0       	ldi	r22, 0x03	; 3
     878:	0e 94 25 07 	call	0xe4a	; 0xe4a <Radio_Configure>

	#if PROFILECODE && PROFILE_ULTRASOUND
	EnableProfileSample2();
	#endif

	sonar_init();
     87c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <sonar_init>
	#if PROFILECODE && PROFILE_ULTRASOUND
	DisableProfileSample2();
	#endif
	
	// enable interrupts
	SREG = sreg;
     880:	1f bf       	out	0x3f, r17	; 63
	// _delay_ms(500);

	// #if PROFILECODE && PROFILE_WIRELESS 
	// DisableProfileSample1();
	// #endif
}
     882:	1f 91       	pop	r17
     884:	08 95       	ret

00000886 <ServoStartSweep>:
	#endif
}

void ServoStartSweep()
{
	SweepPercent = 0;
     886:	10 92 71 17 	sts	0x1771, r1
     88a:	10 92 70 17 	sts	0x1770, r1
}
     88e:	08 95       	ret

00000890 <ServoUpdateSweepPosition>:

int ServoUpdateSweepPosition( CommunicationStatStruct *CommStat )
{
     890:	fc 01       	movw	r30, r24
	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample2();
	#endif

	if( (SweepPercent + SWEEPINCREMENTAMOUNT) < 1000 )
     892:	80 91 70 17 	lds	r24, 0x1770
     896:	90 91 71 17 	lds	r25, 0x1771
     89a:	84 58       	subi	r24, 0x84	; 132
     89c:	93 40       	sbci	r25, 0x03	; 3
     89e:	1c f0       	brlt	.+6      	; 0x8a6 <ServoUpdateSweepPosition+0x16>
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <ServoUpdateSweepPosition+0x3a>
	{
		SweepPercent = SweepPercent + SWEEPINCREMENTAMOUNT;
     8a6:	80 91 70 17 	lds	r24, 0x1770
     8aa:	90 91 71 17 	lds	r25, 0x1771
     8ae:	8c 59       	subi	r24, 0x9C	; 156
     8b0:	9f 4f       	sbci	r25, 0xFF	; 255
     8b2:	90 93 71 17 	sts	0x1771, r25
     8b6:	80 93 70 17 	sts	0x1770, r24
		CommStat->Percent = SweepPercent;
     8ba:	80 91 70 17 	lds	r24, 0x1770
     8be:	90 91 71 17 	lds	r25, 0x1771
     8c2:	92 87       	std	Z+10, r25	; 0x0a
     8c4:	81 87       	std	Z+9, r24	; 0x09
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample2();
	#endif

	return 1;
}
     8ca:	c9 01       	movw	r24, r18
     8cc:	08 95       	ret

000008ce <ServoSetDirection>:

void ServoSetDirection( ServoControlStruct *ServoController, CommunicationStatStruct *CommStat )
{
     8ce:	fb 01       	movw	r30, r22

	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample3();
	#endif

	SetServoValue( ServoController, CommStat->Percent );
     8d0:	61 85       	ldd	r22, Z+9	; 0x09
     8d2:	72 85       	ldd	r23, Z+10	; 0x0a
     8d4:	0e 94 64 05 	call	0xac8	; 0xac8 <SetServoValue>

	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample3();
	#endif
}
     8d8:	08 95       	ret

000008da <InitializeServoController>:
volatile int SweepPercent;

#define OUTPUTDIRECTION 0

void InitializeServoController( ServoControlStruct *ServoController )
{
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	8c 01       	movw	r16, r24
	#if PROFILECODE && PROFILE_SERVOS 
	EnableProfileSample1();
	#endif
	SweepPercent = 0;
     8e0:	10 92 71 17 	sts	0x1771, r1
     8e4:	10 92 70 17 	sts	0x1770, r1

	SetServoPeriod( ServoController, 20000 );
     8e8:	60 e2       	ldi	r22, 0x20	; 32
     8ea:	7e e4       	ldi	r23, 0x4E	; 78
     8ec:	0e 94 60 05 	call	0xac0	; 0xac0 <SetServoPeriod>
	SetServoRange( ServoController, 1000, 2000 );
     8f0:	c8 01       	movw	r24, r16
     8f2:	68 ee       	ldi	r22, 0xE8	; 232
     8f4:	73 e0       	ldi	r23, 0x03	; 3
     8f6:	40 ed       	ldi	r20, 0xD0	; 208
     8f8:	57 e0       	ldi	r21, 0x07	; 7
     8fa:	0e 94 c6 05 	call	0xb8c	; 0xb8c <SetServoRange>
	SetServoValue( ServoController, 0 );
     8fe:	c8 01       	movw	r24, r16
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	0e 94 64 05 	call	0xac8	; 0xac8 <SetServoValue>

	ServoInitialize( ServoController );
     908:	c8 01       	movw	r24, r16
     90a:	0e 94 41 05 	call	0xa82	; 0xa82 <ServoInitialize>

	#if PROFILECODE && PROFILE_SERVOS 
	DisableProfileSample1();
	#endif
}
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	08 95       	ret

00000914 <StatisticsInitialize>:
static volatile CommunicationStatStruct ShortestPath;

void StatisticsInitialize()
{
	// Set the distance to FAR AWAY
	ShortestPath.Distance = 0x8FFF;
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	9f e8       	ldi	r25, 0x8F	; 143
     918:	90 93 a4 03 	sts	0x03A4, r25
     91c:	80 93 a3 03 	sts	0x03A3, r24

	// Set the default angle to the mid-range
	ShortestPath.Percent = 500;
     920:	84 ef       	ldi	r24, 0xF4	; 244
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	90 93 a6 03 	sts	0x03A6, r25
     928:	80 93 a5 03 	sts	0x03A5, r24
}
     92c:	08 95       	ret

0000092e <StatisticsResetSample>:

void StatisticsResetSample( CommunicationStatStruct *CommStat )
{
     92e:	fc 01       	movw	r30, r24
	CommStat->TriggerSent = 0;
     930:	10 82       	st	Z, r1
	CommStat->PingResponseReceived = 0;
     932:	11 82       	std	Z+1, r1	; 0x01
	CommStat->SonarReceived = 0;
     934:	12 82       	std	Z+2, r1	; 0x02

	CommStat->PingReceiveTime = 0;
     936:	14 82       	std	Z+4, r1	; 0x04
     938:	13 82       	std	Z+3, r1	; 0x03
	CommStat->SonarReceiveTime = 0;
     93a:	16 82       	std	Z+6, r1	; 0x06
     93c:	15 82       	std	Z+5, r1	; 0x05
	CommStat->Distance = 0x8FFF;
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	9f e8       	ldi	r25, 0x8F	; 143
     942:	90 87       	std	Z+8, r25	; 0x08
     944:	87 83       	std	Z+7, r24	; 0x07

	CommStat->Percent = 500;
     946:	84 ef       	ldi	r24, 0xF4	; 244
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	92 87       	std	Z+10, r25	; 0x0a
     94c:	81 87       	std	Z+9, r24	; 0x09
}
     94e:	08 95       	ret

00000950 <StatisticsCalculateDirectionAndDistance>:
		ShortestPath.Percent = CommStat->Percent;
	}
}

void StatisticsCalculateDirectionAndDistance( CommunicationStatStruct *CommStat )
{
     950:	fc 01       	movw	r30, r24
	CommStat->Distance = ShortestPath.Distance;
     952:	80 91 a3 03 	lds	r24, 0x03A3
     956:	90 91 a4 03 	lds	r25, 0x03A4
     95a:	90 87       	std	Z+8, r25	; 0x08
     95c:	87 83       	std	Z+7, r24	; 0x07
	CommStat->Percent = ShortestPath.Percent;
     95e:	80 91 a5 03 	lds	r24, 0x03A5
     962:	90 91 a6 03 	lds	r25, 0x03A6
     966:	92 87       	std	Z+10, r25	; 0x0a
     968:	81 87       	std	Z+9, r24	; 0x09
}
     96a:	08 95       	ret

0000096c <StatisticsAddNewSample>:

	CommStat->Percent = 500;
}

void StatisticsAddNewSample( CommunicationStatStruct *CommStat )
{
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	ec 01       	movw	r28, r24
	#if 1
	snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "Here: %u %u\n\r", (unsigned int)CommStat->Distance, (unsigned int)ShortestPath.Distance );
     97a:	20 91 a3 03 	lds	r18, 0x03A3
     97e:	30 91 a4 03 	lds	r19, 0x03A4
     982:	8d b7       	in	r24, 0x3d	; 61
     984:	9e b7       	in	r25, 0x3e	; 62
     986:	0a 97       	sbiw	r24, 0x0a	; 10
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	9e bf       	out	0x3e, r25	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	8d bf       	out	0x3d, r24	; 61
     992:	ed b7       	in	r30, 0x3d	; 61
     994:	fe b7       	in	r31, 0x3e	; 62
     996:	31 96       	adiw	r30, 0x01	; 1
     998:	0a ed       	ldi	r16, 0xDA	; 218
     99a:	16 e1       	ldi	r17, 0x16	; 22
     99c:	ad b7       	in	r26, 0x3d	; 61
     99e:	be b7       	in	r27, 0x3e	; 62
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	1c 93       	st	X, r17
     9a4:	0e 93       	st	-X, r16
     9a6:	11 97       	sbiw	r26, 0x01	; 1
     9a8:	81 e5       	ldi	r24, 0x51	; 81
     9aa:	e8 2e       	mov	r14, r24
     9ac:	f1 2c       	mov	r15, r1
     9ae:	f3 82       	std	Z+3, r15	; 0x03
     9b0:	e2 82       	std	Z+2, r14	; 0x02
     9b2:	83 e5       	ldi	r24, 0x53	; 83
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	95 83       	std	Z+5, r25	; 0x05
     9b8:	84 83       	std	Z+4, r24	; 0x04
     9ba:	8f 81       	ldd	r24, Y+7	; 0x07
     9bc:	98 85       	ldd	r25, Y+8	; 0x08
     9be:	97 83       	std	Z+7, r25	; 0x07
     9c0:	86 83       	std	Z+6, r24	; 0x06
     9c2:	31 87       	std	Z+9, r19	; 0x09
     9c4:	20 87       	std	Z+8, r18	; 0x08
     9c6:	0e 94 84 17 	call	0x2f08	; 0x2f08 <snprintf>
	uart_putstr( ASS_UART_BUFF );
     9ca:	8d b7       	in	r24, 0x3d	; 61
     9cc:	9e b7       	in	r25, 0x3e	; 62
     9ce:	0a 96       	adiw	r24, 0x0a	; 10
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	9e bf       	out	0x3e, r25	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	8d bf       	out	0x3d, r24	; 61
     9da:	c8 01       	movw	r24, r16
     9dc:	0e 94 bd 10 	call	0x217a	; 0x217a <uart_putstr>
	#endif

	// Check if this result is closer
	if( (unsigned int)CommStat->Distance < (unsigned int)ShortestPath.Distance )
     9e0:	6f 81       	ldd	r22, Y+7	; 0x07
     9e2:	78 85       	ldd	r23, Y+8	; 0x08
     9e4:	80 91 a3 03 	lds	r24, 0x03A3
     9e8:	90 91 a4 03 	lds	r25, 0x03A4
     9ec:	68 17       	cp	r22, r24
     9ee:	79 07       	cpc	r23, r25
     9f0:	08 f0       	brcs	.+2      	; 0x9f4 <StatisticsAddNewSample+0x88>
     9f2:	40 c0       	rjmp	.+128    	; 0xa74 <StatisticsAddNewSample+0x108>
	{	
		snprintf((char*)ASS_UART_BUFF, ASS_UART_BUFF_MAXLINE, "SU: %u, %u, %u, %u\n\r", (int)CommStat->Distance, (int)CommStat->Percent, (unsigned int)ShortestPath.Distance, (int)ShortestPath.Percent );
     9f4:	20 91 a3 03 	lds	r18, 0x03A3
     9f8:	30 91 a4 03 	lds	r19, 0x03A4
     9fc:	40 91 a5 03 	lds	r20, 0x03A5
     a00:	50 91 a6 03 	lds	r21, 0x03A6
     a04:	ad b7       	in	r26, 0x3d	; 61
     a06:	be b7       	in	r27, 0x3e	; 62
     a08:	1e 97       	sbiw	r26, 0x0e	; 14
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	be bf       	out	0x3e, r27	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	ad bf       	out	0x3d, r26	; 61
     a14:	ed b7       	in	r30, 0x3d	; 61
     a16:	fe b7       	in	r31, 0x3e	; 62
     a18:	31 96       	adiw	r30, 0x01	; 1
     a1a:	12 96       	adiw	r26, 0x02	; 2
     a1c:	1c 93       	st	X, r17
     a1e:	0e 93       	st	-X, r16
     a20:	11 97       	sbiw	r26, 0x01	; 1
     a22:	f3 82       	std	Z+3, r15	; 0x03
     a24:	e2 82       	std	Z+2, r14	; 0x02
     a26:	81 e6       	ldi	r24, 0x61	; 97
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	95 83       	std	Z+5, r25	; 0x05
     a2c:	84 83       	std	Z+4, r24	; 0x04
     a2e:	77 83       	std	Z+7, r23	; 0x07
     a30:	66 83       	std	Z+6, r22	; 0x06
     a32:	89 85       	ldd	r24, Y+9	; 0x09
     a34:	9a 85       	ldd	r25, Y+10	; 0x0a
     a36:	91 87       	std	Z+9, r25	; 0x09
     a38:	80 87       	std	Z+8, r24	; 0x08
     a3a:	33 87       	std	Z+11, r19	; 0x0b
     a3c:	22 87       	std	Z+10, r18	; 0x0a
     a3e:	55 87       	std	Z+13, r21	; 0x0d
     a40:	44 87       	std	Z+12, r20	; 0x0c
     a42:	0e 94 84 17 	call	0x2f08	; 0x2f08 <snprintf>
		uart_putstr( ASS_UART_BUFF );
     a46:	8d b7       	in	r24, 0x3d	; 61
     a48:	9e b7       	in	r25, 0x3e	; 62
     a4a:	0e 96       	adiw	r24, 0x0e	; 14
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	9e bf       	out	0x3e, r25	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	8d bf       	out	0x3d, r24	; 61
     a56:	c8 01       	movw	r24, r16
     a58:	0e 94 bd 10 	call	0x217a	; 0x217a <uart_putstr>

		// If it is closer, set this 
		// as the current distance
		ShortestPath.Distance = CommStat->Distance;
     a5c:	8f 81       	ldd	r24, Y+7	; 0x07
     a5e:	98 85       	ldd	r25, Y+8	; 0x08
     a60:	90 93 a4 03 	sts	0x03A4, r25
     a64:	80 93 a3 03 	sts	0x03A3, r24
		ShortestPath.Percent = CommStat->Percent;
     a68:	89 85       	ldd	r24, Y+9	; 0x09
     a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6c:	90 93 a6 03 	sts	0x03A6, r25
     a70:	80 93 a5 03 	sts	0x03A5, r24
	}
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <ServoInitialize>:
#include <util\delay.h>

#define F_CPU 8000000UL

void ServoInitialize( ServoControlStruct *SCS )
{
     a82:	dc 01       	movw	r26, r24
	int sreg = SREG;
     a84:	2f b7       	in	r18, 0x3f	; 63
	cli();
     a86:	f8 94       	cli

	ICR1 = SCS->PWMPeriod; // period of output PWM signal
	OCR1B = SCS->PWMHighTime;
	*/

	DDRL |= 0b00010000; // set pin L.4 for output (OC4B)
     a88:	ea e0       	ldi	r30, 0x0A	; 10
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	80 81       	ld	r24, Z
     a8e:	80 61       	ori	r24, 0x10	; 16
     a90:	80 83       	st	Z, r24
	// TCCR1B:  ICNC1  | ICES1  | ------ | WGM13  | WGM12 | CS12  | CS11  | CS10

	// WGM11:WGM10 = 10: with WGM13-WGM12 to select timer mode 1110
	// Fast PWM, timer 1 runs from 0 to ICR1
	// COM1A1:COM1A0 = 10: clear OC1A when compare match, set OC5A when 0
	TCCR5A = 0b00100010; // compare match occurs timer = OCR5B
     a92:	82 e2       	ldi	r24, 0x22	; 34
     a94:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0b00011010; // WGM13:WGM12=11; CS12:CS0=001: internal clock 8MHz, 1/8 prescaler
     a98:	8a e1       	ldi	r24, 0x1A	; 26
     a9a:	80 93 21 01 	sts	0x0121, r24

	ICR5 = SCS->PWMPeriod; // period of output PWM signal
     a9e:	8d 91       	ld	r24, X+
     aa0:	9c 91       	ld	r25, X
     aa2:	11 97       	sbiw	r26, 0x01	; 1
     aa4:	90 93 27 01 	sts	0x0127, r25
     aa8:	80 93 26 01 	sts	0x0126, r24
	OCR5B = SCS->PWMHighTime;
     aac:	14 96       	adiw	r26, 0x04	; 4
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	15 97       	sbiw	r26, 0x05	; 5
     ab4:	90 93 2b 01 	sts	0x012B, r25
     ab8:	80 93 2a 01 	sts	0x012A, r24

	// Since  the range is clamped to -90..90 degrees, 
	// and with a 10ms delay requirement per degree = 1800
	// _delay_ms( 1800 );

	SREG = sreg;
     abc:	2f bf       	out	0x3f, r18	; 63
}
     abe:	08 95       	ret

00000ac0 <SetServoPeriod>:

void SetServoPeriod( ServoControlStruct *SCS, int MicrosecondPeriod )
{
     ac0:	fc 01       	movw	r30, r24
	SCS->PWMPeriod = MicrosecondPeriod;
     ac2:	71 83       	std	Z+1, r23	; 0x01
     ac4:	60 83       	st	Z, r22
}
     ac6:	08 95       	ret

00000ac8 <SetServoValue>:

void SetServoValue( ServoControlStruct *SCS, int TenthPercent )
{
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	6c 01       	movw	r12, r24
     ada:	cb 01       	movw	r24, r22
     adc:	23 e0       	ldi	r18, 0x03	; 3
     ade:	68 3e       	cpi	r22, 0xE8	; 232
     ae0:	72 07       	cpc	r23, r18
     ae2:	14 f0       	brlt	.+4      	; 0xae8 <SetServoValue+0x20>
     ae4:	87 ee       	ldi	r24, 0xE7	; 231
     ae6:	93 e0       	ldi	r25, 0x03	; 3
     ae8:	ec 01       	movw	r28, r24
     aea:	97 ff       	sbrs	r25, 7
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <SetServoValue+0x2a>
     aee:	c0 e0       	ldi	r28, 0x00	; 0
     af0:	d0 e0       	ldi	r29, 0x00	; 0
	}

	int OldValue = SCS->Value;

	// Set the percentage value
	SCS->Value = TenthPercent;
     af2:	f6 01       	movw	r30, r12
     af4:	d7 83       	std	Z+7, r29	; 0x07
     af6:	c6 83       	std	Z+6, r28	; 0x06
	// Interpolate between the low and the high value
	SCS->PWMHighTime = SCS->LowThreshold + (int)(SCS->DeltaThreshold * ((float)SCS->Value / 1000.0f));
     af8:	64 85       	ldd	r22, Z+12	; 0x0c
     afa:	75 85       	ldd	r23, Z+13	; 0x0d
     afc:	88 27       	eor	r24, r24
     afe:	77 fd       	sbrc	r23, 7
     b00:	80 95       	com	r24
     b02:	98 2f       	mov	r25, r24
     b04:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__floatsisf>
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	be 01       	movw	r22, r28
     b0e:	88 27       	eor	r24, r24
     b10:	77 fd       	sbrc	r23, 7
     b12:	80 95       	com	r24
     b14:	98 2f       	mov	r25, r24
     b16:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__floatsisf>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	4a e7       	ldi	r20, 0x7A	; 122
     b20:	54 e4       	ldi	r21, 0x44	; 68
     b22:	0e 94 01 14 	call	0x2802	; 0x2802 <__divsf3>
     b26:	9b 01       	movw	r18, r22
     b28:	ac 01       	movw	r20, r24
     b2a:	c8 01       	movw	r24, r16
     b2c:	b7 01       	movw	r22, r14
     b2e:	0e 94 07 13 	call	0x260e	; 0x260e <__mulsf3>
     b32:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fixsfsi>
     b36:	f6 01       	movw	r30, r12
     b38:	20 85       	ldd	r18, Z+8	; 0x08
     b3a:	31 85       	ldd	r19, Z+9	; 0x09
     b3c:	62 0f       	add	r22, r18
     b3e:	73 1f       	adc	r23, r19
     b40:	75 83       	std	Z+5, r23	; 0x05
     b42:	64 83       	std	Z+4, r22	; 0x04

	int sreg = SREG;
     b44:	2f b7       	in	r18, 0x3f	; 63
	cli();
     b46:	f8 94       	cli

	// OCR1B = SCS->PWMHighTime; // set high time of output PWM signal
	OCR5B = SCS->PWMHighTime; // set high time of output PWM signal
     b48:	70 93 2b 01 	sts	0x012B, r23
     b4c:	60 93 2a 01 	sts	0x012A, r22
	
	SREG = sreg;
     b50:	2f bf       	out	0x3f, r18	; 63
	// Convert the difference from percent to angle (degrees)
	// then multiply it by the 10ms delay/degree
	// int DelayTime = ((PosDifference * 90) /10) * 100;

	// _delay_ms( DelayTime );
}
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	08 95       	ret

00000b64 <AddServoValueDelta>:

void AddServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     b64:	fc 01       	movw	r30, r24
     b66:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value + TenthPercent;

	SetServoValue( SCS, NewValue );
     b68:	66 81       	ldd	r22, Z+6	; 0x06
     b6a:	77 81       	ldd	r23, Z+7	; 0x07
     b6c:	68 0f       	add	r22, r24
     b6e:	79 1f       	adc	r23, r25
     b70:	cf 01       	movw	r24, r30
     b72:	0e 94 64 05 	call	0xac8	; 0xac8 <SetServoValue>
}
     b76:	08 95       	ret

00000b78 <SubtractServoValueDelta>:

void SubtractServoValueDelta( ServoControlStruct *SCS, int TenthPercent )
{
     b78:	fc 01       	movw	r30, r24
     b7a:	cb 01       	movw	r24, r22
	int NewValue = SCS->Value - TenthPercent;

	SetServoValue( SCS, NewValue );
     b7c:	66 81       	ldd	r22, Z+6	; 0x06
     b7e:	77 81       	ldd	r23, Z+7	; 0x07
     b80:	68 1b       	sub	r22, r24
     b82:	79 0b       	sbc	r23, r25
     b84:	cf 01       	movw	r24, r30
     b86:	0e 94 64 05 	call	0xac8	; 0xac8 <SetServoValue>
}
     b8a:	08 95       	ret

00000b8c <SetServoRange>:

void SetServoRange( ServoControlStruct *SCS, int Low, int High )
{
     b8c:	fc 01       	movw	r30, r24
     b8e:	9a 01       	movw	r18, r20
	SCS->LowThreshold = Low;
     b90:	71 87       	std	Z+9, r23	; 0x09
     b92:	60 87       	std	Z+8, r22	; 0x08
	SCS->HighThreshold = High;
     b94:	53 87       	std	Z+11, r21	; 0x0b
     b96:	42 87       	std	Z+10, r20	; 0x0a
	SCS->DeltaThreshold = High-Low;
     b98:	ca 01       	movw	r24, r20
     b9a:	86 1b       	sub	r24, r22
     b9c:	97 0b       	sbc	r25, r23
     b9e:	95 87       	std	Z+13, r25	; 0x0d
     ba0:	84 87       	std	Z+12, r24	; 0x0c

	SCS->LowAngle = -SCS->LowThreshold * 9 / 1000;
     ba2:	87 ef       	ldi	r24, 0xF7	; 247
     ba4:	9f ef       	ldi	r25, 0xFF	; 255
     ba6:	ac 01       	movw	r20, r24
     ba8:	64 9f       	mul	r22, r20
     baa:	c0 01       	movw	r24, r0
     bac:	65 9f       	mul	r22, r21
     bae:	90 0d       	add	r25, r0
     bb0:	74 9f       	mul	r23, r20
     bb2:	90 0d       	add	r25, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	68 ee       	ldi	r22, 0xE8	; 232
     bb8:	73 e0       	ldi	r23, 0x03	; 3
     bba:	0e 94 32 1a 	call	0x3464	; 0x3464 <__divmodhi4>
     bbe:	77 87       	std	Z+15, r23	; 0x0f
     bc0:	66 87       	std	Z+14, r22	; 0x0e
	SCS->HighAngle = SCS->HighThreshold * 9 / 1000;
     bc2:	c9 01       	movw	r24, r18
     bc4:	43 e0       	ldi	r20, 0x03	; 3
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	4a 95       	dec	r20
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <SetServoRange+0x3a>
     bce:	82 0f       	add	r24, r18
     bd0:	93 1f       	adc	r25, r19
     bd2:	68 ee       	ldi	r22, 0xE8	; 232
     bd4:	73 e0       	ldi	r23, 0x03	; 3
     bd6:	0e 94 32 1a 	call	0x3464	; 0x3464 <__divmodhi4>
     bda:	71 8b       	std	Z+17, r23	; 0x11
     bdc:	60 8b       	std	Z+16, r22	; 0x10
}
     bde:	08 95       	ret

00000be0 <Radio_Drop_Rate>:
}

// This is only accurate if all the failed packets were sent using auto-ack.
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
     be0:	80 91 86 02 	lds	r24, 0x0286
     be4:	90 91 87 02 	lds	r25, 0x0287
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <Radio_Drop_Rate+0x14>
	uint8_t weight = 0;

	while (wh != 0) {
		if ((wh & 1) != 0) weight++;
     bec:	80 fd       	sbrc	r24, 0
     bee:	2f 5f       	subi	r18, 0xFF	; 255
		wh >>= 1;
     bf0:	96 95       	lsr	r25
     bf2:	87 95       	ror	r24
uint8_t Radio_Drop_Rate()
{
	uint16_t wh = tx_history;
	uint8_t weight = 0;

	while (wh != 0) {
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	d1 f7       	brne	.-12     	; 0xbec <Radio_Drop_Rate+0xc>
		if ((wh & 1) != 0) weight++;
		wh >>= 1;
	}

	wh = (16 - weight) * 100;
     bf8:	80 e1       	ldi	r24, 0x10	; 16
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	82 1b       	sub	r24, r18
     bfe:	91 09       	sbc	r25, r1
     c00:	24 e6       	ldi	r18, 0x64	; 100
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	ac 01       	movw	r20, r24
     c06:	42 9f       	mul	r20, r18
     c08:	c0 01       	movw	r24, r0
     c0a:	43 9f       	mul	r20, r19
     c0c:	90 0d       	add	r25, r0
     c0e:	52 9f       	mul	r21, r18
     c10:	90 0d       	add	r25, r0
     c12:	11 24       	eor	r1, r1
     c14:	24 e0       	ldi	r18, 0x04	; 4
     c16:	96 95       	lsr	r25
     c18:	87 95       	ror	r24
     c1a:	2a 95       	dec	r18
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <Radio_Drop_Rate+0x36>
	wh /= 16;
	return wh;
}
     c1e:	08 95       	ret

00000c20 <_get_status>:
extern void radio_rxhandler(uint8_t pipenumber);

uint8_t _get_status()
{
        uint8_t status = 0;
        RADIO_CSN_LOW();
     c20:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(NOP);
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	0e 94 ed 08 	call	0x11da	; 0x11da <SPI_Write_Byte>

        RADIO_CSN_HIGH();
     c28:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     c2a:	08 95       	ret

00000c2c <_set_register>:

uint8_t _set_register(radio_register_t reg, uint8_t* value, uint8_t len)
{
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	8b 01       	movw	r16, r22
     c36:	e4 2e       	mov	r14, r20
        uint8_t status;
        RADIO_CSN_LOW();
     c38:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
     c3a:	8f 71       	andi	r24, 0x1F	; 31
     c3c:	80 62       	ori	r24, 0x20	; 32
     c3e:	0e 94 ed 08 	call	0x11da	; 0x11da <SPI_Write_Byte>
     c42:	f8 2e       	mov	r15, r24
        SPI_Write_Block(value, len);
     c44:	c8 01       	movw	r24, r16
     c46:	6e 2d       	mov	r22, r14
     c48:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <SPI_Write_Block>

        RADIO_CSN_HIGH();
     c4c:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     c4e:	8f 2d       	mov	r24, r15
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	08 95       	ret

00000c5a <Radio_Set_Tx_Addr>:
	_set_register(EN_RXADDR, &value, 1);
}

// default transmitter address is 0xe7e7e7e7e7.
void Radio_Set_Tx_Addr(uint8_t* address)
{
     c5a:	fc 01       	movw	r30, r24
	tx_address[0] = address[0];
     c5c:	80 81       	ld	r24, Z
     c5e:	80 93 7c 02 	sts	0x027C, r24
	tx_address[1] = address[1];
     c62:	81 81       	ldd	r24, Z+1	; 0x01
     c64:	80 93 7d 02 	sts	0x027D, r24
	tx_address[2] = address[2];
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	80 93 7e 02 	sts	0x027E, r24
	tx_address[3] = address[3];
     c6e:	83 81       	ldd	r24, Z+3	; 0x03
     c70:	80 93 7f 02 	sts	0x027F, r24
	tx_address[4] = address[4];
     c74:	84 81       	ldd	r24, Z+4	; 0x04
     c76:	80 93 80 02 	sts	0x0280, r24
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
     c7a:	80 e1       	ldi	r24, 0x10	; 16
     c7c:	bf 01       	movw	r22, r30
     c7e:	45 e0       	ldi	r20, 0x05	; 5
     c80:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>
}
     c84:	08 95       	ret

00000c86 <_reset_pipe0_address>:
	}
}

void _reset_pipe0_address()
{
        if (rx_pipe_widths[RADIO_PIPE_0] != 0)
     c86:	80 91 76 02 	lds	r24, 0x0276
     c8a:	88 23       	and	r24, r24
     c8c:	31 f0       	breq	.+12     	; 0xc9a <_reset_pipe0_address+0x14>
        {
                // reset the pipe 0 address if pipe 0 is enabled.
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
     c8e:	8a e0       	ldi	r24, 0x0A	; 10
     c90:	61 e8       	ldi	r22, 0x81	; 129
     c92:	72 e0       	ldi	r23, 0x02	; 2
     c94:	45 e0       	ldi	r20, 0x05	; 5
     c96:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>
     c9a:	08 95       	ret

00000c9c <send_instruction>:

        return status;
}

void send_instruction(uint8_t instruction, uint8_t* data, uint8_t* buffer, uint8_t len)
{
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	7b 01       	movw	r14, r22
     ca8:	ea 01       	movw	r28, r20
     caa:	12 2f       	mov	r17, r18
    RADIO_CSN_LOW();
     cac:	2d 98       	cbi	0x05, 5	; 5

    // send the instruction
    SPI_Write_Byte(instruction);
     cae:	0e 94 ed 08 	call	0x11da	; 0x11da <SPI_Write_Byte>

    // pass in args
    if (len > 0)
     cb2:	11 23       	and	r17, r17
     cb4:	61 f0       	breq	.+24     	; 0xcce <send_instruction+0x32>
    {
    	if (buffer == NULL)     //
     cb6:	20 97       	sbiw	r28, 0x00	; 0
     cb8:	29 f4       	brne	.+10     	; 0xcc4 <send_instruction+0x28>
    		SPI_Write_Block(data, len);
     cba:	c7 01       	movw	r24, r14
     cbc:	61 2f       	mov	r22, r17
     cbe:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <SPI_Write_Block>
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <send_instruction+0x32>
    	else
    		SPI_ReadWrite_Block(data, buffer, len);
     cc4:	c7 01       	movw	r24, r14
     cc6:	be 01       	movw	r22, r28
     cc8:	41 2f       	mov	r20, r17
     cca:	0e 94 c8 08 	call	0x1190	; 0x1190 <SPI_ReadWrite_Block>
    }

    // resynch SPI
    RADIO_CSN_HIGH();
     cce:	2d 9a       	sbi	0x05, 5	; 5
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <Radio_Receive>:

    return RADIO_TX_SUCCESS;
}

RADIO_RX_STATUS Radio_Receive(radiopacket_t* buffer)
{
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	18 2f       	mov	r17, r24
     ce2:	09 2f       	mov	r16, r25
	uint8_t status;
	uint8_t pipe_number;
	uint8_t doMove = 1;
	RADIO_RX_STATUS result;

	transmit_lock = 0;
     ce4:	10 92 72 17 	sts	0x1772, r1

	RADIO_CE_LOW();
     ce8:	2c 98       	cbi	0x05, 4	; 5

	status = _get_status();
     cea:	0e 94 10 06 	call	0xc20	; 0xc20 <_get_status>
    pipe_number =  (status & 0xE) >> 1;
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	8e 70       	andi	r24, 0x0E	; 14
     cf2:	90 70       	andi	r25, 0x00	; 0
     cf4:	95 95       	asr	r25
     cf6:	87 95       	ror	r24
    if (pipe_number == RADIO_PIPE_EMPTY) {
    	result = RADIO_RX_FIFO_EMPTY;
    	doMove = 0;
    }

    if (rx_pipe_widths[pipe_number] > len) {
     cf8:	28 2f       	mov	r18, r24
     cfa:	fc 01       	movw	r30, r24
     cfc:	ea 58       	subi	r30, 0x8A	; 138
     cfe:	fd 4f       	sbci	r31, 0xFD	; 253
     d00:	80 81       	ld	r24, Z
     d02:	81 32       	cpi	r24, 0x21	; 33
     d04:	10 f0       	brcs	.+4      	; 0xd0a <Radio_Receive+0x2e>
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	18 c0       	rjmp	.+48     	; 0xd3a <Radio_Receive+0x5e>
    	// the buffer isn't big enough, so don't copy the data.
    	result = RADIO_RX_INVALID_ARGS;
    	doMove = 0;
    }

    if (doMove) {
     d0a:	27 30       	cpi	r18, 0x07	; 7
     d0c:	11 f4       	brne	.+4      	; 0xd12 <Radio_Receive+0x36>
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	14 c0       	rjmp	.+40     	; 0xd3a <Radio_Receive+0x5e>
    	// Move the data payload into the local
    	send_instruction(R_RX_PAYLOAD, (uint8_t*)buffer, (uint8_t*)buffer, rx_pipe_widths[pipe_number]);
     d12:	20 81       	ld	r18, Z
     d14:	81 e6       	ldi	r24, 0x61	; 97
     d16:	61 2f       	mov	r22, r17
     d18:	70 2f       	mov	r23, r16
     d1a:	41 2f       	mov	r20, r17
     d1c:	50 2f       	mov	r21, r16
     d1e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <send_instruction>

    	status = _get_status();
     d22:	0e 94 10 06 	call	0xc20	; 0xc20 <_get_status>
    	pipe_number =  (status & 0xE) >> 1;

    	if (pipe_number != RADIO_PIPE_EMPTY)
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	8e 70       	andi	r24, 0x0E	; 14
     d2a:	90 70       	andi	r25, 0x00	; 0
     d2c:	95 95       	asr	r25
     d2e:	87 95       	ror	r24
     d30:	87 30       	cpi	r24, 0x07	; 7
     d32:	11 f4       	brne	.+4      	; 0xd38 <Radio_Receive+0x5c>
     d34:	84 e0       	ldi	r24, 0x04	; 4
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <Radio_Receive+0x5e>
     d38:	83 e0       	ldi	r24, 0x03	; 3
    		result = RADIO_RX_MORE_PACKETS;
    	else
    		result = RADIO_RX_SUCCESS;
    }

    RADIO_CE_HIGH();
     d3a:	2c 9a       	sbi	0x05, 4	; 5
    transmit_lock = 0;
     d3c:	10 92 72 17 	sts	0x1772, r1

    return result;
}
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	08 95       	ret

00000d46 <_config>:
                _set_register(RX_ADDR_P0, (uint8_t*)rx_pipe0_address, ADDRESS_LENGTH);
        }
}

void _config()
{
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;

	SPI_Init();
     d54:	0e 94 c0 08 	call	0x1180	; 0x1180 <SPI_Init>

	// set address width to 5 bytes.
	value = ADDRESS_LENGTH - 2;                     // 0b11 for 5 bytes, 0b10 for 4 bytes, 0b01 for 3 bytes
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	89 83       	std	Y+1, r24	; 0x01
	_set_register(SETUP_AW, &value, 1);
     d5c:	8e 01       	movw	r16, r28
     d5e:	0f 5f       	subi	r16, 0xFF	; 255
     d60:	1f 4f       	sbci	r17, 0xFF	; 255
     d62:	b8 01       	movw	r22, r16
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

	// set Enhanced Shockburst retry to every 586 us, up to 5 times.  If packet collisions are a problem even with AA enabled,
	// then consider changing the retry delay to be different on the different stations so that they do not keep colliding on each retry.
	value = 0x15;
     d6a:	85 e1       	ldi	r24, 0x15	; 21
     d6c:	89 83       	std	Y+1, r24	; 0x01
	//value = 0x10;
	_set_register(SETUP_RETR, &value, 1);
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	b8 01       	movw	r22, r16
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

	// Set to use 2.4 GHz channel 110.
	value = CHANNEL;
     d78:	80 e7       	ldi	r24, 0x70	; 112
     d7a:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_CH, &value, 1);
     d7c:	85 e0       	ldi	r24, 0x05	; 5
     d7e:	b8 01       	movw	r22, r16
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

	// Set radio to 2 Mbps and high power.  Leave LNA_HCURR at its default.
	value = _BV(RF_DR) | _BV(LNA_HCURR);
     d86:	89 e0       	ldi	r24, 0x09	; 9
     d88:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RF_SETUP, &value, 1);
     d8a:	86 e0       	ldi	r24, 0x06	; 6
     d8c:	b8 01       	movw	r22, r16
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

	// Enable 2-byte CRC and power up in receive mode.
	value = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
     d94:	8f e0       	ldi	r24, 0x0F	; 15
     d96:	89 83       	std	Y+1, r24	; 0x01
	_set_register(CONFIG, &value, 1);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	b8 01       	movw	r22, r16
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

	send_instruction(FLUSH_TX, NULL, NULL, 0);
     da2:	81 ee       	ldi	r24, 0xE1	; 225
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <send_instruction>
	send_instruction(FLUSH_RX, NULL, NULL, 0);
     db2:	82 ee       	ldi	r24, 0xE2	; 226
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	50 e0       	ldi	r21, 0x00	; 0
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	0e 94 4e 06 	call	0xc9c	; 0xc9c <send_instruction>
}
     dc2:	0f 90       	pop	r0
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <Radio_Init>:

void Radio_Init()
{
        transmit_lock = 0;
     dce:	10 92 72 17 	sts	0x1772, r1

        // disable radio during config
        RADIO_CE_LOW();
     dd2:	2c 98       	cbi	0x05, 4	; 5

        // set CE and CSN
        RADIO_DDR |= _BV(RADIO_CE);
     dd4:	24 9a       	sbi	0x04, 4	; 4
        RADIO_DDR |= _BV(RADIO_CSN);
     dd6:	25 9a       	sbi	0x04, 5	; 4

        // Enable radio interrupt.
		// INT0 This interrupt is triggered when data are received and when a transmission completes.
        DDRE &= ~_BV(PORTD0);
     dd8:	68 98       	cbi	0x0d, 0	; 13
        EICRB |= _BV(ISC01);
     dda:	ea e6       	ldi	r30, 0x6A	; 106
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	80 83       	st	Z, r24
        EICRB &= ~_BV(ISC00);
     de4:	80 81       	ld	r24, Z
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 83       	st	Z, r24
        EIMSK |= _BV(INT0);
     dea:	e8 9a       	sbi	0x1d, 0	; 29

        // Configure the radio registers that are not application-dependent.
        _config();
     dec:	0e 94 a3 06 	call	0xd46	; 0xd46 <_config>
     df0:	84 ef       	ldi	r24, 0xF4	; 244
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <Radio_Init+0x26>

        // Wait for the radio to power up.
        _delay_ms(2);

        // enable radio as a receiver
        RADIO_CE_HIGH();
     df8:	2c 9a       	sbi	0x05, 4	; 5
}
     dfa:	08 95       	ret

00000dfc <_get_register>:

        return status;
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	58 2f       	mov	r21, r24
     e06:	f6 2e       	mov	r15, r22
     e08:	e7 2e       	mov	r14, r23
     e0a:	04 2f       	mov	r16, r20
     e0c:	86 2f       	mov	r24, r22
     e0e:	97 2f       	mov	r25, r23
     e10:	9c 01       	movw	r18, r24
     e12:	f9 01       	movw	r30, r18
     e14:	80 e0       	ldi	r24, 0x00	; 0
        uint8_t status, i;
        for (i = 0; i < len; i++)
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
     e16:	9f ef       	ldi	r25, 0xFF	; 255
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <_get_register+0x22>
     e1a:	91 93       	st	Z+, r25
}

uint8_t _get_register(radio_register_t reg, uint8_t* buffer, uint8_t len)
{
        uint8_t status, i;
        for (i = 0; i < len; i++)
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 17       	cp	r24, r16
     e20:	e0 f3       	brcs	.-8      	; 0xe1a <_get_register+0x1e>
        {
                // If the buffer is too long for the register results, then the radio will interpret the extra bytes as instructions.
                // To remove the risk, we set the buffer elements to NOP instructions.
                buffer[i] = 0xFF;
        }
        RADIO_CSN_LOW();
     e22:	2d 98       	cbi	0x05, 5	; 5

        status = SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
     e24:	85 2f       	mov	r24, r21
     e26:	8f 71       	andi	r24, 0x1F	; 31
     e28:	0e 94 ed 08 	call	0x11da	; 0x11da <SPI_Write_Byte>
     e2c:	18 2f       	mov	r17, r24
        SPI_ReadWrite_Block(NULL, buffer, len);
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	6f 2d       	mov	r22, r15
     e34:	7e 2d       	mov	r23, r14
     e36:	40 2f       	mov	r20, r16
     e38:	0e 94 c8 08 	call	0x1190	; 0x1190 <SPI_ReadWrite_Block>

        RADIO_CSN_HIGH();
     e3c:	2d 9a       	sbi	0x05, 5	; 5

        return status;
}
     e3e:	81 2f       	mov	r24, r17
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	08 95       	ret

00000e4a <Radio_Configure>:
	tx_address[4] = address[4];
	_set_register(TX_ADDR, address, ADDRESS_LENGTH);
}

void Radio_Configure(RADIO_DATA_RATE dr, RADIO_TX_POWER power)
{
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	08 2f       	mov	r16, r24
     e5a:	16 2f       	mov	r17, r22
	uint8_t value;

	if (power < RADIO_LOWEST_POWER || power > RADIO_HIGHEST_POWER
     e5c:	64 30       	cpi	r22, 0x04	; 4
     e5e:	d8 f4       	brcc	.+54     	; 0xe96 <Radio_Configure+0x4c>
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	c8 f4       	brcc	.+50     	; 0xe96 <Radio_Configure+0x4c>
			|| dr < RADIO_1MBPS || dr > RADIO_2MBPS)
		return;

	// set the data rate and power bits in the RF_SETUP register
	_get_register(RF_SETUP, &value, 1);
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	be 01       	movw	r22, r28
     e68:	6f 5f       	subi	r22, 0xFF	; 255
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_get_register>

	value |= 3 << RF_PWR;	// set the power bits so that the & will mask the power value in properly.
	value &= power << RF_PWR;	// mask the power value into the RF status byte.
     e72:	61 2f       	mov	r22, r17
     e74:	66 0f       	add	r22, r22
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	86 60       	ori	r24, 0x06	; 6
     e7a:	68 23       	and	r22, r24

	if (dr)
     e7c:	00 23       	and	r16, r16
     e7e:	11 f0       	breq	.+4      	; 0xe84 <Radio_Configure+0x3a>
		value |= _BV(RF_DR);
     e80:	68 60       	ori	r22, 0x08	; 8
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <Radio_Configure+0x3c>
	else
		value &= ~_BV(RF_DR);
     e84:	67 7f       	andi	r22, 0xF7	; 247
     e86:	69 83       	std	Y+1, r22	; 0x01

	_set_register(RF_SETUP, &value, 1);
     e88:	86 e0       	ldi	r24, 0x06	; 6
     e8a:	be 01       	movw	r22, r28
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>
}
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	08 95       	ret

00000ea2 <Radio_Configure_Rx>:
// default address for pipe 2 is 0xc2c2c2c2c3 (disabled)
// default address for pipe 3 is 0xc2c2c2c2c4 (disabled)
// default address for pipe 4 is 0xc2c2c2c2c5 (disabled)
// default address for pipe 5 is 0xc2c2c2c2c6 (disabled)
void Radio_Configure_Rx(RADIO_PIPE pipe, uint8_t* address, uint8_t enable)
{
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	0f 92       	push	r0
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	08 2f       	mov	r16, r24
     ebc:	fb 01       	movw	r30, r22
     ebe:	c4 2e       	mov	r12, r20
	uint8_t value;
	uint8_t use_aa = 1;
	uint8_t payload_width = 32;
	if (payload_width < 1 || payload_width > 32 || pipe < RADIO_PIPE_0 || pipe > RADIO_PIPE_5) return;
     ec0:	86 30       	cpi	r24, 0x06	; 6
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <Radio_Configure_Rx+0x24>
     ec4:	63 c0       	rjmp	.+198    	; 0xf8c <Radio_Configure_Rx+0xea>

	// store the pipe 0 address so that it can be overwritten when transmitting with auto-ack enabled.
	if (pipe == RADIO_PIPE_0)
     ec6:	88 23       	and	r24, r24
     ec8:	81 f4       	brne	.+32     	; 0xeea <Radio_Configure_Rx+0x48>
	{
		rx_pipe0_address[0] = address[0];
     eca:	80 81       	ld	r24, Z
     ecc:	80 93 81 02 	sts	0x0281, r24
		rx_pipe0_address[1] = address[1];
     ed0:	81 81       	ldd	r24, Z+1	; 0x01
     ed2:	80 93 82 02 	sts	0x0282, r24
		rx_pipe0_address[2] = address[2];
     ed6:	82 81       	ldd	r24, Z+2	; 0x02
     ed8:	80 93 83 02 	sts	0x0283, r24
		rx_pipe0_address[3] = address[3];
     edc:	83 81       	ldd	r24, Z+3	; 0x03
     ede:	80 93 84 02 	sts	0x0284, r24
		rx_pipe0_address[4] = address[4];
     ee2:	84 81       	ldd	r24, Z+4	; 0x04
     ee4:	80 93 85 02 	sts	0x0285, r24
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <Radio_Configure_Rx+0x4c>
	}

	// Set the address.  We set this stuff even if the pipe is being disabled, because for example the transmitter
	// needs pipe 0 to have the same address as the Tx address for auto-ack to work, even if pipe 0 is disabled.
	_set_register(RX_ADDR_P0 + pipe, address, pipe > RADIO_PIPE_1 ? 1 : ADDRESS_LENGTH);
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	10 f4       	brcc	.+4      	; 0xef2 <Radio_Configure_Rx+0x50>
     eee:	45 e0       	ldi	r20, 0x05	; 5
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <Radio_Configure_Rx+0x52>
     ef2:	41 e0       	ldi	r20, 0x01	; 1
     ef4:	80 2f       	mov	r24, r16
     ef6:	86 5f       	subi	r24, 0xF6	; 246
     ef8:	bf 01       	movw	r22, r30
     efa:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

	// Set auto-ack.
	_get_register(EN_AA, &value, 1);
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	5e 01       	movw	r10, r28
     f02:	08 94       	sec
     f04:	a1 1c       	adc	r10, r1
     f06:	b1 1c       	adc	r11, r1
     f08:	b5 01       	movw	r22, r10
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_get_register>
	if (use_aa)
		value |= _BV(pipe);
     f10:	e0 2e       	mov	r14, r16
     f12:	ff 24       	eor	r15, r15
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	00 2e       	mov	r0, r16
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <Radio_Configure_Rx+0x7e>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <Radio_Configure_Rx+0x7a>
     f24:	d8 2e       	mov	r13, r24
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	8d 29       	or	r24, r13
     f2a:	89 83       	std	Y+1, r24	; 0x01
	else
		value &= ~_BV(pipe);

	_set_register(EN_AA, &value, 1);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	b5 01       	movw	r22, r10
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

	// Set the pipe's payload width.  If the pipe is being disabled, then the payload width is set to 0.
	value = enable ? payload_width : 0;
     f36:	cc 20       	and	r12, r12
     f38:	11 f4       	brne	.+4      	; 0xf3e <Radio_Configure_Rx+0x9c>
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	01 c0       	rjmp	.+2      	; 0xf40 <Radio_Configure_Rx+0x9e>
     f3e:	80 e2       	ldi	r24, 0x20	; 32
     f40:	89 83       	std	Y+1, r24	; 0x01
	_set_register(RX_PW_P0 + pipe, &value, 1);
     f42:	80 2f       	mov	r24, r16
     f44:	8f 5e       	subi	r24, 0xEF	; 239
     f46:	be 01       	movw	r22, r28
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>
	rx_pipe_widths[pipe] = value;
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	26 e7       	ldi	r18, 0x76	; 118
     f56:	32 e0       	ldi	r19, 0x02	; 2
     f58:	e2 0e       	add	r14, r18
     f5a:	f3 1e       	adc	r15, r19
     f5c:	f7 01       	movw	r30, r14
     f5e:	80 83       	st	Z, r24

	// Enable or disable the pipe.
	_get_register(EN_RXADDR, &value, 1);
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_get_register>
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
	if (enable)
     f70:	cc 20       	and	r12, r12
     f72:	11 f0       	breq	.+4      	; 0xf78 <Radio_Configure_Rx+0xd6>
		value |= _BV(pipe);
     f74:	8d 29       	or	r24, r13
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <Radio_Configure_Rx+0xda>
	else
		value &= ~_BV(pipe);
     f78:	d0 94       	com	r13
     f7a:	8d 21       	and	r24, r13
     f7c:	89 83       	std	Y+1, r24	; 0x01
	_set_register(EN_RXADDR, &value, 1);
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	be 01       	movw	r22, r28
     f82:	6f 5f       	subi	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>
}
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	bf 90       	pop	r11
     f9e:	af 90       	pop	r10
     fa0:	08 95       	ret

00000fa2 <_set_tx_mode>:
		_delay_us(65);
	}
}

void _set_tx_mode()
{
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	8e 01       	movw	r16, r28
     fb4:	0f 5f       	subi	r16, 0xFF	; 255
     fb6:	1f 4f       	sbci	r17, 0xFF	; 255
     fb8:	b8 01       	movw	r22, r16
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_get_register>
	if ((config & _BV(PRIM_RX)) != 0)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	80 ff       	sbrs	r24, 0
     fc4:	0d c0       	rjmp	.+26     	; 0xfe0 <_set_tx_mode+0x3e>
	{
		config &= ~_BV(PRIM_RX);
     fc6:	8e 7f       	andi	r24, 0xFE	; 254
     fc8:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	b8 01       	movw	r22, r16
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fd4:	85 e1       	ldi	r24, 0x15	; 21
     fd6:	98 2f       	mov	r25, r24
     fd8:	9a 95       	dec	r25
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <_set_tx_mode+0x36>
		// You can delete this if you're sending large packets (I'm thinking > 25 bytes, but I'm not sure) because it
		// sending the bytes over SPI can take this long.
		_delay_us(65);
		_delay_us(65);
	}
}
     fdc:	8a 95       	dec	r24
     fde:	f1 f7       	brne	.-4      	; 0xfdc <_set_tx_mode+0x3a>
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <Radio_Transmit>:

	_set_register(RF_SETUP, &value, 1);
}

uint8_t Radio_Transmit(radiopacket_t* payload, RADIO_TX_WAIT wait)
{
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	8c 01       	movw	r16, r24
     ff4:	f6 2e       	mov	r15, r22
	uint8_t len = 32;

	// indicate that the driver is transmitting.
    transmit_lock = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	80 93 72 17 	sts	0x1772, r24

    // disable the radio while writing to the Tx FIFO.
    RADIO_CE_LOW();
     ffc:	2c 98       	cbi	0x05, 4	; 5

	_set_tx_mode();
     ffe:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_set_tx_mode>

    // for auto-ack to work, the pipe0 address must be set to the Tx address while the radio is transmitting.
    // The register will be set back to the original pipe 0 address when the TX_DS or MAX_RT interrupt is asserted.
    _set_register(RX_ADDR_P0, (uint8_t*)tx_address, ADDRESS_LENGTH);
    1002:	8a e0       	ldi	r24, 0x0A	; 10
    1004:	6c e7       	ldi	r22, 0x7C	; 124
    1006:	72 e0       	ldi	r23, 0x02	; 2
    1008:	45 e0       	ldi	r20, 0x05	; 5
    100a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

    // enable SPI
    RADIO_CSN_LOW();
    100e:	2d 98       	cbi	0x05, 5	; 5
    // send the "write transmit payload" instruction.
    SPI_Write_Byte(W_TX_PAYLOAD);
    1010:	80 ea       	ldi	r24, 0xA0	; 160
    1012:	0e 94 ed 08 	call	0x11da	; 0x11da <SPI_Write_Byte>
    // write the payload to the Tx FIFO
    SPI_Write_Block((uint8_t*)payload,len);
    1016:	c8 01       	movw	r24, r16
    1018:	60 e2       	ldi	r22, 0x20	; 32
    101a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <SPI_Write_Block>
    // disable SPI
    RADIO_CSN_HIGH();
    101e:	2d 9a       	sbi	0x05, 5	; 5

    // start the transmission.
    RADIO_CE_HIGH();
    1020:	2c 9a       	sbi	0x05, 4	; 5

    if (wait == RADIO_WAIT_FOR_TX)
    1022:	ff 20       	and	r15, r15
    1024:	11 f0       	breq	.+4      	; 0x102a <Radio_Transmit+0x3e>
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <Radio_Transmit+0x4a>
    {
        while (transmit_lock);
    102a:	80 91 72 17 	lds	r24, 0x1772
    102e:	88 23       	and	r24, r24
    1030:	e1 f7       	brne	.-8      	; 0x102a <Radio_Transmit+0x3e>
        return tx_last_status;
    1032:	80 91 88 02 	lds	r24, 0x0288
    }

    return RADIO_TX_SUCCESS;
}
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	08 95       	ret

0000103e <_set_rx_mode>:
    // resynch SPI
    RADIO_CSN_HIGH();
}

void _set_rx_mode()
{
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	uint8_t config;
	_get_register(CONFIG, &config, 1);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	8e 01       	movw	r16, r28
    1050:	0f 5f       	subi	r16, 0xFF	; 255
    1052:	1f 4f       	sbci	r17, 0xFF	; 255
    1054:	b8 01       	movw	r22, r16
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_get_register>
	if ((config & _BV(PRIM_RX)) == 0)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	80 fd       	sbrc	r24, 0
    1060:	0d c0       	rjmp	.+26     	; 0x107c <_set_rx_mode+0x3e>
	{
		config |= _BV(PRIM_RX);
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
		_set_register(CONFIG, &config, 1);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	b8 01       	movw	r22, r16
    106a:	41 e0       	ldi	r20, 0x01	; 1
    106c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>
    1070:	85 e1       	ldi	r24, 0x15	; 21
    1072:	98 2f       	mov	r25, r24
    1074:	9a 95       	dec	r25
    1076:	f1 f7       	brne	.-4      	; 0x1074 <_set_rx_mode+0x36>
		// the radio takes 130 us to power up the receiver.
		_delay_us(65);
		_delay_us(65);
	}
}
    1078:	8a 95       	dec	r24
    107a:	f1 f7       	brne	.-4      	; 0x1078 <_set_rx_mode+0x3a>
    107c:	0f 90       	pop	r0
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <__vector_1>:
	return wh;
}

// Interrupt handler
ISR(INT0_vect)
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	0b b6       	in	r0, 0x3b	; 59
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    uint8_t pipe_number;

    RADIO_CE_LOW();
    10b8:	2c 98       	cbi	0x05, 4	; 5

    status = _get_status();
    10ba:	0e 94 10 06 	call	0xc20	; 0xc20 <_get_status>
    10be:	89 83       	std	Y+1, r24	; 0x01

    if (status & _BV(RX_DR)) {
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	86 ff       	sbrs	r24, 6
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <__vector_1+0x4a>
        pipe_number =  (status & 0xE) >> 1;
        radio_rxhandler(pipe_number);
    10c6:	8e 70       	andi	r24, 0x0E	; 14
    10c8:	90 70       	andi	r25, 0x00	; 0
    10ca:	95 95       	asr	r25
    10cc:	87 95       	ror	r24
    10ce:	0e 94 a6 02 	call	0x54c	; 0x54c <radio_rxhandler>
    }

    // We can get the TX_DS or the MAX_RT interrupt, but not both.
    if (status & _BV(TX_DS)) {
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	85 ff       	sbrs	r24, 5
    10d6:	1d c0       	rjmp	.+58     	; 0x1112 <__vector_1+0x8a>
    	// if there's nothing left to transmit, switch back to receive mode.
        transmit_lock = 0;
    10d8:	10 92 72 17 	sts	0x1772, r1
        _reset_pipe0_address();
    10dc:	0e 94 43 06 	call	0xc86	; 0xc86 <_reset_pipe0_address>
        _set_rx_mode();
    10e0:	0e 94 1f 08 	call	0x103e	; 0x103e <_set_rx_mode>

        // indicate in the history that a packet was transmitted successfully by appending a 1.
        tx_history <<= 1;
    10e4:	80 91 86 02 	lds	r24, 0x0286
    10e8:	90 91 87 02 	lds	r25, 0x0287
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	90 93 87 02 	sts	0x0287, r25
    10f4:	80 93 86 02 	sts	0x0286, r24
        tx_history |= 1;
    10f8:	80 91 86 02 	lds	r24, 0x0286
    10fc:	90 91 87 02 	lds	r25, 0x0287
    1100:	81 60       	ori	r24, 0x01	; 1
    1102:	90 93 87 02 	sts	0x0287, r25
    1106:	80 93 86 02 	sts	0x0286, r24
        tx_last_status = RADIO_TX_SUCCESS;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	80 93 88 02 	sts	0x0288, r24
    1110:	17 c0       	rjmp	.+46     	; 0x1140 <__vector_1+0xb8>
    } else if (status & _BV(MAX_RT)) {
    1112:	84 ff       	sbrs	r24, 4
    1114:	15 c0       	rjmp	.+42     	; 0x1140 <__vector_1+0xb8>
        // enable SPI
       // RADIO_CSN_LOW();


        // flush the failed packet (it stays in the Tx FIFO; we could try to resend it by setting CE high)
        SPI_Write_Byte( FLUSH_TX );
    1116:	81 ee       	ldi	r24, 0xE1	; 225
    1118:	0e 94 ed 08 	call	0x11da	; 0x11da <SPI_Write_Byte>

        // resynch SPI
        //RADIO_CSN_HIGH();

        transmit_lock = 0;
    111c:	10 92 72 17 	sts	0x1772, r1
        _reset_pipe0_address();
    1120:	0e 94 43 06 	call	0xc86	; 0xc86 <_reset_pipe0_address>
        _set_rx_mode();
    1124:	0e 94 1f 08 	call	0x103e	; 0x103e <_set_rx_mode>

        // indicate in the history that a packet was dropped by appending a 0.
        tx_history <<= 1;
    1128:	80 91 86 02 	lds	r24, 0x0286
    112c:	90 91 87 02 	lds	r25, 0x0287
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	90 93 87 02 	sts	0x0287, r25
    1138:	80 93 86 02 	sts	0x0286, r24
        tx_last_status = RADIO_TX_MAX_RT;
    113c:	10 92 88 02 	sts	0x0288, r1
    }

    // clear the interrupt flags.
	status = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    1140:	80 e7       	ldi	r24, 0x70	; 112
    1142:	89 83       	std	Y+1, r24	; 0x01
	_set_register(STATUS, &status, 1);
    1144:	87 e0       	ldi	r24, 0x07	; 7
    1146:	be 01       	movw	r22, r28
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 16 06 	call	0xc2c	; 0xc2c <_set_register>

    RADIO_CE_HIGH();
    1152:	2c 9a       	sbi	0x05, 4	; 5
}
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0b be       	out	0x3b, r0	; 59
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	1f 90       	pop	r1
    117e:	18 95       	reti

00001180 <SPI_Init>:
#define SPI_WAIT()              while (!(SPSR & _BV(SPIF)));

void SPI_Init()
{
	// set MOSI, SCK, and SS output, MISO input
	SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_SS) | ~(_BV(SPI_MISO));
    1180:	84 b1       	in	r24, 0x04	; 4
    1182:	87 6f       	ori	r24, 0xF7	; 247
    1184:	84 b9       	out	0x04, r24	; 4

	SPI_PORT |= _BV(SPI_SS);
    1186:	28 9a       	sbi	0x05, 0	; 5

	SPCR |= _BV(SPE) | _BV(MSTR);
    1188:	8c b5       	in	r24, 0x2c	; 44
    118a:	80 65       	ori	r24, 0x50	; 80
    118c:	8c bd       	out	0x2c, r24	; 44
}
    118e:	08 95       	ret

00001190 <SPI_ReadWrite_Block>:

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	ec 01       	movw	r28, r24
    1196:	db 01       	movw	r26, r22
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	0c c0       	rjmp	.+24     	; 0x11b6 <SPI_ReadWrite_Block+0x26>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    119e:	fe 01       	movw	r30, r28
    11a0:	e2 0f       	add	r30, r18
    11a2:	f3 1f       	adc	r31, r19
    11a4:	80 81       	ld	r24, Z
    11a6:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    11a8:	0d b4       	in	r0, 0x2d	; 45
    11aa:	07 fe       	sbrs	r0, 7
    11ac:	fd cf       	rjmp	.-6      	; 0x11a8 <SPI_ReadWrite_Block+0x18>
          buffer[i] = SPDR;
    11ae:	8e b5       	in	r24, 0x2e	; 46
    11b0:	8d 93       	st	X+, r24
    11b2:	2f 5f       	subi	r18, 0xFF	; 255
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    11b6:	24 17       	cp	r18, r20
    11b8:	90 f3       	brcs	.-28     	; 0x119e <SPI_ReadWrite_Block+0xe>
          SPDR = data[i];
          SPI_WAIT();
          buffer[i] = SPDR;
    }
}
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <SPI_Write_Block>:

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    11c0:	fc 01       	movw	r30, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	07 c0       	rjmp	.+14     	; 0x11d4 <SPI_Write_Block+0x14>
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    11c6:	80 81       	ld	r24, Z
    11c8:	8e bd       	out	0x2e, r24	; 46
          SPI_WAIT();
    11ca:	0d b4       	in	r0, 0x2d	; 45
    11cc:	07 fe       	sbrs	r0, 7
    11ce:	fd cf       	rjmp	.-6      	; 0x11ca <SPI_Write_Block+0xa>
}

void SPI_Write_Block(uint8_t* data, uint8_t len)
{
    uint8_t i;
    for (i = 0; i < len; i++) {
    11d0:	9f 5f       	subi	r25, 0xFF	; 255
    11d2:	31 96       	adiw	r30, 0x01	; 1
    11d4:	96 17       	cp	r25, r22
    11d6:	b8 f3       	brcs	.-18     	; 0x11c6 <SPI_Write_Block+0x6>
          SPDR = data[i];
          SPI_WAIT();
    }
}
    11d8:	08 95       	ret

000011da <SPI_Write_Byte>:

uint8_t SPI_Write_Byte(uint8_t byte)
{
    SPDR = byte;
    11da:	8e bd       	out	0x2e, r24	; 46
    SPI_WAIT();
    11dc:	0d b4       	in	r0, 0x2d	; 45
    11de:	07 fe       	sbrs	r0, 7
    11e0:	fd cf       	rjmp	.-6      	; 0x11dc <SPI_Write_Byte+0x2>
    return SPDR;
    11e2:	8e b5       	in	r24, 0x2e	; 46
}
    11e4:	08 95       	ret

000011e6 <sonar_init>:
uint16_t _get_TCNT3();

void sonar_init()
{
	// set PE6 for output
	DDRE |= _BV(PORTE6);
    11e6:	6e 9a       	sbi	0x0d, 6	; 13

	// set timer3 to run 1/8 of the microprocessor's clock frequency
	TCCR3B &= ~_BV(CS30);
    11e8:	e1 e9       	ldi	r30, 0x91	; 145
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8e 7f       	andi	r24, 0xFE	; 254
    11f0:	80 83       	st	Z, r24
	TCCR3B |= _BV(CS31);
    11f2:	80 81       	ld	r24, Z
    11f4:	82 60       	ori	r24, 0x02	; 2
    11f6:	80 83       	st	Z, r24
	TCCR3B &= ~_BV(CS32);
    11f8:	80 81       	ld	r24, Z
    11fa:	8b 7f       	andi	r24, 0xFB	; 251
    11fc:	80 83       	st	Z, r24

	// enable noise canceler for input capture
	TCCR3B |= _BV(ICNC3);
    11fe:	80 81       	ld	r24, Z
    1200:	80 68       	ori	r24, 0x80	; 128
    1202:	80 83       	st	Z, r24

	// set input capture on rising edge
	TCCR3B |= _BV(ICES3);
    1204:	80 81       	ld	r24, Z
    1206:	80 64       	ori	r24, 0x40	; 64
    1208:	80 83       	st	Z, r24

	// clear input capture flag
	TIFR3 |= _BV(ICF3);
    120a:	c5 9a       	sbi	0x18, 5	; 24

	// enable input capture interrupt
	TIMSK3 |= _BV(ICIE3);
    120c:	e1 e7       	ldi	r30, 0x71	; 113
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 62       	ori	r24, 0x20	; 32
    1214:	80 83       	st	Z, r24

	sei();
    1216:	78 94       	sei
}
    1218:	08 95       	ret

0000121a <sonar_trigger>:

void sonar_trigger()
{
	// trigger a 10 us pulse
	PORTE |= _BV(PE6);
    121a:	76 9a       	sbi	0x0e, 6	; 14
    121c:	8a e1       	ldi	r24, 0x1A	; 26
    121e:	8a 95       	dec	r24
    1220:	f1 f7       	brne	.-4      	; 0x121e <sonar_trigger+0x4>
	_delay_us(10);
	PORTE &= ~_BV(PE6);
    1222:	76 98       	cbi	0x0e, 6	; 14
}
    1224:	08 95       	ret

00001226 <sonar_echo_received>:

uint8_t sonar_echo_received()
{
	char sreg = SREG;
    1226:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1228:	f8 94       	cli
	uint8_t temp = received;
    122a:	80 91 a9 03 	lds	r24, 0x03A9
	received = 0;
    122e:	10 92 a9 03 	sts	0x03A9, r1
	SREG = sreg;
    1232:	9f bf       	out	0x3f, r25	; 63
	return temp;
}
    1234:	08 95       	ret

00001236 <sonar_get_distance>:

uint16_t sonar_get_distance()
{
	return trigger_time - echo_time;
    1236:	20 91 aa 03 	lds	r18, 0x03AA
    123a:	30 91 ab 03 	lds	r19, 0x03AB
    123e:	80 91 a7 03 	lds	r24, 0x03A7
    1242:	90 91 a8 03 	lds	r25, 0x03A8
    1246:	28 1b       	sub	r18, r24
    1248:	39 0b       	sbc	r19, r25
}
    124a:	c9 01       	movw	r24, r18
    124c:	08 95       	ret

0000124e <sonar_get_ping_time>:

uint16_t sonar_get_ping_time()
{
	return trigger_time;
    124e:	20 91 aa 03 	lds	r18, 0x03AA
    1252:	30 91 ab 03 	lds	r19, 0x03AB
}
    1256:	c9 01       	movw	r24, r18
    1258:	08 95       	ret

0000125a <sonar_get_sonar_time>:

uint16_t sonar_get_sonar_time()
{
	return echo_time;
    125a:	20 91 a7 03 	lds	r18, 0x03A7
    125e:	30 91 a8 03 	lds	r19, 0x03A8
}
    1262:	c9 01       	movw	r24, r18
    1264:	08 95       	ret

00001266 <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
    1266:	1f 92       	push	r1
    1268:	0f 92       	push	r0
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	0f 92       	push	r0
    126e:	11 24       	eor	r1, r1
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
	if (TCCR3B & _BV(ICES3)) { // a rising edge is captured
    1274:	80 91 91 00 	lds	r24, 0x0091
    1278:	86 ff       	sbrs	r24, 6
    127a:	10 c0       	rjmp	.+32     	; 0x129c <__vector_31+0x36>

		echo_time = ICR3;
    127c:	80 91 96 00 	lds	r24, 0x0096
    1280:	90 91 97 00 	lds	r25, 0x0097
    1284:	90 93 a8 03 	sts	0x03A8, r25
    1288:	80 93 a7 03 	sts	0x03A7, r24

		TCNT3 = 0;
    128c:	10 92 95 00 	sts	0x0095, r1
    1290:	10 92 94 00 	sts	0x0094, r1

		// set input capture on falling edge
		TCCR3B &= ~_BV(ICES3);
    1294:	80 91 91 00 	lds	r24, 0x0091
    1298:	8f 7b       	andi	r24, 0xBF	; 191
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <__vector_31+0x52>

		// clear input capture flag
		TIFR3 |= _BV(ICF3);

	} else { // a falling edge is captured
		received = 1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 a9 03 	sts	0x03A9, r24
		trigger_time = ICR3;
    12a2:	80 91 96 00 	lds	r24, 0x0096
    12a6:	90 91 97 00 	lds	r25, 0x0097
    12aa:	90 93 ab 03 	sts	0x03AB, r25
    12ae:	80 93 aa 03 	sts	0x03AA, r24
		// echo_time = trigger_time;

		// set input capture on rising edge
		TCCR3B |= _BV(ICES3);
    12b2:	80 91 91 00 	lds	r24, 0x0091
    12b6:	80 64       	ori	r24, 0x40	; 64
    12b8:	80 93 91 00 	sts	0x0091, r24

		// clear input capture flag
		TIFR3 |= _BV(ICF3);
    12bc:	c5 9a       	sbi	0x18, 5	; 24
	}
}
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	0f 90       	pop	r0
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	0f 90       	pop	r0
    12c8:	1f 90       	pop	r1
    12ca:	18 95       	reti

000012cc <idle>:
 */
/**
 *  @brief The idle task does nothing but busy loop.
 */
static void idle (void)
{
    12cc:	ff cf       	rjmp	.-2      	; 0x12cc <idle>

000012ce <exit_kernel>:
{
	/*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
     SAVE_CTX();
    12ce:	ff 93       	push	r31
    12d0:	fc b7       	in	r31, 0x3c	; 60
    12d2:	ff 93       	push	r31
    12d4:	ff b7       	in	r31, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	ff 93       	push	r31
    12da:	ef 93       	push	r30
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	bf 93       	push	r27
    12e2:	af 93       	push	r26
    12e4:	9f 93       	push	r25
    12e6:	8f 93       	push	r24
    12e8:	7f 93       	push	r23
    12ea:	6f 93       	push	r22
    12ec:	5f 93       	push	r21
    12ee:	4f 93       	push	r20
    12f0:	3f 93       	push	r19
    12f2:	2f 93       	push	r18
    12f4:	1f 93       	push	r17
    12f6:	0f 93       	push	r16
    12f8:	ff 92       	push	r15
    12fa:	ef 92       	push	r14
    12fc:	df 92       	push	r13
    12fe:	cf 92       	push	r12
    1300:	bf 92       	push	r11
    1302:	af 92       	push	r10
    1304:	9f 92       	push	r9
    1306:	8f 92       	push	r8
    1308:	7f 92       	push	r7
    130a:	6f 92       	push	r6
    130c:	5f 92       	push	r5
    130e:	4f 92       	push	r4
    1310:	3f 92       	push	r3
    1312:	2f 92       	push	r2
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    kernel_sp = SP;
    1318:	8d b7       	in	r24, 0x3d	; 61
    131a:	9e b7       	in	r25, 0x3e	; 62
    131c:	90 93 b4 03 	sts	0x03B4, r25
    1320:	80 93 b3 03 	sts	0x03B3, r24

    /*
     * Now restore the task's context, SP first.
     */
    SP = (uint16_t)(cur_task->sp);
    1324:	e0 91 ac 03 	lds	r30, 0x03AC
    1328:	f0 91 ad 03 	lds	r31, 0x03AD
    132c:	e0 50       	subi	r30, 0x00	; 0
    132e:	fe 4f       	sbci	r31, 0xFE	; 254
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	9e bf       	out	0x3e, r25	; 62
    1336:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    1338:	0f 90       	pop	r0
    133a:	1f 90       	pop	r1
    133c:	2f 90       	pop	r2
    133e:	3f 90       	pop	r3
    1340:	4f 90       	pop	r4
    1342:	5f 90       	pop	r5
    1344:	6f 90       	pop	r6
    1346:	7f 90       	pop	r7
    1348:	8f 90       	pop	r8
    134a:	9f 90       	pop	r9
    134c:	af 90       	pop	r10
    134e:	bf 90       	pop	r11
    1350:	cf 90       	pop	r12
    1352:	df 90       	pop	r13
    1354:	ef 90       	pop	r14
    1356:	ff 90       	pop	r15
    1358:	0f 91       	pop	r16
    135a:	1f 91       	pop	r17
    135c:	2f 91       	pop	r18
    135e:	3f 91       	pop	r19
    1360:	4f 91       	pop	r20
    1362:	5f 91       	pop	r21
    1364:	6f 91       	pop	r22
    1366:	7f 91       	pop	r23
    1368:	8f 91       	pop	r24
    136a:	9f 91       	pop	r25
    136c:	af 91       	pop	r26
    136e:	bf 91       	pop	r27
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ef 91       	pop	r30
    1376:	ff 91       	pop	r31
    1378:	ff bf       	out	0x3f, r31	; 63
    137a:	ff 91       	pop	r31
    137c:	fc bf       	out	0x3c, r31	; 60
    137e:	ff 91       	pop	r31
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */

	asm volatile ("ret\n"::);
    1380:	08 95       	ret

00001382 <enter_kernel>:
{
	/*
     * The PC was pushed on the stack with the call to this function.
     * Now push on the I/O registers and the SREG as well.
     */
    SAVE_CTX();
    1382:	ff 93       	push	r31
    1384:	fc b7       	in	r31, 0x3c	; 60
    1386:	ff 93       	push	r31
    1388:	ff b7       	in	r31, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	ff 93       	push	r31
    138e:	ef 93       	push	r30
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	bf 93       	push	r27
    1396:	af 93       	push	r26
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	7f 93       	push	r23
    139e:	6f 93       	push	r22
    13a0:	5f 93       	push	r21
    13a2:	4f 93       	push	r20
    13a4:	3f 93       	push	r19
    13a6:	2f 93       	push	r18
    13a8:	1f 93       	push	r17
    13aa:	0f 93       	push	r16
    13ac:	ff 92       	push	r15
    13ae:	ef 92       	push	r14
    13b0:	df 92       	push	r13
    13b2:	cf 92       	push	r12
    13b4:	bf 92       	push	r11
    13b6:	af 92       	push	r10
    13b8:	9f 92       	push	r9
    13ba:	8f 92       	push	r8
    13bc:	7f 92       	push	r7
    13be:	6f 92       	push	r6
    13c0:	5f 92       	push	r5
    13c2:	4f 92       	push	r4
    13c4:	3f 92       	push	r3
    13c6:	2f 92       	push	r2
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0

    /*
     * The last piece of the context is the SP. Save it to a variable.
     */
    cur_task->sp = (uint8_t*)SP;
    13cc:	e0 91 ac 03 	lds	r30, 0x03AC
    13d0:	f0 91 ad 03 	lds	r31, 0x03AD
    13d4:	8d b7       	in	r24, 0x3d	; 61
    13d6:	9e b7       	in	r25, 0x3e	; 62
    13d8:	e0 50       	subi	r30, 0x00	; 0
    13da:	fe 4f       	sbci	r31, 0xFE	; 254
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24

    /*
     * Now restore the kernel's context, SP first.
     */
    SP = kernel_sp;
    13e0:	80 91 b3 03 	lds	r24, 0x03B3
    13e4:	90 91 b4 03 	lds	r25, 0x03B4
    13e8:	9e bf       	out	0x3e, r25	; 62
    13ea:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	2f 90       	pop	r2
    13f2:	3f 90       	pop	r3
    13f4:	4f 90       	pop	r4
    13f6:	5f 90       	pop	r5
    13f8:	6f 90       	pop	r6
    13fa:	7f 90       	pop	r7
    13fc:	8f 90       	pop	r8
    13fe:	9f 90       	pop	r9
    1400:	af 90       	pop	r10
    1402:	bf 90       	pop	r11
    1404:	cf 90       	pop	r12
    1406:	df 90       	pop	r13
    1408:	ef 90       	pop	r14
    140a:	ff 90       	pop	r15
    140c:	0f 91       	pop	r16
    140e:	1f 91       	pop	r17
    1410:	2f 91       	pop	r18
    1412:	3f 91       	pop	r19
    1414:	4f 91       	pop	r20
    1416:	5f 91       	pop	r21
    1418:	6f 91       	pop	r22
    141a:	7f 91       	pop	r23
    141c:	8f 91       	pop	r24
    141e:	9f 91       	pop	r25
    1420:	af 91       	pop	r26
    1422:	bf 91       	pop	r27
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	ef 91       	pop	r30
    142a:	ff 91       	pop	r31
    142c:	ff bf       	out	0x3f, r31	; 63
    142e:	ff 91       	pop	r31
    1430:	fc bf       	out	0x3c, r31	; 60
    1432:	ff 91       	pop	r31
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */

	asm volatile ("ret\n"::);
    1434:	08 95       	ret

00001436 <__vector_17>:
     * of SREG. We know it should have interrupts enabled because this
     * ISR was able to execute, but it has interrupts disabled because
     * it was stored while this ISR was executing. So we set the bit (I = bit 7)
     * in the stored value.
     */
    SAVE_CTX_TOP();
    1436:	ff 93       	push	r31
    1438:	fc b7       	in	r31, 0x3c	; 60
    143a:	ff 93       	push	r31
    143c:	ff b7       	in	r31, 0x3f	; 63
    143e:	f8 94       	cli
   
    STACK_SREG_SET_I_BIT();
    1440:	f0 68       	ori	r31, 0x80	; 128

    SAVE_CTX_BOTTOM();
    1442:	ff 93       	push	r31
    1444:	ef 93       	push	r30
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	bf 93       	push	r27
    144c:	af 93       	push	r26
    144e:	9f 93       	push	r25
    1450:	8f 93       	push	r24
    1452:	7f 93       	push	r23
    1454:	6f 93       	push	r22
    1456:	5f 93       	push	r21
    1458:	4f 93       	push	r20
    145a:	3f 93       	push	r19
    145c:	2f 93       	push	r18
    145e:	1f 93       	push	r17
    1460:	0f 93       	push	r16
    1462:	ff 92       	push	r15
    1464:	ef 92       	push	r14
    1466:	df 92       	push	r13
    1468:	cf 92       	push	r12
    146a:	bf 92       	push	r11
    146c:	af 92       	push	r10
    146e:	9f 92       	push	r9
    1470:	8f 92       	push	r8
    1472:	7f 92       	push	r7
    1474:	6f 92       	push	r6
    1476:	5f 92       	push	r5
    1478:	4f 92       	push	r4
    147a:	3f 92       	push	r3
    147c:	2f 92       	push	r2
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0

    cur_task->sp = (uint8_t*)SP;
    1482:	e0 91 ac 03 	lds	r30, 0x03AC
    1486:	f0 91 ad 03 	lds	r31, 0x03AD
    148a:	8d b7       	in	r24, 0x3d	; 61
    148c:	9e b7       	in	r25, 0x3e	; 62
    148e:	e0 50       	subi	r30, 0x00	; 0
    1490:	fe 4f       	sbci	r31, 0xFE	; 254
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	80 83       	st	Z, r24
    /*
     * Now that we already saved a copy of the stack pointer
     * for every context including the kernel, we can move to
     * the kernel stack and use it. We will restore it again later.
     */
    SP = kernel_sp;
    1496:	80 91 b3 03 	lds	r24, 0x03B3
    149a:	90 91 b4 03 	lds	r25, 0x03B4
    149e:	9e bf       	out	0x3e, r25	; 62
    14a0:	8d bf       	out	0x3d, r24	; 61

    /*
     * Inform the kernel that this task was interrupted.
     */
    kernel_request = TIMER_EXPIRED;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	80 93 06 16 	sts	0x1606, r24

    /*
     * Prepare for next tick interrupt.
     */
    OCR1A += TICK_CYCLES;
    14a8:	e8 e8       	ldi	r30, 0x88	; 136
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
    14b0:	80 5c       	subi	r24, 0xC0	; 192
    14b2:	93 46       	sbci	r25, 0x63	; 99
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24

    /*
     * Restore the kernel context. (The stack pointer is restored again.)
     */
    SP = kernel_sp;
    14b8:	80 91 b3 03 	lds	r24, 0x03B3
    14bc:	90 91 b4 03 	lds	r25, 0x03B4
    14c0:	9e bf       	out	0x3e, r25	; 62
    14c2:	8d bf       	out	0x3d, r24	; 61

    /*
     * Now restore I/O and SREG registers.
     */
    RESTORE_CTX();
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	2f 90       	pop	r2
    14ca:	3f 90       	pop	r3
    14cc:	4f 90       	pop	r4
    14ce:	5f 90       	pop	r5
    14d0:	6f 90       	pop	r6
    14d2:	7f 90       	pop	r7
    14d4:	8f 90       	pop	r8
    14d6:	9f 90       	pop	r9
    14d8:	af 90       	pop	r10
    14da:	bf 90       	pop	r11
    14dc:	cf 90       	pop	r12
    14de:	df 90       	pop	r13
    14e0:	ef 90       	pop	r14
    14e2:	ff 90       	pop	r15
    14e4:	0f 91       	pop	r16
    14e6:	1f 91       	pop	r17
    14e8:	2f 91       	pop	r18
    14ea:	3f 91       	pop	r19
    14ec:	4f 91       	pop	r20
    14ee:	5f 91       	pop	r21
    14f0:	6f 91       	pop	r22
    14f2:	7f 91       	pop	r23
    14f4:	8f 91       	pop	r24
    14f6:	9f 91       	pop	r25
    14f8:	af 91       	pop	r26
    14fa:	bf 91       	pop	r27
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	ef 91       	pop	r30
    1502:	ff 91       	pop	r31
    1504:	ff bf       	out	0x3f, r31	; 63
    1506:	ff 91       	pop	r31
    1508:	fc bf       	out	0x3c, r31	; 60
    150a:	ff 91       	pop	r31
     * Explilictly required as we are "naked".
     *
     * The last piece of the context, the PC, is popped off the stack
     * with the ret instruction.
     */
    asm volatile ("ret\n"::);
    150c:	08 95       	ret

0000150e <OS_Abort>:
}

/** @brief Abort the execution of this RTOS due to an unrecoverable erorr.
 */
void OS_Abort(void)
{
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    uint8_t i, j;
    uint8_t flashes, mask;

    Disable_Interrupt();
    1514:	f8 94       	cli

    /* Initialize port for output */
    DDRG = LED_RED_MASK | LED_GREEN_MASK;
    1516:	80 ef       	ldi	r24, 0xF0	; 240
    1518:	83 bb       	out	0x13, r24	; 19

    if(error_msg < ERR_RUN_1_USER_CALLED_OS_ABORT)
    151a:	80 91 89 02 	lds	r24, 0x0289
    151e:	86 30       	cpi	r24, 0x06	; 6
    1520:	28 f4       	brcc	.+10     	; 0x152c <OS_Abort+0x1e>
    {
        flashes = error_msg + 1;
    1522:	60 91 89 02 	lds	r22, 0x0289
    1526:	6f 5f       	subi	r22, 0xFF	; 255
    1528:	70 e6       	ldi	r23, 0x60	; 96
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <OS_Abort+0x26>
        mask = LED_GREEN_MASK;
    }
    else
    {
        flashes = error_msg + 1 - ERR_RUN_1_USER_CALLED_OS_ABORT;
    152c:	60 91 89 02 	lds	r22, 0x0289
    1530:	65 50       	subi	r22, 0x05	; 5
    1532:	70 e9       	ldi	r23, 0x90	; 144
    }


    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);
    1534:	e0 ef       	ldi	r30, 0xF0	; 240
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1536:	20 e5       	ldi	r18, 0x50	; 80
    1538:	33 ec       	ldi	r19, 0xC3	; 195
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	50 e0       	ldi	r21, 0x00	; 0
    }


    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);
    153e:	e4 bb       	out	0x14, r30	; 20
    1540:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1542:	da 01       	movw	r26, r20
    1544:	c9 01       	movw	r24, r18
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	f1 f7       	brne	.-4      	; 0x1546 <OS_Abort+0x38>

    for(;;)
    {
        PORTG = (uint8_t)(LED_RED_MASK | LED_GREEN_MASK);

        for(i = 0; i < 100; ++i)
    154a:	ff 5f       	subi	r31, 0xFF	; 255
    154c:	f4 36       	cpi	r31, 0x64	; 100
    154e:	c9 f7       	brne	.-14     	; 0x1542 <OS_Abort+0x34>
        {
               _delay_25ms();
        }

        PORTG = (uint8_t) 0;
    1550:	14 ba       	out	0x14, r1	; 20
    1552:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1554:	da 01       	movw	r26, r20
    1556:	c9 01       	movw	r24, r18
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <OS_Abort+0x4a>
               _delay_25ms();
        }

        PORTG = (uint8_t) 0;

        for(i = 0; i < 40; ++i)
    155c:	ff 5f       	subi	r31, 0xFF	; 255
    155e:	f8 32       	cpi	r31, 0x28	; 40
    1560:	c9 f7       	brne	.-14     	; 0x1554 <OS_Abort+0x46>
    1562:	10 e0       	ldi	r17, 0x00	; 0
    1564:	13 c0       	rjmp	.+38     	; 0x158c <OS_Abort+0x7e>
        }

 
        for(j = 0; j < flashes; ++j)
        {
            PORTG = mask;
    1566:	74 bb       	out	0x14, r23	; 20
    1568:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    156a:	da 01       	movw	r26, r20
    156c:	c9 01       	movw	r24, r18
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <OS_Abort+0x60>
 
        for(j = 0; j < flashes; ++j)
        {
            PORTG = mask;

            for(i = 0; i < 10; ++i)
    1572:	ff 5f       	subi	r31, 0xFF	; 255
    1574:	fa 30       	cpi	r31, 0x0A	; 10
    1576:	c9 f7       	brne	.-14     	; 0x156a <OS_Abort+0x5c>
            {
                _delay_25ms();
            }

            PORTG = (uint8_t) 0;
    1578:	14 ba       	out	0x14, r1	; 20
    157a:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    157c:	da 01       	movw	r26, r20
    157e:	c9 01       	movw	r24, r18
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <OS_Abort+0x72>
                _delay_25ms();
            }

            PORTG = (uint8_t) 0;

            for(i = 0; i < 10; ++i)
    1584:	ff 5f       	subi	r31, 0xFF	; 255
    1586:	fa 30       	cpi	r31, 0x0A	; 10
    1588:	c9 f7       	brne	.-14     	; 0x157c <OS_Abort+0x6e>
        {
               _delay_25ms();
        }

 
        for(j = 0; j < flashes; ++j)
    158a:	1f 5f       	subi	r17, 0xFF	; 255
    158c:	16 17       	cp	r17, r22
    158e:	58 f3       	brcs	.-42     	; 0x1566 <OS_Abort+0x58>
    1590:	f0 e0       	ldi	r31, 0x00	; 0
static void _delay_25ms(void)
{
    uint16_t i;

    /* 4 * 50000 CPU cycles = 25 ms */
    asm volatile ("1: sbiw %0,1" "\n\tbrne 1b" : "=w" (i) : "0" (50000));
    1592:	da 01       	movw	r26, r20
    1594:	c9 01       	movw	r24, r18
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <OS_Abort+0x88>
            {
                _delay_25ms();
            }
        }

        for(i = 0; i < 20; ++i)
    159a:	ff 5f       	subi	r31, 0xFF	; 255
    159c:	f4 31       	cpi	r31, 0x14	; 20
    159e:	c9 f7       	brne	.-14     	; 0x1592 <OS_Abort+0x84>
    15a0:	ce cf       	rjmp	.-100    	; 0x153e <OS_Abort+0x30>

000015a2 <kernel_create_task>:
 * it has called "enter_kernel()"; so that when we switch to it later, we
 * can just restore its execution context on its stack.
 * @sa enter_kernel 
 */
static int kernel_create_task()
{
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    /* The new task. */
    task_descriptor_t *p;
    uint8_t* stack_bottom;
    

    if (dead_pool_queue.head == NULL)
    15a6:	c0 91 11 16 	lds	r28, 0x1611
    15aa:	d0 91 12 16 	lds	r29, 0x1612
    15ae:	20 97       	sbiw	r28, 0x00	; 0
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <kernel_create_task+0x16>
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	cf c0       	rjmp	.+414    	; 0x1756 <kernel_create_task+0x1b4>
    {
        /* Too many tasks! */
        return 0;
    }

    if(kernel_request_create_args.level == PERIODIC &&
    15b8:	80 91 0b 16 	lds	r24, 0x160B
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	69 f4       	brne	.+26     	; 0x15da <kernel_create_task+0x38>
    15c0:	80 91 0c 16 	lds	r24, 0x160C
    15c4:	88 23       	and	r24, r24
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <kernel_create_task+0x2e>
    15c8:	80 91 0c 16 	lds	r24, 0x160C
    15cc:	89 30       	cpi	r24, 0x09	; 9
    15ce:	28 f0       	brcs	.+10     	; 0x15da <kernel_create_task+0x38>
        (kernel_request_create_args.name == IDLE ||
         kernel_request_create_args.name > MAXNAME))
    {
        /* PERIODIC name is out of range [1 .. MAXNAME] */
        error_msg = ERR_2_CREATE_NAME_OUT_OF_RANGE;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 89 02 	sts	0x0289, r24
        OS_Abort();
    15d6:	0e 94 87 0a 	call	0x150e	; 0x150e <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    15da:	80 91 0b 16 	lds	r24, 0x160B
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	69 f4       	brne	.+26     	; 0x15fc <kernel_create_task+0x5a>
    15e2:	e0 91 0c 16 	lds	r30, 0x160C
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	e1 5b       	subi	r30, 0xB1	; 177
    15ea:	f9 4e       	sbci	r31, 0xE9	; 233
    15ec:	80 81       	ld	r24, Z
    15ee:	88 23       	and	r24, r24
    15f0:	29 f4       	brne	.+10     	; 0x15fc <kernel_create_task+0x5a>
        name_in_PPP[kernel_request_create_args.name] == 0)
    {
        error_msg = ERR_5_NAME_NOT_IN_PPP;
    15f2:	84 e0       	ldi	r24, 0x04	; 4
    15f4:	80 93 89 02 	sts	0x0289, r24
        OS_Abort();
    15f8:	0e 94 87 0a 	call	0x150e	; 0x150e <OS_Abort>
    }

    if(kernel_request_create_args.level == PERIODIC &&
    15fc:	80 91 0b 16 	lds	r24, 0x160B
    1600:	82 30       	cpi	r24, 0x02	; 2
    1602:	81 f4       	brne	.+32     	; 0x1624 <kernel_create_task+0x82>
    1604:	e0 91 0c 16 	lds	r30, 0x160C
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	e3 5c       	subi	r30, 0xC3	; 195
    1610:	f9 4e       	sbci	r31, 0xE9	; 233
    1612:	80 81       	ld	r24, Z
    1614:	91 81       	ldd	r25, Z+1	; 0x01
    1616:	89 2b       	or	r24, r25
    1618:	29 f0       	breq	.+10     	; 0x1624 <kernel_create_task+0x82>
    name_to_task_ptr[kernel_request_create_args.name] != NULL)
    {
        /* PERIODIC name already used */
        error_msg = ERR_4_PERIODIC_NAME_IN_USE;
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	80 93 89 02 	sts	0x0289, r24
        OS_Abort();
    1620:	0e 94 87 0a 	call	0x150e	; 0x150e <OS_Abort>
    }

	/* idling "task" goes in last descriptor. */
	if(kernel_request_create_args.level == NULL)
    1624:	80 91 0b 16 	lds	r24, 0x160B
    1628:	88 23       	and	r24, r24
    162a:	19 f4       	brne	.+6      	; 0x1632 <kernel_create_task+0x90>
    162c:	cd ef       	ldi	r28, 0xFD	; 253
    162e:	d3 e1       	ldi	r29, 0x13	; 19
    1630:	0b c0       	rjmp	.+22     	; 0x1648 <kernel_create_task+0xa6>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    1632:	fe 01       	movw	r30, r28
    1634:	e9 5f       	subi	r30, 0xF9	; 249
    1636:	fd 4f       	sbci	r31, 0xFD	; 253
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	90 93 12 16 	sts	0x1612, r25
    1640:	80 93 11 16 	sts	0x1611, r24
        task_ptr->next = NULL;
    1644:	11 82       	std	Z+1, r1	; 0x01
    1646:	10 82       	st	Z, r1
     *   register 31,
     *   the stored SREG, and
     *   the stored EIND (for 2560), and
	 *   registers 30 to 0.
     */
    uint8_t* stack_top = stack_bottom - STACKCONTEXTSIZE;
    1648:	fe 01       	movw	r30, r28
    164a:	e9 52       	subi	r30, 0x29	; 41
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	df 01       	movw	r26, r30
    1650:	80 e0       	ldi	r24, 0x00	; 0

	for( int i = 0; i < 31; i++ )
	{
		stack_top[i] = i;
    1652:	8d 93       	st	X+, r24
    1654:	8f 5f       	subi	r24, 0xFF	; 255
     *   the stored EIND (for 2560), and
	 *   registers 30 to 0.
     */
    uint8_t* stack_top = stack_bottom - STACKCONTEXTSIZE;

	for( int i = 0; i < 31; i++ )
    1656:	8f 31       	cpi	r24, 0x1F	; 31
    1658:	e1 f7       	brne	.-8      	; 0x1652 <kernel_create_task+0xb0>
	{
		stack_top[i] = i;
	}
	stack_top[31] = 0x55;
    165a:	85 e5       	ldi	r24, 0x55	; 85
    165c:	87 8f       	std	Z+31, r24	; 0x1f
	stack_top[32] = 0xEE;
    165e:	8e ee       	ldi	r24, 0xEE	; 238
    1660:	80 a3       	std	Z+32, r24	; 0x20
    /* Not necessary to clear the task descriptor. */
    /* memset(p,0,sizeof(task_descriptor_t)); */

    /* stack_top[0] is the byte above the stack.
     * stack_top[1] is r0. */
    stack_top[2] = (uint8_t) 0; /* r1 is the "zero" register. */
    1662:	12 82       	std	Z+2, r1	; 0x02
	// stack_bottom[-2] = (uint8_t) 0; /* r1 is the "zero" register. */
    /* stack_top[31] is r30. */
    stack_top[33] = (uint8_t) _BV(SREG_I); /* set SREG_I bit in stored SREG. */
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	81 a3       	std	Z+33, r24	; 0x21
     * by most significant).  This is because the "return" assembly instructions
     * (ret and reti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
     * second), even though the AT90 is LITTLE ENDIAN machine.
     */
	#if USE_AVR2560_GREATER
    stack_top[KERNELARG_STACKOFFSET+0] = (uint8_t)(0);
    1668:	13 a2       	std	Z+35, r1	; 0x23
	stack_top[KERNELARG_STACKOFFSET+1] = (uint8_t)((uint16_t)(kernel_request_create_args.f) >> 8);
    166a:	80 91 07 16 	lds	r24, 0x1607
    166e:	90 91 08 16 	lds	r25, 0x1608
    1672:	94 a3       	std	Z+36, r25	; 0x24
    stack_top[KERNELARG_STACKOFFSET+2] = (uint8_t)(uint16_t)(kernel_request_create_args.f);
    1674:	80 91 07 16 	lds	r24, 0x1607
    1678:	90 91 08 16 	lds	r25, 0x1608
    167c:	85 a3       	std	Z+37, r24	; 0x25
    stack_top[KERNELARG_STACKOFFSET+3] = (uint8_t)(0);
    167e:	16 a2       	std	Z+38, r1	; 0x26
	stack_top[KERNELARG_STACKOFFSET+4] = (uint8_t)((uint16_t)Task_Terminate >> 8);
    1680:	86 e3       	ldi	r24, 0x36	; 54
    1682:	90 e1       	ldi	r25, 0x10	; 16
    1684:	97 a3       	std	Z+39, r25	; 0x27
    stack_top[KERNELARG_STACKOFFSET+5] = (uint8_t)(uint16_t)Task_Terminate;
    1686:	c1 50       	subi	r28, 0x01	; 1
    1688:	de 4f       	sbci	r29, 0xFE	; 254
    168a:	89 93       	st	Y+, r24

    /*
     * Make stack pointer point to cell above stack (the top).
     * Make room for 32 registers, SREG and two return addresses.
     */
    p->sp = stack_top;
    168c:	f9 83       	std	Y+1, r31	; 0x01
    168e:	e8 83       	st	Y, r30

    p->state = READY;
    1690:	23 96       	adiw	r28, 0x03	; 3
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	89 93       	st	Y+, r24
    p->arg = kernel_request_create_args.arg;
    1696:	80 91 09 16 	lds	r24, 0x1609
    169a:	90 91 0a 16 	lds	r25, 0x160A
    169e:	89 93       	st	Y+, r24
    16a0:	99 93       	st	Y+, r25
    p->level = kernel_request_create_args.level;
    16a2:	80 91 0b 16 	lds	r24, 0x160B
    16a6:	88 83       	st	Y, r24
    p->name = kernel_request_create_args.name;
    16a8:	80 91 0c 16 	lds	r24, 0x160C
    16ac:	24 97       	sbiw	r28, 0x04	; 4
    16ae:	88 83       	st	Y, r24
    16b0:	c2 50       	subi	r28, 0x02	; 2
    16b2:	d2 40       	sbci	r29, 0x02	; 2

	switch(kernel_request_create_args.level)
    16b4:	80 91 0b 16 	lds	r24, 0x160B
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <kernel_create_task+0x126>
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	71 f0       	breq	.+28     	; 0x16dc <kernel_create_task+0x13a>
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <kernel_create_task+0x124>
    16c4:	46 c0       	rjmp	.+140    	; 0x1752 <kernel_create_task+0x1b0>
    16c6:	28 c0       	rjmp	.+80     	; 0x1718 <kernel_create_task+0x176>
	{
	case PERIODIC:
		/* Put this newly created PPP task into the PPP lookup array */
        name_to_task_ptr[kernel_request_create_args.name] = p;
    16c8:	e0 91 0c 16 	lds	r30, 0x160C
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	ee 0f       	add	r30, r30
    16d0:	ff 1f       	adc	r31, r31
    16d2:	e3 5c       	subi	r30, 0xC3	; 195
    16d4:	f9 4e       	sbci	r31, 0xE9	; 233
    16d6:	d1 83       	std	Z+1, r29	; 0x01
    16d8:	c0 83       	st	Z, r28
    16da:	3b c0       	rjmp	.+118    	; 0x1752 <kernel_create_task+0x1b0>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    16dc:	c9 5f       	subi	r28, 0xF9	; 249
    16de:	dd 4f       	sbci	r29, 0xFD	; 253
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	18 82       	st	Y, r1
    16e4:	c7 50       	subi	r28, 0x07	; 7
    16e6:	d2 40       	sbci	r29, 0x02	; 2

    if(queue_ptr->head == NULL)
    16e8:	80 91 19 16 	lds	r24, 0x1619
    16ec:	90 91 1a 16 	lds	r25, 0x161A
    16f0:	89 2b       	or	r24, r25
    16f2:	29 f4       	brne	.+10     	; 0x16fe <kernel_create_task+0x15c>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    16f4:	d0 93 1a 16 	sts	0x161A, r29
    16f8:	c0 93 19 16 	sts	0x1619, r28
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <kernel_create_task+0x16c>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    16fe:	e0 91 1b 16 	lds	r30, 0x161B
    1702:	f0 91 1c 16 	lds	r31, 0x161C
    1706:	e9 5f       	subi	r30, 0xF9	; 249
    1708:	fd 4f       	sbci	r31, 0xFD	; 253
    170a:	d1 83       	std	Z+1, r29	; 0x01
    170c:	c0 83       	st	Z, r28
        queue_ptr->tail = task_to_add;
    170e:	d0 93 1c 16 	sts	0x161C, r29
    1712:	c0 93 1b 16 	sts	0x161B, r28
    1716:	1d c0       	rjmp	.+58     	; 0x1752 <kernel_create_task+0x1b0>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1718:	c9 5f       	subi	r28, 0xF9	; 249
    171a:	dd 4f       	sbci	r29, 0xFD	; 253
    171c:	19 82       	std	Y+1, r1	; 0x01
    171e:	18 82       	st	Y, r1
    1720:	c7 50       	subi	r28, 0x07	; 7
    1722:	d2 40       	sbci	r29, 0x02	; 2

    if(queue_ptr->head == NULL)
    1724:	80 91 15 16 	lds	r24, 0x1615
    1728:	90 91 16 16 	lds	r25, 0x1616
    172c:	89 2b       	or	r24, r25
    172e:	29 f4       	brne	.+10     	; 0x173a <kernel_create_task+0x198>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1730:	d0 93 16 16 	sts	0x1616, r29
    1734:	c0 93 15 16 	sts	0x1615, r28
    1738:	08 c0       	rjmp	.+16     	; 0x174a <kernel_create_task+0x1a8>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    173a:	e0 91 17 16 	lds	r30, 0x1617
    173e:	f0 91 18 16 	lds	r31, 0x1618
    1742:	e9 5f       	subi	r30, 0xF9	; 249
    1744:	fd 4f       	sbci	r31, 0xFD	; 253
    1746:	d1 83       	std	Z+1, r29	; 0x01
    1748:	c0 83       	st	Z, r28
        queue_ptr->tail = task_to_add;
    174a:	d0 93 18 16 	sts	0x1618, r29
    174e:	c0 93 17 16 	sts	0x1617, r28
    1752:	21 e0       	ldi	r18, 0x01	; 1
    1754:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
    

    return 1;
}
    1756:	c9 01       	movw	r24, r18
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <kernel_event_signal>:
 *
 * Handles signals and broadcasts, with or without yielding.
 * May cause current task to be suspended.
 */
static void kernel_event_signal(uint8_t is_broadcast, uint8_t and_next)
{
    175e:	2f 92       	push	r2
    1760:	3f 92       	push	r3
    1762:	4f 92       	push	r4
    1764:	5f 92       	push	r5
    1766:	6f 92       	push	r6
    1768:	7f 92       	push	r7
    176a:	8f 92       	push	r8
    176c:	9f 92       	push	r9
    176e:	af 92       	push	r10
    1770:	bf 92       	push	r11
    1772:	cf 92       	push	r12
    1774:	df 92       	push	r13
    1776:	ef 92       	push	r14
    1778:	ff 92       	push	r15
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <kernel_event_signal+0x26>
    1784:	0f 92       	push	r0
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    178e:	80 91 0f 16 	lds	r24, 0x160F
    1792:	98 2f       	mov	r25, r24
    1794:	91 50       	subi	r25, 0x01	; 1

    if(handle >= num_events_created)
    1796:	80 91 b2 03 	lds	r24, 0x03B2
    179a:	98 17       	cp	r25, r24
    179c:	30 f0       	brcs	.+12     	; 0x17aa <kernel_event_signal+0x4c>
    {
        /* Error code. */
        error_msg = ERR_RUN_4_SIGNAL_ON_BAD_EVENT;
    179e:	89 e0       	ldi	r24, 0x09	; 9
    17a0:	80 93 89 02 	sts	0x0289, r24
        OS_Abort();
    17a4:	0e 94 87 0a 	call	0x150e	; 0x150e <OS_Abort>
    17a8:	ff c0       	rjmp	.+510    	; 0x19a8 <kernel_event_signal+0x24a>
    17aa:	61 11       	cpse	r22, r1
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	b6 2e       	mov	r11, r22
        }

        while(event_queue[handle].head != NULL)
        {
            /* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
    17b0:	69 2f       	mov	r22, r25
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	66 0f       	add	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	66 0f       	add	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	63 5e       	subi	r22, 0xE3	; 227
    17be:	79 4e       	sbci	r23, 0xE9	; 233
            default:
                break;
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
    17c0:	20 91 ac 03 	lds	r18, 0x03AC
    17c4:	30 91 ad 03 	lds	r19, 0x03AD
    17c8:	3b 83       	std	Y+3, r19	; 0x03
    17ca:	2a 83       	std	Y+2, r18	; 0x02
    17cc:	80 90 8a 02 	lds	r8, 0x028A
    17d0:	90 90 8b 02 	lds	r9, 0x028B
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    17d4:	20 90 1e 02 	lds	r2, 0x021E
    17d8:	30 90 1f 02 	lds	r3, 0x021F
    17dc:	a0 90 af 03 	lds	r10, 0x03AF
    17e0:	c0 90 b0 03 	lds	r12, 0x03B0
    17e4:	d0 90 b1 03 	lds	r13, 0x03B1
    17e8:	20 91 17 16 	lds	r18, 0x1617
    17ec:	30 91 18 16 	lds	r19, 0x1618
    17f0:	00 91 15 16 	lds	r16, 0x1615
    17f4:	10 91 16 16 	lds	r17, 0x1616
    17f8:	40 91 1b 16 	lds	r20, 0x161B
    17fc:	50 91 1c 16 	lds	r21, 0x161C
    1800:	e0 90 19 16 	lds	r14, 0x1619
    1804:	f0 90 1a 16 	lds	r15, 0x161A
        if(and_next)
        {
            make_ready = 1;
        }

        while(event_queue[handle].head != NULL)
    1808:	2b 01       	movw	r4, r22
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
    180a:	96 e0       	ldi	r25, 0x06	; 6
    180c:	69 2e       	mov	r6, r25
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	79 2e       	mov	r7, r25
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	9b 81       	ldd	r25, Y+3	; 0x03
    1816:	68 0e       	add	r6, r24
    1818:	79 1e       	adc	r7, r25
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    181a:	e0 e2       	ldi	r30, 0x20	; 32
    181c:	f2 e0       	ldi	r31, 0x02	; 2
    181e:	ce 0e       	add	r12, r30
    1820:	df 1e       	adc	r13, r31
    1822:	73 c0       	rjmp	.+230    	; 0x190a <kernel_event_signal+0x1ac>
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr)
{
    task_descriptor_t* task_ptr = queue_ptr->head;
    1824:	fb 01       	movw	r30, r22
    1826:	a0 81       	ld	r26, Z
    1828:	b1 81       	ldd	r27, Z+1	; 0x01

    if(queue_ptr->head != NULL)
    182a:	10 97       	sbiw	r26, 0x00	; 0
    182c:	79 f0       	breq	.+30     	; 0x184c <kernel_event_signal+0xee>
    {
        queue_ptr->head = queue_ptr->head->next;
    182e:	cd 01       	movw	r24, r26
    1830:	89 5f       	subi	r24, 0xF9	; 249
    1832:	9d 4f       	sbci	r25, 0xFD	; 253
    1834:	9d 83       	std	Y+5, r25	; 0x05
    1836:	8c 83       	std	Y+4, r24	; 0x04
    1838:	fc 01       	movw	r30, r24
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	fb 01       	movw	r30, r22
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	80 83       	st	Z, r24
        task_ptr->next = NULL;
    1844:	ec 81       	ldd	r30, Y+4	; 0x04
    1846:	fd 81       	ldd	r31, Y+5	; 0x05
    1848:	11 82       	std	Z+1, r1	; 0x01
    184a:	10 82       	st	Z, r1

        while(event_queue[handle].head != NULL)
        {
            /* The signalled task */
			task_descriptor_t* task_ptr = dequeue(&event_queue[handle]);
            task_ptr->state = READY;
    184c:	ad 5f       	subi	r26, 0xFD	; 253
    184e:	bd 4f       	sbci	r27, 0xFD	; 253
    1850:	f2 e0       	ldi	r31, 0x02	; 2
    1852:	fc 93       	st	X, r31

            switch(task_ptr->level)
    1854:	13 96       	adiw	r26, 0x03	; 3
    1856:	8c 91       	ld	r24, X
    1858:	a6 50       	subi	r26, 0x06	; 6
    185a:	b2 40       	sbci	r27, 0x02	; 2
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	b1 f0       	breq	.+44     	; 0x188c <kernel_event_signal+0x12e>
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	39 f5       	brne	.+78     	; 0x18b2 <kernel_event_signal+0x154>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1864:	a9 5f       	subi	r26, 0xF9	; 249
    1866:	bd 4f       	sbci	r27, 0xFD	; 253
    1868:	11 96       	adiw	r26, 0x01	; 1
    186a:	1c 92       	st	X, r1
    186c:	1e 92       	st	-X, r1
    186e:	a7 50       	subi	r26, 0x07	; 7
    1870:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1872:	e1 14       	cp	r14, r1
    1874:	f1 04       	cpc	r15, r1
    1876:	19 f4       	brne	.+6      	; 0x187e <kernel_event_signal+0x120>
    1878:	ad 01       	movw	r20, r26
    187a:	7d 01       	movw	r14, r26
    187c:	1a c0       	rjmp	.+52     	; 0x18b2 <kernel_event_signal+0x154>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    187e:	49 5f       	subi	r20, 0xF9	; 249
    1880:	5d 4f       	sbci	r21, 0xFD	; 253
    1882:	fa 01       	movw	r30, r20
    1884:	b1 83       	std	Z+1, r27	; 0x01
    1886:	a0 83       	st	Z, r26
    1888:	ad 01       	movw	r20, r26
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <kernel_event_signal+0x154>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    188c:	a9 5f       	subi	r26, 0xF9	; 249
    188e:	bd 4f       	sbci	r27, 0xFD	; 253
    1890:	11 96       	adiw	r26, 0x01	; 1
    1892:	1c 92       	st	X, r1
    1894:	1e 92       	st	-X, r1
    1896:	a7 50       	subi	r26, 0x07	; 7
    1898:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    189a:	01 15       	cp	r16, r1
    189c:	11 05       	cpc	r17, r1
    189e:	19 f4       	brne	.+6      	; 0x18a6 <kernel_event_signal+0x148>
    18a0:	9d 01       	movw	r18, r26
    18a2:	8d 01       	movw	r16, r26
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <kernel_event_signal+0x154>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    18a6:	29 5f       	subi	r18, 0xF9	; 249
    18a8:	3d 4f       	sbci	r19, 0xFD	; 253
    18aa:	f9 01       	movw	r30, r18
    18ac:	b1 83       	std	Z+1, r27	; 0x01
    18ae:	a0 83       	st	Z, r26
    18b0:	9d 01       	movw	r18, r26
            default:
                break;
            }

            /* Check to see if current task needs to be pre-empted */
			if(cur_task != idle_task && !make_ready)
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	88 15       	cp	r24, r8
    18b8:	99 05       	cpc	r25, r9
    18ba:	21 f1       	breq	.+72     	; 0x1904 <kernel_event_signal+0x1a6>
    18bc:	bb 20       	and	r11, r11
    18be:	11 f5       	brne	.+68     	; 0x1904 <kernel_event_signal+0x1a6>
            {
                if(cur_task->level != SYSTEM && task_ptr->level == SYSTEM)
    18c0:	f3 01       	movw	r30, r6
    18c2:	90 81       	ld	r25, Z
    18c4:	93 30       	cpi	r25, 0x03	; 3
    18c6:	f1 f0       	breq	.+60     	; 0x1904 <kernel_event_signal+0x1a6>
    18c8:	aa 5f       	subi	r26, 0xFA	; 250
    18ca:	bd 4f       	sbci	r27, 0xFD	; 253
    18cc:	8c 91       	ld	r24, X
    18ce:	a6 50       	subi	r26, 0x06	; 6
    18d0:	b2 40       	sbci	r27, 0x02	; 2
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	a9 f0       	breq	.+42     	; 0x1900 <kernel_event_signal+0x1a2>
                {
                    make_ready = 1;
                }
                else if(cur_task->level == RR &&
    18d6:	91 30       	cpi	r25, 0x01	; 1
    18d8:	a9 f4       	brne	.+42     	; 0x1904 <kernel_event_signal+0x1a6>
    18da:	21 14       	cp	r2, r1
    18dc:	31 04       	cpc	r3, r1
    18de:	91 f0       	breq	.+36     	; 0x1904 <kernel_event_signal+0x1a6>
    18e0:	aa 20       	and	r10, r10
    18e2:	81 f4       	brne	.+32     	; 0x1904 <kernel_event_signal+0x1a6>
    18e4:	ba 2c       	mov	r11, r10
    18e6:	f6 01       	movw	r30, r12
    18e8:	80 81       	ld	r24, Z
    18ea:	e8 2f       	mov	r30, r24
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	e3 5c       	subi	r30, 0xC3	; 195
    18f4:	f9 4e       	sbci	r31, 0xE9	; 233
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	a8 17       	cp	r26, r24
    18fc:	b9 07       	cpc	r27, r25
    18fe:	11 f4       	brne	.+4      	; 0x1904 <kernel_event_signal+0x1a6>
    1900:	bb 24       	eor	r11, r11
    1902:	b3 94       	inc	r11
                {
                    make_ready = 1;
                }
            }

            if(!is_broadcast)
    1904:	f9 81       	ldd	r31, Y+1	; 0x01
    1906:	ff 23       	and	r31, r31
    1908:	31 f0       	breq	.+12     	; 0x1916 <kernel_event_signal+0x1b8>
        if(and_next)
        {
            make_ready = 1;
        }

        while(event_queue[handle].head != NULL)
    190a:	f2 01       	movw	r30, r4
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	89 2b       	or	r24, r25
    1912:	09 f0       	breq	.+2      	; 0x1916 <kernel_event_signal+0x1b8>
    1914:	87 cf       	rjmp	.-242    	; 0x1824 <kernel_event_signal+0xc6>
    1916:	30 93 18 16 	sts	0x1618, r19
    191a:	20 93 17 16 	sts	0x1617, r18
    191e:	10 93 16 16 	sts	0x1616, r17
    1922:	00 93 15 16 	sts	0x1615, r16
    1926:	50 93 1c 16 	sts	0x161C, r21
    192a:	40 93 1b 16 	sts	0x161B, r20
    192e:	f0 92 1a 16 	sts	0x161A, r15
    1932:	e0 92 19 16 	sts	0x1619, r14
            {
                break;
            }
        }

        if(make_ready && cur_task != idle_task)
    1936:	bb 20       	and	r11, r11
    1938:	b9 f1       	breq	.+110    	; 0x19a8 <kernel_event_signal+0x24a>
    193a:	2a 81       	ldd	r18, Y+2	; 0x02
    193c:	3b 81       	ldd	r19, Y+3	; 0x03
    193e:	28 15       	cp	r18, r8
    1940:	39 05       	cpc	r19, r9
    1942:	91 f1       	breq	.+100    	; 0x19a8 <kernel_event_signal+0x24a>
        {
            cur_task->state = READY;
    1944:	2d 5f       	subi	r18, 0xFD	; 253
    1946:	3d 4f       	sbci	r19, 0xFD	; 253
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	f9 01       	movw	r30, r18
    194c:	80 83       	st	Z, r24
            if(cur_task->level == RR)
    194e:	33 96       	adiw	r30, 0x03	; 3
    1950:	80 81       	ld	r24, Z
    1952:	e6 50       	subi	r30, 0x06	; 6
    1954:	f2 40       	sbci	r31, 0x02	; 2
    1956:	fb 83       	std	Y+3, r31	; 0x03
    1958:	ea 83       	std	Y+2, r30	; 0x02
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	29 f5       	brne	.+74     	; 0x19a8 <kernel_event_signal+0x24a>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    195e:	e9 5f       	subi	r30, 0xF9	; 249
    1960:	fd 4f       	sbci	r31, 0xFD	; 253
    1962:	11 82       	std	Z+1, r1	; 0x01
    1964:	10 82       	st	Z, r1
    1966:	e7 50       	subi	r30, 0x07	; 7
    1968:	f2 40       	sbci	r31, 0x02	; 2
    196a:	fb 83       	std	Y+3, r31	; 0x03
    196c:	ea 83       	std	Y+2, r30	; 0x02

    if(queue_ptr->head == NULL)
    196e:	80 91 15 16 	lds	r24, 0x1615
    1972:	90 91 16 16 	lds	r25, 0x1616
    1976:	89 2b       	or	r24, r25
    1978:	49 f4       	brne	.+18     	; 0x198c <kernel_event_signal+0x22e>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    197a:	f0 93 16 16 	sts	0x1616, r31
    197e:	e0 93 15 16 	sts	0x1615, r30
        queue_ptr->tail = task_to_add;
    1982:	f0 93 18 16 	sts	0x1618, r31
    1986:	e0 93 17 16 	sts	0x1617, r30
    198a:	0e c0       	rjmp	.+28     	; 0x19a8 <kernel_event_signal+0x24a>
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    198c:	e0 91 17 16 	lds	r30, 0x1617
    1990:	f0 91 18 16 	lds	r31, 0x1618
    1994:	e9 5f       	subi	r30, 0xF9	; 249
    1996:	fd 4f       	sbci	r31, 0xFD	; 253
    1998:	2a 81       	ldd	r18, Y+2	; 0x02
    199a:	3b 81       	ldd	r19, Y+3	; 0x03
    199c:	31 83       	std	Z+1, r19	; 0x01
    199e:	20 83       	st	Z, r18
        queue_ptr->tail = task_to_add;
    19a0:	30 93 18 16 	sts	0x1618, r19
    19a4:	20 93 17 16 	sts	0x1617, r18
            {
                enqueue(&rr_queue, cur_task);
            }
        }
    }
}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	df 90       	pop	r13
    19c0:	cf 90       	pop	r12
    19c2:	bf 90       	pop	r11
    19c4:	af 90       	pop	r10
    19c6:	9f 90       	pop	r9
    19c8:	8f 90       	pop	r8
    19ca:	7f 90       	pop	r7
    19cc:	6f 90       	pop	r6
    19ce:	5f 90       	pop	r5
    19d0:	4f 90       	pop	r4
    19d2:	3f 90       	pop	r3
    19d4:	2f 90       	pop	r2
    19d6:	08 95       	ret

000019d8 <OS_Init>:
 * @brief Setup the RTOS and create main() as the first SYSTEM level task.
 *
 * Point of entry from the C runtime crt0.S.
 */
void OS_Init()
{
    19d8:	4f 92       	push	r4
    19da:	5f 92       	push	r5
    19dc:	6f 92       	push	r6
    19de:	7f 92       	push	r7
    19e0:	8f 92       	push	r8
    19e2:	9f 92       	push	r9
    19e4:	af 92       	push	r10
    19e6:	bf 92       	push	r11
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    int i;

    /* Set up the clocks */
    CLOCK8MHZ();
    19f8:	80 e8       	ldi	r24, 0x80	; 128
    19fa:	80 93 61 00 	sts	0x0061, r24
    19fe:	10 92 61 00 	sts	0x0061, r1

    TCCR1B &= ~(_BV(CS12) | _BV(CS11));
    1a02:	80 91 81 00 	lds	r24, 0x0081
    1a06:	89 7f       	andi	r24, 0xF9	; 249
    1a08:	80 93 81 00 	sts	0x0081, r24
    TCCR1B |= (_BV(CS10));
    1a0c:	80 91 81 00 	lds	r24, 0x0081
    1a10:	81 60       	ori	r24, 0x01	; 1
    1a12:	80 93 81 00 	sts	0x0081, r24
static void check_PPP_names(void)
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    1a16:	c0 90 1e 02 	lds	r12, 0x021E
    1a1a:	d0 90 1f 02 	lds	r13, 0x021F
    1a1e:	56 01       	movw	r10, r12
    1a20:	aa 0c       	add	r10, r10
    1a22:	bb 1c       	adc	r11, r11
    1a24:	00 e0       	ldi	r16, 0x00	; 0
        name = PPP[i];

        /* name == IDLE or 0 < name <= MAXNAME */
        if(name <= MAXNAME)
        {
            name_in_PPP[name] = 1;
    1a26:	11 e0       	ldi	r17, 0x01	; 1
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <OS_Init+0x70>
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    {
        name = PPP[i];
    1a2a:	e0 5e       	subi	r30, 0xE0	; 224
    1a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2e:	e0 81       	ld	r30, Z

        /* name == IDLE or 0 < name <= MAXNAME */
        if(name <= MAXNAME)
    1a30:	e9 30       	cpi	r30, 0x09	; 9
    1a32:	28 f4       	brcc	.+10     	; 0x1a3e <OS_Init+0x66>
        {
            name_in_PPP[name] = 1;
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	e1 5b       	subi	r30, 0xB1	; 177
    1a38:	f9 4e       	sbci	r31, 0xE9	; 233
    1a3a:	10 83       	st	Z, r17
    1a3c:	04 c0       	rjmp	.+8      	; 0x1a46 <OS_Init+0x6e>
        }
        else
        {
            error_msg = ERR_1_PPP_NAME_OUT_OF_RANGE;
    1a3e:	10 92 89 02 	sts	0x0289, r1
            OS_Abort();
    1a42:	0e 94 87 0a 	call	0x150e	; 0x150e <OS_Abort>
static void check_PPP_names(void)
{
    uint8_t i;
    uint8_t name;

    for(i = 0; i < 2 * PT; i += 2)
    1a46:	0e 5f       	subi	r16, 0xFE	; 254
    1a48:	e0 2f       	mov	r30, r16
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	ea 15       	cp	r30, r10
    1a4e:	fb 05       	cpc	r31, r11
    1a50:	60 f3       	brcs	.-40     	; 0x1a2a <OS_Init+0x52>
    1a52:	e8 eb       	ldi	r30, 0xB8	; 184
    1a54:	f5 e0       	ldi	r31, 0x05	; 5
    1a56:	ad e3       	ldi	r26, 0x3D	; 61
    1a58:	b6 e1       	ldi	r27, 0x16	; 22
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    {
        task_desc[i].state = DEAD;
    1a5a:	10 82       	st	Z, r1
        name_to_task_ptr[i] = NULL;
    1a5c:	1d 92       	st	X+, r1
    1a5e:	1d 92       	st	X+, r1
        task_desc[i].next = &task_desc[i + 1];
    1a60:	cf 01       	movw	r24, r30
    1a62:	06 96       	adiw	r24, 0x06	; 6
    1a64:	95 83       	std	Z+5, r25	; 0x05
    1a66:	84 83       	std	Z+4, r24	; 0x04
    1a68:	e7 5f       	subi	r30, 0xF7	; 247
    1a6a:	fd 4f       	sbci	r31, 0xFD	; 253
    /* 
     * Initialize dead pool to contain all but last task descriptor.
     *
     * DEAD == 0, already set in .init4
     */
    for (i = 0; i < MAXPROCESS - 1; i++)
    1a6c:	83 e1       	ldi	r24, 0x13	; 19
    1a6e:	e7 3f       	cpi	r30, 0xF7	; 247
    1a70:	f8 07       	cpc	r31, r24
    1a72:	99 f7       	brne	.-26     	; 0x1a5a <OS_Init+0x82>
    {
        task_desc[i].state = DEAD;
        name_to_task_ptr[i] = NULL;
        task_desc[i].next = &task_desc[i + 1];
    }
    task_desc[MAXPROCESS - 1].next = NULL;
    1a74:	15 82       	std	Z+5, r1	; 0x05
    1a76:	14 82       	std	Z+4, r1	; 0x04
    dead_pool_queue.head = &task_desc[0];
    1a78:	05 eb       	ldi	r16, 0xB5	; 181
    1a7a:	13 e0       	ldi	r17, 0x03	; 3
    1a7c:	10 93 12 16 	sts	0x1612, r17
    1a80:	00 93 11 16 	sts	0x1611, r16
    dead_pool_queue.tail = &task_desc[MAXPROCESS - 1];
    1a84:	84 ef       	ldi	r24, 0xF4	; 244
    1a86:	91 e1       	ldi	r25, 0x11	; 17
    1a88:	90 93 14 16 	sts	0x1614, r25
    1a8c:	80 93 13 16 	sts	0x1613, r24

	/* Create idle "task" */
    kernel_request_create_args.f = (voidfuncvoid_ptr)idle;
    1a90:	86 e6       	ldi	r24, 0x66	; 102
    1a92:	99 e0       	ldi	r25, 0x09	; 9
    1a94:	90 93 08 16 	sts	0x1608, r25
    1a98:	80 93 07 16 	sts	0x1607, r24
    kernel_request_create_args.level = NULL;
    1a9c:	10 92 0b 16 	sts	0x160B, r1
    kernel_create_task();
    1aa0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <kernel_create_task>

    /* Create "main" task as SYSTEM level. */
    kernel_request_create_args.f = (voidfuncvoid_ptr)main;
    1aa4:	8a e6       	ldi	r24, 0x6A	; 106
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	90 93 08 16 	sts	0x1608, r25
    1aac:	80 93 07 16 	sts	0x1607, r24
    kernel_request_create_args.level = SYSTEM;
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	80 93 0b 16 	sts	0x160B, r24
    kernel_create_task();
    1ab6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <kernel_create_task>

    /* First time through. Select "main" task to run first. */
    cur_task = task_desc;
    1aba:	10 93 ad 03 	sts	0x03AD, r17
    1abe:	00 93 ac 03 	sts	0x03AC, r16
    cur_task->state = RUNNING;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	80 93 b8 05 	sts	0x05B8, r24
 * @param queue_ptr the queue to pop
 * @return the popped task descriptor
 */
static task_descriptor_t* dequeue(queue_t* queue_ptr)
{
    task_descriptor_t* task_ptr = queue_ptr->head;
    1ac8:	e0 91 19 16 	lds	r30, 0x1619
    1acc:	f0 91 1a 16 	lds	r31, 0x161A

    if(queue_ptr->head != NULL)
    1ad0:	30 97       	sbiw	r30, 0x00	; 0
    1ad2:	51 f0       	breq	.+20     	; 0x1ae8 <OS_Init+0x110>
    {
        queue_ptr->head = queue_ptr->head->next;
    1ad4:	e9 5f       	subi	r30, 0xF9	; 249
    1ad6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	90 93 1a 16 	sts	0x161A, r25
    1ae0:	80 93 19 16 	sts	0x1619, r24
        task_ptr->next = NULL;
    1ae4:	11 82       	std	Z+1, r1	; 0x01
    1ae6:	10 82       	st	Z, r1
    cur_task = task_desc;
    cur_task->state = RUNNING;
    dequeue(&system_queue);

    /* Initilize time slot */
    if(PT > 0)
    1ae8:	c1 14       	cp	r12, r1
    1aea:	d1 04       	cpc	r13, r1
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <OS_Init+0x11e>
    {
        ticks_remaining = PPP[1];
    1aee:	80 91 21 02 	lds	r24, 0x0221
    1af2:	80 93 ae 03 	sts	0x03AE, r24
    }

    /* Set up Timer 1 Output Compare interrupt,the TICK clock. */
    TIMSK1 |= _BV(OCIE1A);
    1af6:	80 91 6f 00 	lds	r24, 0x006F
    1afa:	82 60       	ori	r24, 0x02	; 2
    1afc:	80 93 6f 00 	sts	0x006F, r24
    OCR1A = TCNT1 + 40000;
    1b00:	80 91 84 00 	lds	r24, 0x0084
    1b04:	90 91 85 00 	lds	r25, 0x0085
    1b08:	80 5c       	subi	r24, 0xC0	; 192
    1b0a:	93 46       	sbci	r25, 0x63	; 99
    1b0c:	90 93 89 00 	sts	0x0089, r25
    1b10:	80 93 88 00 	sts	0x0088, r24
    /* Clear flag. */
    TIFR1 = _BV(OCF1A);
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	86 bb       	out	0x16, r24	; 22
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    1b18:	e0 90 8a 02 	lds	r14, 0x028A
    1b1c:	f0 90 8b 02 	lds	r15, 0x028B
        {
            /* No task available, so idle. */
            cur_task = idle_task;
        }   

        cur_task->state = RUNNING;
    1b20:	11 e0       	ldi	r17, 0x01	; 1
        kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
        break;

    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
    1b22:	0d e0       	ldi	r16, 0x0D	; 13
    1b24:	80 2e       	mov	r8, r16
		OS_Abort();
	}
	else
    {
        /* Place this task in a queue. */
        cur_task->state = WAITING;
    1b26:	b3 e0       	ldi	r27, 0x03	; 3
    1b28:	7b 2e       	mov	r7, r27
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
        OS_Abort();
    }
    else if(cur_task->level == PERIODIC)
	{
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
    1b2a:	ac e0       	ldi	r26, 0x0C	; 12
    1b2c:	6a 2e       	mov	r6, r26
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);

    if(handle >= num_events_created)
    {
        /* Error code. */
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
    1b2e:	fa e0       	ldi	r31, 0x0A	; 10
    1b30:	5f 2e       	mov	r5, r31

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
    1b32:	e2 e0       	ldi	r30, 0x02	; 2
    1b34:	9e 2e       	mov	r9, r30
        {                
			/* If Periodic task still running then error */
            if(cur_task != NULL && cur_task->level == PERIODIC && slot_task_finished == 0)
            {
                /* error handling */
                error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
    1b36:	78 e0       	ldi	r23, 0x08	; 8
    1b38:	47 2e       	mov	r4, r23
{
    /* If the current state is RUNNING, then select it to run again.
     * kernel_handle_request() has already determined it should be selected.
     */

    if(cur_task->state != RUNNING || cur_task == idle_task)
    1b3a:	e0 91 ac 03 	lds	r30, 0x03AC
    1b3e:	f0 91 ad 03 	lds	r31, 0x03AD
    1b42:	ed 5f       	subi	r30, 0xFD	; 253
    1b44:	fd 4f       	sbci	r31, 0xFD	; 253
    1b46:	80 81       	ld	r24, Z
    1b48:	e3 50       	subi	r30, 0x03	; 3
    1b4a:	f2 40       	sbci	r31, 0x02	; 2
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <OS_Init+0x180>
    1b50:	ee 15       	cp	r30, r14
    1b52:	ff 05       	cpc	r31, r15
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <OS_Init+0x180>
    1b56:	50 c0       	rjmp	.+160    	; 0x1bf8 <OS_Init+0x220>
    {
		if(system_queue.head != NULL)
    1b58:	20 91 19 16 	lds	r18, 0x1619
    1b5c:	30 91 1a 16 	lds	r19, 0x161A
    1b60:	21 15       	cp	r18, r1
    1b62:	31 05       	cpc	r19, r1
    1b64:	51 f0       	breq	.+20     	; 0x1b7a <OS_Init+0x1a2>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    1b66:	f9 01       	movw	r30, r18
    1b68:	e9 5f       	subi	r30, 0xF9	; 249
    1b6a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	90 93 1a 16 	sts	0x161A, r25
    1b74:	80 93 19 16 	sts	0x1619, r24
    1b78:	2d c0       	rjmp	.+90     	; 0x1bd4 <OS_Init+0x1fc>
    {
		if(system_queue.head != NULL)
        {
			cur_task = dequeue(&system_queue);
        }
        else if(!slot_task_finished && PT > 0 && name_to_task_ptr[PPP[slot_name_index]] != NULL)
    1b7a:	80 91 af 03 	lds	r24, 0x03AF
    1b7e:	88 23       	and	r24, r24
    1b80:	c9 f4       	brne	.+50     	; 0x1bb4 <OS_Init+0x1dc>
    1b82:	c1 14       	cp	r12, r1
    1b84:	d1 04       	cpc	r13, r1
    1b86:	b1 f0       	breq	.+44     	; 0x1bb4 <OS_Init+0x1dc>
    1b88:	e0 91 b0 03 	lds	r30, 0x03B0
    1b8c:	f0 91 b1 03 	lds	r31, 0x03B1
    1b90:	e0 5e       	subi	r30, 0xE0	; 224
    1b92:	fd 4f       	sbci	r31, 0xFD	; 253
    1b94:	e0 81       	ld	r30, Z
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	e3 5c       	subi	r30, 0xC3	; 195
    1b9e:	f9 4e       	sbci	r31, 0xE9	; 233
    1ba0:	01 90       	ld	r0, Z+
    1ba2:	f0 81       	ld	r31, Z
    1ba4:	e0 2d       	mov	r30, r0
    1ba6:	30 97       	sbiw	r30, 0x00	; 0
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <OS_Init+0x1dc>
        {
			/* Keep running the current PERIODIC task. */
            cur_task = name_to_task_ptr[PPP[slot_name_index]];
    1baa:	f0 93 ad 03 	sts	0x03AD, r31
    1bae:	e0 93 ac 03 	sts	0x03AC, r30
    1bb2:	1b c0       	rjmp	.+54     	; 0x1bea <OS_Init+0x212>
        }
        else if(rr_queue.head != NULL)
    1bb4:	20 91 15 16 	lds	r18, 0x1615
    1bb8:	30 91 16 16 	lds	r19, 0x1616
    1bbc:	21 15       	cp	r18, r1
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	81 f0       	breq	.+32     	; 0x1be2 <OS_Init+0x20a>
{
    task_descriptor_t* task_ptr = queue_ptr->head;

    if(queue_ptr->head != NULL)
    {
        queue_ptr->head = queue_ptr->head->next;
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	e9 5f       	subi	r30, 0xF9	; 249
    1bc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	90 93 16 16 	sts	0x1616, r25
    1bd0:	80 93 15 16 	sts	0x1615, r24
        task_ptr->next = NULL;
    1bd4:	11 82       	std	Z+1, r1	; 0x01
    1bd6:	10 82       	st	Z, r1
			/* Keep running the current PERIODIC task. */
            cur_task = name_to_task_ptr[PPP[slot_name_index]];
        }
        else if(rr_queue.head != NULL)
        {
			cur_task = dequeue(&rr_queue);
    1bd8:	30 93 ad 03 	sts	0x03AD, r19
    1bdc:	20 93 ac 03 	sts	0x03AC, r18
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <OS_Init+0x212>
        }
        else
        {
            /* No task available, so idle. */
            cur_task = idle_task;
    1be2:	f0 92 ad 03 	sts	0x03AD, r15
    1be6:	e0 92 ac 03 	sts	0x03AC, r14
        }   

        cur_task->state = RUNNING;
    1bea:	e0 91 ac 03 	lds	r30, 0x03AC
    1bee:	f0 91 ad 03 	lds	r31, 0x03AD
    1bf2:	ed 5f       	subi	r30, 0xFD	; 253
    1bf4:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf6:	10 83       	st	Z, r17
{
    for(;;)
    {
        kernel_dispatch();

        exit_kernel();
    1bf8:	0e 94 67 09 	call	0x12ce	; 0x12ce <exit_kernel>
 * Perform some action based on the system call or timer tick.
 * Perhaps place the current process in a ready or waitng queue.
 */
static void kernel_handle_request(void)
{
   switch(kernel_request)
    1bfc:	00 91 06 16 	lds	r16, 0x1606
    1c00:	05 30       	cpi	r16, 0x05	; 5
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <OS_Init+0x22e>
    1c04:	01 c2       	rjmp	.+1026   	; 0x2008 <OS_Init+0x630>
    1c06:	06 30       	cpi	r16, 0x06	; 6
    1c08:	98 f4       	brcc	.+38     	; 0x1c30 <OS_Init+0x258>
    1c0a:	02 30       	cpi	r16, 0x02	; 2
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <OS_Init+0x238>
    1c0e:	92 c0       	rjmp	.+292    	; 0x1d34 <OS_Init+0x35c>
    1c10:	03 30       	cpi	r16, 0x03	; 3
    1c12:	38 f4       	brcc	.+14     	; 0x1c22 <OS_Init+0x24a>
    1c14:	00 23       	and	r16, r16
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <OS_Init+0x242>
    1c18:	f7 c1       	rjmp	.+1006   	; 0x2008 <OS_Init+0x630>
    1c1a:	01 30       	cpi	r16, 0x01	; 1
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <OS_Init+0x248>
    1c1e:	f0 c1       	rjmp	.+992    	; 0x2000 <OS_Init+0x628>
    1c20:	1d c0       	rjmp	.+58     	; 0x1c5c <OS_Init+0x284>
    1c22:	03 30       	cpi	r16, 0x03	; 3
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <OS_Init+0x250>
    1c26:	e7 c0       	rjmp	.+462    	; 0x1df6 <OS_Init+0x41e>
    1c28:	04 30       	cpi	r16, 0x04	; 4
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <OS_Init+0x256>
    1c2c:	e9 c1       	rjmp	.+978    	; 0x2000 <OS_Init+0x628>
    1c2e:	1f c1       	rjmp	.+574    	; 0x1e6e <OS_Init+0x496>
    1c30:	08 30       	cpi	r16, 0x08	; 8
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <OS_Init+0x25e>
    1c34:	c3 c1       	rjmp	.+902    	; 0x1fbc <OS_Init+0x5e4>
    1c36:	09 30       	cpi	r16, 0x09	; 9
    1c38:	38 f4       	brcc	.+14     	; 0x1c48 <OS_Init+0x270>
    1c3a:	06 30       	cpi	r16, 0x06	; 6
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <OS_Init+0x268>
    1c3e:	6c c1       	rjmp	.+728    	; 0x1f18 <OS_Init+0x540>
    1c40:	07 30       	cpi	r16, 0x07	; 7
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <OS_Init+0x26e>
    1c44:	dd c1       	rjmp	.+954    	; 0x2000 <OS_Init+0x628>
    1c46:	7c c1       	rjmp	.+760    	; 0x1f40 <OS_Init+0x568>
    1c48:	0a 30       	cpi	r16, 0x0A	; 10
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <OS_Init+0x276>
    1c4c:	bc c1       	rjmp	.+888    	; 0x1fc6 <OS_Init+0x5ee>
    1c4e:	0a 30       	cpi	r16, 0x0A	; 10
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <OS_Init+0x27c>
    1c52:	b6 c1       	rjmp	.+876    	; 0x1fc0 <OS_Init+0x5e8>
    1c54:	0b 30       	cpi	r16, 0x0B	; 11
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <OS_Init+0x282>
    1c58:	d3 c1       	rjmp	.+934    	; 0x2000 <OS_Init+0x628>
    1c5a:	c2 c1       	rjmp	.+900    	; 0x1fe0 <OS_Init+0x608>
 */
static void kernel_update_ticker(void)
{
    /* PORTD ^= LED_D5_RED; */

    if(PT > 0)
    1c5c:	c1 14       	cp	r12, r1
    1c5e:	d1 04       	cpc	r13, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <OS_Init+0x28c>
    1c62:	46 c0       	rjmp	.+140    	; 0x1cf0 <OS_Init+0x318>
    {
        --ticks_remaining;
    1c64:	80 91 ae 03 	lds	r24, 0x03AE
    1c68:	81 50       	subi	r24, 0x01	; 1
    1c6a:	80 93 ae 03 	sts	0x03AE, r24

        if(ticks_remaining <= 0)
    1c6e:	80 91 ae 03 	lds	r24, 0x03AE
    1c72:	18 16       	cp	r1, r24
    1c74:	ec f1       	brlt	.+122    	; 0x1cf0 <OS_Init+0x318>
        {                
			/* If Periodic task still running then error */
            if(cur_task != NULL && cur_task->level == PERIODIC && slot_task_finished == 0)
    1c76:	e0 91 ac 03 	lds	r30, 0x03AC
    1c7a:	f0 91 ad 03 	lds	r31, 0x03AD
    1c7e:	30 97       	sbiw	r30, 0x00	; 0
    1c80:	69 f0       	breq	.+26     	; 0x1c9c <OS_Init+0x2c4>
    1c82:	ea 5f       	subi	r30, 0xFA	; 250
    1c84:	fd 4f       	sbci	r31, 0xFD	; 253
    1c86:	80 81       	ld	r24, Z
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	41 f4       	brne	.+16     	; 0x1c9c <OS_Init+0x2c4>
    1c8c:	80 91 af 03 	lds	r24, 0x03AF
    1c90:	88 23       	and	r24, r24
    1c92:	21 f4       	brne	.+8      	; 0x1c9c <OS_Init+0x2c4>
            {
                /* error handling */
                error_msg = ERR_RUN_3_PERIODIC_TOOK_TOO_LONG;
    1c94:	40 92 89 02 	sts	0x0289, r4
                OS_Abort();
    1c98:	0e 94 87 0a 	call	0x150e	; 0x150e <OS_Abort>
            }

            slot_name_index += 2;
    1c9c:	80 91 b0 03 	lds	r24, 0x03B0
    1ca0:	90 91 b1 03 	lds	r25, 0x03B1
    1ca4:	02 96       	adiw	r24, 0x02	; 2
    1ca6:	90 93 b1 03 	sts	0x03B1, r25
    1caa:	80 93 b0 03 	sts	0x03B0, r24
            if(slot_name_index >= 2 * PT)
    1cae:	8a 15       	cp	r24, r10
    1cb0:	9b 05       	cpc	r25, r11
    1cb2:	20 f0       	brcs	.+8      	; 0x1cbc <OS_Init+0x2e4>
            {
                slot_name_index = 0;
    1cb4:	10 92 b1 03 	sts	0x03B1, r1
    1cb8:	10 92 b0 03 	sts	0x03B0, r1
            }

            ticks_remaining = PPP[slot_name_index + 1];
    1cbc:	e0 91 b0 03 	lds	r30, 0x03B0
    1cc0:	f0 91 b1 03 	lds	r31, 0x03B1
    1cc4:	e0 5e       	subi	r30, 0xE0	; 224
    1cc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cc8:	81 81       	ldd	r24, Z+1	; 0x01
    1cca:	80 93 ae 03 	sts	0x03AE, r24

            if(PPP[slot_name_index] == IDLE || name_to_task_ptr[PPP[slot_name_index]] == NULL)
    1cce:	e0 81       	ld	r30, Z
    1cd0:	ee 23       	and	r30, r30
    1cd2:	49 f0       	breq	.+18     	; 0x1ce6 <OS_Init+0x30e>
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	e3 5c       	subi	r30, 0xC3	; 195
    1cdc:	f9 4e       	sbci	r31, 0xE9	; 233
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	89 2b       	or	r24, r25
    1ce4:	19 f4       	brne	.+6      	; 0x1cec <OS_Init+0x314>
            {
				slot_task_finished = 1;
    1ce6:	10 93 af 03 	sts	0x03AF, r17
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <OS_Init+0x318>
            }
            else
            {
                slot_task_finished = 0;
    1cec:	10 92 af 03 	sts	0x03AF, r1

    case TIMER_EXPIRED:
		kernel_update_ticker();

        /* Round robin tasks get pre-empted on every tick. */
        if(cur_task->level == RR && cur_task->state == RUNNING)
    1cf0:	a0 91 ac 03 	lds	r26, 0x03AC
    1cf4:	b0 91 ad 03 	lds	r27, 0x03AD
    1cf8:	aa 5f       	subi	r26, 0xFA	; 250
    1cfa:	bd 4f       	sbci	r27, 0xFD	; 253
    1cfc:	8c 91       	ld	r24, X
    1cfe:	a6 50       	subi	r26, 0x06	; 6
    1d00:	b2 40       	sbci	r27, 0x02	; 2
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <OS_Init+0x330>
    1d06:	80 c1       	rjmp	.+768    	; 0x2008 <OS_Init+0x630>
    1d08:	fd 01       	movw	r30, r26
    1d0a:	ed 5f       	subi	r30, 0xFD	; 253
    1d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0e:	80 81       	ld	r24, Z
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <OS_Init+0x33e>
    1d14:	79 c1       	rjmp	.+754    	; 0x2008 <OS_Init+0x630>
        {
            cur_task->state = READY;
    1d16:	90 82       	st	Z, r9
    1d18:	5b c0       	rjmp	.+182    	; 0x1dd0 <OS_Init+0x3f8>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1d1a:	e0 91 17 16 	lds	r30, 0x1617
    1d1e:	f0 91 18 16 	lds	r31, 0x1618
    1d22:	e9 5f       	subi	r30, 0xF9	; 249
    1d24:	fd 4f       	sbci	r31, 0xFD	; 253
    1d26:	b1 83       	std	Z+1, r27	; 0x01
    1d28:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1d2a:	b0 93 18 16 	sts	0x1618, r27
    1d2e:	a0 93 17 16 	sts	0x1617, r26
    1d32:	6a c1       	rjmp	.+724    	; 0x2008 <OS_Init+0x630>
            enqueue(&rr_queue, cur_task);
        }
        break;

    case TASK_CREATE:
		kernel_request_retval = kernel_create_task();
    1d34:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <kernel_create_task>
    1d38:	90 93 0e 16 	sts	0x160E, r25
    1d3c:	80 93 0d 16 	sts	0x160D, r24

        /* Check if new task has higer priority, and that it wasn't an ISR
         * making the request.
         */
        if(kernel_request_retval)
    1d40:	80 91 0d 16 	lds	r24, 0x160D
    1d44:	90 91 0e 16 	lds	r25, 0x160E
    1d48:	89 2b       	or	r24, r25
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <OS_Init+0x376>
    1d4c:	5d c1       	rjmp	.+698    	; 0x2008 <OS_Init+0x630>
        {
            /* If new task is SYSTEM and cur is not, then don't run old one */
            if(kernel_request_create_args.level == SYSTEM && cur_task->level != SYSTEM)
    1d4e:	80 91 0b 16 	lds	r24, 0x160B
    1d52:	83 30       	cpi	r24, 0x03	; 3
    1d54:	71 f4       	brne	.+28     	; 0x1d72 <OS_Init+0x39a>
    1d56:	e0 91 ac 03 	lds	r30, 0x03AC
    1d5a:	f0 91 ad 03 	lds	r31, 0x03AD
    1d5e:	ea 5f       	subi	r30, 0xFA	; 250
    1d60:	fd 4f       	sbci	r31, 0xFD	; 253
    1d62:	80 81       	ld	r24, Z
    1d64:	e6 50       	subi	r30, 0x06	; 6
    1d66:	f2 40       	sbci	r31, 0x02	; 2
    1d68:	83 30       	cpi	r24, 0x03	; 3
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <OS_Init+0x39a>
            {
                cur_task->state = READY;
    1d6c:	ed 5f       	subi	r30, 0xFD	; 253
    1d6e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d70:	00 83       	st	Z, r16
            }

            /* If cur is RR, it might be pre-empted by a new PERIODIC. */
            if(cur_task->level == RR &&
    1d72:	a0 91 ac 03 	lds	r26, 0x03AC
    1d76:	b0 91 ad 03 	lds	r27, 0x03AD
    1d7a:	aa 5f       	subi	r26, 0xFA	; 250
    1d7c:	bd 4f       	sbci	r27, 0xFD	; 253
    1d7e:	8c 91       	ld	r24, X
    1d80:	a6 50       	subi	r26, 0x06	; 6
    1d82:	b2 40       	sbci	r27, 0x02	; 2
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	a1 f4       	brne	.+40     	; 0x1db0 <OS_Init+0x3d8>
    1d88:	20 91 0b 16 	lds	r18, 0x160B
    1d8c:	22 30       	cpi	r18, 0x02	; 2
    1d8e:	81 f4       	brne	.+32     	; 0x1db0 <OS_Init+0x3d8>
    1d90:	80 91 0c 16 	lds	r24, 0x160C
    1d94:	e0 91 b0 03 	lds	r30, 0x03B0
    1d98:	f0 91 b1 03 	lds	r31, 0x03B1
    1d9c:	e0 5e       	subi	r30, 0xE0	; 224
    1d9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1da0:	90 81       	ld	r25, Z
    1da2:	98 17       	cp	r25, r24
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <OS_Init+0x3d8>
               kernel_request_create_args.level == PERIODIC &&
               PPP[slot_name_index] == kernel_request_create_args.name)
            {
                cur_task->state = READY;
    1da6:	ad 5f       	subi	r26, 0xFD	; 253
    1da8:	bd 4f       	sbci	r27, 0xFD	; 253
    1daa:	2c 93       	st	X, r18
    1dac:	a3 50       	subi	r26, 0x03	; 3
    1dae:	b2 40       	sbci	r27, 0x02	; 2
            }

            /* enqueue READY RR tasks. */
            if(cur_task->level == RR && cur_task->state == READY)
    1db0:	aa 5f       	subi	r26, 0xFA	; 250
    1db2:	bd 4f       	sbci	r27, 0xFD	; 253
    1db4:	8c 91       	ld	r24, X
    1db6:	a6 50       	subi	r26, 0x06	; 6
    1db8:	b2 40       	sbci	r27, 0x02	; 2
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <OS_Init+0x3e8>
    1dbe:	24 c1       	rjmp	.+584    	; 0x2008 <OS_Init+0x630>
    1dc0:	ad 5f       	subi	r26, 0xFD	; 253
    1dc2:	bd 4f       	sbci	r27, 0xFD	; 253
    1dc4:	8c 91       	ld	r24, X
    1dc6:	a3 50       	subi	r26, 0x03	; 3
    1dc8:	b2 40       	sbci	r27, 0x02	; 2
    1dca:	82 30       	cpi	r24, 0x02	; 2
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <OS_Init+0x3f8>
    1dce:	1c c1       	rjmp	.+568    	; 0x2008 <OS_Init+0x630>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1dd0:	a9 5f       	subi	r26, 0xF9	; 249
    1dd2:	bd 4f       	sbci	r27, 0xFD	; 253
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	1c 92       	st	X, r1
    1dd8:	1e 92       	st	-X, r1
    1dda:	a7 50       	subi	r26, 0x07	; 7
    1ddc:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1dde:	80 91 15 16 	lds	r24, 0x1615
    1de2:	90 91 16 16 	lds	r25, 0x1616
    1de6:	89 2b       	or	r24, r25
    1de8:	09 f0       	breq	.+2      	; 0x1dec <OS_Init+0x414>
    1dea:	97 cf       	rjmp	.-210    	; 0x1d1a <OS_Init+0x342>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1dec:	b0 93 16 16 	sts	0x1616, r27
    1df0:	a0 93 15 16 	sts	0x1615, r26
    1df4:	9a cf       	rjmp	.-204    	; 0x1d2a <OS_Init+0x352>
            }
        }
        break;

    case TASK_TERMINATE:
		if(cur_task != idle_task)
    1df6:	a0 91 ac 03 	lds	r26, 0x03AC
    1dfa:	b0 91 ad 03 	lds	r27, 0x03AD
    1dfe:	ae 15       	cp	r26, r14
    1e00:	bf 05       	cpc	r27, r15
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <OS_Init+0x42e>
    1e04:	01 c1       	rjmp	.+514    	; 0x2008 <OS_Init+0x630>
 * @brief Kernel function to destroy the current task.
 */
static void kernel_terminate_task(void)
{
    /* deallocate all resources used by this task */
    cur_task->state = DEAD;
    1e06:	ad 5f       	subi	r26, 0xFD	; 253
    1e08:	bd 4f       	sbci	r27, 0xFD	; 253
    1e0a:	1c 92       	st	X, r1
    if(cur_task->level == PERIODIC)
    1e0c:	13 96       	adiw	r26, 0x03	; 3
    1e0e:	8c 91       	ld	r24, X
    1e10:	a6 50       	subi	r26, 0x06	; 6
    1e12:	b2 40       	sbci	r27, 0x02	; 2
    1e14:	82 30       	cpi	r24, 0x02	; 2
    1e16:	61 f4       	brne	.+24     	; 0x1e30 <OS_Init+0x458>
    {
        name_to_task_ptr[cur_task->name] = NULL;
    1e18:	ae 5f       	subi	r26, 0xFE	; 254
    1e1a:	bd 4f       	sbci	r27, 0xFD	; 253
    1e1c:	ec 91       	ld	r30, X
    1e1e:	a2 50       	subi	r26, 0x02	; 2
    1e20:	b2 40       	sbci	r27, 0x02	; 2
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	ee 0f       	add	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	e3 5c       	subi	r30, 0xC3	; 195
    1e2a:	f9 4e       	sbci	r31, 0xE9	; 233
    1e2c:	11 82       	std	Z+1, r1	; 0x01
    1e2e:	10 82       	st	Z, r1
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1e30:	a9 5f       	subi	r26, 0xF9	; 249
    1e32:	bd 4f       	sbci	r27, 0xFD	; 253
    1e34:	11 96       	adiw	r26, 0x01	; 1
    1e36:	1c 92       	st	X, r1
    1e38:	1e 92       	st	-X, r1
    1e3a:	a7 50       	subi	r26, 0x07	; 7
    1e3c:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1e3e:	80 91 11 16 	lds	r24, 0x1611
    1e42:	90 91 12 16 	lds	r25, 0x1612
    1e46:	89 2b       	or	r24, r25
    1e48:	29 f4       	brne	.+10     	; 0x1e54 <OS_Init+0x47c>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1e4a:	b0 93 12 16 	sts	0x1612, r27
    1e4e:	a0 93 11 16 	sts	0x1611, r26
    1e52:	08 c0       	rjmp	.+16     	; 0x1e64 <OS_Init+0x48c>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1e54:	e0 91 13 16 	lds	r30, 0x1613
    1e58:	f0 91 14 16 	lds	r31, 0x1614
    1e5c:	e9 5f       	subi	r30, 0xF9	; 249
    1e5e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e60:	b1 83       	std	Z+1, r27	; 0x01
    1e62:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1e64:	b0 93 14 16 	sts	0x1614, r27
    1e68:	a0 93 13 16 	sts	0x1613, r26
    1e6c:	cd c0       	rjmp	.+410    	; 0x2008 <OS_Init+0x630>
        	kernel_terminate_task();
		}
        break;

    case TASK_NEXT:
		switch(cur_task->level)
    1e6e:	a0 91 ac 03 	lds	r26, 0x03AC
    1e72:	b0 91 ad 03 	lds	r27, 0x03AD
    1e76:	aa 5f       	subi	r26, 0xFA	; 250
    1e78:	bd 4f       	sbci	r27, 0xFD	; 253
    1e7a:	8c 91       	ld	r24, X
    1e7c:	a6 50       	subi	r26, 0x06	; 6
    1e7e:	b2 40       	sbci	r27, 0x02	; 2
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	29 f1       	breq	.+74     	; 0x1ece <OS_Init+0x4f6>
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	21 f0       	breq	.+8      	; 0x1e90 <OS_Init+0x4b8>
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	09 f0       	breq	.+2      	; 0x1e8e <OS_Init+0x4b6>
    1e8c:	41 c0       	rjmp	.+130    	; 0x1f10 <OS_Init+0x538>
    1e8e:	22 c0       	rjmp	.+68     	; 0x1ed4 <OS_Init+0x4fc>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1e90:	a9 5f       	subi	r26, 0xF9	; 249
    1e92:	bd 4f       	sbci	r27, 0xFD	; 253
    1e94:	11 96       	adiw	r26, 0x01	; 1
    1e96:	1c 92       	st	X, r1
    1e98:	1e 92       	st	-X, r1
    1e9a:	a7 50       	subi	r26, 0x07	; 7
    1e9c:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1e9e:	80 91 19 16 	lds	r24, 0x1619
    1ea2:	90 91 1a 16 	lds	r25, 0x161A
    1ea6:	89 2b       	or	r24, r25
    1ea8:	29 f4       	brne	.+10     	; 0x1eb4 <OS_Init+0x4dc>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1eaa:	b0 93 1a 16 	sts	0x161A, r27
    1eae:	a0 93 19 16 	sts	0x1619, r26
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <OS_Init+0x4ec>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1eb4:	e0 91 1b 16 	lds	r30, 0x161B
    1eb8:	f0 91 1c 16 	lds	r31, 0x161C
    1ebc:	e9 5f       	subi	r30, 0xF9	; 249
    1ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec0:	b1 83       	std	Z+1, r27	; 0x01
    1ec2:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1ec4:	b0 93 1c 16 	sts	0x161C, r27
    1ec8:	a0 93 1b 16 	sts	0x161B, r26
    1ecc:	21 c0       	rjmp	.+66     	; 0x1f10 <OS_Init+0x538>
	    case SYSTEM:
	        enqueue(&system_queue, cur_task);
			break;

	    case PERIODIC:
			slot_task_finished = 1;
    1ece:	10 93 af 03 	sts	0x03AF, r17
    1ed2:	1e c0       	rjmp	.+60     	; 0x1f10 <OS_Init+0x538>
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1ed4:	a9 5f       	subi	r26, 0xF9	; 249
    1ed6:	bd 4f       	sbci	r27, 0xFD	; 253
    1ed8:	11 96       	adiw	r26, 0x01	; 1
    1eda:	1c 92       	st	X, r1
    1edc:	1e 92       	st	-X, r1
    1ede:	a7 50       	subi	r26, 0x07	; 7
    1ee0:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1ee2:	80 91 15 16 	lds	r24, 0x1615
    1ee6:	90 91 16 16 	lds	r25, 0x1616
    1eea:	89 2b       	or	r24, r25
    1eec:	29 f4       	brne	.+10     	; 0x1ef8 <OS_Init+0x520>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1eee:	b0 93 16 16 	sts	0x1616, r27
    1ef2:	a0 93 15 16 	sts	0x1615, r26
    1ef6:	08 c0       	rjmp	.+16     	; 0x1f08 <OS_Init+0x530>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1ef8:	e0 91 17 16 	lds	r30, 0x1617
    1efc:	f0 91 18 16 	lds	r31, 0x1618
    1f00:	e9 5f       	subi	r30, 0xF9	; 249
    1f02:	fd 4f       	sbci	r31, 0xFD	; 253
    1f04:	b1 83       	std	Z+1, r27	; 0x01
    1f06:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1f08:	b0 93 18 16 	sts	0x1618, r27
    1f0c:	a0 93 17 16 	sts	0x1617, r26

	    default: /* idle_task */
			break;
		}

		cur_task->state = READY;
    1f10:	ad 5f       	subi	r26, 0xFD	; 253
    1f12:	bd 4f       	sbci	r27, 0xFD	; 253
    1f14:	9c 92       	st	X, r9
    1f16:	78 c0       	rjmp	.+240    	; 0x2008 <OS_Init+0x630>
        /* Should not happen. Handled in task itself. */
        break;

    case EVENT_INIT:
        kernel_request_event_ptr = NULL;
        if(num_events_created < MAXEVENT)
    1f18:	20 91 b2 03 	lds	r18, 0x03B2
    1f1c:	28 30       	cpi	r18, 0x08	; 8
    1f1e:	58 f4       	brcc	.+22     	; 0x1f36 <OS_Init+0x55e>
        {
            /* Pass a number back to the task, but pretend it is a pointer.
             * It is the index of the event_queue plus 1.
             * (0 is return value for failure.)
             */
            kernel_request_event_ptr = (EVENT *)(uint16_t)(num_events_created + 1);
    1f20:	82 2f       	mov	r24, r18
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	90 93 10 16 	sts	0x1610, r25
    1f2a:	80 93 0f 16 	sts	0x160F, r24
            /*
            event_queue[num_events_created].head = NULL;
            event_queue[num_events_created].tail = NULL;
            */
            ++num_events_created;
    1f2e:	2f 5f       	subi	r18, 0xFF	; 255
    1f30:	20 93 b2 03 	sts	0x03B2, r18
    1f34:	69 c0       	rjmp	.+210    	; 0x2008 <OS_Init+0x630>
        }
        else
        {
            kernel_request_event_ptr = (EVENT *)(uint16_t)0;
    1f36:	10 92 10 16 	sts	0x1610, r1
    1f3a:	10 92 0f 16 	sts	0x160F, r1
    1f3e:	64 c0       	rjmp	.+200    	; 0x2008 <OS_Init+0x630>
        }
        break;

    case EVENT_WAIT:
        /* idle_task does not wait. */
		if(cur_task != idle_task)
    1f40:	a0 91 ac 03 	lds	r26, 0x03AC
    1f44:	b0 91 ad 03 	lds	r27, 0x03AD
    1f48:	ae 15       	cp	r26, r14
    1f4a:	bf 05       	cpc	r27, r15
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <OS_Init+0x578>
    1f4e:	5c c0       	rjmp	.+184    	; 0x2008 <OS_Init+0x630>
 * @brief Kernel function to place current task in a waiting queue.
 */
static void kernel_event_wait(void)
{
    /* Check the handle of the event to ensure that it is initialized. */
    uint8_t handle = (uint8_t)((uint16_t)(kernel_request_event_ptr) - 1);
    1f50:	80 91 0f 16 	lds	r24, 0x160F
    1f54:	98 2f       	mov	r25, r24
    1f56:	91 50       	subi	r25, 0x01	; 1

    if(handle >= num_events_created)
    1f58:	80 91 b2 03 	lds	r24, 0x03B2
    1f5c:	98 17       	cp	r25, r24
    1f5e:	18 f0       	brcs	.+6      	; 0x1f66 <OS_Init+0x58e>
    {
        /* Error code. */
        error_msg = ERR_RUN_5_WAIT_ON_BAD_EVENT;
    1f60:	50 92 89 02 	sts	0x0289, r5
    1f64:	4f c0       	rjmp	.+158    	; 0x2004 <OS_Init+0x62c>
        OS_Abort();
    }
    else if(cur_task->level == PERIODIC)
    1f66:	aa 5f       	subi	r26, 0xFA	; 250
    1f68:	bd 4f       	sbci	r27, 0xFD	; 253
    1f6a:	8c 91       	ld	r24, X
    1f6c:	a6 50       	subi	r26, 0x06	; 6
    1f6e:	b2 40       	sbci	r27, 0x02	; 2
    1f70:	82 30       	cpi	r24, 0x02	; 2
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <OS_Init+0x5a2>
	{
		error_msg = ERR_RUN_7_PERIODIC_CALLED_WAIT;
    1f74:	60 92 89 02 	sts	0x0289, r6
    1f78:	45 c0       	rjmp	.+138    	; 0x2004 <OS_Init+0x62c>
		OS_Abort();
	}
	else
    {
        /* Place this task in a queue. */
        cur_task->state = WAITING;
    1f7a:	ad 5f       	subi	r26, 0xFD	; 253
    1f7c:	bd 4f       	sbci	r27, 0xFD	; 253
    1f7e:	7c 92       	st	X, r7
        enqueue(&event_queue[handle], cur_task);
    1f80:	c9 2f       	mov	r28, r25
    1f82:	d0 e0       	ldi	r29, 0x00	; 0
    1f84:	cc 0f       	add	r28, r28
    1f86:	dd 1f       	adc	r29, r29
    1f88:	cc 0f       	add	r28, r28
    1f8a:	dd 1f       	adc	r29, r29
    1f8c:	c3 5e       	subi	r28, 0xE3	; 227
    1f8e:	d9 4e       	sbci	r29, 0xE9	; 233
 * @param queue_ptr the queue to insert in
 * @param task_to_add the task descriptor to add
 */
static void enqueue(queue_t* queue_ptr, task_descriptor_t* task_to_add)
{
    task_to_add->next = NULL;
    1f90:	14 96       	adiw	r26, 0x04	; 4
    1f92:	11 96       	adiw	r26, 0x01	; 1
    1f94:	1c 92       	st	X, r1
    1f96:	1e 92       	st	-X, r1
    1f98:	a7 50       	subi	r26, 0x07	; 7
    1f9a:	b2 40       	sbci	r27, 0x02	; 2

    if(queue_ptr->head == NULL)
    1f9c:	88 81       	ld	r24, Y
    1f9e:	99 81       	ldd	r25, Y+1	; 0x01
    1fa0:	89 2b       	or	r24, r25
    1fa2:	19 f4       	brne	.+6      	; 0x1faa <OS_Init+0x5d2>
    {
        /* empty queue */
        queue_ptr->head = task_to_add;
    1fa4:	b9 83       	std	Y+1, r27	; 0x01
    1fa6:	a8 83       	st	Y, r26
    1fa8:	06 c0       	rjmp	.+12     	; 0x1fb6 <OS_Init+0x5de>
        queue_ptr->tail = task_to_add;
    }
    else
    {
        /* put task at the back of the queue */
        queue_ptr->tail->next = task_to_add;
    1faa:	ea 81       	ldd	r30, Y+2	; 0x02
    1fac:	fb 81       	ldd	r31, Y+3	; 0x03
    1fae:	e9 5f       	subi	r30, 0xF9	; 249
    1fb0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fb2:	b1 83       	std	Z+1, r27	; 0x01
    1fb4:	a0 83       	st	Z, r26
        queue_ptr->tail = task_to_add;
    1fb6:	bb 83       	std	Y+3, r27	; 0x03
    1fb8:	aa 83       	std	Y+2, r26	; 0x02
    1fba:	26 c0       	rjmp	.+76     	; 0x2008 <OS_Init+0x630>
        }

        break;

    case EVENT_SIGNAL:
        kernel_event_signal(0 /* not broadcast */, 0 /* not task_next */);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <OS_Init+0x5ea>
        break;

    case EVENT_BROADCAST:
        kernel_event_signal(1 /* is broadcast */, 0 /* not task_next */);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	1a c0       	rjmp	.+52     	; 0x1ffa <OS_Init+0x622>
        break;

    case EVENT_SIGNAL_AND_NEXT:
        if(cur_task->level == PERIODIC)
    1fc6:	e0 91 ac 03 	lds	r30, 0x03AC
    1fca:	f0 91 ad 03 	lds	r31, 0x03AD
    1fce:	ea 5f       	subi	r30, 0xFA	; 250
    1fd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fd2:	80 81       	ld	r24, Z
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <OS_Init+0x604>
        {
            slot_task_finished = 1;
    1fd8:	10 93 af 03 	sts	0x03AF, r17
        }

        kernel_event_signal(0 /* not broadcast */, 1 /* is task_next */);
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	0c c0       	rjmp	.+24     	; 0x1ff8 <OS_Init+0x620>

        break;

    case EVENT_BROADCAST_AND_NEXT:
        if(cur_task->level == PERIODIC)
    1fe0:	e0 91 ac 03 	lds	r30, 0x03AC
    1fe4:	f0 91 ad 03 	lds	r31, 0x03AD
    1fe8:	ea 5f       	subi	r30, 0xFA	; 250
    1fea:	fd 4f       	sbci	r31, 0xFD	; 253
    1fec:	80 81       	ld	r24, Z
    1fee:	82 30       	cpi	r24, 0x02	; 2
    1ff0:	11 f4       	brne	.+4      	; 0x1ff6 <OS_Init+0x61e>
        {
            slot_task_finished = 1;
    1ff2:	10 93 af 03 	sts	0x03AF, r17
        }

        kernel_event_signal(1 /* is broadcast */, 1 /* is task_next */);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	61 e0       	ldi	r22, 0x01	; 1
    1ffa:	0e 94 af 0b 	call	0x175e	; 0x175e <kernel_event_signal>
    1ffe:	04 c0       	rjmp	.+8      	; 0x2008 <OS_Init+0x630>
        break;

    default:
        /* Should never happen */
        error_msg = ERR_RUN_8_RTOS_INTERNAL_ERROR;
    2000:	80 92 89 02 	sts	0x0289, r8
        OS_Abort();
    2004:	0e 94 87 0a 	call	0x150e	; 0x150e <OS_Abort>
        break;
    }

    kernel_request = NONE;
    2008:	10 92 06 16 	sts	0x1606, r1
    200c:	96 cd       	rjmp	.-1236   	; 0x1b3a <OS_Init+0x162>

0000200e <Task_Create>:
 *  If the process is PERIODIC, then its @a name is a user-specified name
 *  to be used in the PPP[] array. Otherwise, @a name is ignored.
 * @sa @ref policy
 */
int Task_Create(void (*f)(void), int arg, unsigned int level, unsigned int name)
{
    200e:	1f 93       	push	r17
    int retval;
    uint8_t sreg;

    sreg = SREG;
    2010:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    2012:	f8 94       	cli

    kernel_request_create_args.f = (voidfuncvoid_ptr)f;
    2014:	90 93 08 16 	sts	0x1608, r25
    2018:	80 93 07 16 	sts	0x1607, r24
    kernel_request_create_args.arg = arg;
    201c:	70 93 0a 16 	sts	0x160A, r23
    2020:	60 93 09 16 	sts	0x1609, r22
    kernel_request_create_args.level = (uint8_t)level;
    2024:	40 93 0b 16 	sts	0x160B, r20
    kernel_request_create_args.name = (uint8_t)name;
    2028:	20 93 0c 16 	sts	0x160C, r18

    kernel_request = TASK_CREATE;
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	80 93 06 16 	sts	0x1606, r24
    enter_kernel();
    2032:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    retval = kernel_request_retval;
    2036:	20 91 0d 16 	lds	r18, 0x160D
    203a:	30 91 0e 16 	lds	r19, 0x160E
    SREG = sreg;
    203e:	1f bf       	out	0x3f, r17	; 63

    return retval;
}
    2040:	c9 01       	movw	r24, r18
    2042:	1f 91       	pop	r17
    2044:	08 95       	ret

00002046 <Task_Next>:

/**
  * @brief The calling task gives up its share of the processor voluntarily.
  */
void Task_Next()
{
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	0f 92       	push	r0
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    uint8_t volatile sreg;

	sreg = SREG;
    2050:	8f b7       	in	r24, 0x3f	; 63
    2052:	89 83       	std	Y+1, r24	; 0x01
    Disable_Interrupt();
    2054:	f8 94       	cli

    kernel_request = TASK_NEXT;
    2056:	84 e0       	ldi	r24, 0x04	; 4
    2058:	80 93 06 16 	sts	0x1606, r24
    enter_kernel();
    205c:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

	SREG = sreg;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	8f bf       	out	0x3f, r24	; 63
}
    2064:	0f 90       	pop	r0
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <Task_Terminate>:

/**
  * @brief The calling task terminates itself.
  */
void Task_Terminate()
{
    206c:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    206e:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    2070:	f8 94       	cli

    kernel_request = TASK_TERMINATE;
    2072:	83 e0       	ldi	r24, 0x03	; 3
    2074:	80 93 06 16 	sts	0x1606, r24
    enter_kernel();
    2078:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    SREG = sreg;
    207c:	1f bf       	out	0x3f, r17	; 63
}
    207e:	1f 91       	pop	r17
    2080:	08 95       	ret

00002082 <Task_GetArg>:
int Task_GetArg(void)
{
    int arg;
    uint8_t sreg;

    sreg = SREG;
    2082:	8f b7       	in	r24, 0x3f	; 63
    Disable_Interrupt();
    2084:	f8 94       	cli

    arg = cur_task->arg;

    SREG = sreg;
    2086:	8f bf       	out	0x3f, r24	; 63
    2088:	e0 91 ac 03 	lds	r30, 0x03AC
    208c:	f0 91 ad 03 	lds	r31, 0x03AD
    2090:	ec 5f       	subi	r30, 0xFC	; 252
    2092:	fd 4f       	sbci	r31, 0xFD	; 253

    return arg;
}
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	08 95       	ret

0000209a <Event_Init>:
 * @brief Initialize a new, non-NULL Event descriptor.
 *  
 * @return a non-NULL Event descriptor if successful; NULL otherwise.
 */
EVENT *Event_Init(void)
{
    209a:	1f 93       	push	r17
    EVENT* event_ptr;
    uint8_t sreg;

    sreg = SREG;
    209c:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    209e:	f8 94       	cli

    kernel_request = EVENT_INIT;
    20a0:	86 e0       	ldi	r24, 0x06	; 6
    20a2:	80 93 06 16 	sts	0x1606, r24
    enter_kernel();
    20a6:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    event_ptr = (EVENT *)kernel_request_event_ptr;

    SREG = sreg;
    20aa:	1f bf       	out	0x3f, r17	; 63

    return event_ptr;
}
    20ac:	80 91 0f 16 	lds	r24, 0x160F
    20b0:	90 91 10 16 	lds	r25, 0x1610
    20b4:	1f 91       	pop	r17
    20b6:	08 95       	ret

000020b8 <Event_Wait>:
  * @brief Wait for the next occurrence of a signal on \a e. The calling process always blocks.
  * 
  * @param e  an Event descriptor
  */
void Event_Wait(EVENT *e)
{
    20b8:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    20ba:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    20bc:	f8 94       	cli

    kernel_request = EVENT_WAIT;
    20be:	27 e0       	ldi	r18, 0x07	; 7
    20c0:	20 93 06 16 	sts	0x1606, r18
    kernel_request_event_ptr = e;
    20c4:	90 93 10 16 	sts	0x1610, r25
    20c8:	80 93 0f 16 	sts	0x160F, r24
    enter_kernel();
    20cc:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    SREG = sreg;
    20d0:	1f bf       	out	0x3f, r17	; 63
}
    20d2:	1f 91       	pop	r17
    20d4:	08 95       	ret

000020d6 <Event_Signal>:
  *
  * @brief Resume a \b single waiting task on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Signal(EVENT *e)
{
    20d6:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    20d8:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    20da:	f8 94       	cli

    kernel_request = EVENT_SIGNAL;
    20dc:	28 e0       	ldi	r18, 0x08	; 8
    20de:	20 93 06 16 	sts	0x1606, r18
    kernel_request_event_ptr = e;
    20e2:	90 93 10 16 	sts	0x1610, r25
    20e6:	80 93 0f 16 	sts	0x160F, r24
    enter_kernel();
    20ea:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    SREG = sreg;
    20ee:	1f bf       	out	0x3f, r17	; 63
}
    20f0:	1f 91       	pop	r17
    20f2:	08 95       	ret

000020f4 <Event_Broadcast>:
  *
  * @brief Resume \b ALL waiting tasks on \a e. It is a \a no-op if there is no waiting process.
  * \sa Event_Wait()
  */
void Event_Broadcast(EVENT *e)
{
    20f4:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    20f6:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    20f8:	f8 94       	cli

    kernel_request = EVENT_BROADCAST;
    20fa:	29 e0       	ldi	r18, 0x09	; 9
    20fc:	20 93 06 16 	sts	0x1606, r18
    kernel_request_event_ptr = e;
    2100:	90 93 10 16 	sts	0x1610, r25
    2104:	80 93 0f 16 	sts	0x160F, r24
    enter_kernel();
    2108:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    SREG = sreg;
    210c:	1f bf       	out	0x3f, r17	; 63
}
    210e:	1f 91       	pop	r17
    2110:	08 95       	ret

00002112 <Signal_And_Next>:
  * an indivisible unit. So conceptually, the calling task resumes another
  * waiting task and gives up its share of the processor simultaneously.
  * \sa Event_Signal(), Task_Next()
  */
void  Signal_And_Next(EVENT *e)
{
    2112:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    2114:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    2116:	f8 94       	cli

    kernel_request = EVENT_SIGNAL_AND_NEXT;
    2118:	2a e0       	ldi	r18, 0x0A	; 10
    211a:	20 93 06 16 	sts	0x1606, r18
    kernel_request_event_ptr = e;
    211e:	90 93 10 16 	sts	0x1610, r25
    2122:	80 93 0f 16 	sts	0x160F, r24
    enter_kernel();
    2126:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    SREG = sreg;
    212a:	1f bf       	out	0x3f, r17	; 63
}
    212c:	1f 91       	pop	r17
    212e:	08 95       	ret

00002130 <Broadcast_And_Next>:
  *
  * This is equivalent to "Event_Broadcast( e ); Task_Next()" in concept.
  * \sa Event_Broadcast(), Task_Next()
  */
void  Broadcast_And_Next(EVENT *e)
{
    2130:	1f 93       	push	r17
    uint8_t sreg;

    sreg = SREG;
    2132:	1f b7       	in	r17, 0x3f	; 63
    Disable_Interrupt();
    2134:	f8 94       	cli

    kernel_request = EVENT_BROADCAST_AND_NEXT;
    2136:	2b e0       	ldi	r18, 0x0B	; 11
    2138:	20 93 06 16 	sts	0x1606, r18
    kernel_request_event_ptr = e;
    213c:	90 93 10 16 	sts	0x1610, r25
    2140:	80 93 0f 16 	sts	0x160F, r24
    enter_kernel();
    2144:	0e 94 c1 09 	call	0x1382	; 0x1382 <enter_kernel>

    SREG = sreg;
    2148:	1f bf       	out	0x3f, r17	; 63
}
    214a:	1f 91       	pop	r17
    214c:	08 95       	ret

0000214e <__vector_not_set>:
 * The default action is to reset,
 * but it could be changed to do something else.
 */   
void __vector_not_set (void) __attribute__ ((naked)) __attribute__ ((section (".text")));
void __vector_not_set (void)
{
    214e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002152 <uart_putchar>:
*/
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
    2152:	98 2f       	mov	r25, r24
	cli();
    2154:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    2156:	80 91 c0 00 	lds	r24, 0x00C0
    215a:	85 ff       	sbrs	r24, 5
    215c:	fc cf       	rjmp	.-8      	; 0x2156 <uart_putchar+0x4>
	UDR0 = c;  // Putting data into the buffer, forces transmission
    215e:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    2162:	78 94       	sei
}
    2164:	08 95       	ret

00002166 <uart_getchar>:

char uart_getchar (int index)
{
    2166:	fc 01       	movw	r30, r24
	if (index < UART_BUFFER_SIZE) {
    2168:	84 36       	cpi	r24, 0x64	; 100
    216a:	91 05       	cpc	r25, r1
    216c:	14 f0       	brlt	.+4      	; 0x2172 <uart_getchar+0xc>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	08 95       	ret
		return rx[index];
    2172:	e6 5a       	subi	r30, 0xA6	; 166
    2174:	f9 4e       	sbci	r31, 0xE9	; 233
    2176:	80 81       	ld	r24, Z
	}
	return 0;
}
    2178:	08 95       	ret

0000217a <uart_putstr>:

void uart_putstr(char *s)
{
    217a:	fc 01       	movw	r30, r24
    217c:	09 c0       	rjmp	.+18     	; 0x2190 <uart_putstr+0x16>
static volatile int rxn; // buffer 'element' counter.
static volatile char rx[UART_BUFFER_SIZE]; // buffer of 'char'.

void uart_putchar (char c)
{
	cli();
    217e:	f8 94       	cli
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
    2180:	80 91 c0 00 	lds	r24, 0x00C0
    2184:	85 ff       	sbrs	r24, 5
    2186:	fc cf       	rjmp	.-8      	; 0x2180 <uart_putstr+0x6>
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    2188:	31 96       	adiw	r30, 0x01	; 1

void uart_putchar (char c)
{
	cli();
	while ( !( UCSR0A & (1<<UDRE0)) ); // Wait for empty transmit buffer           
	UDR0 = c;  // Putting data into the buffer, forces transmission
    218a:	90 93 c6 00 	sts	0x00C6, r25
	sei();
    218e:	78 94       	sei
	return 0;
}

void uart_putstr(char *s)
{
	while(*s) uart_putchar(*s++);
    2190:	90 81       	ld	r25, Z
    2192:	99 23       	and	r25, r25
    2194:	a1 f7       	brne	.-24     	; 0x217e <uart_putstr+0x4>
	
}
    2196:	08 95       	ret

00002198 <uart_init>:

void uart_init(UART_BPS bitrate){
    2198:	98 2f       	mov	r25, r24

	DDRB = 0xff;
    219a:	8f ef       	ldi	r24, 0xFF	; 255
    219c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xff;
    219e:	85 b9       	out	0x05, r24	; 5

	rxn = 0;
    21a0:	10 92 59 16 	sts	0x1659, r1
    21a4:	10 92 58 16 	sts	0x1658, r1
	uart_rx = 0;
    21a8:	10 92 3c 17 	sts	0x173C, r1

	/* Set baud rate */
	UBRR0H = 0;
    21ac:	10 92 c5 00 	sts	0x00C5, r1
	switch (bitrate) {
    21b0:	99 23       	and	r25, r25
    21b2:	11 f4       	brne	.+4      	; 0x21b8 <uart_init+0x20>
    case UART_38400:
	    UBRR0L = 12;
    21b4:	8c e0       	ldi	r24, 0x0C	; 12
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <uart_init+0x22>
		break;
    case UART_57600:
        UBRR0L = 6;
        break;
    default:
        UBRR0L = 6;
    21b8:	86 e0       	ldi	r24, 0x06	; 6
    21ba:	80 93 c4 00 	sts	0x00C4, r24
    }

	/* Enable receiver and transmitter */
	UCSR0B = _BV(RXEN0)|_BV(TXEN0) | _BV(RXCIE0);
    21be:	88 e9       	ldi	r24, 0x98	; 152
    21c0:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(1<<UCSZ00) | _BV(UCSZ01);
    21c4:	8e e0       	ldi	r24, 0x0E	; 14
    21c6:	80 93 c2 00 	sts	0x00C2, r24
}
    21ca:	08 95       	ret

000021cc <uart_bytes_recv>:

uint8_t uart_bytes_recv(void)
{
	return rxn;
    21cc:	80 91 58 16 	lds	r24, 0x1658
    21d0:	90 91 59 16 	lds	r25, 0x1659
}
    21d4:	08 95       	ret

000021d6 <uart_reset_recv>:

void uart_reset_recv(void)
{
	rxn = 0;
    21d6:	10 92 59 16 	sts	0x1659, r1
    21da:	10 92 58 16 	sts	0x1658, r1
}
    21de:	08 95       	ret

000021e0 <__vector_25>:
/*
 Interrupt Service Routine (ISR):
*/

ISR(USART0_RX_vect)
{
    21e0:	1f 92       	push	r1
    21e2:	0f 92       	push	r0
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	0f 92       	push	r0
    21e8:	0b b6       	in	r0, 0x3b	; 59
    21ea:	0f 92       	push	r0
    21ec:	11 24       	eor	r1, r1
    21ee:	2f 93       	push	r18
    21f0:	3f 93       	push	r19
    21f2:	5f 93       	push	r21
    21f4:	6f 93       	push	r22
    21f6:	7f 93       	push	r23
    21f8:	8f 93       	push	r24
    21fa:	9f 93       	push	r25
    21fc:	af 93       	push	r26
    21fe:	bf 93       	push	r27
    2200:	ef 93       	push	r30
    2202:	ff 93       	push	r31
	while ( !(UCSR0A & (1<<RXC0)) );
    2204:	80 91 c0 00 	lds	r24, 0x00C0
    2208:	87 ff       	sbrs	r24, 7
    220a:	fc cf       	rjmp	.-8      	; 0x2204 <__vector_25+0x24>

	//PORTB = ~_BV(PINB1);

	rx[rxn] = UDR0;
    220c:	e0 91 58 16 	lds	r30, 0x1658
    2210:	f0 91 59 16 	lds	r31, 0x1659
    2214:	80 91 c6 00 	lds	r24, 0x00C6
    2218:	e6 5a       	subi	r30, 0xA6	; 166
    221a:	f9 4e       	sbci	r31, 0xE9	; 233
    221c:	80 83       	st	Z, r24
	rxn = (rxn + 1) % UART_BUFFER_SIZE;
    221e:	80 91 58 16 	lds	r24, 0x1658
    2222:	90 91 59 16 	lds	r25, 0x1659
    2226:	01 96       	adiw	r24, 0x01	; 1
    2228:	64 e6       	ldi	r22, 0x64	; 100
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	0e 94 32 1a 	call	0x3464	; 0x3464 <__divmodhi4>
    2230:	90 93 59 16 	sts	0x1659, r25
    2234:	80 93 58 16 	sts	0x1658, r24
	uart_rx = 1; // notify main of receipt of data.
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 3c 17 	sts	0x173C, r24
	//PORTB = PORTB | _BV(PINB1);
}
    223e:	ff 91       	pop	r31
    2240:	ef 91       	pop	r30
    2242:	bf 91       	pop	r27
    2244:	af 91       	pop	r26
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	7f 91       	pop	r23
    224c:	6f 91       	pop	r22
    224e:	5f 91       	pop	r21
    2250:	3f 91       	pop	r19
    2252:	2f 91       	pop	r18
    2254:	0f 90       	pop	r0
    2256:	0b be       	out	0x3b, r0	; 59
    2258:	0f 90       	pop	r0
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	0f 90       	pop	r0
    225e:	1f 90       	pop	r1
    2260:	18 95       	reti

00002262 <__fixunssfsi>:
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	7b 01       	movw	r14, r22
    226c:	8c 01       	movw	r16, r24
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	5f e4       	ldi	r21, 0x4F	; 79
    2276:	0e 94 ad 14 	call	0x295a	; 0x295a <__gesf2>
    227a:	88 23       	and	r24, r24
    227c:	8c f0       	brlt	.+34     	; 0x22a0 <__fixunssfsi+0x3e>
    227e:	c8 01       	movw	r24, r16
    2280:	b7 01       	movw	r22, r14
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	5f e4       	ldi	r21, 0x4F	; 79
    228a:	0e 94 a9 12 	call	0x2552	; 0x2552 <__subsf3>
    228e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fixsfsi>
    2292:	9b 01       	movw	r18, r22
    2294:	ac 01       	movw	r20, r24
    2296:	20 50       	subi	r18, 0x00	; 0
    2298:	30 40       	sbci	r19, 0x00	; 0
    229a:	40 40       	sbci	r20, 0x00	; 0
    229c:	50 48       	sbci	r21, 0x80	; 128
    229e:	06 c0       	rjmp	.+12     	; 0x22ac <__fixunssfsi+0x4a>
    22a0:	c8 01       	movw	r24, r16
    22a2:	b7 01       	movw	r22, r14
    22a4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fixsfsi>
    22a8:	9b 01       	movw	r18, r22
    22aa:	ac 01       	movw	r20, r24
    22ac:	b9 01       	movw	r22, r18
    22ae:	ca 01       	movw	r24, r20
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	08 95       	ret

000022ba <_fpadd_parts>:
    22ba:	a0 e0       	ldi	r26, 0x00	; 0
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e3 e6       	ldi	r30, 0x63	; 99
    22c0:	f1 e1       	ldi	r31, 0x11	; 17
    22c2:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__prologue_saves__>
    22c6:	dc 01       	movw	r26, r24
    22c8:	2b 01       	movw	r4, r22
    22ca:	fa 01       	movw	r30, r20
    22cc:	9c 91       	ld	r25, X
    22ce:	92 30       	cpi	r25, 0x02	; 2
    22d0:	08 f4       	brcc	.+2      	; 0x22d4 <_fpadd_parts+0x1a>
    22d2:	39 c1       	rjmp	.+626    	; 0x2546 <_fpadd_parts+0x28c>
    22d4:	eb 01       	movw	r28, r22
    22d6:	88 81       	ld	r24, Y
    22d8:	82 30       	cpi	r24, 0x02	; 2
    22da:	08 f4       	brcc	.+2      	; 0x22de <_fpadd_parts+0x24>
    22dc:	33 c1       	rjmp	.+614    	; 0x2544 <_fpadd_parts+0x28a>
    22de:	94 30       	cpi	r25, 0x04	; 4
    22e0:	69 f4       	brne	.+26     	; 0x22fc <_fpadd_parts+0x42>
    22e2:	84 30       	cpi	r24, 0x04	; 4
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <_fpadd_parts+0x2e>
    22e6:	2f c1       	rjmp	.+606    	; 0x2546 <_fpadd_parts+0x28c>
    22e8:	11 96       	adiw	r26, 0x01	; 1
    22ea:	9c 91       	ld	r25, X
    22ec:	11 97       	sbiw	r26, 0x01	; 1
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	98 17       	cp	r25, r24
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <_fpadd_parts+0x3c>
    22f4:	28 c1       	rjmp	.+592    	; 0x2546 <_fpadd_parts+0x28c>
    22f6:	ac e8       	ldi	r26, 0x8C	; 140
    22f8:	b2 e0       	ldi	r27, 0x02	; 2
    22fa:	25 c1       	rjmp	.+586    	; 0x2546 <_fpadd_parts+0x28c>
    22fc:	84 30       	cpi	r24, 0x04	; 4
    22fe:	09 f4       	brne	.+2      	; 0x2302 <_fpadd_parts+0x48>
    2300:	21 c1       	rjmp	.+578    	; 0x2544 <_fpadd_parts+0x28a>
    2302:	82 30       	cpi	r24, 0x02	; 2
    2304:	a9 f4       	brne	.+42     	; 0x2330 <_fpadd_parts+0x76>
    2306:	92 30       	cpi	r25, 0x02	; 2
    2308:	09 f0       	breq	.+2      	; 0x230c <_fpadd_parts+0x52>
    230a:	1d c1       	rjmp	.+570    	; 0x2546 <_fpadd_parts+0x28c>
    230c:	9a 01       	movw	r18, r20
    230e:	ad 01       	movw	r20, r26
    2310:	88 e0       	ldi	r24, 0x08	; 8
    2312:	ea 01       	movw	r28, r20
    2314:	09 90       	ld	r0, Y+
    2316:	ae 01       	movw	r20, r28
    2318:	e9 01       	movw	r28, r18
    231a:	09 92       	st	Y+, r0
    231c:	9e 01       	movw	r18, r28
    231e:	81 50       	subi	r24, 0x01	; 1
    2320:	c1 f7       	brne	.-16     	; 0x2312 <_fpadd_parts+0x58>
    2322:	e2 01       	movw	r28, r4
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	11 96       	adiw	r26, 0x01	; 1
    2328:	9c 91       	ld	r25, X
    232a:	89 23       	and	r24, r25
    232c:	81 83       	std	Z+1, r24	; 0x01
    232e:	08 c1       	rjmp	.+528    	; 0x2540 <_fpadd_parts+0x286>
    2330:	92 30       	cpi	r25, 0x02	; 2
    2332:	09 f4       	brne	.+2      	; 0x2336 <_fpadd_parts+0x7c>
    2334:	07 c1       	rjmp	.+526    	; 0x2544 <_fpadd_parts+0x28a>
    2336:	12 96       	adiw	r26, 0x02	; 2
    2338:	2d 90       	ld	r2, X+
    233a:	3c 90       	ld	r3, X
    233c:	13 97       	sbiw	r26, 0x03	; 3
    233e:	eb 01       	movw	r28, r22
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	9b 81       	ldd	r25, Y+3	; 0x03
    2344:	14 96       	adiw	r26, 0x04	; 4
    2346:	ad 90       	ld	r10, X+
    2348:	bd 90       	ld	r11, X+
    234a:	cd 90       	ld	r12, X+
    234c:	dc 90       	ld	r13, X
    234e:	17 97       	sbiw	r26, 0x07	; 7
    2350:	ec 80       	ldd	r14, Y+4	; 0x04
    2352:	fd 80       	ldd	r15, Y+5	; 0x05
    2354:	0e 81       	ldd	r16, Y+6	; 0x06
    2356:	1f 81       	ldd	r17, Y+7	; 0x07
    2358:	91 01       	movw	r18, r2
    235a:	28 1b       	sub	r18, r24
    235c:	39 0b       	sbc	r19, r25
    235e:	b9 01       	movw	r22, r18
    2360:	37 ff       	sbrs	r19, 7
    2362:	04 c0       	rjmp	.+8      	; 0x236c <_fpadd_parts+0xb2>
    2364:	66 27       	eor	r22, r22
    2366:	77 27       	eor	r23, r23
    2368:	62 1b       	sub	r22, r18
    236a:	73 0b       	sbc	r23, r19
    236c:	60 32       	cpi	r22, 0x20	; 32
    236e:	71 05       	cpc	r23, r1
    2370:	0c f0       	brlt	.+2      	; 0x2374 <_fpadd_parts+0xba>
    2372:	61 c0       	rjmp	.+194    	; 0x2436 <_fpadd_parts+0x17c>
    2374:	12 16       	cp	r1, r18
    2376:	13 06       	cpc	r1, r19
    2378:	6c f5       	brge	.+90     	; 0x23d4 <_fpadd_parts+0x11a>
    237a:	37 01       	movw	r6, r14
    237c:	48 01       	movw	r8, r16
    237e:	06 2e       	mov	r0, r22
    2380:	04 c0       	rjmp	.+8      	; 0x238a <_fpadd_parts+0xd0>
    2382:	96 94       	lsr	r9
    2384:	87 94       	ror	r8
    2386:	77 94       	ror	r7
    2388:	67 94       	ror	r6
    238a:	0a 94       	dec	r0
    238c:	d2 f7       	brpl	.-12     	; 0x2382 <_fpadd_parts+0xc8>
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e0       	ldi	r20, 0x00	; 0
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	04 c0       	rjmp	.+8      	; 0x23a0 <_fpadd_parts+0xe6>
    2398:	22 0f       	add	r18, r18
    239a:	33 1f       	adc	r19, r19
    239c:	44 1f       	adc	r20, r20
    239e:	55 1f       	adc	r21, r21
    23a0:	6a 95       	dec	r22
    23a2:	d2 f7       	brpl	.-12     	; 0x2398 <_fpadd_parts+0xde>
    23a4:	21 50       	subi	r18, 0x01	; 1
    23a6:	30 40       	sbci	r19, 0x00	; 0
    23a8:	40 40       	sbci	r20, 0x00	; 0
    23aa:	50 40       	sbci	r21, 0x00	; 0
    23ac:	2e 21       	and	r18, r14
    23ae:	3f 21       	and	r19, r15
    23b0:	40 23       	and	r20, r16
    23b2:	51 23       	and	r21, r17
    23b4:	21 15       	cp	r18, r1
    23b6:	31 05       	cpc	r19, r1
    23b8:	41 05       	cpc	r20, r1
    23ba:	51 05       	cpc	r21, r1
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <_fpadd_parts+0x10c>
    23be:	21 e0       	ldi	r18, 0x01	; 1
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	79 01       	movw	r14, r18
    23c8:	8a 01       	movw	r16, r20
    23ca:	e6 28       	or	r14, r6
    23cc:	f7 28       	or	r15, r7
    23ce:	08 29       	or	r16, r8
    23d0:	19 29       	or	r17, r9
    23d2:	3c c0       	rjmp	.+120    	; 0x244c <_fpadd_parts+0x192>
    23d4:	23 2b       	or	r18, r19
    23d6:	d1 f1       	breq	.+116    	; 0x244c <_fpadd_parts+0x192>
    23d8:	26 0e       	add	r2, r22
    23da:	37 1e       	adc	r3, r23
    23dc:	35 01       	movw	r6, r10
    23de:	46 01       	movw	r8, r12
    23e0:	06 2e       	mov	r0, r22
    23e2:	04 c0       	rjmp	.+8      	; 0x23ec <_fpadd_parts+0x132>
    23e4:	96 94       	lsr	r9
    23e6:	87 94       	ror	r8
    23e8:	77 94       	ror	r7
    23ea:	67 94       	ror	r6
    23ec:	0a 94       	dec	r0
    23ee:	d2 f7       	brpl	.-12     	; 0x23e4 <_fpadd_parts+0x12a>
    23f0:	21 e0       	ldi	r18, 0x01	; 1
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	04 c0       	rjmp	.+8      	; 0x2402 <_fpadd_parts+0x148>
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	44 1f       	adc	r20, r20
    2400:	55 1f       	adc	r21, r21
    2402:	6a 95       	dec	r22
    2404:	d2 f7       	brpl	.-12     	; 0x23fa <_fpadd_parts+0x140>
    2406:	21 50       	subi	r18, 0x01	; 1
    2408:	30 40       	sbci	r19, 0x00	; 0
    240a:	40 40       	sbci	r20, 0x00	; 0
    240c:	50 40       	sbci	r21, 0x00	; 0
    240e:	2a 21       	and	r18, r10
    2410:	3b 21       	and	r19, r11
    2412:	4c 21       	and	r20, r12
    2414:	5d 21       	and	r21, r13
    2416:	21 15       	cp	r18, r1
    2418:	31 05       	cpc	r19, r1
    241a:	41 05       	cpc	r20, r1
    241c:	51 05       	cpc	r21, r1
    241e:	21 f0       	breq	.+8      	; 0x2428 <_fpadd_parts+0x16e>
    2420:	21 e0       	ldi	r18, 0x01	; 1
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	59 01       	movw	r10, r18
    242a:	6a 01       	movw	r12, r20
    242c:	a6 28       	or	r10, r6
    242e:	b7 28       	or	r11, r7
    2430:	c8 28       	or	r12, r8
    2432:	d9 28       	or	r13, r9
    2434:	0b c0       	rjmp	.+22     	; 0x244c <_fpadd_parts+0x192>
    2436:	82 15       	cp	r24, r2
    2438:	93 05       	cpc	r25, r3
    243a:	2c f0       	brlt	.+10     	; 0x2446 <_fpadd_parts+0x18c>
    243c:	1c 01       	movw	r2, r24
    243e:	aa 24       	eor	r10, r10
    2440:	bb 24       	eor	r11, r11
    2442:	65 01       	movw	r12, r10
    2444:	03 c0       	rjmp	.+6      	; 0x244c <_fpadd_parts+0x192>
    2446:	ee 24       	eor	r14, r14
    2448:	ff 24       	eor	r15, r15
    244a:	87 01       	movw	r16, r14
    244c:	11 96       	adiw	r26, 0x01	; 1
    244e:	9c 91       	ld	r25, X
    2450:	d2 01       	movw	r26, r4
    2452:	11 96       	adiw	r26, 0x01	; 1
    2454:	8c 91       	ld	r24, X
    2456:	98 17       	cp	r25, r24
    2458:	09 f4       	brne	.+2      	; 0x245c <_fpadd_parts+0x1a2>
    245a:	45 c0       	rjmp	.+138    	; 0x24e6 <_fpadd_parts+0x22c>
    245c:	99 23       	and	r25, r25
    245e:	39 f0       	breq	.+14     	; 0x246e <_fpadd_parts+0x1b4>
    2460:	a8 01       	movw	r20, r16
    2462:	97 01       	movw	r18, r14
    2464:	2a 19       	sub	r18, r10
    2466:	3b 09       	sbc	r19, r11
    2468:	4c 09       	sbc	r20, r12
    246a:	5d 09       	sbc	r21, r13
    246c:	06 c0       	rjmp	.+12     	; 0x247a <_fpadd_parts+0x1c0>
    246e:	a6 01       	movw	r20, r12
    2470:	95 01       	movw	r18, r10
    2472:	2e 19       	sub	r18, r14
    2474:	3f 09       	sbc	r19, r15
    2476:	40 0b       	sbc	r20, r16
    2478:	51 0b       	sbc	r21, r17
    247a:	57 fd       	sbrc	r21, 7
    247c:	08 c0       	rjmp	.+16     	; 0x248e <_fpadd_parts+0x1d4>
    247e:	11 82       	std	Z+1, r1	; 0x01
    2480:	33 82       	std	Z+3, r3	; 0x03
    2482:	22 82       	std	Z+2, r2	; 0x02
    2484:	24 83       	std	Z+4, r18	; 0x04
    2486:	35 83       	std	Z+5, r19	; 0x05
    2488:	46 83       	std	Z+6, r20	; 0x06
    248a:	57 83       	std	Z+7, r21	; 0x07
    248c:	1d c0       	rjmp	.+58     	; 0x24c8 <_fpadd_parts+0x20e>
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	81 83       	std	Z+1, r24	; 0x01
    2492:	33 82       	std	Z+3, r3	; 0x03
    2494:	22 82       	std	Z+2, r2	; 0x02
    2496:	88 27       	eor	r24, r24
    2498:	99 27       	eor	r25, r25
    249a:	dc 01       	movw	r26, r24
    249c:	82 1b       	sub	r24, r18
    249e:	93 0b       	sbc	r25, r19
    24a0:	a4 0b       	sbc	r26, r20
    24a2:	b5 0b       	sbc	r27, r21
    24a4:	84 83       	std	Z+4, r24	; 0x04
    24a6:	95 83       	std	Z+5, r25	; 0x05
    24a8:	a6 83       	std	Z+6, r26	; 0x06
    24aa:	b7 83       	std	Z+7, r27	; 0x07
    24ac:	0d c0       	rjmp	.+26     	; 0x24c8 <_fpadd_parts+0x20e>
    24ae:	22 0f       	add	r18, r18
    24b0:	33 1f       	adc	r19, r19
    24b2:	44 1f       	adc	r20, r20
    24b4:	55 1f       	adc	r21, r21
    24b6:	24 83       	std	Z+4, r18	; 0x04
    24b8:	35 83       	std	Z+5, r19	; 0x05
    24ba:	46 83       	std	Z+6, r20	; 0x06
    24bc:	57 83       	std	Z+7, r21	; 0x07
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	93 83       	std	Z+3, r25	; 0x03
    24c6:	82 83       	std	Z+2, r24	; 0x02
    24c8:	24 81       	ldd	r18, Z+4	; 0x04
    24ca:	35 81       	ldd	r19, Z+5	; 0x05
    24cc:	46 81       	ldd	r20, Z+6	; 0x06
    24ce:	57 81       	ldd	r21, Z+7	; 0x07
    24d0:	da 01       	movw	r26, r20
    24d2:	c9 01       	movw	r24, r18
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	a1 09       	sbc	r26, r1
    24d8:	b1 09       	sbc	r27, r1
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	af 4f       	sbci	r26, 0xFF	; 255
    24e0:	bf 43       	sbci	r27, 0x3F	; 63
    24e2:	28 f3       	brcs	.-54     	; 0x24ae <_fpadd_parts+0x1f4>
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <_fpadd_parts+0x242>
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	33 82       	std	Z+3, r3	; 0x03
    24ea:	22 82       	std	Z+2, r2	; 0x02
    24ec:	ea 0c       	add	r14, r10
    24ee:	fb 1c       	adc	r15, r11
    24f0:	0c 1d       	adc	r16, r12
    24f2:	1d 1d       	adc	r17, r13
    24f4:	e4 82       	std	Z+4, r14	; 0x04
    24f6:	f5 82       	std	Z+5, r15	; 0x05
    24f8:	06 83       	std	Z+6, r16	; 0x06
    24fa:	17 83       	std	Z+7, r17	; 0x07
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	80 83       	st	Z, r24
    2500:	24 81       	ldd	r18, Z+4	; 0x04
    2502:	35 81       	ldd	r19, Z+5	; 0x05
    2504:	46 81       	ldd	r20, Z+6	; 0x06
    2506:	57 81       	ldd	r21, Z+7	; 0x07
    2508:	57 ff       	sbrs	r21, 7
    250a:	1a c0       	rjmp	.+52     	; 0x2540 <_fpadd_parts+0x286>
    250c:	c9 01       	movw	r24, r18
    250e:	aa 27       	eor	r26, r26
    2510:	97 fd       	sbrc	r25, 7
    2512:	a0 95       	com	r26
    2514:	ba 2f       	mov	r27, r26
    2516:	81 70       	andi	r24, 0x01	; 1
    2518:	90 70       	andi	r25, 0x00	; 0
    251a:	a0 70       	andi	r26, 0x00	; 0
    251c:	b0 70       	andi	r27, 0x00	; 0
    251e:	56 95       	lsr	r21
    2520:	47 95       	ror	r20
    2522:	37 95       	ror	r19
    2524:	27 95       	ror	r18
    2526:	82 2b       	or	r24, r18
    2528:	93 2b       	or	r25, r19
    252a:	a4 2b       	or	r26, r20
    252c:	b5 2b       	or	r27, r21
    252e:	84 83       	std	Z+4, r24	; 0x04
    2530:	95 83       	std	Z+5, r25	; 0x05
    2532:	a6 83       	std	Z+6, r26	; 0x06
    2534:	b7 83       	std	Z+7, r27	; 0x07
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	01 96       	adiw	r24, 0x01	; 1
    253c:	93 83       	std	Z+3, r25	; 0x03
    253e:	82 83       	std	Z+2, r24	; 0x02
    2540:	df 01       	movw	r26, r30
    2542:	01 c0       	rjmp	.+2      	; 0x2546 <_fpadd_parts+0x28c>
    2544:	d2 01       	movw	r26, r4
    2546:	cd 01       	movw	r24, r26
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	e2 e1       	ldi	r30, 0x12	; 18
    254e:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__epilogue_restores__>

00002552 <__subsf3>:
    2552:	a0 e2       	ldi	r26, 0x20	; 32
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ef ea       	ldi	r30, 0xAF	; 175
    2558:	f2 e1       	ldi	r31, 0x12	; 18
    255a:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__prologue_saves__+0x18>
    255e:	69 83       	std	Y+1, r22	; 0x01
    2560:	7a 83       	std	Y+2, r23	; 0x02
    2562:	8b 83       	std	Y+3, r24	; 0x03
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	2d 83       	std	Y+5, r18	; 0x05
    2568:	3e 83       	std	Y+6, r19	; 0x06
    256a:	4f 83       	std	Y+7, r20	; 0x07
    256c:	58 87       	std	Y+8, r21	; 0x08
    256e:	e9 e0       	ldi	r30, 0x09	; 9
    2570:	ee 2e       	mov	r14, r30
    2572:	f1 2c       	mov	r15, r1
    2574:	ec 0e       	add	r14, r28
    2576:	fd 1e       	adc	r15, r29
    2578:	ce 01       	movw	r24, r28
    257a:	01 96       	adiw	r24, 0x01	; 1
    257c:	b7 01       	movw	r22, r14
    257e:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    2582:	8e 01       	movw	r16, r28
    2584:	0f 5e       	subi	r16, 0xEF	; 239
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	ce 01       	movw	r24, r28
    258a:	05 96       	adiw	r24, 0x05	; 5
    258c:	b8 01       	movw	r22, r16
    258e:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    2592:	8a 89       	ldd	r24, Y+18	; 0x12
    2594:	91 e0       	ldi	r25, 0x01	; 1
    2596:	89 27       	eor	r24, r25
    2598:	8a 8b       	std	Y+18, r24	; 0x12
    259a:	c7 01       	movw	r24, r14
    259c:	b8 01       	movw	r22, r16
    259e:	ae 01       	movw	r20, r28
    25a0:	47 5e       	subi	r20, 0xE7	; 231
    25a2:	5f 4f       	sbci	r21, 0xFF	; 255
    25a4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_fpadd_parts>
    25a8:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__pack_f>
    25ac:	a0 96       	adiw	r28, 0x20	; 32
    25ae:	e6 e0       	ldi	r30, 0x06	; 6
    25b0:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__epilogue_restores__+0x18>

000025b4 <__addsf3>:
    25b4:	a0 e2       	ldi	r26, 0x20	; 32
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e0 ee       	ldi	r30, 0xE0	; 224
    25ba:	f2 e1       	ldi	r31, 0x12	; 18
    25bc:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__prologue_saves__+0x18>
    25c0:	69 83       	std	Y+1, r22	; 0x01
    25c2:	7a 83       	std	Y+2, r23	; 0x02
    25c4:	8b 83       	std	Y+3, r24	; 0x03
    25c6:	9c 83       	std	Y+4, r25	; 0x04
    25c8:	2d 83       	std	Y+5, r18	; 0x05
    25ca:	3e 83       	std	Y+6, r19	; 0x06
    25cc:	4f 83       	std	Y+7, r20	; 0x07
    25ce:	58 87       	std	Y+8, r21	; 0x08
    25d0:	f9 e0       	ldi	r31, 0x09	; 9
    25d2:	ef 2e       	mov	r14, r31
    25d4:	f1 2c       	mov	r15, r1
    25d6:	ec 0e       	add	r14, r28
    25d8:	fd 1e       	adc	r15, r29
    25da:	ce 01       	movw	r24, r28
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	b7 01       	movw	r22, r14
    25e0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    25e4:	8e 01       	movw	r16, r28
    25e6:	0f 5e       	subi	r16, 0xEF	; 239
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	ce 01       	movw	r24, r28
    25ec:	05 96       	adiw	r24, 0x05	; 5
    25ee:	b8 01       	movw	r22, r16
    25f0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    25f4:	c7 01       	movw	r24, r14
    25f6:	b8 01       	movw	r22, r16
    25f8:	ae 01       	movw	r20, r28
    25fa:	47 5e       	subi	r20, 0xE7	; 231
    25fc:	5f 4f       	sbci	r21, 0xFF	; 255
    25fe:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_fpadd_parts>
    2602:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__pack_f>
    2606:	a0 96       	adiw	r28, 0x20	; 32
    2608:	e6 e0       	ldi	r30, 0x06	; 6
    260a:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__epilogue_restores__+0x18>

0000260e <__mulsf3>:
    260e:	a0 e2       	ldi	r26, 0x20	; 32
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ed e0       	ldi	r30, 0x0D	; 13
    2614:	f3 e1       	ldi	r31, 0x13	; 19
    2616:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__prologue_saves__>
    261a:	69 83       	std	Y+1, r22	; 0x01
    261c:	7a 83       	std	Y+2, r23	; 0x02
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	2d 83       	std	Y+5, r18	; 0x05
    2624:	3e 83       	std	Y+6, r19	; 0x06
    2626:	4f 83       	std	Y+7, r20	; 0x07
    2628:	58 87       	std	Y+8, r21	; 0x08
    262a:	ce 01       	movw	r24, r28
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	be 01       	movw	r22, r28
    2630:	67 5f       	subi	r22, 0xF7	; 247
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    2638:	ce 01       	movw	r24, r28
    263a:	05 96       	adiw	r24, 0x05	; 5
    263c:	be 01       	movw	r22, r28
    263e:	6f 5e       	subi	r22, 0xEF	; 239
    2640:	7f 4f       	sbci	r23, 0xFF	; 255
    2642:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    2646:	99 85       	ldd	r25, Y+9	; 0x09
    2648:	92 30       	cpi	r25, 0x02	; 2
    264a:	88 f0       	brcs	.+34     	; 0x266e <__mulsf3+0x60>
    264c:	89 89       	ldd	r24, Y+17	; 0x11
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	c8 f0       	brcs	.+50     	; 0x2684 <__mulsf3+0x76>
    2652:	94 30       	cpi	r25, 0x04	; 4
    2654:	19 f4       	brne	.+6      	; 0x265c <__mulsf3+0x4e>
    2656:	82 30       	cpi	r24, 0x02	; 2
    2658:	51 f4       	brne	.+20     	; 0x266e <__mulsf3+0x60>
    265a:	04 c0       	rjmp	.+8      	; 0x2664 <__mulsf3+0x56>
    265c:	84 30       	cpi	r24, 0x04	; 4
    265e:	29 f4       	brne	.+10     	; 0x266a <__mulsf3+0x5c>
    2660:	92 30       	cpi	r25, 0x02	; 2
    2662:	81 f4       	brne	.+32     	; 0x2684 <__mulsf3+0x76>
    2664:	8c e8       	ldi	r24, 0x8C	; 140
    2666:	92 e0       	ldi	r25, 0x02	; 2
    2668:	c6 c0       	rjmp	.+396    	; 0x27f6 <__mulsf3+0x1e8>
    266a:	92 30       	cpi	r25, 0x02	; 2
    266c:	49 f4       	brne	.+18     	; 0x2680 <__mulsf3+0x72>
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	9a 85       	ldd	r25, Y+10	; 0x0a
    2672:	8a 89       	ldd	r24, Y+18	; 0x12
    2674:	98 13       	cpse	r25, r24
    2676:	21 e0       	ldi	r18, 0x01	; 1
    2678:	2a 87       	std	Y+10, r18	; 0x0a
    267a:	ce 01       	movw	r24, r28
    267c:	09 96       	adiw	r24, 0x09	; 9
    267e:	bb c0       	rjmp	.+374    	; 0x27f6 <__mulsf3+0x1e8>
    2680:	82 30       	cpi	r24, 0x02	; 2
    2682:	49 f4       	brne	.+18     	; 0x2696 <__mulsf3+0x88>
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	8a 89       	ldd	r24, Y+18	; 0x12
    268a:	98 13       	cpse	r25, r24
    268c:	21 e0       	ldi	r18, 0x01	; 1
    268e:	2a 8b       	std	Y+18, r18	; 0x12
    2690:	ce 01       	movw	r24, r28
    2692:	41 96       	adiw	r24, 0x11	; 17
    2694:	b0 c0       	rjmp	.+352    	; 0x27f6 <__mulsf3+0x1e8>
    2696:	2d 84       	ldd	r2, Y+13	; 0x0d
    2698:	3e 84       	ldd	r3, Y+14	; 0x0e
    269a:	4f 84       	ldd	r4, Y+15	; 0x0f
    269c:	58 88       	ldd	r5, Y+16	; 0x10
    269e:	6d 88       	ldd	r6, Y+21	; 0x15
    26a0:	7e 88       	ldd	r7, Y+22	; 0x16
    26a2:	8f 88       	ldd	r8, Y+23	; 0x17
    26a4:	98 8c       	ldd	r9, Y+24	; 0x18
    26a6:	ee 24       	eor	r14, r14
    26a8:	ff 24       	eor	r15, r15
    26aa:	87 01       	movw	r16, r14
    26ac:	aa 24       	eor	r10, r10
    26ae:	bb 24       	eor	r11, r11
    26b0:	65 01       	movw	r12, r10
    26b2:	40 e0       	ldi	r20, 0x00	; 0
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	e0 e0       	ldi	r30, 0x00	; 0
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	c1 01       	movw	r24, r2
    26c0:	81 70       	andi	r24, 0x01	; 1
    26c2:	90 70       	andi	r25, 0x00	; 0
    26c4:	89 2b       	or	r24, r25
    26c6:	e9 f0       	breq	.+58     	; 0x2702 <__mulsf3+0xf4>
    26c8:	e6 0c       	add	r14, r6
    26ca:	f7 1c       	adc	r15, r7
    26cc:	08 1d       	adc	r16, r8
    26ce:	19 1d       	adc	r17, r9
    26d0:	9a 01       	movw	r18, r20
    26d2:	ab 01       	movw	r20, r22
    26d4:	2a 0d       	add	r18, r10
    26d6:	3b 1d       	adc	r19, r11
    26d8:	4c 1d       	adc	r20, r12
    26da:	5d 1d       	adc	r21, r13
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a0 e0       	ldi	r26, 0x00	; 0
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e6 14       	cp	r14, r6
    26e6:	f7 04       	cpc	r15, r7
    26e8:	08 05       	cpc	r16, r8
    26ea:	19 05       	cpc	r17, r9
    26ec:	20 f4       	brcc	.+8      	; 0x26f6 <__mulsf3+0xe8>
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e0       	ldi	r26, 0x00	; 0
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	ba 01       	movw	r22, r20
    26f8:	a9 01       	movw	r20, r18
    26fa:	48 0f       	add	r20, r24
    26fc:	59 1f       	adc	r21, r25
    26fe:	6a 1f       	adc	r22, r26
    2700:	7b 1f       	adc	r23, r27
    2702:	aa 0c       	add	r10, r10
    2704:	bb 1c       	adc	r11, r11
    2706:	cc 1c       	adc	r12, r12
    2708:	dd 1c       	adc	r13, r13
    270a:	97 fe       	sbrs	r9, 7
    270c:	08 c0       	rjmp	.+16     	; 0x271e <__mulsf3+0x110>
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e0       	ldi	r26, 0x00	; 0
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	a8 2a       	or	r10, r24
    2718:	b9 2a       	or	r11, r25
    271a:	ca 2a       	or	r12, r26
    271c:	db 2a       	or	r13, r27
    271e:	31 96       	adiw	r30, 0x01	; 1
    2720:	e0 32       	cpi	r30, 0x20	; 32
    2722:	f1 05       	cpc	r31, r1
    2724:	49 f0       	breq	.+18     	; 0x2738 <__mulsf3+0x12a>
    2726:	66 0c       	add	r6, r6
    2728:	77 1c       	adc	r7, r7
    272a:	88 1c       	adc	r8, r8
    272c:	99 1c       	adc	r9, r9
    272e:	56 94       	lsr	r5
    2730:	47 94       	ror	r4
    2732:	37 94       	ror	r3
    2734:	27 94       	ror	r2
    2736:	c3 cf       	rjmp	.-122    	; 0x26be <__mulsf3+0xb0>
    2738:	fa 85       	ldd	r31, Y+10	; 0x0a
    273a:	ea 89       	ldd	r30, Y+18	; 0x12
    273c:	2b 89       	ldd	r18, Y+19	; 0x13
    273e:	3c 89       	ldd	r19, Y+20	; 0x14
    2740:	8b 85       	ldd	r24, Y+11	; 0x0b
    2742:	9c 85       	ldd	r25, Y+12	; 0x0c
    2744:	28 0f       	add	r18, r24
    2746:	39 1f       	adc	r19, r25
    2748:	2e 5f       	subi	r18, 0xFE	; 254
    274a:	3f 4f       	sbci	r19, 0xFF	; 255
    274c:	17 c0       	rjmp	.+46     	; 0x277c <__mulsf3+0x16e>
    274e:	ca 01       	movw	r24, r20
    2750:	81 70       	andi	r24, 0x01	; 1
    2752:	90 70       	andi	r25, 0x00	; 0
    2754:	89 2b       	or	r24, r25
    2756:	61 f0       	breq	.+24     	; 0x2770 <__mulsf3+0x162>
    2758:	16 95       	lsr	r17
    275a:	07 95       	ror	r16
    275c:	f7 94       	ror	r15
    275e:	e7 94       	ror	r14
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	a0 e0       	ldi	r26, 0x00	; 0
    2766:	b0 e8       	ldi	r27, 0x80	; 128
    2768:	e8 2a       	or	r14, r24
    276a:	f9 2a       	or	r15, r25
    276c:	0a 2b       	or	r16, r26
    276e:	1b 2b       	or	r17, r27
    2770:	76 95       	lsr	r23
    2772:	67 95       	ror	r22
    2774:	57 95       	ror	r21
    2776:	47 95       	ror	r20
    2778:	2f 5f       	subi	r18, 0xFF	; 255
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	77 fd       	sbrc	r23, 7
    277e:	e7 cf       	rjmp	.-50     	; 0x274e <__mulsf3+0x140>
    2780:	0c c0       	rjmp	.+24     	; 0x279a <__mulsf3+0x18c>
    2782:	44 0f       	add	r20, r20
    2784:	55 1f       	adc	r21, r21
    2786:	66 1f       	adc	r22, r22
    2788:	77 1f       	adc	r23, r23
    278a:	17 fd       	sbrc	r17, 7
    278c:	41 60       	ori	r20, 0x01	; 1
    278e:	ee 0c       	add	r14, r14
    2790:	ff 1c       	adc	r15, r15
    2792:	00 1f       	adc	r16, r16
    2794:	11 1f       	adc	r17, r17
    2796:	21 50       	subi	r18, 0x01	; 1
    2798:	30 40       	sbci	r19, 0x00	; 0
    279a:	40 30       	cpi	r20, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	59 07       	cpc	r21, r25
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	69 07       	cpc	r22, r25
    27a4:	90 e4       	ldi	r25, 0x40	; 64
    27a6:	79 07       	cpc	r23, r25
    27a8:	60 f3       	brcs	.-40     	; 0x2782 <__mulsf3+0x174>
    27aa:	2b 8f       	std	Y+27, r18	; 0x1b
    27ac:	3c 8f       	std	Y+28, r19	; 0x1c
    27ae:	db 01       	movw	r26, r22
    27b0:	ca 01       	movw	r24, r20
    27b2:	8f 77       	andi	r24, 0x7F	; 127
    27b4:	90 70       	andi	r25, 0x00	; 0
    27b6:	a0 70       	andi	r26, 0x00	; 0
    27b8:	b0 70       	andi	r27, 0x00	; 0
    27ba:	80 34       	cpi	r24, 0x40	; 64
    27bc:	91 05       	cpc	r25, r1
    27be:	a1 05       	cpc	r26, r1
    27c0:	b1 05       	cpc	r27, r1
    27c2:	61 f4       	brne	.+24     	; 0x27dc <__mulsf3+0x1ce>
    27c4:	47 fd       	sbrc	r20, 7
    27c6:	0a c0       	rjmp	.+20     	; 0x27dc <__mulsf3+0x1ce>
    27c8:	e1 14       	cp	r14, r1
    27ca:	f1 04       	cpc	r15, r1
    27cc:	01 05       	cpc	r16, r1
    27ce:	11 05       	cpc	r17, r1
    27d0:	29 f0       	breq	.+10     	; 0x27dc <__mulsf3+0x1ce>
    27d2:	40 5c       	subi	r20, 0xC0	; 192
    27d4:	5f 4f       	sbci	r21, 0xFF	; 255
    27d6:	6f 4f       	sbci	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	40 78       	andi	r20, 0x80	; 128
    27dc:	1a 8e       	std	Y+26, r1	; 0x1a
    27de:	fe 17       	cp	r31, r30
    27e0:	11 f0       	breq	.+4      	; 0x27e6 <__mulsf3+0x1d8>
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	8a 8f       	std	Y+26, r24	; 0x1a
    27e6:	4d 8f       	std	Y+29, r20	; 0x1d
    27e8:	5e 8f       	std	Y+30, r21	; 0x1e
    27ea:	6f 8f       	std	Y+31, r22	; 0x1f
    27ec:	78 a3       	std	Y+32, r23	; 0x20
    27ee:	83 e0       	ldi	r24, 0x03	; 3
    27f0:	89 8f       	std	Y+25, r24	; 0x19
    27f2:	ce 01       	movw	r24, r28
    27f4:	49 96       	adiw	r24, 0x19	; 25
    27f6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__pack_f>
    27fa:	a0 96       	adiw	r28, 0x20	; 32
    27fc:	e2 e1       	ldi	r30, 0x12	; 18
    27fe:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__epilogue_restores__>

00002802 <__divsf3>:
    2802:	a8 e1       	ldi	r26, 0x18	; 24
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e7 e0       	ldi	r30, 0x07	; 7
    2808:	f4 e1       	ldi	r31, 0x14	; 20
    280a:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x10>
    280e:	69 83       	std	Y+1, r22	; 0x01
    2810:	7a 83       	std	Y+2, r23	; 0x02
    2812:	8b 83       	std	Y+3, r24	; 0x03
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	2d 83       	std	Y+5, r18	; 0x05
    2818:	3e 83       	std	Y+6, r19	; 0x06
    281a:	4f 83       	std	Y+7, r20	; 0x07
    281c:	58 87       	std	Y+8, r21	; 0x08
    281e:	b9 e0       	ldi	r27, 0x09	; 9
    2820:	eb 2e       	mov	r14, r27
    2822:	f1 2c       	mov	r15, r1
    2824:	ec 0e       	add	r14, r28
    2826:	fd 1e       	adc	r15, r29
    2828:	ce 01       	movw	r24, r28
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	b7 01       	movw	r22, r14
    282e:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    2832:	8e 01       	movw	r16, r28
    2834:	0f 5e       	subi	r16, 0xEF	; 239
    2836:	1f 4f       	sbci	r17, 0xFF	; 255
    2838:	ce 01       	movw	r24, r28
    283a:	05 96       	adiw	r24, 0x05	; 5
    283c:	b8 01       	movw	r22, r16
    283e:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    2842:	29 85       	ldd	r18, Y+9	; 0x09
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	08 f4       	brcc	.+2      	; 0x284a <__divsf3+0x48>
    2848:	7e c0       	rjmp	.+252    	; 0x2946 <__divsf3+0x144>
    284a:	39 89       	ldd	r19, Y+17	; 0x11
    284c:	32 30       	cpi	r19, 0x02	; 2
    284e:	10 f4       	brcc	.+4      	; 0x2854 <__divsf3+0x52>
    2850:	b8 01       	movw	r22, r16
    2852:	7c c0       	rjmp	.+248    	; 0x294c <__divsf3+0x14a>
    2854:	8a 85       	ldd	r24, Y+10	; 0x0a
    2856:	9a 89       	ldd	r25, Y+18	; 0x12
    2858:	89 27       	eor	r24, r25
    285a:	8a 87       	std	Y+10, r24	; 0x0a
    285c:	24 30       	cpi	r18, 0x04	; 4
    285e:	11 f0       	breq	.+4      	; 0x2864 <__divsf3+0x62>
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 f4       	brne	.+12     	; 0x2870 <__divsf3+0x6e>
    2864:	23 17       	cp	r18, r19
    2866:	09 f0       	breq	.+2      	; 0x286a <__divsf3+0x68>
    2868:	6e c0       	rjmp	.+220    	; 0x2946 <__divsf3+0x144>
    286a:	6c e8       	ldi	r22, 0x8C	; 140
    286c:	72 e0       	ldi	r23, 0x02	; 2
    286e:	6e c0       	rjmp	.+220    	; 0x294c <__divsf3+0x14a>
    2870:	34 30       	cpi	r19, 0x04	; 4
    2872:	39 f4       	brne	.+14     	; 0x2882 <__divsf3+0x80>
    2874:	1d 86       	std	Y+13, r1	; 0x0d
    2876:	1e 86       	std	Y+14, r1	; 0x0e
    2878:	1f 86       	std	Y+15, r1	; 0x0f
    287a:	18 8a       	std	Y+16, r1	; 0x10
    287c:	1c 86       	std	Y+12, r1	; 0x0c
    287e:	1b 86       	std	Y+11, r1	; 0x0b
    2880:	04 c0       	rjmp	.+8      	; 0x288a <__divsf3+0x88>
    2882:	32 30       	cpi	r19, 0x02	; 2
    2884:	21 f4       	brne	.+8      	; 0x288e <__divsf3+0x8c>
    2886:	84 e0       	ldi	r24, 0x04	; 4
    2888:	89 87       	std	Y+9, r24	; 0x09
    288a:	b7 01       	movw	r22, r14
    288c:	5f c0       	rjmp	.+190    	; 0x294c <__divsf3+0x14a>
    288e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2890:	3c 85       	ldd	r19, Y+12	; 0x0c
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	28 1b       	sub	r18, r24
    2898:	39 0b       	sbc	r19, r25
    289a:	3c 87       	std	Y+12, r19	; 0x0c
    289c:	2b 87       	std	Y+11, r18	; 0x0b
    289e:	ed 84       	ldd	r14, Y+13	; 0x0d
    28a0:	fe 84       	ldd	r15, Y+14	; 0x0e
    28a2:	0f 85       	ldd	r16, Y+15	; 0x0f
    28a4:	18 89       	ldd	r17, Y+16	; 0x10
    28a6:	ad 88       	ldd	r10, Y+21	; 0x15
    28a8:	be 88       	ldd	r11, Y+22	; 0x16
    28aa:	cf 88       	ldd	r12, Y+23	; 0x17
    28ac:	d8 8c       	ldd	r13, Y+24	; 0x18
    28ae:	ea 14       	cp	r14, r10
    28b0:	fb 04       	cpc	r15, r11
    28b2:	0c 05       	cpc	r16, r12
    28b4:	1d 05       	cpc	r17, r13
    28b6:	40 f4       	brcc	.+16     	; 0x28c8 <__divsf3+0xc6>
    28b8:	ee 0c       	add	r14, r14
    28ba:	ff 1c       	adc	r15, r15
    28bc:	00 1f       	adc	r16, r16
    28be:	11 1f       	adc	r17, r17
    28c0:	21 50       	subi	r18, 0x01	; 1
    28c2:	30 40       	sbci	r19, 0x00	; 0
    28c4:	3c 87       	std	Y+12, r19	; 0x0c
    28c6:	2b 87       	std	Y+11, r18	; 0x0b
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	a0 e0       	ldi	r26, 0x00	; 0
    28d6:	b0 e4       	ldi	r27, 0x40	; 64
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	ea 14       	cp	r14, r10
    28de:	fb 04       	cpc	r15, r11
    28e0:	0c 05       	cpc	r16, r12
    28e2:	1d 05       	cpc	r17, r13
    28e4:	40 f0       	brcs	.+16     	; 0x28f6 <__divsf3+0xf4>
    28e6:	28 2b       	or	r18, r24
    28e8:	39 2b       	or	r19, r25
    28ea:	4a 2b       	or	r20, r26
    28ec:	5b 2b       	or	r21, r27
    28ee:	ea 18       	sub	r14, r10
    28f0:	fb 08       	sbc	r15, r11
    28f2:	0c 09       	sbc	r16, r12
    28f4:	1d 09       	sbc	r17, r13
    28f6:	b6 95       	lsr	r27
    28f8:	a7 95       	ror	r26
    28fa:	97 95       	ror	r25
    28fc:	87 95       	ror	r24
    28fe:	ee 0c       	add	r14, r14
    2900:	ff 1c       	adc	r15, r15
    2902:	00 1f       	adc	r16, r16
    2904:	11 1f       	adc	r17, r17
    2906:	6f 5f       	subi	r22, 0xFF	; 255
    2908:	7f 4f       	sbci	r23, 0xFF	; 255
    290a:	6f 31       	cpi	r22, 0x1F	; 31
    290c:	71 05       	cpc	r23, r1
    290e:	31 f7       	brne	.-52     	; 0x28dc <__divsf3+0xda>
    2910:	da 01       	movw	r26, r20
    2912:	c9 01       	movw	r24, r18
    2914:	8f 77       	andi	r24, 0x7F	; 127
    2916:	90 70       	andi	r25, 0x00	; 0
    2918:	a0 70       	andi	r26, 0x00	; 0
    291a:	b0 70       	andi	r27, 0x00	; 0
    291c:	80 34       	cpi	r24, 0x40	; 64
    291e:	91 05       	cpc	r25, r1
    2920:	a1 05       	cpc	r26, r1
    2922:	b1 05       	cpc	r27, r1
    2924:	61 f4       	brne	.+24     	; 0x293e <__divsf3+0x13c>
    2926:	27 fd       	sbrc	r18, 7
    2928:	0a c0       	rjmp	.+20     	; 0x293e <__divsf3+0x13c>
    292a:	e1 14       	cp	r14, r1
    292c:	f1 04       	cpc	r15, r1
    292e:	01 05       	cpc	r16, r1
    2930:	11 05       	cpc	r17, r1
    2932:	29 f0       	breq	.+10     	; 0x293e <__divsf3+0x13c>
    2934:	20 5c       	subi	r18, 0xC0	; 192
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	4f 4f       	sbci	r20, 0xFF	; 255
    293a:	5f 4f       	sbci	r21, 0xFF	; 255
    293c:	20 78       	andi	r18, 0x80	; 128
    293e:	2d 87       	std	Y+13, r18	; 0x0d
    2940:	3e 87       	std	Y+14, r19	; 0x0e
    2942:	4f 87       	std	Y+15, r20	; 0x0f
    2944:	58 8b       	std	Y+16, r21	; 0x10
    2946:	be 01       	movw	r22, r28
    2948:	67 5f       	subi	r22, 0xF7	; 247
    294a:	7f 4f       	sbci	r23, 0xFF	; 255
    294c:	cb 01       	movw	r24, r22
    294e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__pack_f>
    2952:	68 96       	adiw	r28, 0x18	; 24
    2954:	ea e0       	ldi	r30, 0x0A	; 10
    2956:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x10>

0000295a <__gesf2>:
    295a:	a8 e1       	ldi	r26, 0x18	; 24
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e3 eb       	ldi	r30, 0xB3	; 179
    2960:	f4 e1       	ldi	r31, 0x14	; 20
    2962:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__prologue_saves__+0x18>
    2966:	69 83       	std	Y+1, r22	; 0x01
    2968:	7a 83       	std	Y+2, r23	; 0x02
    296a:	8b 83       	std	Y+3, r24	; 0x03
    296c:	9c 83       	std	Y+4, r25	; 0x04
    296e:	2d 83       	std	Y+5, r18	; 0x05
    2970:	3e 83       	std	Y+6, r19	; 0x06
    2972:	4f 83       	std	Y+7, r20	; 0x07
    2974:	58 87       	std	Y+8, r21	; 0x08
    2976:	89 e0       	ldi	r24, 0x09	; 9
    2978:	e8 2e       	mov	r14, r24
    297a:	f1 2c       	mov	r15, r1
    297c:	ec 0e       	add	r14, r28
    297e:	fd 1e       	adc	r15, r29
    2980:	ce 01       	movw	r24, r28
    2982:	01 96       	adiw	r24, 0x01	; 1
    2984:	b7 01       	movw	r22, r14
    2986:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    298a:	8e 01       	movw	r16, r28
    298c:	0f 5e       	subi	r16, 0xEF	; 239
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	ce 01       	movw	r24, r28
    2992:	05 96       	adiw	r24, 0x05	; 5
    2994:	b8 01       	movw	r22, r16
    2996:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	82 30       	cpi	r24, 0x02	; 2
    299e:	40 f0       	brcs	.+16     	; 0x29b0 <__gesf2+0x56>
    29a0:	89 89       	ldd	r24, Y+17	; 0x11
    29a2:	82 30       	cpi	r24, 0x02	; 2
    29a4:	28 f0       	brcs	.+10     	; 0x29b0 <__gesf2+0x56>
    29a6:	c7 01       	movw	r24, r14
    29a8:	b8 01       	movw	r22, r16
    29aa:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <__fpcmp_parts_f>
    29ae:	01 c0       	rjmp	.+2      	; 0x29b2 <__gesf2+0x58>
    29b0:	8f ef       	ldi	r24, 0xFF	; 255
    29b2:	68 96       	adiw	r28, 0x18	; 24
    29b4:	e6 e0       	ldi	r30, 0x06	; 6
    29b6:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__epilogue_restores__+0x18>

000029ba <__floatsisf>:
    29ba:	a8 e0       	ldi	r26, 0x08	; 8
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e3 ee       	ldi	r30, 0xE3	; 227
    29c0:	f4 e1       	ldi	r31, 0x14	; 20
    29c2:	0c 94 62 1a 	jmp	0x34c4	; 0x34c4 <__prologue_saves__+0x12>
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	83 e0       	ldi	r24, 0x03	; 3
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	da 01       	movw	r26, r20
    29d0:	c9 01       	movw	r24, r18
    29d2:	88 27       	eor	r24, r24
    29d4:	b7 fd       	sbrc	r27, 7
    29d6:	83 95       	inc	r24
    29d8:	99 27       	eor	r25, r25
    29da:	aa 27       	eor	r26, r26
    29dc:	bb 27       	eor	r27, r27
    29de:	b8 2e       	mov	r11, r24
    29e0:	21 15       	cp	r18, r1
    29e2:	31 05       	cpc	r19, r1
    29e4:	41 05       	cpc	r20, r1
    29e6:	51 05       	cpc	r21, r1
    29e8:	19 f4       	brne	.+6      	; 0x29f0 <__floatsisf+0x36>
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	3a c0       	rjmp	.+116    	; 0x2a64 <__floatsisf+0xaa>
    29f0:	88 23       	and	r24, r24
    29f2:	a9 f0       	breq	.+42     	; 0x2a1e <__floatsisf+0x64>
    29f4:	20 30       	cpi	r18, 0x00	; 0
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	38 07       	cpc	r19, r24
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	48 07       	cpc	r20, r24
    29fe:	80 e8       	ldi	r24, 0x80	; 128
    2a00:	58 07       	cpc	r21, r24
    2a02:	29 f4       	brne	.+10     	; 0x2a0e <__floatsisf+0x54>
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	9f ec       	ldi	r25, 0xCF	; 207
    2a0c:	30 c0       	rjmp	.+96     	; 0x2a6e <__floatsisf+0xb4>
    2a0e:	ee 24       	eor	r14, r14
    2a10:	ff 24       	eor	r15, r15
    2a12:	87 01       	movw	r16, r14
    2a14:	e2 1a       	sub	r14, r18
    2a16:	f3 0a       	sbc	r15, r19
    2a18:	04 0b       	sbc	r16, r20
    2a1a:	15 0b       	sbc	r17, r21
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <__floatsisf+0x68>
    2a1e:	79 01       	movw	r14, r18
    2a20:	8a 01       	movw	r16, r20
    2a22:	8e e1       	ldi	r24, 0x1E	; 30
    2a24:	c8 2e       	mov	r12, r24
    2a26:	d1 2c       	mov	r13, r1
    2a28:	dc 82       	std	Y+4, r13	; 0x04
    2a2a:	cb 82       	std	Y+3, r12	; 0x03
    2a2c:	ed 82       	std	Y+5, r14	; 0x05
    2a2e:	fe 82       	std	Y+6, r15	; 0x06
    2a30:	0f 83       	std	Y+7, r16	; 0x07
    2a32:	18 87       	std	Y+8, r17	; 0x08
    2a34:	c8 01       	movw	r24, r16
    2a36:	b7 01       	movw	r22, r14
    2a38:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__clzsi2>
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	18 16       	cp	r1, r24
    2a40:	19 06       	cpc	r1, r25
    2a42:	84 f4       	brge	.+32     	; 0x2a64 <__floatsisf+0xaa>
    2a44:	08 2e       	mov	r0, r24
    2a46:	04 c0       	rjmp	.+8      	; 0x2a50 <__floatsisf+0x96>
    2a48:	ee 0c       	add	r14, r14
    2a4a:	ff 1c       	adc	r15, r15
    2a4c:	00 1f       	adc	r16, r16
    2a4e:	11 1f       	adc	r17, r17
    2a50:	0a 94       	dec	r0
    2a52:	d2 f7       	brpl	.-12     	; 0x2a48 <__floatsisf+0x8e>
    2a54:	ed 82       	std	Y+5, r14	; 0x05
    2a56:	fe 82       	std	Y+6, r15	; 0x06
    2a58:	0f 83       	std	Y+7, r16	; 0x07
    2a5a:	18 87       	std	Y+8, r17	; 0x08
    2a5c:	c8 1a       	sub	r12, r24
    2a5e:	d9 0a       	sbc	r13, r25
    2a60:	dc 82       	std	Y+4, r13	; 0x04
    2a62:	cb 82       	std	Y+3, r12	; 0x03
    2a64:	ba 82       	std	Y+2, r11	; 0x02
    2a66:	ce 01       	movw	r24, r28
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__pack_f>
    2a6e:	28 96       	adiw	r28, 0x08	; 8
    2a70:	e9 e0       	ldi	r30, 0x09	; 9
    2a72:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__epilogue_restores__+0x12>

00002a76 <__fixsfsi>:
    2a76:	ac e0       	ldi	r26, 0x0C	; 12
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	e1 e4       	ldi	r30, 0x41	; 65
    2a7c:	f5 e1       	ldi	r31, 0x15	; 21
    2a7e:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x20>
    2a82:	69 83       	std	Y+1, r22	; 0x01
    2a84:	7a 83       	std	Y+2, r23	; 0x02
    2a86:	8b 83       	std	Y+3, r24	; 0x03
    2a88:	9c 83       	std	Y+4, r25	; 0x04
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	01 96       	adiw	r24, 0x01	; 1
    2a8e:	be 01       	movw	r22, r28
    2a90:	6b 5f       	subi	r22, 0xFB	; 251
    2a92:	7f 4f       	sbci	r23, 0xFF	; 255
    2a94:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__unpack_f>
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	61 f1       	breq	.+88     	; 0x2af6 <__fixsfsi+0x80>
    2a9e:	82 30       	cpi	r24, 0x02	; 2
    2aa0:	50 f1       	brcs	.+84     	; 0x2af6 <__fixsfsi+0x80>
    2aa2:	84 30       	cpi	r24, 0x04	; 4
    2aa4:	21 f4       	brne	.+8      	; 0x2aae <__fixsfsi+0x38>
    2aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa8:	88 23       	and	r24, r24
    2aaa:	51 f1       	breq	.+84     	; 0x2b00 <__fixsfsi+0x8a>
    2aac:	2e c0       	rjmp	.+92     	; 0x2b0a <__fixsfsi+0x94>
    2aae:	2f 81       	ldd	r18, Y+7	; 0x07
    2ab0:	38 85       	ldd	r19, Y+8	; 0x08
    2ab2:	37 fd       	sbrc	r19, 7
    2ab4:	20 c0       	rjmp	.+64     	; 0x2af6 <__fixsfsi+0x80>
    2ab6:	6e 81       	ldd	r22, Y+6	; 0x06
    2ab8:	2f 31       	cpi	r18, 0x1F	; 31
    2aba:	31 05       	cpc	r19, r1
    2abc:	1c f0       	brlt	.+6      	; 0x2ac4 <__fixsfsi+0x4e>
    2abe:	66 23       	and	r22, r22
    2ac0:	f9 f0       	breq	.+62     	; 0x2b00 <__fixsfsi+0x8a>
    2ac2:	23 c0       	rjmp	.+70     	; 0x2b0a <__fixsfsi+0x94>
    2ac4:	8e e1       	ldi	r24, 0x1E	; 30
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	82 1b       	sub	r24, r18
    2aca:	93 0b       	sbc	r25, r19
    2acc:	29 85       	ldd	r18, Y+9	; 0x09
    2ace:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ad0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ad2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <__fixsfsi+0x68>
    2ad6:	56 95       	lsr	r21
    2ad8:	47 95       	ror	r20
    2ada:	37 95       	ror	r19
    2adc:	27 95       	ror	r18
    2ade:	8a 95       	dec	r24
    2ae0:	d2 f7       	brpl	.-12     	; 0x2ad6 <__fixsfsi+0x60>
    2ae2:	66 23       	and	r22, r22
    2ae4:	b1 f0       	breq	.+44     	; 0x2b12 <__fixsfsi+0x9c>
    2ae6:	50 95       	com	r21
    2ae8:	40 95       	com	r20
    2aea:	30 95       	com	r19
    2aec:	21 95       	neg	r18
    2aee:	3f 4f       	sbci	r19, 0xFF	; 255
    2af0:	4f 4f       	sbci	r20, 0xFF	; 255
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	0e c0       	rjmp	.+28     	; 0x2b12 <__fixsfsi+0x9c>
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	09 c0       	rjmp	.+18     	; 0x2b12 <__fixsfsi+0x9c>
    2b00:	2f ef       	ldi	r18, 0xFF	; 255
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f ef       	ldi	r20, 0xFF	; 255
    2b06:	5f e7       	ldi	r21, 0x7F	; 127
    2b08:	04 c0       	rjmp	.+8      	; 0x2b12 <__fixsfsi+0x9c>
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	50 e8       	ldi	r21, 0x80	; 128
    2b12:	b9 01       	movw	r22, r18
    2b14:	ca 01       	movw	r24, r20
    2b16:	2c 96       	adiw	r28, 0x0c	; 12
    2b18:	e2 e0       	ldi	r30, 0x02	; 2
    2b1a:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x20>

00002b1e <__clzsi2>:
    2b1e:	ef 92       	push	r14
    2b20:	ff 92       	push	r15
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
    2b26:	7b 01       	movw	r14, r22
    2b28:	8c 01       	movw	r16, r24
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	e8 16       	cp	r14, r24
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	f8 06       	cpc	r15, r24
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	08 07       	cpc	r16, r24
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	18 07       	cpc	r17, r24
    2b3a:	88 f4       	brcc	.+34     	; 0x2b5e <__clzsi2+0x40>
    2b3c:	8f ef       	ldi	r24, 0xFF	; 255
    2b3e:	e8 16       	cp	r14, r24
    2b40:	f1 04       	cpc	r15, r1
    2b42:	01 05       	cpc	r16, r1
    2b44:	11 05       	cpc	r17, r1
    2b46:	31 f0       	breq	.+12     	; 0x2b54 <__clzsi2+0x36>
    2b48:	28 f0       	brcs	.+10     	; 0x2b54 <__clzsi2+0x36>
    2b4a:	88 e0       	ldi	r24, 0x08	; 8
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	a0 e0       	ldi	r26, 0x00	; 0
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	17 c0       	rjmp	.+46     	; 0x2b82 <__clzsi2+0x64>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	a0 e0       	ldi	r26, 0x00	; 0
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	12 c0       	rjmp	.+36     	; 0x2b82 <__clzsi2+0x64>
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	e8 16       	cp	r14, r24
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	f8 06       	cpc	r15, r24
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	08 07       	cpc	r16, r24
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	18 07       	cpc	r17, r24
    2b6e:	28 f0       	brcs	.+10     	; 0x2b7a <__clzsi2+0x5c>
    2b70:	88 e1       	ldi	r24, 0x18	; 24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	a0 e0       	ldi	r26, 0x00	; 0
    2b76:	b0 e0       	ldi	r27, 0x00	; 0
    2b78:	04 c0       	rjmp	.+8      	; 0x2b82 <__clzsi2+0x64>
    2b7a:	80 e1       	ldi	r24, 0x10	; 16
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	20 e2       	ldi	r18, 0x20	; 32
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e0       	ldi	r20, 0x00	; 0
    2b88:	50 e0       	ldi	r21, 0x00	; 0
    2b8a:	28 1b       	sub	r18, r24
    2b8c:	39 0b       	sbc	r19, r25
    2b8e:	4a 0b       	sbc	r20, r26
    2b90:	5b 0b       	sbc	r21, r27
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <__clzsi2+0x7e>
    2b94:	16 95       	lsr	r17
    2b96:	07 95       	ror	r16
    2b98:	f7 94       	ror	r15
    2b9a:	e7 94       	ror	r14
    2b9c:	8a 95       	dec	r24
    2b9e:	d2 f7       	brpl	.-12     	; 0x2b94 <__clzsi2+0x76>
    2ba0:	f7 01       	movw	r30, r14
    2ba2:	ec 56       	subi	r30, 0x6C	; 108
    2ba4:	fd 4f       	sbci	r31, 0xFD	; 253
    2ba6:	80 81       	ld	r24, Z
    2ba8:	28 1b       	sub	r18, r24
    2baa:	31 09       	sbc	r19, r1
    2bac:	41 09       	sbc	r20, r1
    2bae:	51 09       	sbc	r21, r1
    2bb0:	c9 01       	movw	r24, r18
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	ff 90       	pop	r15
    2bb8:	ef 90       	pop	r14
    2bba:	08 95       	ret

00002bbc <__pack_f>:
    2bbc:	df 92       	push	r13
    2bbe:	ef 92       	push	r14
    2bc0:	ff 92       	push	r15
    2bc2:	0f 93       	push	r16
    2bc4:	1f 93       	push	r17
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	e4 80       	ldd	r14, Z+4	; 0x04
    2bca:	f5 80       	ldd	r15, Z+5	; 0x05
    2bcc:	06 81       	ldd	r16, Z+6	; 0x06
    2bce:	17 81       	ldd	r17, Z+7	; 0x07
    2bd0:	d1 80       	ldd	r13, Z+1	; 0x01
    2bd2:	80 81       	ld	r24, Z
    2bd4:	82 30       	cpi	r24, 0x02	; 2
    2bd6:	48 f4       	brcc	.+18     	; 0x2bea <__pack_f+0x2e>
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	a0 e1       	ldi	r26, 0x10	; 16
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e8 2a       	or	r14, r24
    2be2:	f9 2a       	or	r15, r25
    2be4:	0a 2b       	or	r16, r26
    2be6:	1b 2b       	or	r17, r27
    2be8:	a5 c0       	rjmp	.+330    	; 0x2d34 <__pack_f+0x178>
    2bea:	84 30       	cpi	r24, 0x04	; 4
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <__pack_f+0x34>
    2bee:	9f c0       	rjmp	.+318    	; 0x2d2e <__pack_f+0x172>
    2bf0:	82 30       	cpi	r24, 0x02	; 2
    2bf2:	21 f4       	brne	.+8      	; 0x2bfc <__pack_f+0x40>
    2bf4:	ee 24       	eor	r14, r14
    2bf6:	ff 24       	eor	r15, r15
    2bf8:	87 01       	movw	r16, r14
    2bfa:	05 c0       	rjmp	.+10     	; 0x2c06 <__pack_f+0x4a>
    2bfc:	e1 14       	cp	r14, r1
    2bfe:	f1 04       	cpc	r15, r1
    2c00:	01 05       	cpc	r16, r1
    2c02:	11 05       	cpc	r17, r1
    2c04:	19 f4       	brne	.+6      	; 0x2c0c <__pack_f+0x50>
    2c06:	e0 e0       	ldi	r30, 0x00	; 0
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	96 c0       	rjmp	.+300    	; 0x2d38 <__pack_f+0x17c>
    2c0c:	62 81       	ldd	r22, Z+2	; 0x02
    2c0e:	73 81       	ldd	r23, Z+3	; 0x03
    2c10:	9f ef       	ldi	r25, 0xFF	; 255
    2c12:	62 38       	cpi	r22, 0x82	; 130
    2c14:	79 07       	cpc	r23, r25
    2c16:	0c f0       	brlt	.+2      	; 0x2c1a <__pack_f+0x5e>
    2c18:	5b c0       	rjmp	.+182    	; 0x2cd0 <__pack_f+0x114>
    2c1a:	22 e8       	ldi	r18, 0x82	; 130
    2c1c:	3f ef       	ldi	r19, 0xFF	; 255
    2c1e:	26 1b       	sub	r18, r22
    2c20:	37 0b       	sbc	r19, r23
    2c22:	2a 31       	cpi	r18, 0x1A	; 26
    2c24:	31 05       	cpc	r19, r1
    2c26:	2c f0       	brlt	.+10     	; 0x2c32 <__pack_f+0x76>
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	2a c0       	rjmp	.+84     	; 0x2c86 <__pack_f+0xca>
    2c32:	b8 01       	movw	r22, r16
    2c34:	a7 01       	movw	r20, r14
    2c36:	02 2e       	mov	r0, r18
    2c38:	04 c0       	rjmp	.+8      	; 0x2c42 <__pack_f+0x86>
    2c3a:	76 95       	lsr	r23
    2c3c:	67 95       	ror	r22
    2c3e:	57 95       	ror	r21
    2c40:	47 95       	ror	r20
    2c42:	0a 94       	dec	r0
    2c44:	d2 f7       	brpl	.-12     	; 0x2c3a <__pack_f+0x7e>
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a0 e0       	ldi	r26, 0x00	; 0
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	04 c0       	rjmp	.+8      	; 0x2c58 <__pack_f+0x9c>
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	aa 1f       	adc	r26, r26
    2c56:	bb 1f       	adc	r27, r27
    2c58:	2a 95       	dec	r18
    2c5a:	d2 f7       	brpl	.-12     	; 0x2c50 <__pack_f+0x94>
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	a1 09       	sbc	r26, r1
    2c60:	b1 09       	sbc	r27, r1
    2c62:	8e 21       	and	r24, r14
    2c64:	9f 21       	and	r25, r15
    2c66:	a0 23       	and	r26, r16
    2c68:	b1 23       	and	r27, r17
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	a1 05       	cpc	r26, r1
    2c6e:	b1 05       	cpc	r27, r1
    2c70:	21 f0       	breq	.+8      	; 0x2c7a <__pack_f+0xbe>
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	a0 e0       	ldi	r26, 0x00	; 0
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	9a 01       	movw	r18, r20
    2c7c:	ab 01       	movw	r20, r22
    2c7e:	28 2b       	or	r18, r24
    2c80:	39 2b       	or	r19, r25
    2c82:	4a 2b       	or	r20, r26
    2c84:	5b 2b       	or	r21, r27
    2c86:	da 01       	movw	r26, r20
    2c88:	c9 01       	movw	r24, r18
    2c8a:	8f 77       	andi	r24, 0x7F	; 127
    2c8c:	90 70       	andi	r25, 0x00	; 0
    2c8e:	a0 70       	andi	r26, 0x00	; 0
    2c90:	b0 70       	andi	r27, 0x00	; 0
    2c92:	80 34       	cpi	r24, 0x40	; 64
    2c94:	91 05       	cpc	r25, r1
    2c96:	a1 05       	cpc	r26, r1
    2c98:	b1 05       	cpc	r27, r1
    2c9a:	39 f4       	brne	.+14     	; 0x2caa <__pack_f+0xee>
    2c9c:	27 ff       	sbrs	r18, 7
    2c9e:	09 c0       	rjmp	.+18     	; 0x2cb2 <__pack_f+0xf6>
    2ca0:	20 5c       	subi	r18, 0xC0	; 192
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca8:	04 c0       	rjmp	.+8      	; 0x2cb2 <__pack_f+0xf6>
    2caa:	21 5c       	subi	r18, 0xC1	; 193
    2cac:	3f 4f       	sbci	r19, 0xFF	; 255
    2cae:	4f 4f       	sbci	r20, 0xFF	; 255
    2cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb2:	e0 e0       	ldi	r30, 0x00	; 0
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	20 30       	cpi	r18, 0x00	; 0
    2cb8:	a0 e0       	ldi	r26, 0x00	; 0
    2cba:	3a 07       	cpc	r19, r26
    2cbc:	a0 e0       	ldi	r26, 0x00	; 0
    2cbe:	4a 07       	cpc	r20, r26
    2cc0:	a0 e4       	ldi	r26, 0x40	; 64
    2cc2:	5a 07       	cpc	r21, r26
    2cc4:	10 f0       	brcs	.+4      	; 0x2cca <__pack_f+0x10e>
    2cc6:	e1 e0       	ldi	r30, 0x01	; 1
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	79 01       	movw	r14, r18
    2ccc:	8a 01       	movw	r16, r20
    2cce:	27 c0       	rjmp	.+78     	; 0x2d1e <__pack_f+0x162>
    2cd0:	60 38       	cpi	r22, 0x80	; 128
    2cd2:	71 05       	cpc	r23, r1
    2cd4:	64 f5       	brge	.+88     	; 0x2d2e <__pack_f+0x172>
    2cd6:	fb 01       	movw	r30, r22
    2cd8:	e1 58       	subi	r30, 0x81	; 129
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	d8 01       	movw	r26, r16
    2cde:	c7 01       	movw	r24, r14
    2ce0:	8f 77       	andi	r24, 0x7F	; 127
    2ce2:	90 70       	andi	r25, 0x00	; 0
    2ce4:	a0 70       	andi	r26, 0x00	; 0
    2ce6:	b0 70       	andi	r27, 0x00	; 0
    2ce8:	80 34       	cpi	r24, 0x40	; 64
    2cea:	91 05       	cpc	r25, r1
    2cec:	a1 05       	cpc	r26, r1
    2cee:	b1 05       	cpc	r27, r1
    2cf0:	39 f4       	brne	.+14     	; 0x2d00 <__pack_f+0x144>
    2cf2:	e7 fe       	sbrs	r14, 7
    2cf4:	0d c0       	rjmp	.+26     	; 0x2d10 <__pack_f+0x154>
    2cf6:	80 e4       	ldi	r24, 0x40	; 64
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 e0       	ldi	r26, 0x00	; 0
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	04 c0       	rjmp	.+8      	; 0x2d08 <__pack_f+0x14c>
    2d00:	8f e3       	ldi	r24, 0x3F	; 63
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a0 e0       	ldi	r26, 0x00	; 0
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	e8 0e       	add	r14, r24
    2d0a:	f9 1e       	adc	r15, r25
    2d0c:	0a 1f       	adc	r16, r26
    2d0e:	1b 1f       	adc	r17, r27
    2d10:	17 ff       	sbrs	r17, 7
    2d12:	05 c0       	rjmp	.+10     	; 0x2d1e <__pack_f+0x162>
    2d14:	16 95       	lsr	r17
    2d16:	07 95       	ror	r16
    2d18:	f7 94       	ror	r15
    2d1a:	e7 94       	ror	r14
    2d1c:	31 96       	adiw	r30, 0x01	; 1
    2d1e:	87 e0       	ldi	r24, 0x07	; 7
    2d20:	16 95       	lsr	r17
    2d22:	07 95       	ror	r16
    2d24:	f7 94       	ror	r15
    2d26:	e7 94       	ror	r14
    2d28:	8a 95       	dec	r24
    2d2a:	d1 f7       	brne	.-12     	; 0x2d20 <__pack_f+0x164>
    2d2c:	05 c0       	rjmp	.+10     	; 0x2d38 <__pack_f+0x17c>
    2d2e:	ee 24       	eor	r14, r14
    2d30:	ff 24       	eor	r15, r15
    2d32:	87 01       	movw	r16, r14
    2d34:	ef ef       	ldi	r30, 0xFF	; 255
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	6e 2f       	mov	r22, r30
    2d3a:	67 95       	ror	r22
    2d3c:	66 27       	eor	r22, r22
    2d3e:	67 95       	ror	r22
    2d40:	90 2f       	mov	r25, r16
    2d42:	9f 77       	andi	r25, 0x7F	; 127
    2d44:	d7 94       	ror	r13
    2d46:	dd 24       	eor	r13, r13
    2d48:	d7 94       	ror	r13
    2d4a:	8e 2f       	mov	r24, r30
    2d4c:	86 95       	lsr	r24
    2d4e:	49 2f       	mov	r20, r25
    2d50:	46 2b       	or	r20, r22
    2d52:	58 2f       	mov	r21, r24
    2d54:	5d 29       	or	r21, r13
    2d56:	b7 01       	movw	r22, r14
    2d58:	ca 01       	movw	r24, r20
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	ff 90       	pop	r15
    2d60:	ef 90       	pop	r14
    2d62:	df 90       	pop	r13
    2d64:	08 95       	ret

00002d66 <__unpack_f>:
    2d66:	fc 01       	movw	r30, r24
    2d68:	db 01       	movw	r26, r22
    2d6a:	40 81       	ld	r20, Z
    2d6c:	51 81       	ldd	r21, Z+1	; 0x01
    2d6e:	22 81       	ldd	r18, Z+2	; 0x02
    2d70:	62 2f       	mov	r22, r18
    2d72:	6f 77       	andi	r22, 0x7F	; 127
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	22 1f       	adc	r18, r18
    2d78:	22 27       	eor	r18, r18
    2d7a:	22 1f       	adc	r18, r18
    2d7c:	93 81       	ldd	r25, Z+3	; 0x03
    2d7e:	89 2f       	mov	r24, r25
    2d80:	88 0f       	add	r24, r24
    2d82:	82 2b       	or	r24, r18
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	99 1f       	adc	r25, r25
    2d8a:	99 27       	eor	r25, r25
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	11 96       	adiw	r26, 0x01	; 1
    2d90:	9c 93       	st	X, r25
    2d92:	11 97       	sbiw	r26, 0x01	; 1
    2d94:	21 15       	cp	r18, r1
    2d96:	31 05       	cpc	r19, r1
    2d98:	a9 f5       	brne	.+106    	; 0x2e04 <__unpack_f+0x9e>
    2d9a:	41 15       	cp	r20, r1
    2d9c:	51 05       	cpc	r21, r1
    2d9e:	61 05       	cpc	r22, r1
    2da0:	71 05       	cpc	r23, r1
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <__unpack_f+0x42>
    2da4:	82 e0       	ldi	r24, 0x02	; 2
    2da6:	37 c0       	rjmp	.+110    	; 0x2e16 <__unpack_f+0xb0>
    2da8:	82 e8       	ldi	r24, 0x82	; 130
    2daa:	9f ef       	ldi	r25, 0xFF	; 255
    2dac:	13 96       	adiw	r26, 0x03	; 3
    2dae:	9c 93       	st	X, r25
    2db0:	8e 93       	st	-X, r24
    2db2:	12 97       	sbiw	r26, 0x02	; 2
    2db4:	9a 01       	movw	r18, r20
    2db6:	ab 01       	movw	r20, r22
    2db8:	67 e0       	ldi	r22, 0x07	; 7
    2dba:	22 0f       	add	r18, r18
    2dbc:	33 1f       	adc	r19, r19
    2dbe:	44 1f       	adc	r20, r20
    2dc0:	55 1f       	adc	r21, r21
    2dc2:	6a 95       	dec	r22
    2dc4:	d1 f7       	brne	.-12     	; 0x2dba <__unpack_f+0x54>
    2dc6:	83 e0       	ldi	r24, 0x03	; 3
    2dc8:	8c 93       	st	X, r24
    2dca:	0d c0       	rjmp	.+26     	; 0x2de6 <__unpack_f+0x80>
    2dcc:	22 0f       	add	r18, r18
    2dce:	33 1f       	adc	r19, r19
    2dd0:	44 1f       	adc	r20, r20
    2dd2:	55 1f       	adc	r21, r21
    2dd4:	12 96       	adiw	r26, 0x02	; 2
    2dd6:	8d 91       	ld	r24, X+
    2dd8:	9c 91       	ld	r25, X
    2dda:	13 97       	sbiw	r26, 0x03	; 3
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	13 96       	adiw	r26, 0x03	; 3
    2de0:	9c 93       	st	X, r25
    2de2:	8e 93       	st	-X, r24
    2de4:	12 97       	sbiw	r26, 0x02	; 2
    2de6:	20 30       	cpi	r18, 0x00	; 0
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	38 07       	cpc	r19, r24
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	48 07       	cpc	r20, r24
    2df0:	80 e4       	ldi	r24, 0x40	; 64
    2df2:	58 07       	cpc	r21, r24
    2df4:	58 f3       	brcs	.-42     	; 0x2dcc <__unpack_f+0x66>
    2df6:	14 96       	adiw	r26, 0x04	; 4
    2df8:	2d 93       	st	X+, r18
    2dfa:	3d 93       	st	X+, r19
    2dfc:	4d 93       	st	X+, r20
    2dfe:	5c 93       	st	X, r21
    2e00:	17 97       	sbiw	r26, 0x07	; 7
    2e02:	08 95       	ret
    2e04:	2f 3f       	cpi	r18, 0xFF	; 255
    2e06:	31 05       	cpc	r19, r1
    2e08:	79 f4       	brne	.+30     	; 0x2e28 <__unpack_f+0xc2>
    2e0a:	41 15       	cp	r20, r1
    2e0c:	51 05       	cpc	r21, r1
    2e0e:	61 05       	cpc	r22, r1
    2e10:	71 05       	cpc	r23, r1
    2e12:	19 f4       	brne	.+6      	; 0x2e1a <__unpack_f+0xb4>
    2e14:	84 e0       	ldi	r24, 0x04	; 4
    2e16:	8c 93       	st	X, r24
    2e18:	08 95       	ret
    2e1a:	64 ff       	sbrs	r22, 4
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <__unpack_f+0xbe>
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	8c 93       	st	X, r24
    2e22:	12 c0       	rjmp	.+36     	; 0x2e48 <__unpack_f+0xe2>
    2e24:	1c 92       	st	X, r1
    2e26:	10 c0       	rjmp	.+32     	; 0x2e48 <__unpack_f+0xe2>
    2e28:	2f 57       	subi	r18, 0x7F	; 127
    2e2a:	30 40       	sbci	r19, 0x00	; 0
    2e2c:	13 96       	adiw	r26, 0x03	; 3
    2e2e:	3c 93       	st	X, r19
    2e30:	2e 93       	st	-X, r18
    2e32:	12 97       	sbiw	r26, 0x02	; 2
    2e34:	83 e0       	ldi	r24, 0x03	; 3
    2e36:	8c 93       	st	X, r24
    2e38:	87 e0       	ldi	r24, 0x07	; 7
    2e3a:	44 0f       	add	r20, r20
    2e3c:	55 1f       	adc	r21, r21
    2e3e:	66 1f       	adc	r22, r22
    2e40:	77 1f       	adc	r23, r23
    2e42:	8a 95       	dec	r24
    2e44:	d1 f7       	brne	.-12     	; 0x2e3a <__unpack_f+0xd4>
    2e46:	70 64       	ori	r23, 0x40	; 64
    2e48:	14 96       	adiw	r26, 0x04	; 4
    2e4a:	4d 93       	st	X+, r20
    2e4c:	5d 93       	st	X+, r21
    2e4e:	6d 93       	st	X+, r22
    2e50:	7c 93       	st	X, r23
    2e52:	17 97       	sbiw	r26, 0x07	; 7
    2e54:	08 95       	ret

00002e56 <__fpcmp_parts_f>:
    2e56:	1f 93       	push	r17
    2e58:	dc 01       	movw	r26, r24
    2e5a:	fb 01       	movw	r30, r22
    2e5c:	9c 91       	ld	r25, X
    2e5e:	92 30       	cpi	r25, 0x02	; 2
    2e60:	08 f4       	brcc	.+2      	; 0x2e64 <__fpcmp_parts_f+0xe>
    2e62:	47 c0       	rjmp	.+142    	; 0x2ef2 <__fpcmp_parts_f+0x9c>
    2e64:	80 81       	ld	r24, Z
    2e66:	82 30       	cpi	r24, 0x02	; 2
    2e68:	08 f4       	brcc	.+2      	; 0x2e6c <__fpcmp_parts_f+0x16>
    2e6a:	43 c0       	rjmp	.+134    	; 0x2ef2 <__fpcmp_parts_f+0x9c>
    2e6c:	94 30       	cpi	r25, 0x04	; 4
    2e6e:	51 f4       	brne	.+20     	; 0x2e84 <__fpcmp_parts_f+0x2e>
    2e70:	11 96       	adiw	r26, 0x01	; 1
    2e72:	1c 91       	ld	r17, X
    2e74:	84 30       	cpi	r24, 0x04	; 4
    2e76:	99 f5       	brne	.+102    	; 0x2ede <__fpcmp_parts_f+0x88>
    2e78:	81 81       	ldd	r24, Z+1	; 0x01
    2e7a:	68 2f       	mov	r22, r24
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	61 1b       	sub	r22, r17
    2e80:	71 09       	sbc	r23, r1
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <__fpcmp_parts_f+0xac>
    2e84:	84 30       	cpi	r24, 0x04	; 4
    2e86:	21 f0       	breq	.+8      	; 0x2e90 <__fpcmp_parts_f+0x3a>
    2e88:	92 30       	cpi	r25, 0x02	; 2
    2e8a:	31 f4       	brne	.+12     	; 0x2e98 <__fpcmp_parts_f+0x42>
    2e8c:	82 30       	cpi	r24, 0x02	; 2
    2e8e:	b9 f1       	breq	.+110    	; 0x2efe <__fpcmp_parts_f+0xa8>
    2e90:	81 81       	ldd	r24, Z+1	; 0x01
    2e92:	88 23       	and	r24, r24
    2e94:	89 f1       	breq	.+98     	; 0x2ef8 <__fpcmp_parts_f+0xa2>
    2e96:	2d c0       	rjmp	.+90     	; 0x2ef2 <__fpcmp_parts_f+0x9c>
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	1c 91       	ld	r17, X
    2e9c:	11 97       	sbiw	r26, 0x01	; 1
    2e9e:	82 30       	cpi	r24, 0x02	; 2
    2ea0:	f1 f0       	breq	.+60     	; 0x2ede <__fpcmp_parts_f+0x88>
    2ea2:	81 81       	ldd	r24, Z+1	; 0x01
    2ea4:	18 17       	cp	r17, r24
    2ea6:	d9 f4       	brne	.+54     	; 0x2ede <__fpcmp_parts_f+0x88>
    2ea8:	12 96       	adiw	r26, 0x02	; 2
    2eaa:	2d 91       	ld	r18, X+
    2eac:	3c 91       	ld	r19, X
    2eae:	13 97       	sbiw	r26, 0x03	; 3
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	82 17       	cp	r24, r18
    2eb6:	93 07       	cpc	r25, r19
    2eb8:	94 f0       	brlt	.+36     	; 0x2ede <__fpcmp_parts_f+0x88>
    2eba:	28 17       	cp	r18, r24
    2ebc:	39 07       	cpc	r19, r25
    2ebe:	bc f0       	brlt	.+46     	; 0x2eee <__fpcmp_parts_f+0x98>
    2ec0:	14 96       	adiw	r26, 0x04	; 4
    2ec2:	8d 91       	ld	r24, X+
    2ec4:	9d 91       	ld	r25, X+
    2ec6:	0d 90       	ld	r0, X+
    2ec8:	bc 91       	ld	r27, X
    2eca:	a0 2d       	mov	r26, r0
    2ecc:	24 81       	ldd	r18, Z+4	; 0x04
    2ece:	35 81       	ldd	r19, Z+5	; 0x05
    2ed0:	46 81       	ldd	r20, Z+6	; 0x06
    2ed2:	57 81       	ldd	r21, Z+7	; 0x07
    2ed4:	28 17       	cp	r18, r24
    2ed6:	39 07       	cpc	r19, r25
    2ed8:	4a 07       	cpc	r20, r26
    2eda:	5b 07       	cpc	r21, r27
    2edc:	18 f4       	brcc	.+6      	; 0x2ee4 <__fpcmp_parts_f+0x8e>
    2ede:	11 23       	and	r17, r17
    2ee0:	41 f0       	breq	.+16     	; 0x2ef2 <__fpcmp_parts_f+0x9c>
    2ee2:	0a c0       	rjmp	.+20     	; 0x2ef8 <__fpcmp_parts_f+0xa2>
    2ee4:	82 17       	cp	r24, r18
    2ee6:	93 07       	cpc	r25, r19
    2ee8:	a4 07       	cpc	r26, r20
    2eea:	b5 07       	cpc	r27, r21
    2eec:	40 f4       	brcc	.+16     	; 0x2efe <__fpcmp_parts_f+0xa8>
    2eee:	11 23       	and	r17, r17
    2ef0:	19 f0       	breq	.+6      	; 0x2ef8 <__fpcmp_parts_f+0xa2>
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	05 c0       	rjmp	.+10     	; 0x2f02 <__fpcmp_parts_f+0xac>
    2ef8:	6f ef       	ldi	r22, 0xFF	; 255
    2efa:	7f ef       	ldi	r23, 0xFF	; 255
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <__fpcmp_parts_f+0xac>
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	70 e0       	ldi	r23, 0x00	; 0
    2f02:	cb 01       	movw	r24, r22
    2f04:	1f 91       	pop	r17
    2f06:	08 95       	ret

00002f08 <snprintf>:
    2f08:	ae e0       	ldi	r26, 0x0E	; 14
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	ea e8       	ldi	r30, 0x8A	; 138
    2f0e:	f7 e1       	ldi	r31, 0x17	; 23
    2f10:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__prologue_saves__+0x1c>
    2f14:	0e 89       	ldd	r16, Y+22	; 0x16
    2f16:	1f 89       	ldd	r17, Y+23	; 0x17
    2f18:	88 8d       	ldd	r24, Y+24	; 0x18
    2f1a:	99 8d       	ldd	r25, Y+25	; 0x19
    2f1c:	97 ff       	sbrs	r25, 7
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <snprintf+0x1c>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e8       	ldi	r25, 0x80	; 128
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	1a 83       	std	Y+2, r17	; 0x02
    2f2c:	09 83       	std	Y+1, r16	; 0x01
    2f2e:	86 e0       	ldi	r24, 0x06	; 6
    2f30:	8c 83       	std	Y+4, r24	; 0x04
    2f32:	9e 01       	movw	r18, r28
    2f34:	24 5e       	subi	r18, 0xE4	; 228
    2f36:	3f 4f       	sbci	r19, 0xFF	; 255
    2f38:	ce 01       	movw	r24, r28
    2f3a:	01 96       	adiw	r24, 0x01	; 1
    2f3c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2f3e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2f40:	a9 01       	movw	r20, r18
    2f42:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <vfprintf>
    2f46:	4d 81       	ldd	r20, Y+5	; 0x05
    2f48:	5e 81       	ldd	r21, Y+6	; 0x06
    2f4a:	57 fd       	sbrc	r21, 7
    2f4c:	0a c0       	rjmp	.+20     	; 0x2f62 <snprintf+0x5a>
    2f4e:	2f 81       	ldd	r18, Y+7	; 0x07
    2f50:	38 85       	ldd	r19, Y+8	; 0x08
    2f52:	42 17       	cp	r20, r18
    2f54:	53 07       	cpc	r21, r19
    2f56:	0c f4       	brge	.+2      	; 0x2f5a <snprintf+0x52>
    2f58:	9a 01       	movw	r18, r20
    2f5a:	02 0f       	add	r16, r18
    2f5c:	13 1f       	adc	r17, r19
    2f5e:	f8 01       	movw	r30, r16
    2f60:	10 82       	st	Z, r1
    2f62:	2e 96       	adiw	r28, 0x0e	; 14
    2f64:	e4 e0       	ldi	r30, 0x04	; 4
    2f66:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__epilogue_restores__+0x1c>

00002f6a <vfprintf>:
    2f6a:	ab e0       	ldi	r26, 0x0B	; 11
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	eb eb       	ldi	r30, 0xBB	; 187
    2f70:	f7 e1       	ldi	r31, 0x17	; 23
    2f72:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__prologue_saves__>
    2f76:	3c 01       	movw	r6, r24
    2f78:	2b 01       	movw	r4, r22
    2f7a:	5a 01       	movw	r10, r20
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	17 82       	std	Z+7, r1	; 0x07
    2f80:	16 82       	std	Z+6, r1	; 0x06
    2f82:	83 81       	ldd	r24, Z+3	; 0x03
    2f84:	81 fd       	sbrc	r24, 1
    2f86:	03 c0       	rjmp	.+6      	; 0x2f8e <vfprintf+0x24>
    2f88:	6f ef       	ldi	r22, 0xFF	; 255
    2f8a:	7f ef       	ldi	r23, 0xFF	; 255
    2f8c:	c6 c1       	rjmp	.+908    	; 0x331a <vfprintf+0x3b0>
    2f8e:	9a e0       	ldi	r25, 0x0A	; 10
    2f90:	89 2e       	mov	r8, r25
    2f92:	1e 01       	movw	r2, r28
    2f94:	08 94       	sec
    2f96:	21 1c       	adc	r2, r1
    2f98:	31 1c       	adc	r3, r1
    2f9a:	f3 01       	movw	r30, r6
    2f9c:	23 81       	ldd	r18, Z+3	; 0x03
    2f9e:	f2 01       	movw	r30, r4
    2fa0:	23 fd       	sbrc	r18, 3
    2fa2:	85 91       	lpm	r24, Z+
    2fa4:	23 ff       	sbrs	r18, 3
    2fa6:	81 91       	ld	r24, Z+
    2fa8:	2f 01       	movw	r4, r30
    2faa:	88 23       	and	r24, r24
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <vfprintf+0x46>
    2fae:	b2 c1       	rjmp	.+868    	; 0x3314 <vfprintf+0x3aa>
    2fb0:	85 32       	cpi	r24, 0x25	; 37
    2fb2:	39 f4       	brne	.+14     	; 0x2fc2 <vfprintf+0x58>
    2fb4:	23 fd       	sbrc	r18, 3
    2fb6:	85 91       	lpm	r24, Z+
    2fb8:	23 ff       	sbrs	r18, 3
    2fba:	81 91       	ld	r24, Z+
    2fbc:	2f 01       	movw	r4, r30
    2fbe:	85 32       	cpi	r24, 0x25	; 37
    2fc0:	29 f4       	brne	.+10     	; 0x2fcc <vfprintf+0x62>
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	b3 01       	movw	r22, r6
    2fc6:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    2fca:	e7 cf       	rjmp	.-50     	; 0x2f9a <vfprintf+0x30>
    2fcc:	98 2f       	mov	r25, r24
    2fce:	ff 24       	eor	r15, r15
    2fd0:	ee 24       	eor	r14, r14
    2fd2:	99 24       	eor	r9, r9
    2fd4:	ff e1       	ldi	r31, 0x1F	; 31
    2fd6:	ff 15       	cp	r31, r15
    2fd8:	d0 f0       	brcs	.+52     	; 0x300e <vfprintf+0xa4>
    2fda:	9b 32       	cpi	r25, 0x2B	; 43
    2fdc:	69 f0       	breq	.+26     	; 0x2ff8 <vfprintf+0x8e>
    2fde:	9c 32       	cpi	r25, 0x2C	; 44
    2fe0:	28 f4       	brcc	.+10     	; 0x2fec <vfprintf+0x82>
    2fe2:	90 32       	cpi	r25, 0x20	; 32
    2fe4:	59 f0       	breq	.+22     	; 0x2ffc <vfprintf+0x92>
    2fe6:	93 32       	cpi	r25, 0x23	; 35
    2fe8:	91 f4       	brne	.+36     	; 0x300e <vfprintf+0xa4>
    2fea:	0e c0       	rjmp	.+28     	; 0x3008 <vfprintf+0x9e>
    2fec:	9d 32       	cpi	r25, 0x2D	; 45
    2fee:	49 f0       	breq	.+18     	; 0x3002 <vfprintf+0x98>
    2ff0:	90 33       	cpi	r25, 0x30	; 48
    2ff2:	69 f4       	brne	.+26     	; 0x300e <vfprintf+0xa4>
    2ff4:	41 e0       	ldi	r20, 0x01	; 1
    2ff6:	24 c0       	rjmp	.+72     	; 0x3040 <vfprintf+0xd6>
    2ff8:	52 e0       	ldi	r21, 0x02	; 2
    2ffa:	f5 2a       	or	r15, r21
    2ffc:	84 e0       	ldi	r24, 0x04	; 4
    2ffe:	f8 2a       	or	r15, r24
    3000:	28 c0       	rjmp	.+80     	; 0x3052 <vfprintf+0xe8>
    3002:	98 e0       	ldi	r25, 0x08	; 8
    3004:	f9 2a       	or	r15, r25
    3006:	25 c0       	rjmp	.+74     	; 0x3052 <vfprintf+0xe8>
    3008:	e0 e1       	ldi	r30, 0x10	; 16
    300a:	fe 2a       	or	r15, r30
    300c:	22 c0       	rjmp	.+68     	; 0x3052 <vfprintf+0xe8>
    300e:	f7 fc       	sbrc	r15, 7
    3010:	29 c0       	rjmp	.+82     	; 0x3064 <vfprintf+0xfa>
    3012:	89 2f       	mov	r24, r25
    3014:	80 53       	subi	r24, 0x30	; 48
    3016:	8a 30       	cpi	r24, 0x0A	; 10
    3018:	70 f4       	brcc	.+28     	; 0x3036 <vfprintf+0xcc>
    301a:	f6 fe       	sbrs	r15, 6
    301c:	05 c0       	rjmp	.+10     	; 0x3028 <vfprintf+0xbe>
    301e:	98 9c       	mul	r9, r8
    3020:	90 2c       	mov	r9, r0
    3022:	11 24       	eor	r1, r1
    3024:	98 0e       	add	r9, r24
    3026:	15 c0       	rjmp	.+42     	; 0x3052 <vfprintf+0xe8>
    3028:	e8 9c       	mul	r14, r8
    302a:	e0 2c       	mov	r14, r0
    302c:	11 24       	eor	r1, r1
    302e:	e8 0e       	add	r14, r24
    3030:	f0 e2       	ldi	r31, 0x20	; 32
    3032:	ff 2a       	or	r15, r31
    3034:	0e c0       	rjmp	.+28     	; 0x3052 <vfprintf+0xe8>
    3036:	9e 32       	cpi	r25, 0x2E	; 46
    3038:	29 f4       	brne	.+10     	; 0x3044 <vfprintf+0xda>
    303a:	f6 fc       	sbrc	r15, 6
    303c:	6b c1       	rjmp	.+726    	; 0x3314 <vfprintf+0x3aa>
    303e:	40 e4       	ldi	r20, 0x40	; 64
    3040:	f4 2a       	or	r15, r20
    3042:	07 c0       	rjmp	.+14     	; 0x3052 <vfprintf+0xe8>
    3044:	9c 36       	cpi	r25, 0x6C	; 108
    3046:	19 f4       	brne	.+6      	; 0x304e <vfprintf+0xe4>
    3048:	50 e8       	ldi	r21, 0x80	; 128
    304a:	f5 2a       	or	r15, r21
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <vfprintf+0xe8>
    304e:	98 36       	cpi	r25, 0x68	; 104
    3050:	49 f4       	brne	.+18     	; 0x3064 <vfprintf+0xfa>
    3052:	f2 01       	movw	r30, r4
    3054:	23 fd       	sbrc	r18, 3
    3056:	95 91       	lpm	r25, Z+
    3058:	23 ff       	sbrs	r18, 3
    305a:	91 91       	ld	r25, Z+
    305c:	2f 01       	movw	r4, r30
    305e:	99 23       	and	r25, r25
    3060:	09 f0       	breq	.+2      	; 0x3064 <vfprintf+0xfa>
    3062:	b8 cf       	rjmp	.-144    	; 0x2fd4 <vfprintf+0x6a>
    3064:	89 2f       	mov	r24, r25
    3066:	85 54       	subi	r24, 0x45	; 69
    3068:	83 30       	cpi	r24, 0x03	; 3
    306a:	18 f0       	brcs	.+6      	; 0x3072 <vfprintf+0x108>
    306c:	80 52       	subi	r24, 0x20	; 32
    306e:	83 30       	cpi	r24, 0x03	; 3
    3070:	38 f4       	brcc	.+14     	; 0x3080 <vfprintf+0x116>
    3072:	44 e0       	ldi	r20, 0x04	; 4
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	a4 0e       	add	r10, r20
    3078:	b5 1e       	adc	r11, r21
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	59 83       	std	Y+1, r21	; 0x01
    307e:	0f c0       	rjmp	.+30     	; 0x309e <vfprintf+0x134>
    3080:	93 36       	cpi	r25, 0x63	; 99
    3082:	31 f0       	breq	.+12     	; 0x3090 <vfprintf+0x126>
    3084:	93 37       	cpi	r25, 0x73	; 115
    3086:	79 f0       	breq	.+30     	; 0x30a6 <vfprintf+0x13c>
    3088:	93 35       	cpi	r25, 0x53	; 83
    308a:	09 f0       	breq	.+2      	; 0x308e <vfprintf+0x124>
    308c:	56 c0       	rjmp	.+172    	; 0x313a <vfprintf+0x1d0>
    308e:	20 c0       	rjmp	.+64     	; 0x30d0 <vfprintf+0x166>
    3090:	f5 01       	movw	r30, r10
    3092:	80 81       	ld	r24, Z
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	42 e0       	ldi	r20, 0x02	; 2
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	a4 0e       	add	r10, r20
    309c:	b5 1e       	adc	r11, r21
    309e:	61 01       	movw	r12, r2
    30a0:	01 e0       	ldi	r16, 0x01	; 1
    30a2:	10 e0       	ldi	r17, 0x00	; 0
    30a4:	12 c0       	rjmp	.+36     	; 0x30ca <vfprintf+0x160>
    30a6:	f5 01       	movw	r30, r10
    30a8:	c0 80       	ld	r12, Z
    30aa:	d1 80       	ldd	r13, Z+1	; 0x01
    30ac:	f6 fc       	sbrc	r15, 6
    30ae:	03 c0       	rjmp	.+6      	; 0x30b6 <vfprintf+0x14c>
    30b0:	6f ef       	ldi	r22, 0xFF	; 255
    30b2:	7f ef       	ldi	r23, 0xFF	; 255
    30b4:	02 c0       	rjmp	.+4      	; 0x30ba <vfprintf+0x150>
    30b6:	69 2d       	mov	r22, r9
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	42 e0       	ldi	r20, 0x02	; 2
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	a4 0e       	add	r10, r20
    30c0:	b5 1e       	adc	r11, r21
    30c2:	c6 01       	movw	r24, r12
    30c4:	0e 94 9d 19 	call	0x333a	; 0x333a <strnlen>
    30c8:	8c 01       	movw	r16, r24
    30ca:	5f e7       	ldi	r21, 0x7F	; 127
    30cc:	f5 22       	and	r15, r21
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <vfprintf+0x18e>
    30d0:	f5 01       	movw	r30, r10
    30d2:	c0 80       	ld	r12, Z
    30d4:	d1 80       	ldd	r13, Z+1	; 0x01
    30d6:	f6 fc       	sbrc	r15, 6
    30d8:	03 c0       	rjmp	.+6      	; 0x30e0 <vfprintf+0x176>
    30da:	6f ef       	ldi	r22, 0xFF	; 255
    30dc:	7f ef       	ldi	r23, 0xFF	; 255
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <vfprintf+0x17a>
    30e0:	69 2d       	mov	r22, r9
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	42 e0       	ldi	r20, 0x02	; 2
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	a4 0e       	add	r10, r20
    30ea:	b5 1e       	adc	r11, r21
    30ec:	c6 01       	movw	r24, r12
    30ee:	0e 94 92 19 	call	0x3324	; 0x3324 <strnlen_P>
    30f2:	8c 01       	movw	r16, r24
    30f4:	50 e8       	ldi	r21, 0x80	; 128
    30f6:	f5 2a       	or	r15, r21
    30f8:	f3 fe       	sbrs	r15, 3
    30fa:	07 c0       	rjmp	.+14     	; 0x310a <vfprintf+0x1a0>
    30fc:	1a c0       	rjmp	.+52     	; 0x3132 <vfprintf+0x1c8>
    30fe:	80 e2       	ldi	r24, 0x20	; 32
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	b3 01       	movw	r22, r6
    3104:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    3108:	ea 94       	dec	r14
    310a:	8e 2d       	mov	r24, r14
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	08 17       	cp	r16, r24
    3110:	19 07       	cpc	r17, r25
    3112:	a8 f3       	brcs	.-22     	; 0x30fe <vfprintf+0x194>
    3114:	0e c0       	rjmp	.+28     	; 0x3132 <vfprintf+0x1c8>
    3116:	f6 01       	movw	r30, r12
    3118:	f7 fc       	sbrc	r15, 7
    311a:	85 91       	lpm	r24, Z+
    311c:	f7 fe       	sbrs	r15, 7
    311e:	81 91       	ld	r24, Z+
    3120:	6f 01       	movw	r12, r30
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	b3 01       	movw	r22, r6
    3126:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    312a:	e1 10       	cpse	r14, r1
    312c:	ea 94       	dec	r14
    312e:	01 50       	subi	r16, 0x01	; 1
    3130:	10 40       	sbci	r17, 0x00	; 0
    3132:	01 15       	cp	r16, r1
    3134:	11 05       	cpc	r17, r1
    3136:	79 f7       	brne	.-34     	; 0x3116 <vfprintf+0x1ac>
    3138:	ea c0       	rjmp	.+468    	; 0x330e <vfprintf+0x3a4>
    313a:	94 36       	cpi	r25, 0x64	; 100
    313c:	11 f0       	breq	.+4      	; 0x3142 <vfprintf+0x1d8>
    313e:	99 36       	cpi	r25, 0x69	; 105
    3140:	69 f5       	brne	.+90     	; 0x319c <vfprintf+0x232>
    3142:	f7 fe       	sbrs	r15, 7
    3144:	08 c0       	rjmp	.+16     	; 0x3156 <vfprintf+0x1ec>
    3146:	f5 01       	movw	r30, r10
    3148:	20 81       	ld	r18, Z
    314a:	31 81       	ldd	r19, Z+1	; 0x01
    314c:	42 81       	ldd	r20, Z+2	; 0x02
    314e:	53 81       	ldd	r21, Z+3	; 0x03
    3150:	84 e0       	ldi	r24, 0x04	; 4
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0a c0       	rjmp	.+20     	; 0x316a <vfprintf+0x200>
    3156:	f5 01       	movw	r30, r10
    3158:	80 81       	ld	r24, Z
    315a:	91 81       	ldd	r25, Z+1	; 0x01
    315c:	9c 01       	movw	r18, r24
    315e:	44 27       	eor	r20, r20
    3160:	37 fd       	sbrc	r19, 7
    3162:	40 95       	com	r20
    3164:	54 2f       	mov	r21, r20
    3166:	82 e0       	ldi	r24, 0x02	; 2
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a8 0e       	add	r10, r24
    316c:	b9 1e       	adc	r11, r25
    316e:	9f e6       	ldi	r25, 0x6F	; 111
    3170:	f9 22       	and	r15, r25
    3172:	57 ff       	sbrs	r21, 7
    3174:	09 c0       	rjmp	.+18     	; 0x3188 <vfprintf+0x21e>
    3176:	50 95       	com	r21
    3178:	40 95       	com	r20
    317a:	30 95       	com	r19
    317c:	21 95       	neg	r18
    317e:	3f 4f       	sbci	r19, 0xFF	; 255
    3180:	4f 4f       	sbci	r20, 0xFF	; 255
    3182:	5f 4f       	sbci	r21, 0xFF	; 255
    3184:	e0 e8       	ldi	r30, 0x80	; 128
    3186:	fe 2a       	or	r15, r30
    3188:	ca 01       	movw	r24, r20
    318a:	b9 01       	movw	r22, r18
    318c:	a1 01       	movw	r20, r2
    318e:	2a e0       	ldi	r18, 0x0A	; 10
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__ultoa_invert>
    3196:	d8 2e       	mov	r13, r24
    3198:	d2 18       	sub	r13, r2
    319a:	40 c0       	rjmp	.+128    	; 0x321c <vfprintf+0x2b2>
    319c:	95 37       	cpi	r25, 0x75	; 117
    319e:	29 f4       	brne	.+10     	; 0x31aa <vfprintf+0x240>
    31a0:	1f 2d       	mov	r17, r15
    31a2:	1f 7e       	andi	r17, 0xEF	; 239
    31a4:	2a e0       	ldi	r18, 0x0A	; 10
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	1d c0       	rjmp	.+58     	; 0x31e4 <vfprintf+0x27a>
    31aa:	1f 2d       	mov	r17, r15
    31ac:	19 7f       	andi	r17, 0xF9	; 249
    31ae:	9f 36       	cpi	r25, 0x6F	; 111
    31b0:	61 f0       	breq	.+24     	; 0x31ca <vfprintf+0x260>
    31b2:	90 37       	cpi	r25, 0x70	; 112
    31b4:	20 f4       	brcc	.+8      	; 0x31be <vfprintf+0x254>
    31b6:	98 35       	cpi	r25, 0x58	; 88
    31b8:	09 f0       	breq	.+2      	; 0x31bc <vfprintf+0x252>
    31ba:	ac c0       	rjmp	.+344    	; 0x3314 <vfprintf+0x3aa>
    31bc:	0f c0       	rjmp	.+30     	; 0x31dc <vfprintf+0x272>
    31be:	90 37       	cpi	r25, 0x70	; 112
    31c0:	39 f0       	breq	.+14     	; 0x31d0 <vfprintf+0x266>
    31c2:	98 37       	cpi	r25, 0x78	; 120
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <vfprintf+0x25e>
    31c6:	a6 c0       	rjmp	.+332    	; 0x3314 <vfprintf+0x3aa>
    31c8:	04 c0       	rjmp	.+8      	; 0x31d2 <vfprintf+0x268>
    31ca:	28 e0       	ldi	r18, 0x08	; 8
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	0a c0       	rjmp	.+20     	; 0x31e4 <vfprintf+0x27a>
    31d0:	10 61       	ori	r17, 0x10	; 16
    31d2:	14 fd       	sbrc	r17, 4
    31d4:	14 60       	ori	r17, 0x04	; 4
    31d6:	20 e1       	ldi	r18, 0x10	; 16
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	04 c0       	rjmp	.+8      	; 0x31e4 <vfprintf+0x27a>
    31dc:	14 fd       	sbrc	r17, 4
    31de:	16 60       	ori	r17, 0x06	; 6
    31e0:	20 e1       	ldi	r18, 0x10	; 16
    31e2:	32 e0       	ldi	r19, 0x02	; 2
    31e4:	17 ff       	sbrs	r17, 7
    31e6:	08 c0       	rjmp	.+16     	; 0x31f8 <vfprintf+0x28e>
    31e8:	f5 01       	movw	r30, r10
    31ea:	60 81       	ld	r22, Z
    31ec:	71 81       	ldd	r23, Z+1	; 0x01
    31ee:	82 81       	ldd	r24, Z+2	; 0x02
    31f0:	93 81       	ldd	r25, Z+3	; 0x03
    31f2:	44 e0       	ldi	r20, 0x04	; 4
    31f4:	50 e0       	ldi	r21, 0x00	; 0
    31f6:	08 c0       	rjmp	.+16     	; 0x3208 <vfprintf+0x29e>
    31f8:	f5 01       	movw	r30, r10
    31fa:	80 81       	ld	r24, Z
    31fc:	91 81       	ldd	r25, Z+1	; 0x01
    31fe:	bc 01       	movw	r22, r24
    3200:	80 e0       	ldi	r24, 0x00	; 0
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	42 e0       	ldi	r20, 0x02	; 2
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	a4 0e       	add	r10, r20
    320a:	b5 1e       	adc	r11, r21
    320c:	a1 01       	movw	r20, r2
    320e:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <__ultoa_invert>
    3212:	d8 2e       	mov	r13, r24
    3214:	d2 18       	sub	r13, r2
    3216:	8f e7       	ldi	r24, 0x7F	; 127
    3218:	f8 2e       	mov	r15, r24
    321a:	f1 22       	and	r15, r17
    321c:	f6 fe       	sbrs	r15, 6
    321e:	0b c0       	rjmp	.+22     	; 0x3236 <vfprintf+0x2cc>
    3220:	5e ef       	ldi	r21, 0xFE	; 254
    3222:	f5 22       	and	r15, r21
    3224:	d9 14       	cp	r13, r9
    3226:	38 f4       	brcc	.+14     	; 0x3236 <vfprintf+0x2cc>
    3228:	f4 fe       	sbrs	r15, 4
    322a:	07 c0       	rjmp	.+14     	; 0x323a <vfprintf+0x2d0>
    322c:	f2 fc       	sbrc	r15, 2
    322e:	05 c0       	rjmp	.+10     	; 0x323a <vfprintf+0x2d0>
    3230:	8f ee       	ldi	r24, 0xEF	; 239
    3232:	f8 22       	and	r15, r24
    3234:	02 c0       	rjmp	.+4      	; 0x323a <vfprintf+0x2d0>
    3236:	1d 2d       	mov	r17, r13
    3238:	01 c0       	rjmp	.+2      	; 0x323c <vfprintf+0x2d2>
    323a:	19 2d       	mov	r17, r9
    323c:	f4 fe       	sbrs	r15, 4
    323e:	0d c0       	rjmp	.+26     	; 0x325a <vfprintf+0x2f0>
    3240:	fe 01       	movw	r30, r28
    3242:	ed 0d       	add	r30, r13
    3244:	f1 1d       	adc	r31, r1
    3246:	80 81       	ld	r24, Z
    3248:	80 33       	cpi	r24, 0x30	; 48
    324a:	19 f4       	brne	.+6      	; 0x3252 <vfprintf+0x2e8>
    324c:	99 ee       	ldi	r25, 0xE9	; 233
    324e:	f9 22       	and	r15, r25
    3250:	08 c0       	rjmp	.+16     	; 0x3262 <vfprintf+0x2f8>
    3252:	1f 5f       	subi	r17, 0xFF	; 255
    3254:	f2 fe       	sbrs	r15, 2
    3256:	05 c0       	rjmp	.+10     	; 0x3262 <vfprintf+0x2f8>
    3258:	03 c0       	rjmp	.+6      	; 0x3260 <vfprintf+0x2f6>
    325a:	8f 2d       	mov	r24, r15
    325c:	86 78       	andi	r24, 0x86	; 134
    325e:	09 f0       	breq	.+2      	; 0x3262 <vfprintf+0x2f8>
    3260:	1f 5f       	subi	r17, 0xFF	; 255
    3262:	0f 2d       	mov	r16, r15
    3264:	f3 fc       	sbrc	r15, 3
    3266:	14 c0       	rjmp	.+40     	; 0x3290 <vfprintf+0x326>
    3268:	f0 fe       	sbrs	r15, 0
    326a:	0f c0       	rjmp	.+30     	; 0x328a <vfprintf+0x320>
    326c:	1e 15       	cp	r17, r14
    326e:	10 f0       	brcs	.+4      	; 0x3274 <vfprintf+0x30a>
    3270:	9d 2c       	mov	r9, r13
    3272:	0b c0       	rjmp	.+22     	; 0x328a <vfprintf+0x320>
    3274:	9d 2c       	mov	r9, r13
    3276:	9e 0c       	add	r9, r14
    3278:	91 1a       	sub	r9, r17
    327a:	1e 2d       	mov	r17, r14
    327c:	06 c0       	rjmp	.+12     	; 0x328a <vfprintf+0x320>
    327e:	80 e2       	ldi	r24, 0x20	; 32
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	b3 01       	movw	r22, r6
    3284:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    3288:	1f 5f       	subi	r17, 0xFF	; 255
    328a:	1e 15       	cp	r17, r14
    328c:	c0 f3       	brcs	.-16     	; 0x327e <vfprintf+0x314>
    328e:	04 c0       	rjmp	.+8      	; 0x3298 <vfprintf+0x32e>
    3290:	1e 15       	cp	r17, r14
    3292:	10 f4       	brcc	.+4      	; 0x3298 <vfprintf+0x32e>
    3294:	e1 1a       	sub	r14, r17
    3296:	01 c0       	rjmp	.+2      	; 0x329a <vfprintf+0x330>
    3298:	ee 24       	eor	r14, r14
    329a:	04 ff       	sbrs	r16, 4
    329c:	0f c0       	rjmp	.+30     	; 0x32bc <vfprintf+0x352>
    329e:	80 e3       	ldi	r24, 0x30	; 48
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	b3 01       	movw	r22, r6
    32a4:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    32a8:	02 ff       	sbrs	r16, 2
    32aa:	1d c0       	rjmp	.+58     	; 0x32e6 <vfprintf+0x37c>
    32ac:	01 fd       	sbrc	r16, 1
    32ae:	03 c0       	rjmp	.+6      	; 0x32b6 <vfprintf+0x34c>
    32b0:	88 e7       	ldi	r24, 0x78	; 120
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	0e c0       	rjmp	.+28     	; 0x32d2 <vfprintf+0x368>
    32b6:	88 e5       	ldi	r24, 0x58	; 88
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	0b c0       	rjmp	.+22     	; 0x32d2 <vfprintf+0x368>
    32bc:	80 2f       	mov	r24, r16
    32be:	86 78       	andi	r24, 0x86	; 134
    32c0:	91 f0       	breq	.+36     	; 0x32e6 <vfprintf+0x37c>
    32c2:	01 ff       	sbrs	r16, 1
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <vfprintf+0x360>
    32c6:	8b e2       	ldi	r24, 0x2B	; 43
    32c8:	01 c0       	rjmp	.+2      	; 0x32cc <vfprintf+0x362>
    32ca:	80 e2       	ldi	r24, 0x20	; 32
    32cc:	f7 fc       	sbrc	r15, 7
    32ce:	8d e2       	ldi	r24, 0x2D	; 45
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	b3 01       	movw	r22, r6
    32d4:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    32d8:	06 c0       	rjmp	.+12     	; 0x32e6 <vfprintf+0x37c>
    32da:	80 e3       	ldi	r24, 0x30	; 48
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	b3 01       	movw	r22, r6
    32e0:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    32e4:	9a 94       	dec	r9
    32e6:	d9 14       	cp	r13, r9
    32e8:	c0 f3       	brcs	.-16     	; 0x32da <vfprintf+0x370>
    32ea:	da 94       	dec	r13
    32ec:	f1 01       	movw	r30, r2
    32ee:	ed 0d       	add	r30, r13
    32f0:	f1 1d       	adc	r31, r1
    32f2:	80 81       	ld	r24, Z
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	b3 01       	movw	r22, r6
    32f8:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    32fc:	dd 20       	and	r13, r13
    32fe:	a9 f7       	brne	.-22     	; 0x32ea <vfprintf+0x380>
    3300:	06 c0       	rjmp	.+12     	; 0x330e <vfprintf+0x3a4>
    3302:	80 e2       	ldi	r24, 0x20	; 32
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	b3 01       	movw	r22, r6
    3308:	0e 94 a8 19 	call	0x3350	; 0x3350 <fputc>
    330c:	ea 94       	dec	r14
    330e:	ee 20       	and	r14, r14
    3310:	c1 f7       	brne	.-16     	; 0x3302 <vfprintf+0x398>
    3312:	43 ce       	rjmp	.-890    	; 0x2f9a <vfprintf+0x30>
    3314:	f3 01       	movw	r30, r6
    3316:	66 81       	ldd	r22, Z+6	; 0x06
    3318:	77 81       	ldd	r23, Z+7	; 0x07
    331a:	cb 01       	movw	r24, r22
    331c:	2b 96       	adiw	r28, 0x0b	; 11
    331e:	e2 e1       	ldi	r30, 0x12	; 18
    3320:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__epilogue_restores__>

00003324 <strnlen_P>:
    3324:	fc 01       	movw	r30, r24
    3326:	05 90       	lpm	r0, Z+
    3328:	61 50       	subi	r22, 0x01	; 1
    332a:	70 40       	sbci	r23, 0x00	; 0
    332c:	01 10       	cpse	r0, r1
    332e:	d8 f7       	brcc	.-10     	; 0x3326 <strnlen_P+0x2>
    3330:	80 95       	com	r24
    3332:	90 95       	com	r25
    3334:	8e 0f       	add	r24, r30
    3336:	9f 1f       	adc	r25, r31
    3338:	08 95       	ret

0000333a <strnlen>:
    333a:	fc 01       	movw	r30, r24
    333c:	61 50       	subi	r22, 0x01	; 1
    333e:	70 40       	sbci	r23, 0x00	; 0
    3340:	01 90       	ld	r0, Z+
    3342:	01 10       	cpse	r0, r1
    3344:	d8 f7       	brcc	.-10     	; 0x333c <strnlen+0x2>
    3346:	80 95       	com	r24
    3348:	90 95       	com	r25
    334a:	8e 0f       	add	r24, r30
    334c:	9f 1f       	adc	r25, r31
    334e:	08 95       	ret

00003350 <fputc>:
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	8c 01       	movw	r16, r24
    335a:	eb 01       	movw	r28, r22
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	81 ff       	sbrs	r24, 1
    3360:	1b c0       	rjmp	.+54     	; 0x3398 <fputc+0x48>
    3362:	82 ff       	sbrs	r24, 2
    3364:	0d c0       	rjmp	.+26     	; 0x3380 <fputc+0x30>
    3366:	2e 81       	ldd	r18, Y+6	; 0x06
    3368:	3f 81       	ldd	r19, Y+7	; 0x07
    336a:	8c 81       	ldd	r24, Y+4	; 0x04
    336c:	9d 81       	ldd	r25, Y+5	; 0x05
    336e:	28 17       	cp	r18, r24
    3370:	39 07       	cpc	r19, r25
    3372:	64 f4       	brge	.+24     	; 0x338c <fputc+0x3c>
    3374:	e8 81       	ld	r30, Y
    3376:	f9 81       	ldd	r31, Y+1	; 0x01
    3378:	01 93       	st	Z+, r16
    337a:	f9 83       	std	Y+1, r31	; 0x01
    337c:	e8 83       	st	Y, r30
    337e:	06 c0       	rjmp	.+12     	; 0x338c <fputc+0x3c>
    3380:	e8 85       	ldd	r30, Y+8	; 0x08
    3382:	f9 85       	ldd	r31, Y+9	; 0x09
    3384:	80 2f       	mov	r24, r16
    3386:	19 95       	eicall
    3388:	89 2b       	or	r24, r25
    338a:	31 f4       	brne	.+12     	; 0x3398 <fputc+0x48>
    338c:	8e 81       	ldd	r24, Y+6	; 0x06
    338e:	9f 81       	ldd	r25, Y+7	; 0x07
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	9f 83       	std	Y+7, r25	; 0x07
    3394:	8e 83       	std	Y+6, r24	; 0x06
    3396:	02 c0       	rjmp	.+4      	; 0x339c <fputc+0x4c>
    3398:	0f ef       	ldi	r16, 0xFF	; 255
    339a:	1f ef       	ldi	r17, 0xFF	; 255
    339c:	c8 01       	movw	r24, r16
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	1f 91       	pop	r17
    33a4:	0f 91       	pop	r16
    33a6:	08 95       	ret

000033a8 <__ultoa_invert>:
    33a8:	fa 01       	movw	r30, r20
    33aa:	aa 27       	eor	r26, r26
    33ac:	28 30       	cpi	r18, 0x08	; 8
    33ae:	51 f1       	breq	.+84     	; 0x3404 <__ultoa_invert+0x5c>
    33b0:	20 31       	cpi	r18, 0x10	; 16
    33b2:	81 f1       	breq	.+96     	; 0x3414 <__ultoa_invert+0x6c>
    33b4:	e8 94       	clt
    33b6:	6f 93       	push	r22
    33b8:	6e 7f       	andi	r22, 0xFE	; 254
    33ba:	6e 5f       	subi	r22, 0xFE	; 254
    33bc:	7f 4f       	sbci	r23, 0xFF	; 255
    33be:	8f 4f       	sbci	r24, 0xFF	; 255
    33c0:	9f 4f       	sbci	r25, 0xFF	; 255
    33c2:	af 4f       	sbci	r26, 0xFF	; 255
    33c4:	b1 e0       	ldi	r27, 0x01	; 1
    33c6:	3e d0       	rcall	.+124    	; 0x3444 <__ultoa_invert+0x9c>
    33c8:	b4 e0       	ldi	r27, 0x04	; 4
    33ca:	3c d0       	rcall	.+120    	; 0x3444 <__ultoa_invert+0x9c>
    33cc:	67 0f       	add	r22, r23
    33ce:	78 1f       	adc	r23, r24
    33d0:	89 1f       	adc	r24, r25
    33d2:	9a 1f       	adc	r25, r26
    33d4:	a1 1d       	adc	r26, r1
    33d6:	68 0f       	add	r22, r24
    33d8:	79 1f       	adc	r23, r25
    33da:	8a 1f       	adc	r24, r26
    33dc:	91 1d       	adc	r25, r1
    33de:	a1 1d       	adc	r26, r1
    33e0:	6a 0f       	add	r22, r26
    33e2:	71 1d       	adc	r23, r1
    33e4:	81 1d       	adc	r24, r1
    33e6:	91 1d       	adc	r25, r1
    33e8:	a1 1d       	adc	r26, r1
    33ea:	20 d0       	rcall	.+64     	; 0x342c <__ultoa_invert+0x84>
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <__ultoa_invert+0x48>
    33ee:	68 94       	set
    33f0:	3f 91       	pop	r19
    33f2:	2a e0       	ldi	r18, 0x0A	; 10
    33f4:	26 9f       	mul	r18, r22
    33f6:	11 24       	eor	r1, r1
    33f8:	30 19       	sub	r19, r0
    33fa:	30 5d       	subi	r19, 0xD0	; 208
    33fc:	31 93       	st	Z+, r19
    33fe:	de f6       	brtc	.-74     	; 0x33b6 <__ultoa_invert+0xe>
    3400:	cf 01       	movw	r24, r30
    3402:	08 95       	ret
    3404:	46 2f       	mov	r20, r22
    3406:	47 70       	andi	r20, 0x07	; 7
    3408:	40 5d       	subi	r20, 0xD0	; 208
    340a:	41 93       	st	Z+, r20
    340c:	b3 e0       	ldi	r27, 0x03	; 3
    340e:	0f d0       	rcall	.+30     	; 0x342e <__ultoa_invert+0x86>
    3410:	c9 f7       	brne	.-14     	; 0x3404 <__ultoa_invert+0x5c>
    3412:	f6 cf       	rjmp	.-20     	; 0x3400 <__ultoa_invert+0x58>
    3414:	46 2f       	mov	r20, r22
    3416:	4f 70       	andi	r20, 0x0F	; 15
    3418:	40 5d       	subi	r20, 0xD0	; 208
    341a:	4a 33       	cpi	r20, 0x3A	; 58
    341c:	18 f0       	brcs	.+6      	; 0x3424 <__ultoa_invert+0x7c>
    341e:	49 5d       	subi	r20, 0xD9	; 217
    3420:	31 fd       	sbrc	r19, 1
    3422:	40 52       	subi	r20, 0x20	; 32
    3424:	41 93       	st	Z+, r20
    3426:	02 d0       	rcall	.+4      	; 0x342c <__ultoa_invert+0x84>
    3428:	a9 f7       	brne	.-22     	; 0x3414 <__ultoa_invert+0x6c>
    342a:	ea cf       	rjmp	.-44     	; 0x3400 <__ultoa_invert+0x58>
    342c:	b4 e0       	ldi	r27, 0x04	; 4
    342e:	a6 95       	lsr	r26
    3430:	97 95       	ror	r25
    3432:	87 95       	ror	r24
    3434:	77 95       	ror	r23
    3436:	67 95       	ror	r22
    3438:	ba 95       	dec	r27
    343a:	c9 f7       	brne	.-14     	; 0x342e <__ultoa_invert+0x86>
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	61 05       	cpc	r22, r1
    3440:	71 05       	cpc	r23, r1
    3442:	08 95       	ret
    3444:	9b 01       	movw	r18, r22
    3446:	ac 01       	movw	r20, r24
    3448:	0a 2e       	mov	r0, r26
    344a:	06 94       	lsr	r0
    344c:	57 95       	ror	r21
    344e:	47 95       	ror	r20
    3450:	37 95       	ror	r19
    3452:	27 95       	ror	r18
    3454:	ba 95       	dec	r27
    3456:	c9 f7       	brne	.-14     	; 0x344a <__ultoa_invert+0xa2>
    3458:	62 0f       	add	r22, r18
    345a:	73 1f       	adc	r23, r19
    345c:	84 1f       	adc	r24, r20
    345e:	95 1f       	adc	r25, r21
    3460:	a0 1d       	adc	r26, r0
    3462:	08 95       	ret

00003464 <__divmodhi4>:
    3464:	97 fb       	bst	r25, 7
    3466:	09 2e       	mov	r0, r25
    3468:	07 26       	eor	r0, r23
    346a:	0a d0       	rcall	.+20     	; 0x3480 <__divmodhi4_neg1>
    346c:	77 fd       	sbrc	r23, 7
    346e:	04 d0       	rcall	.+8      	; 0x3478 <__divmodhi4_neg2>
    3470:	0c d0       	rcall	.+24     	; 0x348a <__udivmodhi4>
    3472:	06 d0       	rcall	.+12     	; 0x3480 <__divmodhi4_neg1>
    3474:	00 20       	and	r0, r0
    3476:	1a f4       	brpl	.+6      	; 0x347e <__divmodhi4_exit>

00003478 <__divmodhi4_neg2>:
    3478:	70 95       	com	r23
    347a:	61 95       	neg	r22
    347c:	7f 4f       	sbci	r23, 0xFF	; 255

0000347e <__divmodhi4_exit>:
    347e:	08 95       	ret

00003480 <__divmodhi4_neg1>:
    3480:	f6 f7       	brtc	.-4      	; 0x347e <__divmodhi4_exit>
    3482:	90 95       	com	r25
    3484:	81 95       	neg	r24
    3486:	9f 4f       	sbci	r25, 0xFF	; 255
    3488:	08 95       	ret

0000348a <__udivmodhi4>:
    348a:	aa 1b       	sub	r26, r26
    348c:	bb 1b       	sub	r27, r27
    348e:	51 e1       	ldi	r21, 0x11	; 17
    3490:	07 c0       	rjmp	.+14     	; 0x34a0 <__udivmodhi4_ep>

00003492 <__udivmodhi4_loop>:
    3492:	aa 1f       	adc	r26, r26
    3494:	bb 1f       	adc	r27, r27
    3496:	a6 17       	cp	r26, r22
    3498:	b7 07       	cpc	r27, r23
    349a:	10 f0       	brcs	.+4      	; 0x34a0 <__udivmodhi4_ep>
    349c:	a6 1b       	sub	r26, r22
    349e:	b7 0b       	sbc	r27, r23

000034a0 <__udivmodhi4_ep>:
    34a0:	88 1f       	adc	r24, r24
    34a2:	99 1f       	adc	r25, r25
    34a4:	5a 95       	dec	r21
    34a6:	a9 f7       	brne	.-22     	; 0x3492 <__udivmodhi4_loop>
    34a8:	80 95       	com	r24
    34aa:	90 95       	com	r25
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	08 95       	ret

000034b2 <__prologue_saves__>:
    34b2:	2f 92       	push	r2
    34b4:	3f 92       	push	r3
    34b6:	4f 92       	push	r4
    34b8:	5f 92       	push	r5
    34ba:	6f 92       	push	r6
    34bc:	7f 92       	push	r7
    34be:	8f 92       	push	r8
    34c0:	9f 92       	push	r9
    34c2:	af 92       	push	r10
    34c4:	bf 92       	push	r11
    34c6:	cf 92       	push	r12
    34c8:	df 92       	push	r13
    34ca:	ef 92       	push	r14
    34cc:	ff 92       	push	r15
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	cf 93       	push	r28
    34d4:	df 93       	push	r29
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	ca 1b       	sub	r28, r26
    34dc:	db 0b       	sbc	r29, r27
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	19 94       	eijmp

000034ea <__epilogue_restores__>:
    34ea:	2a 88       	ldd	r2, Y+18	; 0x12
    34ec:	39 88       	ldd	r3, Y+17	; 0x11
    34ee:	48 88       	ldd	r4, Y+16	; 0x10
    34f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    34f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    34f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    34f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    34f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    34fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    34fc:	b9 84       	ldd	r11, Y+9	; 0x09
    34fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3500:	df 80       	ldd	r13, Y+7	; 0x07
    3502:	ee 80       	ldd	r14, Y+6	; 0x06
    3504:	fd 80       	ldd	r15, Y+5	; 0x05
    3506:	0c 81       	ldd	r16, Y+4	; 0x04
    3508:	1b 81       	ldd	r17, Y+3	; 0x03
    350a:	aa 81       	ldd	r26, Y+2	; 0x02
    350c:	b9 81       	ldd	r27, Y+1	; 0x01
    350e:	ce 0f       	add	r28, r30
    3510:	d1 1d       	adc	r29, r1
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	cd bf       	out	0x3d, r28	; 61
    351c:	ed 01       	movw	r28, r26
    351e:	08 95       	ret
